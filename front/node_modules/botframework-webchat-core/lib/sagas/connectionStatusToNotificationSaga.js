"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _connect = require("../actions/connect");

var _createPromiseQueue2 = _interopRequireDefault(require("../createPromiseQueue"));

var _setNotification = _interopRequireDefault(require("../actions/setNotification"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(connectionStatusToNotification),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(_callee);

var CONNECTIVITY_STATUS_NOTIFICATION_ID = 'connectivitystatus';

function subscribeToPromiseQueue(observable) {
  var _createPromiseQueue = (0, _createPromiseQueue2["default"])(),
      push = _createPromiseQueue.push,
      shift = _createPromiseQueue.shift;

  var subscription = observable.subscribe({
    next: push
  });
  return {
    shift: shift,
    unsubscribe: function unsubscribe() {
      subscription.unsubscribe();
    }
  };
}

function connectionStatusToNotification(_ref) {
  var directLine, _subscribeToPromiseQu, shift, unsubscribe, reconnecting, value;

  return _regenerator["default"].wrap(function connectionStatusToNotification$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          directLine = _ref.payload.directLine;
          _subscribeToPromiseQu = subscribeToPromiseQueue(directLine.connectionStatus$), shift = _subscribeToPromiseQu.shift, unsubscribe = _subscribeToPromiseQu.unsubscribe;
          _context.prev = 2;

        case 3:
          _context.next = 5;
          return (0, _effects.call)(shift);

        case 5:
          value = _context.sent;
          _context.t0 = value;
          _context.next = _context.t0 === 0 ? 9 : _context.t0 === 1 ? 9 : _context.t0 === 2 ? 12 : _context.t0 === 3 ? 16 : _context.t0 === 4 ? 16 : 20;
          break;

        case 9:
          _context.next = 11;
          return (0, _effects.put)((0, _setNotification["default"])({
            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,
            level: 'info',
            message: reconnecting ? 'reconnecting' : 'connecting'
          }));

        case 11:
          return _context.abrupt("break", 21);

        case 12:
          reconnecting = 1;
          _context.next = 15;
          return (0, _effects.put)((0, _setNotification["default"])({
            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,
            level: 'success',
            message: 'connected'
          }));

        case 15:
          return _context.abrupt("break", 21);

        case 16:
          reconnecting = 1;
          _context.next = 19;
          return (0, _effects.put)((0, _setNotification["default"])({
            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,
            level: 'error',
            message: 'failedtoconnect'
          }));

        case 19:
          return _context.abrupt("break", 21);

        case 20:
          return _context.abrupt("break", 21);

        case 21:
          _context.next = 3;
          break;

        case 23:
          _context.prev = 23;
          unsubscribe();
          return _context.finish(23);

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[2,, 23, 26]]);
}

function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _effects.takeLatest)(_connect.CONNECT, connectionStatusToNotification);

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9jb25uZWN0aW9uU3RhdHVzVG9Ob3RpZmljYXRpb25TYWdhLmpzIl0sIm5hbWVzIjpbImNvbm5lY3Rpb25TdGF0dXNUb05vdGlmaWNhdGlvbiIsIkNPTk5FQ1RJVklUWV9TVEFUVVNfTk9USUZJQ0FUSU9OX0lEIiwic3Vic2NyaWJlVG9Qcm9taXNlUXVldWUiLCJvYnNlcnZhYmxlIiwicHVzaCIsInNoaWZ0Iiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlIiwibmV4dCIsInVuc3Vic2NyaWJlIiwiZGlyZWN0TGluZSIsInBheWxvYWQiLCJjb25uZWN0aW9uU3RhdHVzJCIsInZhbHVlIiwiaWQiLCJsZXZlbCIsIm1lc3NhZ2UiLCJyZWNvbm5lY3RpbmciLCJDT05ORUNUIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUVBOztBQUNBOztBQUNBOzt3REFnQlVBLDhCOzs7QUFkVixJQUFNQyxtQ0FBbUMsR0FBRyxvQkFBNUM7O0FBRUEsU0FBU0MsdUJBQVQsQ0FBaUNDLFVBQWpDLEVBQTZDO0FBQzNDLDRCQUF3QixzQ0FBeEI7QUFBQSxNQUFRQyxJQUFSLHVCQUFRQSxJQUFSO0FBQUEsTUFBY0MsS0FBZCx1QkFBY0EsS0FBZDs7QUFDQSxNQUFNQyxZQUFZLEdBQUdILFVBQVUsQ0FBQ0ksU0FBWCxDQUFxQjtBQUFFQyxJQUFBQSxJQUFJLEVBQUVKO0FBQVIsR0FBckIsQ0FBckI7QUFFQSxTQUFPO0FBQ0xDLElBQUFBLEtBQUssRUFBTEEsS0FESztBQUVMSSxJQUFBQSxXQUZLLHlCQUVTO0FBQ1pILE1BQUFBLFlBQVksQ0FBQ0csV0FBYjtBQUNEO0FBSkksR0FBUDtBQU1EOztBQUVELFNBQVVULDhCQUFWO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBc0RVLFVBQUFBLFVBQXRELFFBQTJDQyxPQUEzQyxDQUFzREQsVUFBdEQ7QUFBQSxrQ0FDaUNSLHVCQUF1QixDQUFDUSxVQUFVLENBQUNFLGlCQUFaLENBRHhELEVBQ1VQLEtBRFYseUJBQ1VBLEtBRFYsRUFDaUJJLFdBRGpCLHlCQUNpQkEsV0FEakI7QUFBQTs7QUFBQTtBQUFBO0FBT29CLGlCQUFNLG1CQUFLSixLQUFMLENBQU47O0FBUHBCO0FBT1lRLFVBQUFBLEtBUFo7QUFBQSx3QkFTY0EsS0FUZDtBQUFBLDBDQVVhLENBVmIsdUJBV2EsQ0FYYix1QkFzQmEsQ0F0QmIsd0JBbUNhLENBbkNiLHdCQW9DYSxDQXBDYjtBQUFBOztBQUFBO0FBQUE7QUFZVSxpQkFBTSxrQkFDSixpQ0FBZ0I7QUFDZEMsWUFBQUEsRUFBRSxFQUFFYixtQ0FEVTtBQUVkYyxZQUFBQSxLQUFLLEVBQUUsTUFGTztBQUdkQyxZQUFBQSxPQUFPLEVBQUVDLFlBQVksR0FBRyxjQUFILEdBQW9CO0FBSDNCLFdBQWhCLENBREksQ0FBTjs7QUFaVjtBQUFBOztBQUFBO0FBdUJVQSxVQUFBQSxZQUFZLEdBQUcsQ0FBZjtBQXZCVjtBQXlCVSxpQkFBTSxrQkFDSixpQ0FBZ0I7QUFDZEgsWUFBQUEsRUFBRSxFQUFFYixtQ0FEVTtBQUVkYyxZQUFBQSxLQUFLLEVBQUUsU0FGTztBQUdkQyxZQUFBQSxPQUFPLEVBQUU7QUFISyxXQUFoQixDQURJLENBQU47O0FBekJWO0FBQUE7O0FBQUE7QUFxQ1VDLFVBQUFBLFlBQVksR0FBRyxDQUFmO0FBckNWO0FBdUNVLGlCQUFNLGtCQUNKLGlDQUFnQjtBQUNkSCxZQUFBQSxFQUFFLEVBQUViLG1DQURVO0FBRWRjLFlBQUFBLEtBQUssRUFBRSxPQUZPO0FBR2RDLFlBQUFBLE9BQU8sRUFBRTtBQUhLLFdBQWhCLENBREksQ0FBTjs7QUF2Q1Y7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBc0RJUCxVQUFBQSxXQUFXO0FBdERmOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQTBEZTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDYixpQkFBTSx5QkFBV1MsZ0JBQVgsRUFBb0JsQiw4QkFBcEIsQ0FBTjs7QUFEYTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFswLCAxLCAyLCAzLCA0XSB9XSAqL1xuXG5pbXBvcnQgeyBjYWxsLCBwdXQsIHRha2VMYXRlc3QgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgeyBDT05ORUNUIH0gZnJvbSAnLi4vYWN0aW9ucy9jb25uZWN0JztcbmltcG9ydCBjcmVhdGVQcm9taXNlUXVldWUgZnJvbSAnLi4vY3JlYXRlUHJvbWlzZVF1ZXVlJztcbmltcG9ydCBzZXROb3RpZmljYXRpb24gZnJvbSAnLi4vYWN0aW9ucy9zZXROb3RpZmljYXRpb24nO1xuXG5jb25zdCBDT05ORUNUSVZJVFlfU1RBVFVTX05PVElGSUNBVElPTl9JRCA9ICdjb25uZWN0aXZpdHlzdGF0dXMnO1xuXG5mdW5jdGlvbiBzdWJzY3JpYmVUb1Byb21pc2VRdWV1ZShvYnNlcnZhYmxlKSB7XG4gIGNvbnN0IHsgcHVzaCwgc2hpZnQgfSA9IGNyZWF0ZVByb21pc2VRdWV1ZSgpO1xuICBjb25zdCBzdWJzY3JpcHRpb24gPSBvYnNlcnZhYmxlLnN1YnNjcmliZSh7IG5leHQ6IHB1c2ggfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzaGlmdCxcbiAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24qIGNvbm5lY3Rpb25TdGF0dXNUb05vdGlmaWNhdGlvbih7IHBheWxvYWQ6IHsgZGlyZWN0TGluZSB9IH0pIHtcbiAgY29uc3QgeyBzaGlmdCwgdW5zdWJzY3JpYmUgfSA9IHN1YnNjcmliZVRvUHJvbWlzZVF1ZXVlKGRpcmVjdExpbmUuY29ubmVjdGlvblN0YXR1cyQpO1xuXG4gIHRyeSB7XG4gICAgbGV0IHJlY29ubmVjdGluZztcblxuICAgIGZvciAoOzspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0geWllbGQgY2FsbChzaGlmdCk7XG5cbiAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgeWllbGQgcHV0KFxuICAgICAgICAgICAgc2V0Tm90aWZpY2F0aW9uKHtcbiAgICAgICAgICAgICAgaWQ6IENPTk5FQ1RJVklUWV9TVEFUVVNfTk9USUZJQ0FUSU9OX0lELFxuICAgICAgICAgICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgICAgICAgICBtZXNzYWdlOiByZWNvbm5lY3RpbmcgPyAncmVjb25uZWN0aW5nJyA6ICdjb25uZWN0aW5nJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHJlY29ubmVjdGluZyA9IDE7XG5cbiAgICAgICAgICB5aWVsZCBwdXQoXG4gICAgICAgICAgICBzZXROb3RpZmljYXRpb24oe1xuICAgICAgICAgICAgICBpZDogQ09OTkVDVElWSVRZX1NUQVRVU19OT1RJRklDQVRJT05fSUQsXG4gICAgICAgICAgICAgIGxldmVsOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdjb25uZWN0ZWQnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM6XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICByZWNvbm5lY3RpbmcgPSAxO1xuXG4gICAgICAgICAgeWllbGQgcHV0KFxuICAgICAgICAgICAgc2V0Tm90aWZpY2F0aW9uKHtcbiAgICAgICAgICAgICAgaWQ6IENPTk5FQ1RJVklUWV9TVEFUVVNfTk9USUZJQ0FUSU9OX0lELFxuICAgICAgICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ2ZhaWxlZHRvY29ubmVjdCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qICgpIHtcbiAgeWllbGQgdGFrZUxhdGVzdChDT05ORUNULCBjb25uZWN0aW9uU3RhdHVzVG9Ob3RpZmljYXRpb24pO1xufVxuIl19