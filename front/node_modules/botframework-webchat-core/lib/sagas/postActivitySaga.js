"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = postActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _effects = require("redux-saga/effects");

var _observeOnce = _interopRequireDefault(require("./effects/observeOnce"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _clockSkewAdjustment = _interopRequireDefault(require("../selectors/clockSkewAdjustment"));

var _combineSelectors = _interopRequireDefault(require("../selectors/combineSelectors"));

var _dateToLocaleISOString = _interopRequireDefault(require("../utils/dateToLocaleISOString"));

var _language = _interopRequireDefault(require("../selectors/language"));

var _sendTimeout = _interopRequireDefault(require("../selectors/sendTimeout"));

var _deleteKey = _interopRequireDefault(require("../utils/deleteKey"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _uniqueID = _interopRequireDefault(require("../utils/uniqueID"));

var _postActivity = require("../actions/postActivity");

var _incomingActivity = require("../actions/incomingActivity");

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(postActivity),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(postActivitySaga);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function getTimestamp(date) {
  var clockSkewAdjustment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // "+date" will return epoch time in milliseconds, same as Date.getTime().
  return new Date(+date + clockSkewAdjustment).toISOString();
}

function postActivity(directLine, userID, username, numActivitiesPosted, _ref) {
  var method, activity, _yield$select, clockSkewAdjustment, locale, _activity, attachments, clientActivityID, now, localTimeZone, meta, echoBackCall, sendTimeout, _yield$race, echoBack;

  return _regenerator["default"].wrap(function postActivity$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          method = _ref.meta.method, activity = _ref.payload.activity;
          _context2.next = 3;
          return (0, _effects.select)((0, _combineSelectors["default"])({
            clockSkewAdjustment: _clockSkewAdjustment["default"],
            locale: _language["default"]
          }));

        case 3:
          _yield$select = _context2.sent;
          clockSkewAdjustment = _yield$select.clockSkewAdjustment;
          locale = _yield$select.locale;
          _activity = activity, attachments = _activity.attachments;
          clientActivityID = (0, _uniqueID["default"])();
          now = new Date();
          localTimeZone = typeof window.Intl === 'undefined' ? undefined : new Intl.DateTimeFormat().resolvedOptions().timeZone;
          activity = _objectSpread(_objectSpread({}, (0, _deleteKey["default"])(activity, 'id')), {}, {
            attachments: attachments && attachments.map(function (_ref2) {
              var contentType = _ref2.contentType,
                  contentUrl = _ref2.contentUrl,
                  name = _ref2.name,
                  thumbnailUrl = _ref2.thumbnailUrl;
              return {
                contentType: contentType,
                contentUrl: contentUrl,
                name: name,
                thumbnailUrl: thumbnailUrl
              };
            }),
            channelData: _objectSpread(_objectSpread({}, (0, _deleteKey["default"])(activity.channelData, 'state')), {}, {
              clientActivityID: clientActivityID,
              // This is unskewed local timestamp for estimating clock skew.
              clientTimestamp: getTimestamp(now)
            }),
            channelId: 'webchat',
            from: {
              id: userID,
              name: username,
              role: 'user'
            },
            locale: locale,
            localTimestamp: (0, _dateToLocaleISOString["default"])(now),
            localTimezone: localTimeZone,
            // This timestamp will be replaced by Direct Line Channel in echoback.
            // We are temporarily adding this timestamp for sorting.
            timestamp: getTimestamp(now, clockSkewAdjustment)
          });

          if (!numActivitiesPosted) {
            activity.entities = [].concat((0, _toConsumableArray2["default"])(activity.entities || []), [{
              // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them
              //       We need to understand why we need to send these, and only send capabilities the client have
              requiresBotState: true,
              supportsListening: true,
              supportsTts: true,
              type: 'ClientCapabilities'
            }]);
          }

          meta = {
            clientActivityID: clientActivityID,
            method: method
          };
          _context2.next = 15;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_PENDING,
            meta: meta,
            payload: {
              activity: activity
            }
          });

        case 15:
          _context2.prev = 15;
          // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed
          //         So, we setup expectation first, then postActivity afterward
          echoBackCall = (0, _effects.call)( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
            var _yield$take, _activity2, _activity2$channelDat, channelData, id;

            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);

                  case 2:
                    _yield$take = _context.sent;
                    _activity2 = _yield$take.payload.activity;
                    _activity2$channelDat = _activity2.channelData, channelData = _activity2$channelDat === void 0 ? {} : _activity2$channelDat, id = _activity2.id;

                    if (!(channelData.clientActivityID === clientActivityID && id)) {
                      _context.next = 7;
                      break;
                    }

                    return _context.abrupt("return", _activity2);

                  case 7:
                    _context.next = 0;
                    break;

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })); // Timeout could be due to either:
          // - Post activity call may take too long time to complete
          //   - Direct Line service only respond on HTTP after bot respond to Direct Line
          // - Activity may take too long time to echo back

          _context2.next = 19;
          return (0, _effects.select)(_sendTimeout["default"]);

        case 19:
          sendTimeout = _context2.sent;
          _context2.next = 22;
          return (0, _effects.race)({
            send: (0, _effects.all)({
              echoBack: echoBackCall,
              postActivity: (0, _observeOnce["default"])(directLine.postActivity(activity))
            }),
            timeout: (0, _effects.call)(function () {
              return (0, _sleep["default"])(sendTimeout).then(function () {
                return Promise.reject(new Error('timeout'));
              });
            })
          });

        case 22:
          _yield$race = _context2.sent;
          echoBack = _yield$race.send.echoBack;
          _context2.next = 26;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_FULFILLED,
            meta: meta,
            payload: {
              activity: echoBack
            }
          });

        case 26:
          _context2.next = 33;
          break;

        case 28:
          _context2.prev = 28;
          _context2.t0 = _context2["catch"](15);
          console.error('botframework-webchat: Failed to post activity to chat adapter.', _context2.t0);
          _context2.next = 33;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: _context2.t0
          });

        case 33:
          _context2.prev = 33;
          _context2.next = 36;
          return (0, _effects.cancelled)();

        case 36:
          if (!_context2.sent) {
            _context2.next = 39;
            break;
          }

          _context2.next = 39;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: new Error('cancelled')
          });

        case 39:
          return _context2.finish(33);

        case 40:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked, null, [[15, 28, 33, 40]]);
}

function postActivitySaga() {
  return _regenerator["default"].wrap(function postActivitySaga$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return (0, _whileConnected["default"])( /*#__PURE__*/_regenerator["default"].mark(function postActivityWhileConnected(_ref3) {
            var directLine, userID, username, numActivitiesPosted;
            return _regenerator["default"].wrap(function postActivityWhileConnected$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    directLine = _ref3.directLine, userID = _ref3.userID, username = _ref3.username;
                    numActivitiesPosted = 0;
                    _context4.next = 4;
                    return (0, _effects.takeEvery)(_postActivity.POST_ACTIVITY, /*#__PURE__*/_regenerator["default"].mark(function postActivityWrapper(action) {
                      return _regenerator["default"].wrap(function postActivityWrapper$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              return _context3.delegateYield(postActivity(directLine, userID, username, numActivitiesPosted++, action), "t0", 1);

                            case 1:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, postActivityWrapper);
                    }));

                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, postActivityWhileConnected);
          }));

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,