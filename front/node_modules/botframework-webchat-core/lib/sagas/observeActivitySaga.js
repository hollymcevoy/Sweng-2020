"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = observeActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _observeEach = _interopRequireDefault(require("./effects/observeEach"));

var _queueIncomingActivity = _interopRequireDefault(require("../actions/queueIncomingActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivity),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivitySaga);

var PASSTHRU_FN = function PASSTHRU_FN(value) {
  return value;
};

function patchActivityWithFromRole(activity, userID) {
  // Some activities, such as "ConversationUpdate", does not have "from" defined.
  // And although "role" is defined in Direct Line spec, it was not sent over the wire.
  // We normalize the activity here to simplify null-check and logic later.
  // Patch activity.from.role to make sure its either "bot", "user", or "channel"
  if (!activity.from) {
    activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
      return 'channel';
    });
  } else if (!activity.from.role) {
    if (activity.from.id === userID) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'user';
      });
    } else if (activity.from.id) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'bot';
      });
    } else {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'channel';
      });
    }
  }

  return activity;
}

function patchNullAsUndefined(activity) {
  // These fields are known used in Web Chat and in any cases, they should not be null, but undefined.
  // The only field omitted is "value", as it could be null purposefully.
  return ['attachmentLayout', 'attachments', 'channelData', 'conversation', 'entities', 'from', 'inputHint', 'locale', 'name', 'recipient', 'speak', 'suggestedActions', 'text', 'textFormat', 'timestamp', 'type'].reduce(function (activity, name) {
    var value = activity[name];
    return (0, _simpleUpdateIn["default"])(activity, [name], typeof value === 'undefined' || value === null ? undefined : PASSTHRU_FN);
  }, activity);
}

function observeActivity(_ref) {
  var directLine, userID;
  return _regenerator["default"].wrap(function observeActivity$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          directLine = _ref.directLine, userID = _ref.userID;
          _context2.next = 3;
          return (0, _observeEach["default"])(directLine.activity$, /*#__PURE__*/_regenerator["default"].mark(function observeActivity(activity) {
            return _regenerator["default"].wrap(function observeActivity$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    activity = patchNullAsUndefined(activity);
                    activity = patchActivityWithFromRole(activity, userID);
                    _context.next = 4;
                    return (0, _effects.put)((0, _queueIncomingActivity["default"])(activity));

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, observeActivity);
          }));

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function observeActivitySaga() {
  return _regenerator["default"].wrap(function observeActivitySaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(observeActivity);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9vYnNlcnZlQWN0aXZpdHlTYWdhLmpzIl0sIm5hbWVzIjpbIm9ic2VydmVBY3Rpdml0eSIsIm9ic2VydmVBY3Rpdml0eVNhZ2EiLCJQQVNTVEhSVV9GTiIsInZhbHVlIiwicGF0Y2hBY3Rpdml0eVdpdGhGcm9tUm9sZSIsImFjdGl2aXR5IiwidXNlcklEIiwiZnJvbSIsInJvbGUiLCJpZCIsInBhdGNoTnVsbEFzVW5kZWZpbmVkIiwicmVkdWNlIiwibmFtZSIsInVuZGVmaW5lZCIsImRpcmVjdExpbmUiLCJhY3Rpdml0eSQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7cURBcURVQSxlO3NEQVNlQyxtQjs7QUE1RHpCLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUFDLEtBQUs7QUFBQSxTQUFJQSxLQUFKO0FBQUEsQ0FBekI7O0FBRUEsU0FBU0MseUJBQVQsQ0FBbUNDLFFBQW5DLEVBQTZDQyxNQUE3QyxFQUFxRDtBQUNuRDtBQUNBO0FBQ0E7QUFFQTtBQUNBLE1BQUksQ0FBQ0QsUUFBUSxDQUFDRSxJQUFkLEVBQW9CO0FBQ2xCRixJQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGFBQU0sU0FBTjtBQUFBLEtBQXJDLENBQVg7QUFDRCxHQUZELE1BRU8sSUFBSSxDQUFDQSxRQUFRLENBQUNFLElBQVQsQ0FBY0MsSUFBbkIsRUFBeUI7QUFDOUIsUUFBSUgsUUFBUSxDQUFDRSxJQUFULENBQWNFLEVBQWQsS0FBcUJILE1BQXpCLEVBQWlDO0FBQy9CRCxNQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGVBQU0sTUFBTjtBQUFBLE9BQXJDLENBQVg7QUFDRCxLQUZELE1BRU8sSUFBSUEsUUFBUSxDQUFDRSxJQUFULENBQWNFLEVBQWxCLEVBQXNCO0FBQzNCSixNQUFBQSxRQUFRLEdBQUcsZ0NBQVNBLFFBQVQsRUFBbUIsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFuQixFQUFxQztBQUFBLGVBQU0sS0FBTjtBQUFBLE9BQXJDLENBQVg7QUFDRCxLQUZNLE1BRUE7QUFDTEEsTUFBQUEsUUFBUSxHQUFHLGdDQUFTQSxRQUFULEVBQW1CLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBbkIsRUFBcUM7QUFBQSxlQUFNLFNBQU47QUFBQSxPQUFyQyxDQUFYO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQSxRQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssb0JBQVQsQ0FBOEJMLFFBQTlCLEVBQXdDO0FBQ3RDO0FBQ0E7QUFFQSxTQUFPLENBQ0wsa0JBREssRUFFTCxhQUZLLEVBR0wsYUFISyxFQUlMLGNBSkssRUFLTCxVQUxLLEVBTUwsTUFOSyxFQU9MLFdBUEssRUFRTCxRQVJLLEVBU0wsTUFUSyxFQVVMLFdBVkssRUFXTCxPQVhLLEVBWUwsa0JBWkssRUFhTCxNQWJLLEVBY0wsWUFkSyxFQWVMLFdBZkssRUFnQkwsTUFoQkssRUFpQkxNLE1BakJLLENBaUJFLFVBQUNOLFFBQUQsRUFBV08sSUFBWCxFQUFvQjtBQUMzQixRQUFnQlQsS0FBaEIsR0FBMEJFLFFBQTFCLENBQVNPLElBQVQ7QUFFQSxXQUFPLGdDQUFTUCxRQUFULEVBQW1CLENBQUNPLElBQUQsQ0FBbkIsRUFBMkIsT0FBT1QsS0FBUCxLQUFpQixXQUFqQixJQUFnQ0EsS0FBSyxLQUFLLElBQTFDLEdBQWlEVSxTQUFqRCxHQUE2RFgsV0FBeEYsQ0FBUDtBQUNELEdBckJNLEVBcUJKRyxRQXJCSSxDQUFQO0FBc0JEOztBQUVELFNBQVVMLGVBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQTRCYyxVQUFBQSxVQUE1QixRQUE0QkEsVUFBNUIsRUFBd0NSLE1BQXhDLFFBQXdDQSxNQUF4QztBQUFBO0FBQ0UsaUJBQU0sNkJBQVlRLFVBQVUsQ0FBQ0MsU0FBdkIsNENBQWtDLFNBQVVmLGVBQVYsQ0FBMEJLLFFBQTFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDdENBLG9CQUFBQSxRQUFRLEdBQUdLLG9CQUFvQixDQUFDTCxRQUFELENBQS9CO0FBQ0FBLG9CQUFBQSxRQUFRLEdBQUdELHlCQUF5QixDQUFDQyxRQUFELEVBQVdDLE1BQVgsQ0FBcEM7QUFGc0M7QUFJdEMsMkJBQU0sa0JBQUksdUNBQXNCRCxRQUF0QixDQUFKLENBQU47O0FBSnNDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUFVTCxlQUFWO0FBQUEsV0FBbEMsRUFBTjs7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFTZSxTQUFVQyxtQkFBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDYixpQkFBTSxnQ0FBZUQsZUFBZixDQUFOOztBQURhO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHV0IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcbmltcG9ydCB1cGRhdGVJbiBmcm9tICdzaW1wbGUtdXBkYXRlLWluJztcblxuaW1wb3J0IG9ic2VydmVFYWNoIGZyb20gJy4vZWZmZWN0cy9vYnNlcnZlRWFjaCc7XG5pbXBvcnQgcXVldWVJbmNvbWluZ0FjdGl2aXR5IGZyb20gJy4uL2FjdGlvbnMvcXVldWVJbmNvbWluZ0FjdGl2aXR5JztcbmltcG9ydCB3aGlsZUNvbm5lY3RlZCBmcm9tICcuL2VmZmVjdHMvd2hpbGVDb25uZWN0ZWQnO1xuXG5jb25zdCBQQVNTVEhSVV9GTiA9IHZhbHVlID0+IHZhbHVlO1xuXG5mdW5jdGlvbiBwYXRjaEFjdGl2aXR5V2l0aEZyb21Sb2xlKGFjdGl2aXR5LCB1c2VySUQpIHtcbiAgLy8gU29tZSBhY3Rpdml0aWVzLCBzdWNoIGFzIFwiQ29udmVyc2F0aW9uVXBkYXRlXCIsIGRvZXMgbm90IGhhdmUgXCJmcm9tXCIgZGVmaW5lZC5cbiAgLy8gQW5kIGFsdGhvdWdoIFwicm9sZVwiIGlzIGRlZmluZWQgaW4gRGlyZWN0IExpbmUgc3BlYywgaXQgd2FzIG5vdCBzZW50IG92ZXIgdGhlIHdpcmUuXG4gIC8vIFdlIG5vcm1hbGl6ZSB0aGUgYWN0aXZpdHkgaGVyZSB0byBzaW1wbGlmeSBudWxsLWNoZWNrIGFuZCBsb2dpYyBsYXRlci5cblxuICAvLyBQYXRjaCBhY3Rpdml0eS5mcm9tLnJvbGUgdG8gbWFrZSBzdXJlIGl0cyBlaXRoZXIgXCJib3RcIiwgXCJ1c2VyXCIsIG9yIFwiY2hhbm5lbFwiXG4gIGlmICghYWN0aXZpdHkuZnJvbSkge1xuICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnZnJvbScsICdyb2xlJ10sICgpID0+ICdjaGFubmVsJyk7XG4gIH0gZWxzZSBpZiAoIWFjdGl2aXR5LmZyb20ucm9sZSkge1xuICAgIGlmIChhY3Rpdml0eS5mcm9tLmlkID09PSB1c2VySUQpIHtcbiAgICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnZnJvbScsICdyb2xlJ10sICgpID0+ICd1c2VyJyk7XG4gICAgfSBlbHNlIGlmIChhY3Rpdml0eS5mcm9tLmlkKSB7XG4gICAgICBhY3Rpdml0eSA9IHVwZGF0ZUluKGFjdGl2aXR5LCBbJ2Zyb20nLCAncm9sZSddLCAoKSA9PiAnYm90Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnZnJvbScsICdyb2xlJ10sICgpID0+ICdjaGFubmVsJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFjdGl2aXR5O1xufVxuXG5mdW5jdGlvbiBwYXRjaE51bGxBc1VuZGVmaW5lZChhY3Rpdml0eSkge1xuICAvLyBUaGVzZSBmaWVsZHMgYXJlIGtub3duIHVzZWQgaW4gV2ViIENoYXQgYW5kIGluIGFueSBjYXNlcywgdGhleSBzaG91bGQgbm90IGJlIG51bGwsIGJ1dCB1bmRlZmluZWQuXG4gIC8vIFRoZSBvbmx5IGZpZWxkIG9taXR0ZWQgaXMgXCJ2YWx1ZVwiLCBhcyBpdCBjb3VsZCBiZSBudWxsIHB1cnBvc2VmdWxseS5cblxuICByZXR1cm4gW1xuICAgICdhdHRhY2htZW50TGF5b3V0JyxcbiAgICAnYXR0YWNobWVudHMnLFxuICAgICdjaGFubmVsRGF0YScsXG4gICAgJ2NvbnZlcnNhdGlvbicsXG4gICAgJ2VudGl0aWVzJyxcbiAgICAnZnJvbScsXG4gICAgJ2lucHV0SGludCcsXG4gICAgJ2xvY2FsZScsXG4gICAgJ25hbWUnLFxuICAgICdyZWNpcGllbnQnLFxuICAgICdzcGVhaycsXG4gICAgJ3N1Z2dlc3RlZEFjdGlvbnMnLFxuICAgICd0ZXh0JyxcbiAgICAndGV4dEZvcm1hdCcsXG4gICAgJ3RpbWVzdGFtcCcsXG4gICAgJ3R5cGUnXG4gIF0ucmVkdWNlKChhY3Rpdml0eSwgbmFtZSkgPT4ge1xuICAgIGNvbnN0IHsgW25hbWVdOiB2YWx1ZSB9ID0gYWN0aXZpdHk7XG5cbiAgICByZXR1cm4gdXBkYXRlSW4oYWN0aXZpdHksIFtuYW1lXSwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IFBBU1NUSFJVX0ZOKTtcbiAgfSwgYWN0aXZpdHkpO1xufVxuXG5mdW5jdGlvbiogb2JzZXJ2ZUFjdGl2aXR5KHsgZGlyZWN0TGluZSwgdXNlcklEIH0pIHtcbiAgeWllbGQgb2JzZXJ2ZUVhY2goZGlyZWN0TGluZS5hY3Rpdml0eSQsIGZ1bmN0aW9uKiBvYnNlcnZlQWN0aXZpdHkoYWN0aXZpdHkpIHtcbiAgICBhY3Rpdml0eSA9IHBhdGNoTnVsbEFzVW5kZWZpbmVkKGFjdGl2aXR5KTtcbiAgICBhY3Rpdml0eSA9IHBhdGNoQWN0aXZpdHlXaXRoRnJvbVJvbGUoYWN0aXZpdHksIHVzZXJJRCk7XG5cbiAgICB5aWVsZCBwdXQocXVldWVJbmNvbWluZ0FjdGl2aXR5KGFjdGl2aXR5KSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogb2JzZXJ2ZUFjdGl2aXR5U2FnYSgpIHtcbiAgeWllbGQgd2hpbGVDb25uZWN0ZWQob2JzZXJ2ZUFjdGl2aXR5KTtcbn1cbiJdfQ==