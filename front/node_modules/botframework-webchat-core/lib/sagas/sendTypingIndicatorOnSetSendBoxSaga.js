"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = sendTypingIndicatorOnSetSendBoxSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _setSendBox = require("../actions/setSendBox");

var _setSendTypingIndicator = require("../actions/setSendTypingIndicator");

var _postActivity = require("../actions/postActivity");

var _emitTypingIndicator = _interopRequireDefault(require("../actions/emitTypingIndicator"));

var _sendTypingIndicator = _interopRequireDefault(require("../selectors/sendTypingIndicator"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regeneratorRuntime2.mark(sendTypingIndicatorOnSetSendBox),
    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(sendTypingIndicatorOnSetSendBoxSaga);

var SEND_INTERVAL = 3000;

function takeSendTypingIndicator(value) {
  return (0, _effects.take)(function (_ref) {
    var payload = _ref.payload,
        type = _ref.type;
    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value;
  });
}

function sendTypingIndicatorOnSetSendBox() {
  var sendTypingIndicator, _loop;

  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBox$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.select)(_sendTypingIndicator["default"]);

        case 2:
          sendTypingIndicator = _context3.sent;

          if (sendTypingIndicator) {
            _context3.next = 6;
            break;
          }

          _context3.next = 6;
          return takeSendTypingIndicator(true);

        case 6:
          _loop = /*#__PURE__*/_regenerator["default"].mark(function _loop() {
            var lastSend, task;
            return _regenerator["default"].wrap(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    lastSend = -Infinity;
                    _context2.next = 3;
                    return (0, _effects.takeLatest)(function (_ref2) {
                      var payload = _ref2.payload,
                          type = _ref2.type;
                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.
                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).
                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.
                      // This code is to cancel the typing indicator at t = 3000.
                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';
                    }, /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref3) {
                      var payload, type, interval;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              payload = _ref3.payload, type = _ref3.type;

                              if (!(type === _setSendBox.SET_SEND_BOX)) {
                                _context.next = 11;
                                break;
                              }

                              interval = SEND_INTERVAL - Date.now() + lastSend;

                              if (!(interval > 0)) {
                                _context.next = 6;
                                break;
                              }

                              _context.next = 6;
                              return (0, _effects.call)(_sleep["default"], interval);

                            case 6:
                              _context.next = 8;
                              return (0, _effects.put)((0, _emitTypingIndicator["default"])());

                            case 8:
                              lastSend = Date.now();
                              _context.next = 12;
                              break;

                            case 11:
                              if (payload.activity.type === 'message') {
                                lastSend = -Infinity;
                              }

                            case 12:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                  case 3:
                    task = _context2.sent;
                    _context2.next = 6;
                    return takeSendTypingIndicator(false);

                  case 6:
                    _context2.next = 8;
                    return (0, _effects.cancel)(task);

                  case 8:
                    _context2.next = 10;
                    return takeSendTypingIndicator(true);

                  case 10:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _loop);
          });

        case 7:
          return _context3.delegateYield(_loop(), "t0", 8);

        case 8:
          _context3.next = 7;
          break;

        case 10:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked);
}

function sendTypingIndicatorOnSetSendBoxSaga() {
  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBoxSaga$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return (0, _whileConnected["default"])(sendTypingIndicatorOnSetSendBox);

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94U2FnYS5qcyJdLCJuYW1lcyI6WyJzZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94Iiwic2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EiLCJTRU5EX0lOVEVSVkFMIiwidGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IiLCJ2YWx1ZSIsInBheWxvYWQiLCJ0eXBlIiwiU0VUX1NFTkRfVFlQSU5HX0lORElDQVRPUiIsInNlbmRUeXBpbmdJbmRpY2F0b3IiLCJzZW5kVHlwaW5nSW5kaWNhdG9yU2VsZWN0b3IiLCJsYXN0U2VuZCIsIkluZmluaXR5IiwiU0VUX1NFTkRfQk9YIiwidGV4dCIsIlBPU1RfQUNUSVZJVFkiLCJhY3Rpdml0eSIsImludGVydmFsIiwiRGF0ZSIsIm5vdyIsInNsZWVwIiwidGFzayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUdBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztxREFRVUEsK0I7c0RBd0NlQyxtQzs7QUE5Q3pCLElBQU1DLGFBQWEsR0FBRyxJQUF0Qjs7QUFFQSxTQUFTQyx1QkFBVCxDQUFpQ0MsS0FBakMsRUFBd0M7QUFDdEMsU0FBTyxtQkFBSztBQUFBLFFBQUdDLE9BQUgsUUFBR0EsT0FBSDtBQUFBLFFBQVlDLElBQVosUUFBWUEsSUFBWjtBQUFBLFdBQXVCQSxJQUFJLEtBQUtDLGlEQUFULElBQXNDLENBQUNGLE9BQU8sQ0FBQ0csbUJBQVQsS0FBaUMsQ0FBQ0osS0FBL0Y7QUFBQSxHQUFMLENBQVA7QUFDRDs7QUFFRCxTQUFVSiwrQkFBVjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDOEIsaUJBQU0scUJBQU9TLCtCQUFQLENBQU47O0FBRDlCO0FBQ1FELFVBQUFBLG1CQURSOztBQUFBLGNBR09BLG1CQUhQO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBSUksaUJBQU1MLHVCQUF1QixDQUFDLElBQUQsQ0FBN0I7O0FBSko7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFRUU8sb0JBQUFBLFFBUlIsR0FRbUIsQ0FBQ0MsUUFScEI7QUFBQTtBQVNpQiwyQkFBTSx5QkFDakI7QUFBQSwwQkFBR04sT0FBSCxTQUFHQSxPQUFIO0FBQUEsMEJBQVlDLElBQVosU0FBWUEsSUFBWjtBQUFBLDZCQUNHQSxJQUFJLEtBQUtNLHdCQUFULElBQXlCUCxPQUFPLENBQUNRLElBQWxDLElBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQ1Asc0JBQUFBLElBQUksS0FBS1EsMkJBQVQsSUFBMEJULE9BQU8sQ0FBQ1UsUUFBUixDQUFpQlQsSUFBakIsS0FBMEIsUUFOdkQ7QUFBQSxxQkFEaUIsNENBUWpCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFhRCw4QkFBQUEsT0FBYixTQUFhQSxPQUFiLEVBQXNCQyxJQUF0QixTQUFzQkEsSUFBdEI7O0FBQUEsb0NBQ01BLElBQUksS0FBS00sd0JBRGY7QUFBQTtBQUFBO0FBQUE7O0FBRVVJLDhCQUFBQSxRQUZWLEdBRXFCZCxhQUFhLEdBQUdlLElBQUksQ0FBQ0MsR0FBTCxFQUFoQixHQUE2QlIsUUFGbEQ7O0FBQUEsb0NBSVFNLFFBQVEsR0FBRyxDQUpuQjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUtNLHFDQUFNLG1CQUFLRyxpQkFBTCxFQUFZSCxRQUFaLENBQU47O0FBTE47QUFBQTtBQVFJLHFDQUFNLGtCQUFJLHNDQUFKLENBQU47O0FBUko7QUFVSU4sOEJBQUFBLFFBQVEsR0FBR08sSUFBSSxDQUFDQyxHQUFMLEVBQVg7QUFWSjtBQUFBOztBQUFBO0FBV1Msa0NBQUliLE9BQU8sQ0FBQ1UsUUFBUixDQUFpQlQsSUFBakIsS0FBMEIsU0FBOUIsRUFBeUM7QUFDOUNJLGdDQUFBQSxRQUFRLEdBQUcsQ0FBQ0MsUUFBWjtBQUNEOztBQWJIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHFCQVJpQixFQUFOOztBQVRqQjtBQVNVUyxvQkFBQUEsSUFUVjtBQUFBO0FBa0NJLDJCQUFNakIsdUJBQXVCLENBQUMsS0FBRCxDQUE3Qjs7QUFsQ0o7QUFBQTtBQW1DSSwyQkFBTSxxQkFBT2lCLElBQVAsQ0FBTjs7QUFuQ0o7QUFBQTtBQW9DSSwyQkFBTWpCLHVCQUF1QixDQUFDLElBQUQsQ0FBN0I7O0FBcENKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQXdDZSxTQUFVRixtQ0FBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDYixpQkFBTSxnQ0FBZUQsK0JBQWYsQ0FBTjs7QUFEYTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIHdpbGwgcmV2aXNpdCB0aGlzIGxvZ2ljIGluICMyMTU3IGFuZCBzaG91bGQgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgZXNsaW50IGlnbm9yZVxuLyogZXNsaW50IHJlcXVpcmUtYXRvbWljLXVwZGF0ZXM6IFwib2ZmXCIgKi9cblxuaW1wb3J0IHsgY2FsbCwgY2FuY2VsLCBwdXQsIHNlbGVjdCwgdGFrZSwgdGFrZUxhdGVzdCB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCB7IFNFVF9TRU5EX0JPWCB9IGZyb20gJy4uL2FjdGlvbnMvc2V0U2VuZEJveCc7XG5pbXBvcnQgeyBTRVRfU0VORF9UWVBJTkdfSU5ESUNBVE9SIH0gZnJvbSAnLi4vYWN0aW9ucy9zZXRTZW5kVHlwaW5nSW5kaWNhdG9yJztcbmltcG9ydCB7IFBPU1RfQUNUSVZJVFkgfSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5pbXBvcnQgZW1pdFR5cGluZ0luZGljYXRvciBmcm9tICcuLi9hY3Rpb25zL2VtaXRUeXBpbmdJbmRpY2F0b3InO1xuaW1wb3J0IHNlbmRUeXBpbmdJbmRpY2F0b3JTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvc2VuZFR5cGluZ0luZGljYXRvcic7XG5pbXBvcnQgc2xlZXAgZnJvbSAnLi4vdXRpbHMvc2xlZXAnO1xuaW1wb3J0IHdoaWxlQ29ubmVjdGVkIGZyb20gJy4vZWZmZWN0cy93aGlsZUNvbm5lY3RlZCc7XG5cbmNvbnN0IFNFTkRfSU5URVJWQUwgPSAzMDAwO1xuXG5mdW5jdGlvbiB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih2YWx1ZSkge1xuICByZXR1cm4gdGFrZSgoeyBwYXlsb2FkLCB0eXBlIH0pID0+IHR5cGUgPT09IFNFVF9TRU5EX1RZUElOR19JTkRJQ0FUT1IgJiYgIXBheWxvYWQuc2VuZFR5cGluZ0luZGljYXRvciA9PT0gIXZhbHVlKTtcbn1cblxuZnVuY3Rpb24qIHNlbmRUeXBpbmdJbmRpY2F0b3JPblNldFNlbmRCb3goKSB7XG4gIGNvbnN0IHNlbmRUeXBpbmdJbmRpY2F0b3IgPSB5aWVsZCBzZWxlY3Qoc2VuZFR5cGluZ0luZGljYXRvclNlbGVjdG9yKTtcblxuICBpZiAoIXNlbmRUeXBpbmdJbmRpY2F0b3IpIHtcbiAgICB5aWVsZCB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih0cnVlKTtcbiAgfVxuXG4gIGZvciAoOzspIHtcbiAgICBsZXQgbGFzdFNlbmQgPSAtSW5maW5pdHk7XG4gICAgY29uc3QgdGFzayA9IHlpZWxkIHRha2VMYXRlc3QoXG4gICAgICAoeyBwYXlsb2FkLCB0eXBlIH0pID0+XG4gICAgICAgICh0eXBlID09PSBTRVRfU0VORF9CT1ggJiYgcGF5bG9hZC50ZXh0KSB8fFxuICAgICAgICAvLyBTdG9wIHNlbmRpbmcgcGVuZGluZyB0eXBpbmcgaW5kaWNhdG9yIGlmIHRoZSB1c2VyIGhhcyBwb3N0ZWQgYW55dGhpbmcuXG4gICAgICAgIC8vIFdlIHNlbmQgdHlwaW5nIGluZGljYXRvciBpbiBhIGRlYm91bmNlIHdheSAodCA9IDAsIHQgPSAzMDAwLCB0ID0gNjAwMCkuXG4gICAgICAgIC8vIFdoZW4gdGhlIHVzZXIgdHlwZSwgYW5kIHRoZW4gcG9zdCB0aGUgYWN0aXZpdHkgYXQgdCA9IDE1MDAsIHdlIHN0aWxsIGhhdmUgYSBwZW5kaW5nIHR5cGluZyBpbmRpY2F0b3IgYXQgdCA9IDMwMDAuXG4gICAgICAgIC8vIFRoaXMgY29kZSBpcyB0byBjYW5jZWwgdGhlIHR5cGluZyBpbmRpY2F0b3IgYXQgdCA9IDMwMDAuXG4gICAgICAgICh0eXBlID09PSBQT1NUX0FDVElWSVRZICYmIHBheWxvYWQuYWN0aXZpdHkudHlwZSAhPT0gJ3R5cGluZycpLFxuICAgICAgZnVuY3Rpb24qICh7IHBheWxvYWQsIHR5cGUgfSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gU0VUX1NFTkRfQk9YKSB7XG4gICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBTRU5EX0lOVEVSVkFMIC0gRGF0ZS5ub3coKSArIGxhc3RTZW5kO1xuXG4gICAgICAgICAgaWYgKGludGVydmFsID4gMCkge1xuICAgICAgICAgICAgeWllbGQgY2FsbChzbGVlcCwgaW50ZXJ2YWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHlpZWxkIHB1dChlbWl0VHlwaW5nSW5kaWNhdG9yKCkpO1xuXG4gICAgICAgICAgbGFzdFNlbmQgPSBEYXRlLm5vdygpO1xuICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQuYWN0aXZpdHkudHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgbGFzdFNlbmQgPSAtSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgeWllbGQgdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IoZmFsc2UpO1xuICAgIHlpZWxkIGNhbmNlbCh0YXNrKTtcbiAgICB5aWVsZCB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih0cnVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogc2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EoKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKHNlbmRUeXBpbmdJbmRpY2F0b3JPblNldFNlbmRCb3gpO1xufVxuIl19