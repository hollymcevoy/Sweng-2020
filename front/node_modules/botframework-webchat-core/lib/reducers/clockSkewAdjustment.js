"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = clockSkewAdjustment;

var _incomingActivity = require("../actions/incomingActivity");

var _setClockSkewAdjustment = require("../actions/setClockSkewAdjustment");

function clockSkewAdjustment() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  var _ref = arguments.length > 1 ? arguments[1] : undefined,
      payload = _ref.payload,
      type = _ref.type;

  if (type === _incomingActivity.INCOMING_ACTIVITY) {
    var _payload$activity = payload.activity,
        _payload$activity$cha = _payload$activity.channelData;
    _payload$activity$cha = _payload$activity$cha === void 0 ? {} : _payload$activity$cha;
    var clientTimestamp = _payload$activity$cha.clientTimestamp,
        timestamp = _payload$activity.timestamp;
    var clientSendTime = Date.parse(clientTimestamp);
    var serverTime = Date.parse(timestamp);

    if (!isNaN(clientSendTime) && !isNaN(serverTime)) {
      // The adjustment include the latency between the client and the server.
      // This means, the adjustment is always larger than the actual value.
      // And it means, after adjustment, client time will be ahead of server time.
      // And it also means, the user-originated message has higher probability to appear below bot-originated message.
      // Although it has higher probability, if the user-originated message is still sending (i.e. did not echoback with server timestamp yet),
      // the insertion-sort logic will put the bot-originated below the user-originated message.
      state = serverTime - clientSendTime;
    }
  } else if (type === _setClockSkewAdjustment.SET_CLOCK_SKEW_ADJUSTMENT) {
    // Currently, this action is for testing purpose only.
    state = payload.value;
  }

  return state;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9jbG9ja1NrZXdBZGp1c3RtZW50LmpzIl0sIm5hbWVzIjpbImNsb2NrU2tld0FkanVzdG1lbnQiLCJzdGF0ZSIsInBheWxvYWQiLCJ0eXBlIiwiSU5DT01JTkdfQUNUSVZJVFkiLCJhY3Rpdml0eSIsImNoYW5uZWxEYXRhIiwiY2xpZW50VGltZXN0YW1wIiwidGltZXN0YW1wIiwiY2xpZW50U2VuZFRpbWUiLCJEYXRlIiwicGFyc2UiLCJzZXJ2ZXJUaW1lIiwiaXNOYU4iLCJTRVRfQ0xPQ0tfU0tFV19BREpVU1RNRU5UIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFZSxTQUFTQSxtQkFBVCxHQUEyRDtBQUFBLE1BQTlCQyxLQUE4Qix1RUFBdEIsQ0FBc0I7O0FBQUE7QUFBQSxNQUFqQkMsT0FBaUIsUUFBakJBLE9BQWlCO0FBQUEsTUFBUkMsSUFBUSxRQUFSQSxJQUFROztBQUN4RSxNQUFJQSxJQUFJLEtBQUtDLG1DQUFiLEVBQWdDO0FBQzlCLDRCQUVJRixPQUZKLENBQ0VHLFFBREY7QUFBQSxrREFDY0MsV0FEZDtBQUFBLCtEQUNpRCxFQURqRDtBQUFBLFFBQzZCQyxlQUQ3Qix5QkFDNkJBLGVBRDdCO0FBQUEsUUFDcURDLFNBRHJELHFCQUNxREEsU0FEckQ7QUFJQSxRQUFNQyxjQUFjLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixlQUFYLENBQXZCO0FBQ0EsUUFBTUssVUFBVSxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBWCxDQUFuQjs7QUFFQSxRQUFJLENBQUNLLEtBQUssQ0FBQ0osY0FBRCxDQUFOLElBQTBCLENBQUNJLEtBQUssQ0FBQ0QsVUFBRCxDQUFwQyxFQUFrRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQVgsTUFBQUEsS0FBSyxHQUFHVyxVQUFVLEdBQUdILGNBQXJCO0FBQ0Q7QUFDRixHQWxCRCxNQWtCTyxJQUFJTixJQUFJLEtBQUtXLGlEQUFiLEVBQXdDO0FBQzdDO0FBQ0FiLElBQUFBLEtBQUssR0FBR0MsT0FBTyxDQUFDYSxLQUFoQjtBQUNEOztBQUVELFNBQU9kLEtBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElOQ09NSU5HX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmNvbWluZ0FjdGl2aXR5JztcbmltcG9ydCB7IFNFVF9DTE9DS19TS0VXX0FESlVTVE1FTlQgfSBmcm9tICcuLi9hY3Rpb25zL3NldENsb2NrU2tld0FkanVzdG1lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9ja1NrZXdBZGp1c3RtZW50KHN0YXRlID0gMCwgeyBwYXlsb2FkLCB0eXBlIH0pIHtcbiAgaWYgKHR5cGUgPT09IElOQ09NSU5HX0FDVElWSVRZKSB7XG4gICAgY29uc3Qge1xuICAgICAgYWN0aXZpdHk6IHsgY2hhbm5lbERhdGE6IHsgY2xpZW50VGltZXN0YW1wIH0gPSB7fSwgdGltZXN0YW1wIH1cbiAgICB9ID0gcGF5bG9hZDtcblxuICAgIGNvbnN0IGNsaWVudFNlbmRUaW1lID0gRGF0ZS5wYXJzZShjbGllbnRUaW1lc3RhbXApO1xuICAgIGNvbnN0IHNlcnZlclRpbWUgPSBEYXRlLnBhcnNlKHRpbWVzdGFtcCk7XG5cbiAgICBpZiAoIWlzTmFOKGNsaWVudFNlbmRUaW1lKSAmJiAhaXNOYU4oc2VydmVyVGltZSkpIHtcbiAgICAgIC8vIFRoZSBhZGp1c3RtZW50IGluY2x1ZGUgdGhlIGxhdGVuY3kgYmV0d2VlbiB0aGUgY2xpZW50IGFuZCB0aGUgc2VydmVyLlxuICAgICAgLy8gVGhpcyBtZWFucywgdGhlIGFkanVzdG1lbnQgaXMgYWx3YXlzIGxhcmdlciB0aGFuIHRoZSBhY3R1YWwgdmFsdWUuXG4gICAgICAvLyBBbmQgaXQgbWVhbnMsIGFmdGVyIGFkanVzdG1lbnQsIGNsaWVudCB0aW1lIHdpbGwgYmUgYWhlYWQgb2Ygc2VydmVyIHRpbWUuXG4gICAgICAvLyBBbmQgaXQgYWxzbyBtZWFucywgdGhlIHVzZXItb3JpZ2luYXRlZCBtZXNzYWdlIGhhcyBoaWdoZXIgcHJvYmFiaWxpdHkgdG8gYXBwZWFyIGJlbG93IGJvdC1vcmlnaW5hdGVkIG1lc3NhZ2UuXG4gICAgICAvLyBBbHRob3VnaCBpdCBoYXMgaGlnaGVyIHByb2JhYmlsaXR5LCBpZiB0aGUgdXNlci1vcmlnaW5hdGVkIG1lc3NhZ2UgaXMgc3RpbGwgc2VuZGluZyAoaS5lLiBkaWQgbm90IGVjaG9iYWNrIHdpdGggc2VydmVyIHRpbWVzdGFtcCB5ZXQpLFxuICAgICAgLy8gdGhlIGluc2VydGlvbi1zb3J0IGxvZ2ljIHdpbGwgcHV0IHRoZSBib3Qtb3JpZ2luYXRlZCBiZWxvdyB0aGUgdXNlci1vcmlnaW5hdGVkIG1lc3NhZ2UuXG5cbiAgICAgIHN0YXRlID0gc2VydmVyVGltZSAtIGNsaWVudFNlbmRUaW1lO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlID09PSBTRVRfQ0xPQ0tfU0tFV19BREpVU1RNRU5UKSB7XG4gICAgLy8gQ3VycmVudGx5LCB0aGlzIGFjdGlvbiBpcyBmb3IgdGVzdGluZyBwdXJwb3NlIG9ubHkuXG4gICAgc3RhdGUgPSBwYXlsb2FkLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuIl19