"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = notifications;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _dismissNotification = require("../actions/dismissNotification");

var _sagaError = require("../actions/sagaError");

var _setNotification = require("../actions/setNotification");

var _isForbiddenPropertyName = _interopRequireDefault(require("../utils/isForbiddenPropertyName"));

var DEFAULT_STATE = {};

function notifications() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;

  var _ref = arguments.length > 1 ? arguments[1] : undefined,
      payload = _ref.payload,
      type = _ref.type;

  var now = Date.now();

  if (type === _dismissNotification.DISMISS_NOTIFICATION) {
    state = (0, _simpleUpdateIn["default"])(state, [payload.id]);
  } else if (type === _sagaError.SAGA_ERROR) {
    state = (0, _simpleUpdateIn["default"])(state, ['connectivitystatus', 'message'], function () {
      return 'javascripterror';
    });
  } else if (type === _setNotification.SET_NOTIFICATION) {
    var alt = payload.alt,
        data = payload.data,
        id = payload.id,
        level = payload.level,
        message = payload.message;

    if (!(0, _isForbiddenPropertyName["default"])(id)) {
      // Mitigated through denylisting.
      // eslint-disable-next-line security/detect-object-injection
      var notification = state[id];

      if (!notification || alt !== notification.alt || !Object.is(data, notification.data) || level !== notification.level || message !== notification.message) {
        state = (0, _simpleUpdateIn["default"])(state, [id], function () {
          return {
            alt: alt,
            data: data,
            id: id,
            level: level,
            message: message,
            timestamp: now
          };
        });
      }
    }
  }

  return state;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9ub3RpZmljYXRpb25zLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfU1RBVEUiLCJub3RpZmljYXRpb25zIiwic3RhdGUiLCJwYXlsb2FkIiwidHlwZSIsIm5vdyIsIkRhdGUiLCJESVNNSVNTX05PVElGSUNBVElPTiIsImlkIiwiU0FHQV9FUlJPUiIsIlNFVF9OT1RJRklDQVRJT04iLCJhbHQiLCJkYXRhIiwibGV2ZWwiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwiT2JqZWN0IiwiaXMiLCJ0aW1lc3RhbXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLGFBQWEsR0FBRyxFQUF0Qjs7QUFFZSxTQUFTQyxhQUFULEdBQWlFO0FBQUEsTUFBMUNDLEtBQTBDLHVFQUFsQ0YsYUFBa0M7O0FBQUE7QUFBQSxNQUFqQkcsT0FBaUIsUUFBakJBLE9BQWlCO0FBQUEsTUFBUkMsSUFBUSxRQUFSQSxJQUFROztBQUM5RSxNQUFNQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0QsR0FBTCxFQUFaOztBQUVBLE1BQUlELElBQUksS0FBS0cseUNBQWIsRUFBbUM7QUFDakNMLElBQUFBLEtBQUssR0FBRyxnQ0FBU0EsS0FBVCxFQUFnQixDQUFDQyxPQUFPLENBQUNLLEVBQVQsQ0FBaEIsQ0FBUjtBQUNELEdBRkQsTUFFTyxJQUFJSixJQUFJLEtBQUtLLHFCQUFiLEVBQXlCO0FBQzlCUCxJQUFBQSxLQUFLLEdBQUcsZ0NBQVNBLEtBQVQsRUFBZ0IsQ0FBQyxvQkFBRCxFQUF1QixTQUF2QixDQUFoQixFQUFtRDtBQUFBLGFBQU0saUJBQU47QUFBQSxLQUFuRCxDQUFSO0FBQ0QsR0FGTSxNQUVBLElBQUlFLElBQUksS0FBS00saUNBQWIsRUFBK0I7QUFDcEMsUUFBUUMsR0FBUixHQUEwQ1IsT0FBMUMsQ0FBUVEsR0FBUjtBQUFBLFFBQWFDLElBQWIsR0FBMENULE9BQTFDLENBQWFTLElBQWI7QUFBQSxRQUFtQkosRUFBbkIsR0FBMENMLE9BQTFDLENBQW1CSyxFQUFuQjtBQUFBLFFBQXVCSyxLQUF2QixHQUEwQ1YsT0FBMUMsQ0FBdUJVLEtBQXZCO0FBQUEsUUFBOEJDLE9BQTlCLEdBQTBDWCxPQUExQyxDQUE4QlcsT0FBOUI7O0FBRUEsUUFBSSxDQUFDLHlDQUF3Qk4sRUFBeEIsQ0FBTCxFQUFrQztBQUNoQztBQUNBO0FBQ0EsVUFBTU8sWUFBWSxHQUFHYixLQUFLLENBQUNNLEVBQUQsQ0FBMUI7O0FBRUEsVUFDRSxDQUFDTyxZQUFELElBQ0FKLEdBQUcsS0FBS0ksWUFBWSxDQUFDSixHQURyQixJQUVBLENBQUNLLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVTCxJQUFWLEVBQWdCRyxZQUFZLENBQUNILElBQTdCLENBRkQsSUFHQUMsS0FBSyxLQUFLRSxZQUFZLENBQUNGLEtBSHZCLElBSUFDLE9BQU8sS0FBS0MsWUFBWSxDQUFDRCxPQUwzQixFQU1FO0FBQ0FaLFFBQUFBLEtBQUssR0FBRyxnQ0FBU0EsS0FBVCxFQUFnQixDQUFDTSxFQUFELENBQWhCLEVBQXNCO0FBQUEsaUJBQU87QUFDbkNHLFlBQUFBLEdBQUcsRUFBSEEsR0FEbUM7QUFFbkNDLFlBQUFBLElBQUksRUFBSkEsSUFGbUM7QUFHbkNKLFlBQUFBLEVBQUUsRUFBRkEsRUFIbUM7QUFJbkNLLFlBQUFBLEtBQUssRUFBTEEsS0FKbUM7QUFLbkNDLFlBQUFBLE9BQU8sRUFBUEEsT0FMbUM7QUFNbkNJLFlBQUFBLFNBQVMsRUFBRWI7QUFOd0IsV0FBUDtBQUFBLFNBQXRCLENBQVI7QUFRRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBT0gsS0FBUDtBQUNEIiwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVwZGF0ZUluIGZyb20gJ3NpbXBsZS11cGRhdGUtaW4nO1xuXG5pbXBvcnQgeyBESVNNSVNTX05PVElGSUNBVElPTiB9IGZyb20gJy4uL2FjdGlvbnMvZGlzbWlzc05vdGlmaWNhdGlvbic7XG5pbXBvcnQgeyBTQUdBX0VSUk9SIH0gZnJvbSAnLi4vYWN0aW9ucy9zYWdhRXJyb3InO1xuaW1wb3J0IHsgU0VUX05PVElGSUNBVElPTiB9IGZyb20gJy4uL2FjdGlvbnMvc2V0Tm90aWZpY2F0aW9uJztcbmltcG9ydCBpc0ZvcmJpZGRlblByb3BlcnR5TmFtZSBmcm9tICcuLi91dGlscy9pc0ZvcmJpZGRlblByb3BlcnR5TmFtZSc7XG5cbmNvbnN0IERFRkFVTFRfU1RBVEUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm90aWZpY2F0aW9ucyhzdGF0ZSA9IERFRkFVTFRfU1RBVEUsIHsgcGF5bG9hZCwgdHlwZSB9KSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgaWYgKHR5cGUgPT09IERJU01JU1NfTk9USUZJQ0FUSU9OKSB7XG4gICAgc3RhdGUgPSB1cGRhdGVJbihzdGF0ZSwgW3BheWxvYWQuaWRdKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBTQUdBX0VSUk9SKSB7XG4gICAgc3RhdGUgPSB1cGRhdGVJbihzdGF0ZSwgWydjb25uZWN0aXZpdHlzdGF0dXMnLCAnbWVzc2FnZSddLCAoKSA9PiAnamF2YXNjcmlwdGVycm9yJyk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gU0VUX05PVElGSUNBVElPTikge1xuICAgIGNvbnN0IHsgYWx0LCBkYXRhLCBpZCwgbGV2ZWwsIG1lc3NhZ2UgfSA9IHBheWxvYWQ7XG5cbiAgICBpZiAoIWlzRm9yYmlkZGVuUHJvcGVydHlOYW1lKGlkKSkge1xuICAgICAgLy8gTWl0aWdhdGVkIHRocm91Z2ggZGVueWxpc3RpbmcuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2VjdXJpdHkvZGV0ZWN0LW9iamVjdC1pbmplY3Rpb25cbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IHN0YXRlW2lkXTtcblxuICAgICAgaWYgKFxuICAgICAgICAhbm90aWZpY2F0aW9uIHx8XG4gICAgICAgIGFsdCAhPT0gbm90aWZpY2F0aW9uLmFsdCB8fFxuICAgICAgICAhT2JqZWN0LmlzKGRhdGEsIG5vdGlmaWNhdGlvbi5kYXRhKSB8fFxuICAgICAgICBsZXZlbCAhPT0gbm90aWZpY2F0aW9uLmxldmVsIHx8XG4gICAgICAgIG1lc3NhZ2UgIT09IG5vdGlmaWNhdGlvbi5tZXNzYWdlXG4gICAgICApIHtcbiAgICAgICAgc3RhdGUgPSB1cGRhdGVJbihzdGF0ZSwgW2lkXSwgKCkgPT4gKHtcbiAgICAgICAgICBhbHQsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgIHRpbWVzdGFtcDogbm93XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG4iXX0=