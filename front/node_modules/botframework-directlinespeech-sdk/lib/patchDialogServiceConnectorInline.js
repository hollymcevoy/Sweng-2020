"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = patchDialogServiceConnectorInline;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _pDeferEs = _interopRequireDefault(require("p-defer-es5"));

// Patching a function to add pre-processing of arguments and post-processing of result.
function patchFunction(fn, pre, post) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args = pre ? pre.apply(void 0, (0, _toConsumableArray2.default)(args)) : args;
    var result = fn.apply(void 0, (0, _toConsumableArray2.default)(args));
    return post ? post(result) : result;
  };
}

function patchDialogServiceConnectorInline(dialogServiceConnector) {
  // This function will patch DialogServiceConnector by modifying the object.
  // The patches are intended to fill-in features to make DialogServiceConnector object works like the full-fledged Recognizer object.
  var lastRecognitionDeferred;
  dialogServiceConnector.listenOnceAsync = patchFunction(dialogServiceConnector.listenOnceAsync.bind(dialogServiceConnector), function (resolve, reject) {
    lastRecognitionDeferred = (0, _pDeferEs.default)();

    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    return [patchFunction(resolve, null, function (result) {
      lastRecognitionDeferred.resolve(result);
      return result;
    }), patchFunction(reject, null, function (error) {
      lastRecognitionDeferred.reject(error);
      return error;
    })].concat(args);
  }); // TODO: [P1] #2664 startContinuousRecognitionAsync is not working yet in Speech SDK 1.15.0.
  //       We need to polyfill to use listenOnceAsync instead, and disable stopContinuousRecognitionAsync.

  dialogServiceConnector.startContinuousRecognitionAsync = function (resolve, reject) {
    dialogServiceConnector.listenOnceAsync(function () {// We will resolve the Promise in a setTimeout.
    }, function (err) {
      resolve = null;
      reject && reject(err);
    });
    setTimeout(function () {
      reject = null;
      resolve && resolve();
    }, 0);
  }; // TODO: stopContinuousRecognitionAsync is not working yet.
  //       We will leave out the implementation as falsy, Web Chat will disable the microphone button after start dictate.
  //       This will prevent user from aborting speech recognition.
  // dialogServiceConnector.stopContinuousRecognitionAsync = resolve => {
  // };


  return dialogServiceConnector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUuanMiXSwibmFtZXMiOlsicGF0Y2hGdW5jdGlvbiIsImZuIiwicHJlIiwicG9zdCIsImFyZ3MiLCJyZXN1bHQiLCJwYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUiLCJkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yIiwibGFzdFJlY29nbml0aW9uRGVmZXJyZWQiLCJsaXN0ZW5PbmNlQXN5bmMiLCJiaW5kIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yIiwic3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyIsImVyciIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQSxTQUFTQSxhQUFULENBQXVCQyxFQUF2QixFQUEyQkMsR0FBM0IsRUFBZ0NDLElBQWhDLEVBQXNDO0FBQ3BDLFNBQU8sWUFBYTtBQUFBLHNDQUFUQyxJQUFTO0FBQVRBLE1BQUFBLElBQVM7QUFBQTs7QUFDbEJBLElBQUFBLElBQUksR0FBR0YsR0FBRyxHQUFHQSxHQUFHLE1BQUgsMENBQU9FLElBQVAsRUFBSCxHQUFrQkEsSUFBNUI7QUFFQSxRQUFNQyxNQUFNLEdBQUdKLEVBQUUsTUFBRiwwQ0FBTUcsSUFBTixFQUFmO0FBRUEsV0FBT0QsSUFBSSxHQUFHQSxJQUFJLENBQUNFLE1BQUQsQ0FBUCxHQUFrQkEsTUFBN0I7QUFDRCxHQU5EO0FBT0Q7O0FBRWMsU0FBU0MsaUNBQVQsQ0FBMkNDLHNCQUEzQyxFQUFtRTtBQUNoRjtBQUNBO0FBRUEsTUFBSUMsdUJBQUo7QUFFQUQsRUFBQUEsc0JBQXNCLENBQUNFLGVBQXZCLEdBQXlDVCxhQUFhLENBQ3BETyxzQkFBc0IsQ0FBQ0UsZUFBdkIsQ0FBdUNDLElBQXZDLENBQTRDSCxzQkFBNUMsQ0FEb0QsRUFFcEQsVUFBQ0ksT0FBRCxFQUFVQyxNQUFWLEVBQThCO0FBQzVCSixJQUFBQSx1QkFBdUIsR0FBRyx3QkFBMUI7O0FBRDRCLHVDQUFUSixJQUFTO0FBQVRBLE1BQUFBLElBQVM7QUFBQTs7QUFHNUIsWUFDRUosYUFBYSxDQUFDVyxPQUFELEVBQVUsSUFBVixFQUFnQixVQUFBTixNQUFNLEVBQUk7QUFDckNHLE1BQUFBLHVCQUF1QixDQUFDRyxPQUF4QixDQUFnQ04sTUFBaEM7QUFFQSxhQUFPQSxNQUFQO0FBQ0QsS0FKWSxDQURmLEVBTUVMLGFBQWEsQ0FBQ1ksTUFBRCxFQUFTLElBQVQsRUFBZSxVQUFBQyxLQUFLLEVBQUk7QUFDbkNMLE1BQUFBLHVCQUF1QixDQUFDSSxNQUF4QixDQUErQkMsS0FBL0I7QUFFQSxhQUFPQSxLQUFQO0FBQ0QsS0FKWSxDQU5mLFNBV0tULElBWEw7QUFhRCxHQWxCbUQsQ0FBdEQsQ0FOZ0YsQ0EyQmhGO0FBQ0E7O0FBQ0FHLEVBQUFBLHNCQUFzQixDQUFDTywrQkFBdkIsR0FBeUQsVUFBQ0gsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQzVFTCxJQUFBQSxzQkFBc0IsQ0FBQ0UsZUFBdkIsQ0FDRSxZQUFNLENBQ0o7QUFDRCxLQUhILEVBSUUsVUFBQU0sR0FBRyxFQUFJO0FBQ0xKLE1BQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0FDLE1BQUFBLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxHQUFELENBQWhCO0FBQ0QsS0FQSDtBQVVBQyxJQUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmSixNQUFBQSxNQUFNLEdBQUcsSUFBVDtBQUNBRCxNQUFBQSxPQUFPLElBQUlBLE9BQU8sRUFBbEI7QUFDRCxLQUhTLEVBR1AsQ0FITyxDQUFWO0FBSUQsR0FmRCxDQTdCZ0YsQ0E4Q2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLFNBQU9KLHNCQUFQO0FBQ0QiLCJzb3VyY2VSb290IjoiZGlyZWN0bGluZXNwZWVjaDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAncC1kZWZlci1lczUnO1xuXG4vLyBQYXRjaGluZyBhIGZ1bmN0aW9uIHRvIGFkZCBwcmUtcHJvY2Vzc2luZyBvZiBhcmd1bWVudHMgYW5kIHBvc3QtcHJvY2Vzc2luZyBvZiByZXN1bHQuXG5mdW5jdGlvbiBwYXRjaEZ1bmN0aW9uKGZuLCBwcmUsIHBvc3QpIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgYXJncyA9IHByZSA/IHByZSguLi5hcmdzKSA6IGFyZ3M7XG5cbiAgICBjb25zdCByZXN1bHQgPSBmbiguLi5hcmdzKTtcblxuICAgIHJldHVybiBwb3N0ID8gcG9zdChyZXN1bHQpIDogcmVzdWx0O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUoZGlhbG9nU2VydmljZUNvbm5lY3Rvcikge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgcGF0Y2ggRGlhbG9nU2VydmljZUNvbm5lY3RvciBieSBtb2RpZnlpbmcgdGhlIG9iamVjdC5cbiAgLy8gVGhlIHBhdGNoZXMgYXJlIGludGVuZGVkIHRvIGZpbGwtaW4gZmVhdHVyZXMgdG8gbWFrZSBEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yIG9iamVjdCB3b3JrcyBsaWtlIHRoZSBmdWxsLWZsZWRnZWQgUmVjb2duaXplciBvYmplY3QuXG5cbiAgbGV0IGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkO1xuXG4gIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IubGlzdGVuT25jZUFzeW5jID0gcGF0Y2hGdW5jdGlvbihcbiAgICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmxpc3Rlbk9uY2VBc3luYy5iaW5kKGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IpLFxuICAgIChyZXNvbHZlLCByZWplY3QsIC4uLmFyZ3MpID0+IHtcbiAgICAgIGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcGF0Y2hGdW5jdGlvbihyZXNvbHZlLCBudWxsLCByZXN1bHQgPT4ge1xuICAgICAgICAgIGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcblxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pLFxuICAgICAgICBwYXRjaEZ1bmN0aW9uKHJlamVjdCwgbnVsbCwgZXJyb3IgPT4ge1xuICAgICAgICAgIGxhc3RSZWNvZ25pdGlvbkRlZmVycmVkLnJlamVjdChlcnJvcik7XG5cbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH0pLFxuICAgICAgICAuLi5hcmdzXG4gICAgICBdO1xuICAgIH1cbiAgKTtcblxuICAvLyBUT0RPOiBbUDFdICMyNjY0IHN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmMgaXMgbm90IHdvcmtpbmcgeWV0IGluIFNwZWVjaCBTREsgMS4xNS4wLlxuICAvLyAgICAgICBXZSBuZWVkIHRvIHBvbHlmaWxsIHRvIHVzZSBsaXN0ZW5PbmNlQXN5bmMgaW5zdGVhZCwgYW5kIGRpc2FibGUgc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jLlxuICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnN0YXJ0Q29udGludW91c1JlY29nbml0aW9uQXN5bmMgPSAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZGlhbG9nU2VydmljZUNvbm5lY3Rvci5saXN0ZW5PbmNlQXN5bmMoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFdlIHdpbGwgcmVzb2x2ZSB0aGUgUHJvbWlzZSBpbiBhIHNldFRpbWVvdXQuXG4gICAgICB9LFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgcmVzb2x2ZSA9IG51bGw7XG4gICAgICAgIHJlamVjdCAmJiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZWplY3QgPSBudWxsO1xuICAgICAgcmVzb2x2ZSAmJiByZXNvbHZlKCk7XG4gICAgfSwgMCk7XG4gIH07XG5cbiAgLy8gVE9ETzogc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jIGlzIG5vdCB3b3JraW5nIHlldC5cbiAgLy8gICAgICAgV2Ugd2lsbCBsZWF2ZSBvdXQgdGhlIGltcGxlbWVudGF0aW9uIGFzIGZhbHN5LCBXZWIgQ2hhdCB3aWxsIGRpc2FibGUgdGhlIG1pY3JvcGhvbmUgYnV0dG9uIGFmdGVyIHN0YXJ0IGRpY3RhdGUuXG4gIC8vICAgICAgIFRoaXMgd2lsbCBwcmV2ZW50IHVzZXIgZnJvbSBhYm9ydGluZyBzcGVlY2ggcmVjb2duaXRpb24uXG4gIC8vIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3Iuc3RvcENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jID0gcmVzb2x2ZSA9PiB7XG4gIC8vIH07XG5cbiAgcmV0dXJuIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3I7XG59XG4iXX0=