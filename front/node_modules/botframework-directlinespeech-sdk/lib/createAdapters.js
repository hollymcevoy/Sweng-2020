"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = create;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _microsoftCognitiveservicesSpeechSdk = require("microsoft-cognitiveservices-speech-sdk");

var _createWebSpeechPonyfillFactory = _interopRequireDefault(require("./createWebSpeechPonyfillFactory"));

var _DirectLineSpeech = _interopRequireDefault(require("./DirectLineSpeech"));

var _patchDialogServiceConnectorInline = _interopRequireDefault(require("./patchDialogServiceConnectorInline"));

var _refreshDirectLineToken = _interopRequireDefault(require("./utils/refreshDirectLineToken"));

var _resolveFunctionOrReturnValue = _interopRequireDefault(require("./resolveFunctionOrReturnValue"));

/* eslint complexity: ["error", 33] */
var DIRECT_LINE_TOKEN_RENEWAL_INTERVAL = 900000; // 15 minutes

var TOKEN_RENEWAL_INTERVAL = 120000; // eslint-disable-next-line complexity

function create(_x) {
  return _create.apply(this, arguments);
}

function _create() {
  _create = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref) {
    var audioConfig, audioContext, audioInputDeviceId, enableInternalHTTPSupport, enableTelemetry, fetchCredentials, speechRecognitionEndpointId, _ref$speechRecognitio, speechRecognitionLanguage, speechSynthesisDeploymentId, speechSynthesisOutputFormat, textNormalization, userID, username, _yield$resolveFunctio, authorizationToken, directLineToken, directLineSpeechHostname, region, subscriptionKey, config, dialogServiceConnector, interval, _interval, directLine, webSpeechPonyfillFactory;

    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            audioConfig = _ref.audioConfig, audioContext = _ref.audioContext, audioInputDeviceId = _ref.audioInputDeviceId, enableInternalHTTPSupport = _ref.enableInternalHTTPSupport, enableTelemetry = _ref.enableTelemetry, fetchCredentials = _ref.fetchCredentials, speechRecognitionEndpointId = _ref.speechRecognitionEndpointId, _ref$speechRecognitio = _ref.speechRecognitionLanguage, speechRecognitionLanguage = _ref$speechRecognitio === void 0 ? typeof window !== 'undefined' && typeof window.navigator !== 'undefined' && window.navigator.language || 'en-US' : _ref$speechRecognitio, speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId, speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat, textNormalization = _ref.textNormalization, userID = _ref.userID, username = _ref.username;

            if (fetchCredentials) {
              _context3.next = 3;
              break;
            }

            throw new Error('"fetchCredentials" must be specified.');

          case 3:
            _context3.next = 5;
            return (0, _resolveFunctionOrReturnValue.default)(fetchCredentials);

          case 5:
            _yield$resolveFunctio = _context3.sent;
            authorizationToken = _yield$resolveFunctio.authorizationToken;
            directLineToken = _yield$resolveFunctio.directLineToken;
            directLineSpeechHostname = _yield$resolveFunctio.directLineSpeechHostname;
            region = _yield$resolveFunctio.region;
            subscriptionKey = _yield$resolveFunctio.subscriptionKey;

            if (!(!authorizationToken && !subscriptionKey || authorizationToken && subscriptionKey || authorizationToken && typeof authorizationToken !== 'string' || subscriptionKey && typeof subscriptionKey !== 'string' || enableInternalHTTPSupport && !directLineToken)) {
              _context3.next = 13;
              break;
            }

            throw new Error('"fetchCredentials" must return either "authorizationToken" or "subscriptionKey" as a non-empty string only. If enableInternalHTTPSupport is set to true, then it should also return a non-empty "directLineToken"');

          case 13:
            if (typeof enableTelemetry !== 'undefined') {
              console.warn('botframework-directlinespeech: Telemetry options are not yet supported. Please refer to Cognitive Services documentation for details.');
            }

            if (!(directLineSpeechHostname && region || !directLineSpeechHostname && !region)) {
              _context3.next = 16;
              break;
            }

            throw new Error('"fetchCredentials" must return either "directLineSpeechHostname" or "region" and it must not be an empty string.');

          case 16:
            if (!directLineSpeechHostname) {
              _context3.next = 23;
              break;
            }

            if (!(typeof directLineSpeechHostname !== 'string')) {
              _context3.next = 19;
              break;
            }

            throw new Error('"fetchCredentials" must return "directLineSpeechHostname" as a string.');

          case 19:
            if (!enableInternalHTTPSupport) {
              _context3.next = 21;
              break;
            }

            throw new Error('"fetchCredentials" must not return "directLineSpeechHostname" if "enableInternalHTTPSupport" is set.');

          case 21:
            _context3.next = 25;
            break;

          case 23:
            if (!(typeof region !== 'string')) {
              _context3.next = 25;
              break;
            }

            throw new Error('"fetchCredentials" must return "region" as a string.');

          case 25:
            if (audioConfig && audioInputDeviceId) {
              console.warn('botframework-directlinespeech-sdk: Only "audioConfig" or "audioInputDeviceId" can be specified, but not both; ignoring "audioInputDeviceId".');
            } else if (!audioConfig) {
              if (audioInputDeviceId) {
                audioConfig = _microsoftCognitiveservicesSpeechSdk.AudioConfig.fromMicrophoneInput(audioInputDeviceId);
              } else {
                audioConfig = _microsoftCognitiveservicesSpeechSdk.AudioConfig.fromDefaultMicrophoneInput();
              }
            }

            if (speechRecognitionEndpointId) {
              console.warn('botframework-directlinespeech: Custom Speech is currently not supported; ignoring "speechRecognitionEndpointId".');
            }

            if (speechSynthesisDeploymentId) {
              console.warn('botframework-directlinespeech: Custom Voice is currently not supported; ignoring "speechSynthesisDeploymentId".');
            }

            if (speechSynthesisOutputFormat) {
              console.warn('botframework-directlinespeech: Synthesis output format is currently not supported; ignoring "speechSynthesisOutputFormat".');
            }

            if (textNormalization) {
              console.warn('botframework-directlinespeech: Text normalization is currently not supported; ignoring "textNormalization".');
            }

            if (userID || username) {
              console.warn('botframework-directlinespeech: Custom "userId" and "username" are currently not supported and are ignored.');
            }

            if (directLineSpeechHostname) {
              if (authorizationToken) {
                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromHost(new URL("wss://".concat(directLineSpeechHostname)));
                config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);
              } else {
                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromHost(new URL("wss://".concat(directLineSpeechHostname)), subscriptionKey);
              }
            } else {
              if (authorizationToken) {
                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromAuthorizationToken(authorizationToken, region);
              } else {
                config = _microsoftCognitiveservicesSpeechSdk.BotFrameworkConfig.fromSubscription(subscriptionKey, region);
              } // If internal HTTP support is enabled, switch the endpoint to Direct Line on Direct Line Speech service.


              if (enableInternalHTTPSupport) {
                config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_Endpoint, "wss://".concat(encodeURI(region), ".convai.speech.microsoft.com/directline/api/v1"));
                config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_Agent_Connection_Id, directLineToken);
              }
            } // Supported options can be found in DialogConnectorFactory.js.
            // Set the language used for recognition.


            config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.SpeechServiceConnection_RecoLanguage, speechRecognitionLanguage); // The following code sets the output format.
            // As advised by the Speech team, this API may be subject to future changes.
            // We are not enabling output format option because it does not send detailed output format to the bot, rendering this option useless.
            // config.setProperty(PropertyId.SpeechServiceResponse_OutputFormatOption, OutputFormat[OutputFormat.Detailed]);
            // Set the user ID for starting the conversation.

            userID && config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_From_Id, userID); // Set Custom Speech and Custom Voice.
            // The following code is copied from C#, and it is not working yet.
            // https://github.com/Azure-Samples/Cognitive-Services-Direct-Line-Speech-Client/blob/master/DLSpeechClient/MainWindow.xaml.cs
            // speechRecognitionEndpointId && config.setServiceProperty('cid', speechRecognitionEndpointId, ServicePropertyChannel.UriQueryParameter);
            // speechSynthesisDeploymentId && config.setProperty(PropertyId.conversation_Custom_Voice_Deployment_Ids, speechSynthesisDeploymentId);

            dialogServiceConnector = (0, _patchDialogServiceConnectorInline.default)(new _microsoftCognitiveservicesSpeechSdk.DialogServiceConnector(config, audioConfig)); // Renew token per interval.

            if (authorizationToken) {
              interval = setInterval( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
                var _yield$resolveFunctio2, authorizationToken, nextDirectLineSpeechHostname, nextRegion;

                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        // #2660 If the connector has been disposed, we should stop renewing the token.
                        // TODO: We should use a public implementation if Speech SDK has one related to "privIsDisposed".
                        if (dialogServiceConnector.privIsDisposed) {
                          clearInterval(interval);
                        }

                        _context.next = 3;
                        return (0, _resolveFunctionOrReturnValue.default)(fetchCredentials);

                      case 3:
                        _yield$resolveFunctio2 = _context.sent;
                        authorizationToken = _yield$resolveFunctio2.authorizationToken;
                        nextDirectLineSpeechHostname = _yield$resolveFunctio2.directLineSpeechHostname;
                        nextRegion = _yield$resolveFunctio2.region;

                        if (authorizationToken) {
                          _context.next = 9;
                          break;
                        }

                        return _context.abrupt("return", console.warn('botframework-directlinespeech-sdk: Renew token failed because "fetchCredentials" call returned no authorization token.'));

                      case 9:
                        if (!directLineSpeechHostname) {
                          _context.next = 14;
                          break;
                        }

                        if (!(directLineSpeechHostname !== nextDirectLineSpeechHostname)) {
                          _context.next = 12;
                          break;
                        }

                        return _context.abrupt("return", console.warn('botframework-directlinespeech-sdk: "directLineSpeechHostname" change is not supported for renewed token. Authorization token is not renewed.'));

                      case 12:
                        _context.next = 16;
                        break;

                      case 14:
                        if (!(region !== nextRegion)) {
                          _context.next = 16;
                          break;
                        }

                        return _context.abrupt("return", console.warn('botframework-directlinespeech-sdk: Region change is not supported for renewed token. Authorization token is not renewed.'));

                      case 16:
                        dialogServiceConnector.authorizationToken = authorizationToken; // eslint-disable-line require-atomic-updates

                      case 17:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              })), TOKEN_RENEWAL_INTERVAL);
            } // Renew token per interval.


            if (enableInternalHTTPSupport) {
              _interval = setInterval( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
                var refreshedDirectLineToken;
                return _regenerator.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        // #2660 If the connector has been disposed, we should stop renewing the token.
                        // TODO: We should use a public implementation if Speech SDK has one related to "privIsDisposed".
                        if (dialogServiceConnector.privIsDisposed) {
                          clearInterval(_interval);
                        }

                        _context2.next = 3;
                        return (0, _refreshDirectLineToken.default)(directLineToken);

                      case 3:
                        refreshedDirectLineToken = _context2.sent;

                        if (refreshedDirectLineToken) {
                          _context2.next = 6;
                          break;
                        }

                        return _context2.abrupt("return", console.warn('botframework-directlinespeech-sdk: Renew token failed because call to refresh token Direct Line API did not return a new token.'));

                      case 6:
                        config.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_Agent_Connection_Id, refreshedDirectLineToken);
                        dialogServiceConnector.properties.setProperty(_microsoftCognitiveservicesSpeechSdk.PropertyId.Conversation_Agent_Connection_Id, refreshedDirectLineToken);
                        dialogServiceConnector.connect();

                      case 9:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              })), DIRECT_LINE_TOKEN_RENEWAL_INTERVAL);
            }

            directLine = new _DirectLineSpeech.default({
              dialogServiceConnector: dialogServiceConnector
            });
            webSpeechPonyfillFactory = (0, _createWebSpeechPonyfillFactory.default)({
              audioContext: audioContext,
              enableTelemetry: enableTelemetry,
              recognizer: dialogServiceConnector,
              textNormalization: textNormalization
            });
            return _context3.abrupt("return", {
              directLine: directLine,
              webSpeechPonyfillFactory: webSpeechPonyfillFactory
            });

          case 40:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _create.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVBZGFwdGVycy5qcyJdLCJuYW1lcyI6WyJESVJFQ1RfTElORV9UT0tFTl9SRU5FV0FMX0lOVEVSVkFMIiwiVE9LRU5fUkVORVdBTF9JTlRFUlZBTCIsImNyZWF0ZSIsImF1ZGlvQ29uZmlnIiwiYXVkaW9Db250ZXh0IiwiYXVkaW9JbnB1dERldmljZUlkIiwiZW5hYmxlSW50ZXJuYWxIVFRQU3VwcG9ydCIsImVuYWJsZVRlbGVtZXRyeSIsImZldGNoQ3JlZGVudGlhbHMiLCJzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQiLCJzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlIiwid2luZG93IiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQiLCJzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQiLCJ0ZXh0Tm9ybWFsaXphdGlvbiIsInVzZXJJRCIsInVzZXJuYW1lIiwiRXJyb3IiLCJhdXRob3JpemF0aW9uVG9rZW4iLCJkaXJlY3RMaW5lVG9rZW4iLCJkaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWUiLCJyZWdpb24iLCJzdWJzY3JpcHRpb25LZXkiLCJjb25zb2xlIiwid2FybiIsIkF1ZGlvQ29uZmlnIiwiZnJvbU1pY3JvcGhvbmVJbnB1dCIsImZyb21EZWZhdWx0TWljcm9waG9uZUlucHV0IiwiY29uZmlnIiwiQm90RnJhbWV3b3JrQ29uZmlnIiwiZnJvbUhvc3QiLCJVUkwiLCJzZXRQcm9wZXJ0eSIsIlByb3BlcnR5SWQiLCJTcGVlY2hTZXJ2aWNlQXV0aG9yaXphdGlvbl9Ub2tlbiIsImZyb21BdXRob3JpemF0aW9uVG9rZW4iLCJmcm9tU3Vic2NyaXB0aW9uIiwiU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5kcG9pbnQiLCJlbmNvZGVVUkkiLCJDb252ZXJzYXRpb25fQWdlbnRfQ29ubmVjdGlvbl9JZCIsIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSIsIkNvbnZlcnNhdGlvbl9Gcm9tX0lkIiwiZGlhbG9nU2VydmljZUNvbm5lY3RvciIsIkRpYWxvZ1NlcnZpY2VDb25uZWN0b3IiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwicHJpdklzRGlzcG9zZWQiLCJjbGVhckludGVydmFsIiwibmV4dERpcmVjdExpbmVTcGVlY2hIb3N0bmFtZSIsIm5leHRSZWdpb24iLCJyZWZyZXNoZWREaXJlY3RMaW5lVG9rZW4iLCJwcm9wZXJ0aWVzIiwiY29ubmVjdCIsImRpcmVjdExpbmUiLCJEaXJlY3RMaW5lU3BlZWNoIiwid2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5IiwicmVjb2duaXplciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUVBOztBQU9BOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQWJBO0FBZUEsSUFBTUEsa0NBQWtDLEdBQUcsTUFBM0MsQyxDQUFtRDs7QUFDbkQsSUFBTUMsc0JBQXNCLEdBQUcsTUFBL0IsQyxDQUVBOztTQUM4QkMsTTs7Ozs7b0ZBQWY7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNiQyxZQUFBQSxXQURhLFFBQ2JBLFdBRGEsRUFFYkMsWUFGYSxRQUViQSxZQUZhLEVBR2JDLGtCQUhhLFFBR2JBLGtCQUhhLEVBSWJDLHlCQUphLFFBSWJBLHlCQUphLEVBS2JDLGVBTGEsUUFLYkEsZUFMYSxFQU1iQyxnQkFOYSxRQU1iQSxnQkFOYSxFQU9iQywyQkFQYSxRQU9iQSwyQkFQYSwrQkFRYkMseUJBUmEsRUFRYkEseUJBUmEsc0NBUWdCLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFDM0IsT0FBT0EsTUFBTSxDQUFDQyxTQUFkLEtBQTRCLFdBREQsSUFFM0JELE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFGUyxJQUcxQixPQVhXLDBCQVliQywyQkFaYSxRQVliQSwyQkFaYSxFQWFiQywyQkFiYSxRQWFiQSwyQkFiYSxFQWNiQyxpQkFkYSxRQWNiQSxpQkFkYSxFQWViQyxNQWZhLFFBZWJBLE1BZmEsRUFnQmJDLFFBaEJhLFFBZ0Ji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d0JBQXdCLEVBQXhCQTtBQUZLLGFBek9NOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJzb3VyY2VSb290IjoiZGlyZWN0bGluZXNwZWVjaDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgY29tcGxleGl0eTogW1wiZXJyb3JcIiwgMzNdICovXG5cbmltcG9ydCB7XG4gIEF1ZGlvQ29uZmlnLFxuICBCb3RGcmFtZXdvcmtDb25maWcsXG4gIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IsXG4gIFByb3BlcnR5SWRcbn0gZnJvbSAnbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsnO1xuXG5pbXBvcnQgY3JlYXRlV2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5IGZyb20gJy4vY3JlYXRlV2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5JztcbmltcG9ydCBEaXJlY3RMaW5lU3BlZWNoIGZyb20gJy4vRGlyZWN0TGluZVNwZWVjaCc7XG5pbXBvcnQgcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lIGZyb20gJy4vcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lJztcbmltcG9ydCByZWZyZXNoRGlyZWN0TGluZVRva2VuIGZyb20gJy4vdXRpbHMvcmVmcmVzaERpcmVjdExpbmVUb2tlbic7XG5pbXBvcnQgcmVzb2x2ZUZ1bmN0aW9uT3JSZXR1cm5WYWx1ZSBmcm9tICcuL3Jlc29sdmVGdW5jdGlvbk9yUmV0dXJuVmFsdWUnO1xuXG5jb25zdCBESVJFQ1RfTElORV9UT0tFTl9SRU5FV0FMX0lOVEVSVkFMID0gOTAwMDAwOyAvLyAxNSBtaW51dGVzXG5jb25zdCBUT0tFTl9SRU5FV0FMX0lOVEVSVkFMID0gMTIwMDAwO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlKHtcbiAgYXVkaW9Db25maWcsXG4gIGF1ZGlvQ29udGV4dCxcbiAgYXVkaW9JbnB1dERldmljZUlkLFxuICBlbmFibGVJbnRlcm5hbEhUVFBTdXBwb3J0LFxuICBlbmFibGVUZWxlbWV0cnksXG4gIGZldGNoQ3JlZGVudGlhbHMsXG4gIHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCxcbiAgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8XG4gICAgJ2VuLVVTJyxcbiAgc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkLFxuICBzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQsXG4gIHRleHROb3JtYWxpemF0aW9uLFxuICB1c2VySUQsXG4gIHVzZXJuYW1lXG59KSB7XG4gIGlmICghZmV0Y2hDcmVkZW50aWFscykge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJmZXRjaENyZWRlbnRpYWxzXCIgbXVzdCBiZSBzcGVjaWZpZWQuJyk7XG4gIH1cblxuICBjb25zdCB7IGF1dGhvcml6YXRpb25Ub2tlbiwgZGlyZWN0TGluZVRva2VuLCBkaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWUsIHJlZ2lvbiwgc3Vic2NyaXB0aW9uS2V5IH0gPVxuICAgIGF3YWl0IHJlc29sdmVGdW5jdGlvbk9yUmV0dXJuVmFsdWUoZmV0Y2hDcmVkZW50aWFscyk7XG5cbiAgaWYgKFxuICAgICghYXV0aG9yaXphdGlvblRva2VuICYmICFzdWJzY3JpcHRpb25LZXkpIHx8XG4gICAgKGF1dGhvcml6YXRpb25Ub2tlbiAmJiBzdWJzY3JpcHRpb25LZXkpIHx8XG4gICAgKGF1dGhvcml6YXRpb25Ub2tlbiAmJiB0eXBlb2YgYXV0aG9yaXphdGlvblRva2VuICE9PSAnc3RyaW5nJykgfHxcbiAgICAoc3Vic2NyaXB0aW9uS2V5ICYmIHR5cGVvZiBzdWJzY3JpcHRpb25LZXkgIT09ICdzdHJpbmcnKSB8fFxuICAgIChlbmFibGVJbnRlcm5hbEhUVFBTdXBwb3J0ICYmICFkaXJlY3RMaW5lVG9rZW4pXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdcImZldGNoQ3JlZGVudGlhbHNcIiBtdXN0IHJldHVybiBlaXRoZXIgXCJhdXRob3JpemF0aW9uVG9rZW5cIiBvciBcInN1YnNjcmlwdGlvbktleVwiIGFzIGEgbm9uLWVtcHR5IHN0cmluZyBvbmx5LiBJZiBlbmFibGVJbnRlcm5hbEhUVFBTdXBwb3J0IGlzIHNldCB0byB0cnVlLCB0aGVuIGl0IHNob3VsZCBhbHNvIHJldHVybiBhIG5vbi1lbXB0eSBcImRpcmVjdExpbmVUb2tlblwiJ1xuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuYWJsZVRlbGVtZXRyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnYm90ZnJhbWV3b3JrLWRpcmVjdGxpbmVzcGVlY2g6IFRlbGVtZXRyeSBvcHRpb25zIGFyZSBub3QgeWV0IHN1cHBvcnRlZC4gUGxlYXNlIHJlZmVyIHRvIENvZ25pdGl2ZSBTZXJ2aWNlcyBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWxzLidcbiAgICApO1xuICB9XG5cbiAgaWYgKChkaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWUgJiYgcmVnaW9uKSB8fCAoIWRpcmVjdExpbmVTcGVlY2hIb3N0bmFtZSAmJiAhcmVnaW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdcImZldGNoQ3JlZGVudGlhbHNcIiBtdXN0IHJldHVybiBlaXRoZXIgXCJkaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWVcIiBvciBcInJlZ2lvblwiIGFuZCBpdCBtdXN0IG5vdCBiZSBhbiBlbXB0eSBzdHJpbmcuJ1xuICAgICk7XG4gIH1cblxuICBpZiAoZGlyZWN0TGluZVNwZWVjaEhvc3RuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBkaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiZmV0Y2hDcmVkZW50aWFsc1wiIG11c3QgcmV0dXJuIFwiZGlyZWN0TGluZVNwZWVjaEhvc3RuYW1lXCIgYXMgYSBzdHJpbmcuJyk7XG4gICAgfVxuXG4gICAgaWYgKGVuYWJsZUludGVybmFsSFRUUFN1cHBvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1wiZmV0Y2hDcmVkZW50aWFsc1wiIG11c3Qgbm90IHJldHVybiBcImRpcmVjdExpbmVTcGVlY2hIb3N0bmFtZVwiIGlmIFwiZW5hYmxlSW50ZXJuYWxIVFRQU3VwcG9ydFwiIGlzIHNldC4nXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHJlZ2lvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJmZXRjaENyZWRlbnRpYWxzXCIgbXVzdCByZXR1cm4gXCJyZWdpb25cIiBhcyBhIHN0cmluZy4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXVkaW9Db25maWcgJiYgYXVkaW9JbnB1dERldmljZUlkKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoLXNkazogT25seSBcImF1ZGlvQ29uZmlnXCIgb3IgXCJhdWRpb0lucHV0RGV2aWNlSWRcIiBjYW4gYmUgc3BlY2lmaWVkLCBidXQgbm90IGJvdGg7IGlnbm9yaW5nIFwiYXVkaW9JbnB1dERldmljZUlkXCIuJ1xuICAgICk7XG4gIH0gZWxzZSBpZiAoIWF1ZGlvQ29uZmlnKSB7XG4gICAgaWYgKGF1ZGlvSW5wdXREZXZpY2VJZCkge1xuICAgICAgYXVkaW9Db25maWcgPSBBdWRpb0NvbmZpZy5mcm9tTWljcm9waG9uZUlucHV0KGF1ZGlvSW5wdXREZXZpY2VJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1ZGlvQ29uZmlnID0gQXVkaW9Db25maWcuZnJvbURlZmF1bHRNaWNyb3Bob25lSW5wdXQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoOiBDdXN0b20gU3BlZWNoIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkOyBpZ25vcmluZyBcInNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZFwiLidcbiAgICApO1xuICB9XG5cbiAgaWYgKHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaDogQ3VzdG9tIFZvaWNlIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkOyBpZ25vcmluZyBcInNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZFwiLidcbiAgICApO1xuICB9XG5cbiAgaWYgKHNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaDogU3ludGhlc2lzIG91dHB1dCBmb3JtYXQgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQ7IGlnbm9yaW5nIFwic3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0XCIuJ1xuICAgICk7XG4gIH1cblxuICBpZiAodGV4dE5vcm1hbGl6YXRpb24pIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnYm90ZnJhbWV3b3JrLWRpcmVjdGxpbmVzcGVlY2g6IFRleHQgbm9ybWFsaXphdGlvbiBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZDsgaWdub3JpbmcgXCJ0ZXh0Tm9ybWFsaXphdGlvblwiLidcbiAgICApO1xuICB9XG5cbiAgaWYgKHVzZXJJRCB8fCB1c2VybmFtZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaDogQ3VzdG9tIFwidXNlcklkXCIgYW5kIFwidXNlcm5hbWVcIiBhcmUgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgYW5kIGFyZSBpZ25vcmVkLidcbiAgICApO1xuICB9XG5cbiAgbGV0IGNvbmZpZztcblxuICBpZiAoZGlyZWN0TGluZVNwZWVjaEhvc3RuYW1lKSB7XG4gICAgaWYgKGF1dGhvcml6YXRpb25Ub2tlbikge1xuICAgICAgY29uZmlnID0gQm90RnJhbWV3b3JrQ29uZmlnLmZyb21Ib3N0KG5ldyBVUkwoYHdzczovLyR7ZGlyZWN0TGluZVNwZWVjaEhvc3RuYW1lfWApKTtcblxuICAgICAgY29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZUF1dGhvcml6YXRpb25fVG9rZW4sIGF1dGhvcml6YXRpb25Ub2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IEJvdEZyYW1ld29ya0NvbmZpZy5mcm9tSG9zdChuZXcgVVJMKGB3c3M6Ly8ke2RpcmVjdExpbmVTcGVlY2hIb3N0bmFtZX1gKSwgc3Vic2NyaXB0aW9uS2V5KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGF1dGhvcml6YXRpb25Ub2tlbikge1xuICAgICAgY29uZmlnID0gQm90RnJhbWV3b3JrQ29uZmlnLmZyb21BdXRob3JpemF0aW9uVG9rZW4oYXV0aG9yaXphdGlvblRva2VuLCByZWdpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBCb3RGcmFtZXdvcmtDb25maWcuZnJvbVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25LZXksIHJlZ2lvbik7XG4gICAgfVxuXG4gICAgLy8gSWYgaW50ZXJuYWwgSFRUUCBzdXBwb3J0IGlzIGVuYWJsZWQsIHN3aXRjaCB0aGUgZW5kcG9pbnQgdG8gRGlyZWN0IExpbmUgb24gRGlyZWN0IExpbmUgU3BlZWNoIHNlcnZpY2UuXG4gICAgaWYgKGVuYWJsZUludGVybmFsSFRUUFN1cHBvcnQpIHtcbiAgICAgIGNvbmZpZy5zZXRQcm9wZXJ0eShcbiAgICAgICAgUHJvcGVydHlJZC5TcGVlY2hTZXJ2aWNlQ29ubmVjdGlvbl9FbmRwb2ludCxcbiAgICAgICAgYHdzczovLyR7ZW5jb2RlVVJJKHJlZ2lvbil9LmNvbnZhaS5zcGVlY2gubWljcm9zb2Z0LmNvbS9kaXJlY3RsaW5lL2FwaS92MWBcbiAgICAgICk7XG5cbiAgICAgIGNvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9BZ2VudF9Db25uZWN0aW9uX0lkLCBkaXJlY3RMaW5lVG9rZW4pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN1cHBvcnRlZCBvcHRpb25zIGNhbiBiZSBmb3VuZCBpbiBEaWFsb2dDb25uZWN0b3JGYWN0b3J5LmpzLlxuXG4gIC8vIFNldCB0aGUgbGFuZ3VhZ2UgdXNlZCBmb3IgcmVjb2duaXRpb24uXG4gIGNvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX1JlY29MYW5ndWFnZSwgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSk7XG5cbiAgLy8gVGhlIGZvbGxvd2luZyBjb2RlIHNldHMgdGhlIG91dHB1dCBmb3JtYXQuXG4gIC8vIEFzIGFkdmlzZWQgYnkgdGhlIFNwZWVjaCB0ZWFtLCB0aGlzIEFQSSBtYXkgYmUgc3ViamVjdCB0byBmdXR1cmUgY2hhbmdlcy5cbiAgLy8gV2UgYXJlIG5vdCBlbmFibGluZyBvdXRwdXQgZm9ybWF0IG9wdGlvbiBiZWNhdXNlIGl0IGRvZXMgbm90IHNlbmQgZGV0YWlsZWQgb3V0cHV0IGZvcm1hdCB0byB0aGUgYm90LCByZW5kZXJpbmcgdGhpcyBvcHRpb24gdXNlbGVzcy5cbiAgLy8gY29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuU3BlZWNoU2VydmljZVJlc3BvbnNlX091dHB1dEZvcm1hdE9wdGlvbiwgT3V0cHV0Rm9ybWF0W091dHB1dEZvcm1hdC5EZXRhaWxlZF0pO1xuXG4gIC8vIFNldCB0aGUgdXNlciBJRCBmb3Igc3RhcnRpbmcgdGhlIGNvbnZlcnNhdGlvbi5cbiAgdXNlcklEICYmIGNvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9Gcm9tX0lkLCB1c2VySUQpO1xuXG4gIC8vIFNldCBDdXN0b20gU3BlZWNoIGFuZCBDdXN0b20gVm9pY2UuXG4gIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBpcyBjb3BpZWQgZnJvbSBDIywgYW5kIGl0IGlzIG5vdCB3b3JraW5nIHlldC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlLVNhbXBsZXMvQ29nbml0aXZlLVNlcnZpY2VzLURpcmVjdC1MaW5lLVNwZWVjaC1DbGllbnQvYmxvYi9tYXN0ZXIvRExTcGVlY2hDbGllbnQvTWFpbldpbmRvdy54YW1sLmNzXG4gIC8vIHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCAmJiBjb25maWcuc2V0U2VydmljZVByb3BlcnR5KCdjaWQnLCBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQsIFNlcnZpY2VQcm9wZXJ0eUNoYW5uZWwuVXJpUXVlcnlQYXJhbWV0ZXIpO1xuICAvLyBzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQgJiYgY29uZmlnLnNldFByb3BlcnR5KFByb3BlcnR5SWQuY29udmVyc2F0aW9uX0N1c3RvbV9Wb2ljZV9EZXBsb3ltZW50X0lkcywgc3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkKTtcblxuICBjb25zdCBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yID0gcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lKG5ldyBEaWFsb2dTZXJ2aWNlQ29ubmVjdG9yKGNvbmZpZywgYXVkaW9Db25maWcpKTtcblxuICAvLyBSZW5ldyB0b2tlbiBwZXIgaW50ZXJ2YWwuXG4gIGlmIChhdXRob3JpemF0aW9uVG9rZW4pIHtcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgIC8vICMyNjYwIElmIHRoZSBjb25uZWN0b3IgaGFzIGJlZW4gZGlzcG9zZWQsIHdlIHNob3VsZCBzdG9wIHJlbmV3aW5nIHRoZSB0b2tlbi5cblxuICAgICAgLy8gVE9ETzogV2Ugc2hvdWxkIHVzZSBhIHB1YmxpYyBpbXBsZW1lbnRhdGlvbiBpZiBTcGVlY2ggU0RLIGhhcyBvbmUgcmVsYXRlZCB0byBcInByaXZJc0Rpc3Bvc2VkXCIuXG4gICAgICBpZiAoZGlhbG9nU2VydmljZUNvbm5lY3Rvci5wcml2SXNEaXNwb3NlZCkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge1xuICAgICAgICBhdXRob3JpemF0aW9uVG9rZW4sXG4gICAgICAgIGRpcmVjdExpbmVTcGVlY2hIb3N0bmFtZTogbmV4dERpcmVjdExpbmVTcGVlY2hIb3N0bmFtZSxcbiAgICAgICAgcmVnaW9uOiBuZXh0UmVnaW9uXG4gICAgICB9ID0gYXdhaXQgcmVzb2x2ZUZ1bmN0aW9uT3JSZXR1cm5WYWx1ZShmZXRjaENyZWRlbnRpYWxzKTtcblxuICAgICAgaWYgKCFhdXRob3JpemF0aW9uVG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnYm90ZnJhbWV3b3JrLWRpcmVjdGxpbmVzcGVlY2gtc2RrOiBSZW5ldyB0b2tlbiBmYWlsZWQgYmVjYXVzZSBcImZldGNoQ3JlZGVudGlhbHNcIiBjYWxsIHJldHVybmVkIG5vIGF1dGhvcml6YXRpb24gdG9rZW4uJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyZWN0TGluZVNwZWVjaEhvc3RuYW1lKSB7XG4gICAgICAgIGlmIChkaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWUgIT09IG5leHREaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoLXNkazogXCJkaXJlY3RMaW5lU3BlZWNoSG9zdG5hbWVcIiBjaGFuZ2UgaXMgbm90IHN1cHBvcnRlZCBmb3IgcmVuZXdlZCB0b2tlbi4gQXV0aG9yaXphdGlvbiB0b2tlbiBpcyBub3QgcmVuZXdlZC4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlZ2lvbiAhPT0gbmV4dFJlZ2lvbikge1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAnYm90ZnJhbWV3b3JrLWRpcmVjdGxpbmVzcGVlY2gtc2RrOiBSZWdpb24gY2hhbmdlIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlbmV3ZWQgdG9rZW4uIEF1dGhvcml6YXRpb24gdG9rZW4gaXMgbm90IHJlbmV3ZWQuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGlhbG9nU2VydmljZUNvbm5lY3Rvci5hdXRob3JpemF0aW9uVG9rZW4gPSBhdXRob3JpemF0aW9uVG9rZW47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hdG9taWMtdXBkYXRlc1xuICAgIH0sIFRPS0VOX1JFTkVXQUxfSU5URVJWQUwpO1xuICB9XG5cbiAgLy8gUmVuZXcgdG9rZW4gcGVyIGludGVydmFsLlxuICBpZiAoZW5hYmxlSW50ZXJuYWxIVFRQU3VwcG9ydCkge1xuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gIzI2NjAgSWYgdGhlIGNvbm5lY3RvciBoYXMgYmVlbiBkaXNwb3NlZCwgd2Ugc2hvdWxkIHN0b3AgcmVuZXdpbmcgdGhlIHRva2VuLlxuXG4gICAgICAvLyBUT0RPOiBXZSBzaG91bGQgdXNlIGEgcHVibGljIGltcGxlbWVudGF0aW9uIGlmIFNwZWVjaCBTREsgaGFzIG9uZSByZWxhdGVkIHRvIFwicHJpdklzRGlzcG9zZWRcIi5cbiAgICAgIGlmIChkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnByaXZJc0Rpc3Bvc2VkKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZWZyZXNoZWREaXJlY3RMaW5lVG9rZW4gPSBhd2FpdCByZWZyZXNoRGlyZWN0TGluZVRva2VuKGRpcmVjdExpbmVUb2tlbik7XG5cbiAgICAgIGlmICghcmVmcmVzaGVkRGlyZWN0TGluZVRva2VuKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ2JvdGZyYW1ld29yay1kaXJlY3RsaW5lc3BlZWNoLXNkazogUmVuZXcgdG9rZW4gZmFpbGVkIGJlY2F1c2UgY2FsbCB0byByZWZyZXNoIHRva2VuIERpcmVjdCBMaW5lIEFQSSBkaWQgbm90IHJldHVybiBhIG5ldyB0b2tlbi4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbmZpZy5zZXRQcm9wZXJ0eShQcm9wZXJ0eUlkLkNvbnZlcnNhdGlvbl9BZ2VudF9Db25uZWN0aW9uX0lkLCByZWZyZXNoZWREaXJlY3RMaW5lVG9rZW4pO1xuXG4gICAgICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnByb3BlcnRpZXMuc2V0UHJvcGVydHkoXG4gICAgICAgIFByb3BlcnR5SWQuQ29udmVyc2F0aW9uX0FnZW50X0Nvbm5lY3Rpb25fSWQsXG4gICAgICAgIHJlZnJlc2hlZERpcmVjdExpbmVUb2tlblxuICAgICAgKTtcbiAgICAgIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IuY29ubmVjdCgpO1xuICAgIH0sIERJUkVDVF9MSU5FX1RPS0VOX1JFTkVXQUxfSU5URVJWQUwpO1xuICB9XG5cbiAgY29uc3QgZGlyZWN0TGluZSA9IG5ldyBEaXJlY3RMaW5lU3BlZWNoKHsgZGlhbG9nU2VydmljZUNvbm5lY3RvciB9KTtcblxuICBjb25zdCB3ZWJTcGVlY2hQb255ZmlsbEZhY3RvcnkgPSBjcmVhdGVXZWJTcGVlY2hQb255ZmlsbEZhY3Rvcnkoe1xuICAgIGF1ZGlvQ29udGV4dCxcbiAgICBlbmFibGVUZWxlbWV0cnksXG4gICAgcmVjb2duaXplcjogZGlhbG9nU2VydmljZUNvbm5lY3RvcixcbiAgICB0ZXh0Tm9ybWFsaXphdGlvblxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGRpcmVjdExpbmUsXG4gICAgd2ViU3BlZWNoUG9ueWZpbGxGYWN0b3J5XG4gIH07XG59XG4iXX0=