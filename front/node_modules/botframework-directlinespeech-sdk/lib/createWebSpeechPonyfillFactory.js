"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _abortControllerEs = require("abort-controller-es5");

var _SpeechToText = require("web-speech-cognitive-services/lib/SpeechServices/SpeechToText");

var _createTaskQueue2 = _interopRequireDefault(require("./createTaskQueue"));

var _es = _interopRequireWildcard(require("event-target-shim/es5"));

var _playCognitiveServicesStream = _interopRequireDefault(require("./playCognitiveServicesStream"));

var _playWhiteNoise = _interopRequireDefault(require("./playWhiteNoise"));

var _SpeechSynthesisAudioStreamUtterance = _interopRequireDefault(require("./SpeechSynthesisAudioStreamUtterance"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _default(_ref) {
  var audioContext = _ref.audioContext,
      enableTelemetry = _ref.enableTelemetry,
      _ref$ponyfill = _ref.ponyfill,
      ponyfill = _ref$ponyfill === void 0 ? {
    AudioContext: window.AudioContext || window.webkitAudioContext
  } : _ref$ponyfill,
      recognizer = _ref.recognizer,
      textNormalization = _ref.textNormalization;

  if (!ponyfill.AudioContext) {
    console.warn('botframework-directlinespeech-sdk: This browser does not support Web Audio API. Speech support is disabled.');
    return function () {
      return {};
    };
  }

  return function () {
    var _createSpeechRecognit = (0, _SpeechToText.createSpeechRecognitionPonyfillFromRecognizer)({
      createRecognizer: function createRecognizer() {
        return recognizer;
      },
      enableTelemetry: enableTelemetry,
      looseEvents: true,
      textNormalization: textNormalization
    }),
        SpeechGrammarList = _createSpeechRecognit.SpeechGrammarList,
        SpeechRecognition = _createSpeechRecognit.SpeechRecognition;

    if (!audioContext) {
      audioContext = new ponyfill.AudioContext();
    }

    var _createTaskQueue = (0, _createTaskQueue2.default)(),
        cancelAll = _createTaskQueue.cancelAll,
        push = _createTaskQueue.push;

    var SpeechSynthesis = /*#__PURE__*/function (_EventTarget) {
      (0, _inherits2.default)(SpeechSynthesis, _EventTarget);

      var _super = _createSuper(SpeechSynthesis);

      function SpeechSynthesis() {
        (0, _classCallCheck2.default)(this, SpeechSynthesis);
        return _super.apply(this, arguments);
      }

      (0, _createClass2.default)(SpeechSynthesis, [{
        key: "cancel",
        value: function cancel() {
          cancelAll();
        } // Returns an empty array.
        // Synthesis is done on the bot side, the content of the voice list is not meaningful on the client side.

      }, {
        key: "getVoices",
        value: function getVoices() {
          return [];
        }
      }, {
        key: "speak",
        value: function speak(utterance) {
          var _push = push(function () {
            var controller = new _abortControllerEs.AbortController();
            var signal = controller.signal;
            return {
              abort: controller.abort.bind(controller),
              result: (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        utterance.dispatchEvent(new _es.Event('start'));
                        _context.prev = 1;

                        if (!utterance.audioStream) {
                          _context.next = 7;
                          break;
                        }

                        _context.next = 5;
                        return (0, _playCognitiveServicesStream.default)(audioContext, utterance.audioStream, {
                          signal: signal
                        });

                      case 5:
                        _context.next = 9;
                        break;

                      case 7:
                        _context.next = 9;
                        return (0, _playWhiteNoise.default)(audioContext);

                      case 9:
                        _context.next = 15;
                        break;

                      case 11:
                        _context.prev = 11;
                        _context.t0 = _context["catch"](1);

                        if (!(_context.t0.message !== 'aborted')) {
                          _context.next = 15;
                          break;
                        }

                        return _context.abrupt("return", utterance.dispatchEvent(new ErrorEvent(_context.t0)));

                      case 15:
                        utterance.dispatchEvent(new _es.Event('end'));

                      case 16:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[1, 11]]);
              }))()
            };
          }),
              result = _push.result; // Catching the error to prevent uncaught promise error due to cancellation.


          result.catch(function (error) {
            if (!/^cancelled/i.test(error.message)) {
              throw error;
            }
          });
        }
      }, {
        key: "onvoiceschanged",
        get: function get() {
          return (0, _es.getEventAttributeValue)(this, 'voiceschanged');
        },
        set: function set(value) {
          (0, _es.setEventAttributeValue)(this, 'voiceschanged', value);
        }
      }]);
      return SpeechSynthesis;
    }(_es.default);

    return {
      SpeechGrammarList: SpeechGrammarList,
      SpeechRecognition: SpeechRecognition,
      speechSynthesis: new SpeechSynthesis(),
      SpeechSynthesisUtterance: _SpeechSynthesisAudioStreamUtterance.default
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,