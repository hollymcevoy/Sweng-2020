"use strict";

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/es.object.get-own-property-descriptor.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.get-own-property-descriptors.js");

require("core-js/modules/es.object.define-properties.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.weak-map.js");

require("core-js/modules/web.dom-collections.iterator.js");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.object.from-entries.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.object.entries.js");

require("core-js/modules/web.timers.js");

var _createInstance = _interopRequireDefault(require("@emotion/css/create-instance"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AutoCenter = _interopRequireDefault(require("./AutoCenter"));

var _computeScrollLeft = _interopRequireDefault(require("./computeScrollLeft"));

var _createBasicStyleSet = _interopRequireDefault(require("./createBasicStyleSet"));

var _createCSSKey = _interopRequireDefault(require("./util/createCSSKey"));

var _FunctionContext = _interopRequireDefault(require("./FunctionContext"));

var _getView = _interopRequireDefault(require("./getView"));

var _InternalContext = _interopRequireDefault(require("./InternalContext"));

var _LegacyContext = _interopRequireDefault(require("./LegacyContext"));

var _patchStyleOptions = _interopRequireDefault(require("./patchStyleOptions"));

var _PropsContext = _interopRequireDefault(require("./PropsContext"));

var _useAnimateScrollLeft = _interopRequireDefault(require("./hooks/internal/useAnimateScrollLeft"));

var _useCallbackRefWithSubscribe = _interopRequireDefault(require("./hooks/internal/useCallbackRefWithSubscribe"));

var _useObserveScrollLeft = _interopRequireDefault(require("./hooks/internal/useObserveScrollLeft"));

var _ViewContext = _interopRequireDefault(require("./ViewContext"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// We pool the emotion, so we don't create a new set of <style> for every component and reuse as much as we could.
var emotionPool = {};

var Composer = function Composer(_ref) {
  var children = _ref.children,
      dir = _ref.dir,
      height = _ref.height,
      nonce = _ref.nonce,
      numItems = _ref.numItems,
      styleOptions = _ref.styleOptions,
      styleSet = _ref.styleSet;
  dir = dir === 'ltr' || dir === 'rtl' ? dir : undefined;
  var patchedStyleOptions = (0, _react.useMemo)(function () {
    return (0, _patchStyleOptions["default"])(styleOptions);
  }, [styleOptions]);
  var patchedStyleSet = (0, _react.useMemo)(function () {
    return styleSet || (0, _createBasicStyleSet["default"])(patchedStyleOptions);
  }, [patchedStyleOptions, styleSet]);
  var styleSetClassNames = (0, _react.useMemo)(function () {
    var emotion = emotionPool[nonce] || (emotionPool[nonce] = (0, _createInstance["default"])({
      key: "react-film--css-".concat((0, _createCSSKey["default"])()),
      nonce: nonce
    }));
    return Object.fromEntries(Object.entries(patchedStyleSet).map(function (_ref2) {
      var _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
          name = _ref3[0],
          style = _ref3[1];

      return [name, emotion.css(style) + ''];
    }));
  }, [nonce, patchedStyleSet]);

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      _ = _useState2[0],
      forceRender = _useState2[1];

  var itemContainerCallbackRefWithSubscribe = (0, _useCallbackRefWithSubscribe["default"])();
  var scrollableCallbackRefWithSubscribe = (0, _useCallbackRefWithSubscribe["default"])();
  var scrollLeftRef = (0, _react.useRef)(null);
  var scrollTimeoutRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    return function () {
      return clearTimeout(scrollTimeoutRef.current);
    };
  }, [scrollTimeoutRef]);
  var scrollTo = (0, _react.useCallback)(function (scrollFn) {
    var view = (0, _getView["default"])(dir, scrollableCallbackRefWithSubscribe.current, itemContainerCallbackRefWithSubscribe.current, scrollLeftRef.current);

    if (view) {
      var index = view.index,
          indexFraction = view.indexFraction;
      var targetIndex = scrollFn({
        index: index,
        indexFraction: indexFraction
      });

      if (typeof targetIndex === 'number') {
        scrollLeftRef.current = (0, _computeScrollLeft["default"])(dir, scrollableCallbackRefWithSubscribe.current, itemContainerCallbackRefWithSubscribe.current, targetIndex);
        forceRender({});
      }
    }
  }, [dir, forceRender, itemContainerCallbackRefWithSubscribe, scrollableCallbackRefWithSubscribe, scrollLeftRef]);
  var scrollOneLeft = (0, _react.useCallback)(function () {
    scrollTo(function (_ref4) {
      var indexFraction = _ref4.indexFraction;
      return dir === 'rtl' ? Math.floor(indexFraction) + 1 : Math.ceil(indexFraction) - 1;
    });
  }, [dir, scrollTo]);
  var scrollOneRight = (0, _react.useCallback)(function () {
    scrollTo(function (_ref5) {
      var indexFraction = _ref5.indexFraction;
      return dir === 'rtl' ? Math.ceil(indexFraction) - 1 : Math.floor(indexFraction) + 1;
    });
  }, [dir, scrollTo]);
  var functionContext = (0, _react.useMemo)(function () {
    return {
      scrollTo: scrollTo,
      scrollOneLeft: scrollOneLeft,
      scrollOneRight: scrollOneRight
    };
  }, [scrollTo, scrollOneLeft, scrollOneRight]);
  var internalContext = (0, _react.useMemo)(function () {
    return {
      itemContainerCallbackRefWithSubscribe: itemContainerCallbackRefWithSubscribe,
      scrollableCallbackRefWithSubscribe: scrollableCallbackRefWithSubscribe
    };
  }, [itemContainerCallbackRefWithSubscribe, scrollableCallbackRefWithSubscribe]);
  var propsContext = (0, _react.useMemo)(function () {
    return {
      dir: dir,
      height: height,
      nonce: nonce,
      numItems: numItems,
      styleOptions: patchedStyleOptions,
      styleSetClassNames: styleSetClassNames
    };
  }, [dir, height, nonce, numItems, patchedStyleOptions, styleSetClassNames]);

  var _useState3 = (0, _react.useState)({
    index: 0,
    indexFraction: 0,
    scrollBarPercentage: '0%',
    scrollBarWidth: '0%',
    scrolling: false
  }),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      viewContext = _useState4[0],
      setViewContext = _useState4[1]; // This will setViewContext and reset the "scrolling" flag after a period of time.


  var setViewContext2 = (0, _react.useCallback)(function (nextViewContext) {
    setViewContext(nextViewContext);
    clearTimeout(scrollTimeoutRef.current);

    if (nextViewContext.scrolling) {
      scrollTimeoutRef.current = setTimeout(function () {
        return setViewContext(_objectSpread(_objectSpread({}, nextViewContext), {}, {
          scrolling: false
        }));
      }, // eslint-disable-next-line no-magic-numbers
      500);
    }
  }, [scrollTimeoutRef, setViewContext]);
  var handleScroll = (0, _react.useCallback)(function (_ref6) {
    var scrollBarPercentage = _ref6.fraction,
        initial = _ref6.initial,
        scrollBarWidth = _ref6.width;
    var view = (0, _getView["default"])(dir, scrollableCallbackRefWithSubscribe.current, itemContainerCallbackRefWithSubscribe.current, scrollLeftRef.current);

    if (view) {
      var index = view.index,
          indexFraction = view.indexFraction;
      setViewContext2({
        index: index,
        indexFraction: indexFraction,
        scrolling: !initial,
        scrollBarPercentage: scrollBarPercentage,
        scrollBarWidth: scrollBarWidth
      });
    }
  }, [dir, itemContainerCallbackRefWithSubscribe, scrollableCallbackRefWithSubscribe, scrollLeftRef, setViewContext2]);
  var handleScrollToEnd = (0, _react.useCallback)(function () {
    scrollLeftRef.current = null;
    forceRender({});
  }, [forceRender, scrollLeftRef]);
  var legacyContext = (0, _react.useMemo)(function () {
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, functionContext), internalContext), propsContext), viewContext);
  }, [functionContext, internalContext, propsContext, viewContext]);
  (0, _useAnimateScrollLeft["default"])(typeof scrollLeftRef.current === 'number' && scrollableCallbackRefWithSubscribe.current, scrollLeftRef.current, handleScrollToEnd);
  (0, _react.useEffect)(function () {
    return scrollableCallbackRefWithSubscribe.subscribe(function (current) {
      if (current) {
        current.addEventListener('pointerdown', handleScrollToEnd, {
          passive: true
        });
        return function () {
          return current.removeEventListener('pointerdown', handleScrollToEnd);
        };
      }
    });
  }, [handleScrollToEnd, scrollableCallbackRefWithSubscribe]);
  (0, _useObserveScrollLeft["default"])(scrollableCallbackRefWithSubscribe, handleScroll);
  return /*#__PURE__*/_react["default"].createElement(_PropsContext["default"].Provider, {
    value: propsContext
  }, /*#__PURE__*/_react["default"].createElement(_InternalContext["default"].Provider, {
    value: internalContext
  }, /*#__PURE__*/_react["default"].createElement(_FunctionContext["default"].Provider, {
    value: functionContext
  }, /*#__PURE__*/_react["default"].createElement(_ViewContext["default"].Provider, {
    value: viewContext
  }, /*#__PURE__*/_react["default"].createElement(_LegacyContext["default"].Provider, {
    value: legacyContext
  }, children, patchedStyleOptions.autoCenter && /*#__PURE__*/_react["default"].createElement(_AutoCenter["default"], null))))));
};

Composer.defaultProps = {
  children: undefined,
  dir: undefined,
  height: undefined,
  nonce: undefined,
  styleOptions: undefined,
  styleSet: undefined
};
Composer.propTypes = {
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].element), _propTypes["default"].element]),
  dir: _propTypes["default"].oneOf(['ltr', 'rtl']),
  height: _propTypes["default"].number,
  nonce: _propTypes["default"].string,
  numItems: _propTypes["default"].number.isRequired,
  styleOptions: _propTypes["default"].any,
  styleSet: _propTypes["default"].any
};
var _default = Composer;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,