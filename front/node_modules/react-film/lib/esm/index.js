import BasicFilm from './BasicFilm';
import Composer from './Composer';
import Context from './LegacyContext';
import createBasicStyleSet from './createBasicStyleSet';
import DeprecatedFilmStrip from './DeprecatedFilmStrip';
import Dots from './Dots';
import Filmstrip from './Filmstrip';
import Flipper from './Flipper';
import ReactFilm from './ReactFilm';
import ScrollBar from './ScrollBar';
import useDir from './hooks/useDir';
import useHeight from './hooks/useHeight';
import useIndex from './hooks/useIndex';
import useIndexFraction from './hooks/useIndexFraction';
import useItemContainerCallbackRef from './hooks/useItemContainerCallbackRef';
import useNumItems from './hooks/useNumItems';
import useScrollableCallbackRef from './hooks/useScrollableCallbackRef';
import useScrollBarPercentage from './hooks/useScrollBarPercentage';
import useScrollBarWidth from './hooks/useScrollBarWidth';
import useScrolling from './hooks/useScrolling';
import useScrollOneLeft from './hooks/useScrollOneLeft';
import useScrollOneRight from './hooks/useScrollOneRight';
import useScrollTo from './hooks/useScrollTo';
import useStyleOptions from './hooks/useStyleOptions';
import useStyleSetClassNames from './hooks/useStyleSetClassNames';
export default ReactFilm;
export { BasicFilm, Composer, Context, createBasicStyleSet, DeprecatedFilmStrip as FilmStrip, Dots, Filmstrip, Flipper, ScrollBar, useDir, useHeight, useIndex, useIndexFraction, useItemContainerCallbackRef, useNumItems, useScrollableCallbackRef, useScrollBarPercentage, useScrollBarWidth, useScrolling, useScrollOneLeft, useScrollOneRight, useScrollTo, useStyleOptions, useStyleSetClassNames };

if (typeof document !== 'undefined' && document.head) {
  var meta = document.createElement('meta');
  meta.setAttribute('name', 'react-film'); // eslint-disable-next-line no-undef

  meta.setAttribute('content', "version=".concat("3.1.0"));
  document.head.appendChild(meta);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJCYXNpY0ZpbG0iLCJDb21wb3NlciIsIkNvbnRleHQiLCJjcmVhdGVCYXNpY1N0eWxlU2V0IiwiRGVwcmVjYXRlZEZpbG1TdHJpcCIsIkRvdHMiLCJGaWxtc3RyaXAiLCJGbGlwcGVyIiwiUmVhY3RGaWxtIiwiU2Nyb2xsQmFyIiwidXNlRGlyIiwidXNlSGVpZ2h0IiwidXNlSW5kZXgiLCJ1c2VJbmRleEZyYWN0aW9uIiwidXNlSXRlbUNvbnRhaW5lckNhbGxiYWNrUmVmIiwidXNlTnVtSXRlbXMiLCJ1c2VTY3JvbGxhYmxlQ2FsbGJhY2tSZWYiLCJ1c2VTY3JvbGxCYXJQZXJjZW50YWdlIiwidXNlU2Nyb2xsQmFyV2lkdGgiLCJ1c2VTY3JvbGxpbmciLCJ1c2VTY3JvbGxPbmVMZWZ0IiwidXNlU2Nyb2xsT25lUmlnaHQiLCJ1c2VTY3JvbGxUbyIsInVzZVN0eWxlT3B0aW9ucyIsInVzZVN0eWxlU2V0Q2xhc3NOYW1lcyIsIkZpbG1TdHJpcCIsImRvY3VtZW50IiwiaGVhZCIsIm1ldGEiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsYUFBdEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLFlBQXJCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixpQkFBcEI7QUFDQSxPQUFPQyxtQkFBUCxNQUFnQyx1QkFBaEM7QUFDQSxPQUFPQyxtQkFBUCxNQUFnQyx1QkFBaEM7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLFFBQWpCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsV0FBcEI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLGFBQXRCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0QjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsZ0JBQW5CO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixtQkFBdEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLGtCQUFyQjtBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLDBCQUE3QjtBQUNBLE9BQU9DLDJCQUFQLE1BQXdDLHFDQUF4QztBQUNBLE9BQU9DLFdBQVAsTUFBd0IscUJBQXhCO0FBQ0EsT0FBT0Msd0JBQVAsTUFBcUMsa0NBQXJDO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsZ0NBQW5DO0FBQ0EsT0FBT0MsaUJBQVAsTUFBOEIsMkJBQTlCO0FBQ0EsT0FBT0MsWUFBUCxNQUF5QixzQkFBekI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QiwwQkFBN0I7QUFDQSxPQUFPQyxpQkFBUCxNQUE4QiwyQkFBOUI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLHFCQUF4QjtBQUNBLE9BQU9DLGVBQVAsTUFBNEIseUJBQTVCO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsK0JBQWxDO0FBRUEsZUFBZWhCLFNBQWY7QUFFQSxTQUNFUixTQURGLEVBRUVDLFFBRkYsRUFHRUMsT0FIRixFQUlFQyxtQkFKRixFQUtFQyxtQkFBbUIsSUFBSXFCLFNBTHpCLEVBTUVwQixJQU5GLEVBT0VDLFNBUEYsRUFRRUMsT0FSRixFQVNFRSxTQVRGLEVBVUVDLE1BVkYsRUFXRUMsU0FYRixFQVlFQyxRQVpGLEVBYUVDLGdCQWJGLEVBY0VDLDJCQWRGLEVBZUVDLFdBZkYsRUFnQkVDLHdCQWhCRixFQWlCRUMsc0JBakJGLEVBa0JFQyxpQkFsQkYsRUFtQkVDLFlBbkJGLEVBb0JFQyxnQkFwQkYsRUFxQkVDLGlCQXJCRixFQXNCRUMsV0F0QkYsRUF1QkVDLGVBdkJGLEVBd0JFQyxxQkF4QkY7O0FBMkJBLElBQUksT0FBT0UsUUFBUCxLQUFvQixXQUFwQixJQUFtQ0EsUUFBUSxDQUFDQyxJQUFoRCxFQUFzRDtBQUNwRCxNQUFNQyxJQUFJLEdBQUdGLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixNQUF2QixDQUFiO0FBRUFELEVBQUFBLElBQUksQ0FBQ0UsWUFBTCxDQUFrQixNQUFsQixFQUEwQixZQUExQixFQUhvRCxDQUtwRDs7QUFDQUYsRUFBQUEsSUFBSSxDQUFDRSxZQUFMLENBQWtCLFNBQWxCO0FBRUFKLEVBQUFBLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjSSxXQUFkLENBQTBCSCxJQUExQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2ljRmlsbSBmcm9tICcuL0Jhc2ljRmlsbSc7XG5pbXBvcnQgQ29tcG9zZXIgZnJvbSAnLi9Db21wb3Nlcic7XG5pbXBvcnQgQ29udGV4dCBmcm9tICcuL0xlZ2FjeUNvbnRleHQnO1xuaW1wb3J0IGNyZWF0ZUJhc2ljU3R5bGVTZXQgZnJvbSAnLi9jcmVhdGVCYXNpY1N0eWxlU2V0JztcbmltcG9ydCBEZXByZWNhdGVkRmlsbVN0cmlwIGZyb20gJy4vRGVwcmVjYXRlZEZpbG1TdHJpcCc7XG5pbXBvcnQgRG90cyBmcm9tICcuL0RvdHMnO1xuaW1wb3J0IEZpbG1zdHJpcCBmcm9tICcuL0ZpbG1zdHJpcCc7XG5pbXBvcnQgRmxpcHBlciBmcm9tICcuL0ZsaXBwZXInO1xuaW1wb3J0IFJlYWN0RmlsbSBmcm9tICcuL1JlYWN0RmlsbSc7XG5pbXBvcnQgU2Nyb2xsQmFyIGZyb20gJy4vU2Nyb2xsQmFyJztcbmltcG9ydCB1c2VEaXIgZnJvbSAnLi9ob29rcy91c2VEaXInO1xuaW1wb3J0IHVzZUhlaWdodCBmcm9tICcuL2hvb2tzL3VzZUhlaWdodCc7XG5pbXBvcnQgdXNlSW5kZXggZnJvbSAnLi9ob29rcy91c2VJbmRleCc7XG5pbXBvcnQgdXNlSW5kZXhGcmFjdGlvbiBmcm9tICcuL2hvb2tzL3VzZUluZGV4RnJhY3Rpb24nO1xuaW1wb3J0IHVzZUl0ZW1Db250YWluZXJDYWxsYmFja1JlZiBmcm9tICcuL2hvb2tzL3VzZUl0ZW1Db250YWluZXJDYWxsYmFja1JlZic7XG5pbXBvcnQgdXNlTnVtSXRlbXMgZnJvbSAnLi9ob29rcy91c2VOdW1JdGVtcyc7XG5pbXBvcnQgdXNlU2Nyb2xsYWJsZUNhbGxiYWNrUmVmIGZyb20gJy4vaG9va3MvdXNlU2Nyb2xsYWJsZUNhbGxiYWNrUmVmJztcbmltcG9ydCB1c2VTY3JvbGxCYXJQZXJjZW50YWdlIGZyb20gJy4vaG9va3MvdXNlU2Nyb2xsQmFyUGVyY2VudGFnZSc7XG5pbXBvcnQgdXNlU2Nyb2xsQmFyV2lkdGggZnJvbSAnLi9ob29rcy91c2VTY3JvbGxCYXJXaWR0aCc7XG5pbXBvcnQgdXNlU2Nyb2xsaW5nIGZyb20gJy4vaG9va3MvdXNlU2Nyb2xsaW5nJztcbmltcG9ydCB1c2VTY3JvbGxPbmVMZWZ0IGZyb20gJy4vaG9va3MvdXNlU2Nyb2xsT25lTGVmdCc7XG5pbXBvcnQgdXNlU2Nyb2xsT25lUmlnaHQgZnJvbSAnLi9ob29rcy91c2VTY3JvbGxPbmVSaWdodCc7XG5pbXBvcnQgdXNlU2Nyb2xsVG8gZnJvbSAnLi9ob29rcy91c2VTY3JvbGxUbyc7XG5pbXBvcnQgdXNlU3R5bGVPcHRpb25zIGZyb20gJy4vaG9va3MvdXNlU3R5bGVPcHRpb25zJztcbmltcG9ydCB1c2VTdHlsZVNldENsYXNzTmFtZXMgZnJvbSAnLi9ob29rcy91c2VTdHlsZVNldENsYXNzTmFtZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdEZpbG07XG5cbmV4cG9ydCB7XG4gIEJhc2ljRmlsbSxcbiAgQ29tcG9zZXIsXG4gIENvbnRleHQsXG4gIGNyZWF0ZUJhc2ljU3R5bGVTZXQsXG4gIERlcHJlY2F0ZWRGaWxtU3RyaXAgYXMgRmlsbVN0cmlwLFxuICBEb3RzLFxuICBGaWxtc3RyaXAsXG4gIEZsaXBwZXIsXG4gIFNjcm9sbEJhcixcbiAgdXNlRGlyLFxuICB1c2VIZWlnaHQsXG4gIHVzZUluZGV4LFxuICB1c2VJbmRleEZyYWN0aW9uLFxuICB1c2VJdGVtQ29udGFpbmVyQ2FsbGJhY2tSZWYsXG4gIHVzZU51bUl0ZW1zLFxuICB1c2VTY3JvbGxhYmxlQ2FsbGJhY2tSZWYsXG4gIHVzZVNjcm9sbEJhclBlcmNlbnRhZ2UsXG4gIHVzZVNjcm9sbEJhcldpZHRoLFxuICB1c2VTY3JvbGxpbmcsXG4gIHVzZVNjcm9sbE9uZUxlZnQsXG4gIHVzZVNjcm9sbE9uZVJpZ2h0LFxuICB1c2VTY3JvbGxUbyxcbiAgdXNlU3R5bGVPcHRpb25zLFxuICB1c2VTdHlsZVNldENsYXNzTmFtZXNcbn07XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmhlYWQpIHtcbiAgY29uc3QgbWV0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ21ldGEnKTtcblxuICBtZXRhLnNldEF0dHJpYnV0ZSgnbmFtZScsICdyZWFjdC1maWxtJyk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIG1ldGEuc2V0QXR0cmlidXRlKCdjb250ZW50JywgYHZlcnNpb249JHtwcm9jZXNzLmVudi5ucG1fcGFja2FnZV92ZXJzaW9ufWApO1xuXG4gIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobWV0YSk7XG59XG4iXX0=