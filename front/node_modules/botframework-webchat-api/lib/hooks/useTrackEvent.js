"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTrackEvent;

var _react = require("react");

var _createCustomEvent = _interopRequireDefault(require("../utils/createCustomEvent"));

var _isObject = _interopRequireDefault(require("../utils/isObject"));

var _useReadTelemetryDimensions = _interopRequireDefault(require("./internal/useReadTelemetryDimensions"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./internal/useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isNonNegativeFiniteNumberOrString(value) {
  return typeof value === 'number' && isFinite(value) && value >= 0 || typeof value === 'string';
}

function useTrackEvent() {
  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      onTelemetry = _useWebChatAPIContext.onTelemetry;

  var readTelemetryDimensions = (0, _useReadTelemetryDimensions.default)();
  var trackEvent = (0, _react.useCallback)(function (level, name, data) {
    if (!name || typeof name !== 'string') {
      return console.warn('botframework-webchat: "name" passed to "useTrackEvent" hook must be a string.');
    }

    if (typeof data !== 'undefined') {
      if ((0, _isObject.default)(data)) {
        if (!Object.values(data).every(function (value) {
          return isNonNegativeFiniteNumberOrString(value);
        })) {
          return console.warn('botframework-webchat: Every value in "data" map passed to "useTrackEvent" hook must be a non-negative finite number or string.');
        }
      } else if (!isNonNegativeFiniteNumberOrString(data)) {
        return console.warn('botframework-webchat: "data" passed to "useTrackEvent" hook must be a non-negative finite number or string.');
      }
    }

    onTelemetry && onTelemetry((0, _createCustomEvent.default)('event', {
      data: data,
      dimensions: readTelemetryDimensions(),
      level: level,
      name: name
    }));
  }, [onTelemetry, readTelemetryDimensions]);
  return (0, _react.useMemo)(function () {
    var info = trackEvent.bind(null, 'info');
    info.debug = trackEvent.bind(null, 'debug');
    info.error = trackEvent.bind(null, 'error');
    info.info = info;
    info.warn = trackEvent.bind(null, 'warn');
    return info;
  }, [trackEvent]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VUcmFja0V2ZW50LnRzIl0sIm5hbWVzIjpbImlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyIsInZhbHVlIiwiaXNGaW5pdGUiLCJ1c2VUcmFja0V2ZW50Iiwib25UZWxlbWV0cnkiLCJyZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyIsInRyYWNrRXZlbnQiLCJsZXZlbCIsIm5hbWUiLCJkYXRhIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3QiLCJ2YWx1ZXMiLCJldmVyeSIsImRpbWVuc2lvbnMiLCJpbmZvIiwiYmluZCIsImRlYnVnIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLFNBQVNBLGlDQUFULENBQTJDQyxLQUEzQyxFQUFrRDtBQUNoRCxTQUFRLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJDLFFBQVEsQ0FBQ0QsS0FBRCxDQUFyQyxJQUFnREEsS0FBSyxJQUFJLENBQTFELElBQWdFLE9BQU9BLEtBQVAsS0FBaUIsUUFBeEY7QUFDRDs7QUFVYyxTQUFTRSxhQUFULEdBQTZDO0FBQzFELDhCQUF3QixxQ0FBeEI7QUFBQSxNQUFRQyxXQUFSLHlCQUFRQSxXQUFSOztBQUNBLE1BQU1DLHVCQUF1QixHQUFHLDBDQUFoQztBQUVBLE1BQU1DLFVBQVUsR0FBRyx3QkFDakIsVUFBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsRUFBdUI7QUFDckIsUUFBSSxDQUFDRCxJQUFELElBQVMsT0FBT0EsSUFBUCxLQUFnQixRQUE3QixFQUF1QztBQUNyQyxhQUFPRSxPQUFPLENBQUNDLElBQVIsQ0FBYSwrRUFBYixDQUFQO0FBQ0Q7O0FBRUQsUUFBSSxPQUFPRixJQUFQLEtBQWdCLFdBQXBCLEVBQWlDO0FBQy9CLFVBQUksdUJBQVNBLElBQVQsQ0FBSixFQUFvQjtBQUNsQixZQUFJLENBQUNHLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSixJQUFkLEVBQW9CSyxLQUFwQixDQUEwQixVQUFBYixLQUFLO0FBQUEsaUJBQUlELGlDQUFpQyxDQUFDQyxLQUFELENBQXJDO0FBQUEsU0FBL0IsQ0FBTCxFQUFtRjtBQUNqRixpQkFBT1MsT0FBTyxDQUFDQyxJQUFSLENBQ0wsZ0lBREssQ0FBUDtBQUdEO0FBQ0YsT0FORCxNQU1PLElBQUksQ0FBQ1gsaUNBQWlDLENBQUNTLElBQUQsQ0FBdEMsRUFBOEM7QUFDbkQsZUFBT0MsT0FBTyxDQUFDQyxJQUFSLENBQ0wsNkdBREssQ0FBUDtBQUdEO0FBQ0Y7O0FBRURQLElBQUFBLFdBQVcsSUFDVEEsV0FBVyxDQUFDLGdDQUFrQixPQUFsQixFQUEyQjtBQUFFSyxNQUFBQSxJQUFJLEVBQUpBLElBQUY7QUFBUU0sTUFBQUEsVUFBVSxFQUFFVix1QkFBdUIsRUFBM0M7QUFBK0NFLE1BQUFBLEtBQUssRUFBTEEsS0FBL0M7QUFBc0RDLE1BQUFBLElBQUksRUFBSkE7QUFBdEQsS0FBM0IsQ0FBRCxDQURiO0FBRUQsR0F0QmdCLEVBdUJqQixDQUFDSixXQUFELEVBQWNDLHVCQUFkLENBdkJpQixDQUFuQjtBQTBCQSxTQUFPLG9CQUFRLFlBQU07QUFDbkIsUUFBTVcsSUFBd0IsR0FBR1YsVUFBVSxDQUFDVyxJQUFYLENBQWdCLElBQWhCLEVBQXNCLE1BQXRCLENBQWpDO0FBRUFELElBQUFBLElBQUksQ0FBQ0UsS0FBTCxHQUFhWixVQUFVLENBQUNXLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsT0FBdEIsQ0FBYjtBQUNBRCxJQUFBQSxJQUFJLENBQUNHLEtBQUwsR0FBYWIsVUFBVSxDQUFDVyxJQUFYLENBQWdCLElBQWhCLEVBQXNCLE9BQXRCLENBQWI7QUFDQUQsSUFBQUEsSUFBSSxDQUFDQSxJQUFMLEdBQVlBLElBQVo7QUFDQUEsSUFBQUEsSUFBSSxDQUFDTCxJQUFMLEdBQVlMLFVBQVUsQ0FBQ1csSUFBWCxDQUFnQixJQUFoQixFQUFzQixNQUF0QixDQUFaO0FBRUEsV0FBT0QsSUFBUDtBQUNELEdBVE0sRUFTSixDQUFDVixVQUFELENBVEksQ0FBUDtBQVVEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNyZWF0ZUN1c3RvbUV2ZW50IGZyb20gJy4uL3V0aWxzL2NyZWF0ZUN1c3RvbUV2ZW50JztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuLi91dGlscy9pc09iamVjdCc7XG5pbXBvcnQgdXNlUmVhZFRlbGVtZXRyeURpbWVuc2lvbnMgZnJvbSAnLi9pbnRlcm5hbC91c2VSZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyc7XG5pbXBvcnQgdXNlV2ViQ2hhdEFQSUNvbnRleHQgZnJvbSAnLi9pbnRlcm5hbC91c2VXZWJDaGF0QVBJQ29udGV4dCc7XG5cbmZ1bmN0aW9uIGlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpICYmIHZhbHVlID49IDApIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5cbnR5cGUgVHJhY2tFdmVudEZ1bmN0aW9uID0ge1xuICAobmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkO1xuICBkZWJ1ZzogKG5hbWU6IHN0cmluZywgZGF0YTogYW55KSA9PiB2b2lkO1xuICBlcnJvcjogKG5hbWU6IHN0cmluZywgZGF0YTogYW55KSA9PiB2b2lkO1xuICBpbmZvOiAobmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHZvaWQ7XG4gIHdhcm46IChuYW1lOiBzdHJpbmcsIGRhdGE6IGFueSkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRyYWNrRXZlbnQoKTogVHJhY2tFdmVudEZ1bmN0aW9uIHtcbiAgY29uc3QgeyBvblRlbGVtZXRyeSB9ID0gdXNlV2ViQ2hhdEFQSUNvbnRleHQoKTtcbiAgY29uc3QgcmVhZFRlbGVtZXRyeURpbWVuc2lvbnMgPSB1c2VSZWFkVGVsZW1ldHJ5RGltZW5zaW9ucygpO1xuXG4gIGNvbnN0IHRyYWNrRXZlbnQgPSB1c2VDYWxsYmFjayhcbiAgICAobGV2ZWwsIG5hbWUsIGRhdGEpID0+IHtcbiAgICAgIGlmICghbmFtZSB8fCB0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybignYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFwibmFtZVwiIHBhc3NlZCB0byBcInVzZVRyYWNrRXZlbnRcIiBob29rIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgaWYgKCFPYmplY3QudmFsdWVzKGRhdGEpLmV2ZXJ5KHZhbHVlID0+IGlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyh2YWx1ZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IEV2ZXJ5IHZhbHVlIGluIFwiZGF0YVwiIG1hcCBwYXNzZWQgdG8gXCJ1c2VUcmFja0V2ZW50XCIgaG9vayBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGZpbml0ZSBudW1iZXIgb3Igc3RyaW5nLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc05vbk5lZ2F0aXZlRmluaXRlTnVtYmVyT3JTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBcImRhdGFcIiBwYXNzZWQgdG8gXCJ1c2VUcmFja0V2ZW50XCIgaG9vayBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGZpbml0ZSBudW1iZXIgb3Igc3RyaW5nLidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uVGVsZW1ldHJ5ICYmXG4gICAgICAgIG9uVGVsZW1ldHJ5KGNyZWF0ZUN1c3RvbUV2ZW50KCdldmVudCcsIHsgZGF0YSwgZGltZW5zaW9uczogcmVhZFRlbGVtZXRyeURpbWVuc2lvbnMoKSwgbGV2ZWwsIG5hbWUgfSkpO1xuICAgIH0sXG4gICAgW29uVGVsZW1ldHJ5LCByZWFkVGVsZW1ldHJ5RGltZW5zaW9uc11cbiAgKTtcblxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgaW5mbzogVHJhY2tFdmVudEZ1bmN0aW9uID0gdHJhY2tFdmVudC5iaW5kKG51bGwsICdpbmZvJyk7XG5cbiAgICBpbmZvLmRlYnVnID0gdHJhY2tFdmVudC5iaW5kKG51bGwsICdkZWJ1ZycpO1xuICAgIGluZm8uZXJyb3IgPSB0cmFja0V2ZW50LmJpbmQobnVsbCwgJ2Vycm9yJyk7XG4gICAgaW5mby5pbmZvID0gaW5mbztcbiAgICBpbmZvLndhcm4gPSB0cmFja0V2ZW50LmJpbmQobnVsbCwgJ3dhcm4nKTtcblxuICAgIHJldHVybiBpbmZvO1xuICB9LCBbdHJhY2tFdmVudF0pO1xufVxuIl19