"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLocalize;

var _useLanguage3 = _interopRequireDefault(require("./useLanguage"));

var _Localize = require("../localization/Localize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// TODO: Remove on or after 2022-02-12.

/** @deprecated Please use "useLocalizer" instead. */
function useLocalize(text) {
  var _useLanguage = (0, _useLanguage3.default)(),
      _useLanguage2 = _slicedToArray(_useLanguage, 1),
      language = _useLanguage2[0]; // TODO: [P3] Use useMemo to cache the result.


  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return _Localize.localize.apply(void 0, [text, language].concat(args));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VMb2NhbGl6ZS50cyJdLCJuYW1lcyI6WyJ1c2VMb2NhbGl6ZSIsInRleHQiLCJsYW5ndWFnZSIsImFyZ3MiLCJsb2NhbGl6ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7QUFDZSxTQUFTQSxXQUFULENBQXFCQyxJQUFyQixFQUF3RTtBQUNyRixxQkFBbUIsNEJBQW5CO0FBQUE7QUFBQSxNQUFPQyxRQUFQLG9CQURxRixDQUdyRjs7O0FBSHFGLG9DQUFsQ0MsSUFBa0M7QUFBbENBLElBQUFBLElBQWtDO0FBQUE7O0FBSXJGLFNBQU9DLGtDQUFTSCxJQUFULEVBQWVDLFFBQWYsU0FBNEJDLElBQTVCLEVBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHVzZUxhbmd1YWdlIGZyb20gJy4vdXNlTGFuZ3VhZ2UnO1xuXG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJy4uL2xvY2FsaXphdGlvbi9Mb2NhbGl6ZSc7XG5cbi8vIFRPRE86IFJlbW92ZSBvbiBvciBhZnRlciAyMDIyLTAyLTEyLlxuLyoqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgXCJ1c2VMb2NhbGl6ZXJcIiBpbnN0ZWFkLiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTG9jYWxpemUodGV4dDogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IGJvb2xlYW4gfCBzdHJpbmcge1xuICBjb25zdCBbbGFuZ3VhZ2VdID0gdXNlTGFuZ3VhZ2UoKTtcblxuICAvLyBUT0RPOiBbUDNdIFVzZSB1c2VNZW1vIHRvIGNhY2hlIHRoZSByZXN1bHQuXG4gIHJldHVybiBsb2NhbGl6ZSh0ZXh0LCBsYW5ndWFnZSwgLi4uYXJncyk7XG59XG4iXX0=