"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useRenderActivityStatus;

var _react = require("react");

var _useCreateActivityStatusRenderer = _interopRequireDefault(require("./useCreateActivityStatusRenderer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Previously, useRenderActivity() was called like this:
//
// const element = useRenderActivityStatus({ activity, nextVisibleActivity });
// Now, the useCreateActivityRenderer() is a 3-pass function:
//
// const createActivityStatusRenderer = useCreateActivityStatusRenderer();
// const renderActivityStatus = createActivityStatusRenderer({ activity, hideTimestamp });
// const element = renderActivityStatus && renderActivityStatus(undefined);
// Despite deprecation, useRenderActivityStatus() can be retrofitted using useCreateActivityStatusRenderer().
var showDeprecationNotes = true;
/** @deprecated Please use `useCreateActivityStatusRenderer()` instead. */

function useRenderActivityStatus(_ref) {
  var activity = _ref.activity,
      nextVisibleActivity = _ref.nextVisibleActivity;

  if (showDeprecationNotes) {
    console.warn('botframework-webchat: "useRenderActivityStatus" is deprecated and will be removed on or after 2022-07-22. Please use "useCreateActivityStatusRenderer()" instead.');
    showDeprecationNotes = false;
  }

  var createActivityStatusRenderer = (0, _useCreateActivityStatusRenderer.default)();
  return (0, _react.useMemo)(function () {
    var renderActivityStatus = createActivityStatusRenderer({
      activity: activity,
      nextVisibleActivity: nextVisibleActivity
    });
    return !!renderActivityStatus && renderActivityStatus;
  }, [activity, createActivityStatusRenderer, nextVisibleActivity]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VSZW5kZXJBY3Rpdml0eVN0YXR1cy5qcyJdLCJuYW1lcyI6WyJzaG93RGVwcmVjYXRpb25Ob3RlcyIsInVzZVJlbmRlckFjdGl2aXR5U3RhdHVzIiwiYWN0aXZpdHkiLCJuZXh0VmlzaWJsZUFjdGl2aXR5IiwiY29uc29sZSIsIndhcm4iLCJjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIiwicmVuZGVyQWN0aXZpdHlTdGF0dXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBLElBQUlBLG9CQUFvQixHQUFHLElBQTNCO0FBRUE7O0FBQ2UsU0FBU0MsdUJBQVQsT0FBb0U7QUFBQSxNQUFqQ0MsUUFBaUMsUUFBakNBLFFBQWlDO0FBQUEsTUFBdkJDLG1CQUF1QixRQUF2QkEsbUJBQXVCOztBQUNqRixNQUFJSCxvQkFBSixFQUEwQjtBQUN4QkksSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0UsbUtBREY7QUFJQUwsSUFBQUEsb0JBQW9CLEdBQUcsS0FBdkI7QUFDRDs7QUFFRCxNQUFNTSw0QkFBNEIsR0FBRywrQ0FBckM7QUFFQSxTQUFPLG9CQUFRLFlBQU07QUFDbkIsUUFBTUMsb0JBQW9CLEdBQUdELDRCQUE0QixDQUFDO0FBQUVKLE1BQUFBLFFBQVEsRUFBUkEsUUFBRjtBQUFZQyxNQUFBQSxtQkFBbUIsRUFBbkJBO0FBQVosS0FBRCxDQUF6RDtBQUVBLFdBQU8sQ0FBQyxDQUFDSSxvQkFBRixJQUEwQkEsb0JBQWpDO0FBQ0QsR0FKTSxFQUlKLENBQUNMLFFBQUQsRUFBV0ksNEJBQVgsRUFBeUNILG1CQUF6QyxDQUpJLENBQVA7QUFLRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIgZnJvbSAnLi91c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyJztcblxuLy8gUHJldmlvdXNseSwgdXNlUmVuZGVyQWN0aXZpdHkoKSB3YXMgY2FsbGVkIGxpa2UgdGhpczpcbi8vXG4vLyBjb25zdCBlbGVtZW50ID0gdXNlUmVuZGVyQWN0aXZpdHlTdGF0dXMoeyBhY3Rpdml0eSwgbmV4dFZpc2libGVBY3Rpdml0eSB9KTtcblxuLy8gTm93LCB0aGUgdXNlQ3JlYXRlQWN0aXZpdHlSZW5kZXJlcigpIGlzIGEgMy1wYXNzIGZ1bmN0aW9uOlxuLy9cbi8vIGNvbnN0IGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIgPSB1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKCk7XG4vLyBjb25zdCByZW5kZXJBY3Rpdml0eVN0YXR1cyA9IGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoeyBhY3Rpdml0eSwgaGlkZVRpbWVzdGFtcCB9KTtcbi8vIGNvbnN0IGVsZW1lbnQgPSByZW5kZXJBY3Rpdml0eVN0YXR1cyAmJiByZW5kZXJBY3Rpdml0eVN0YXR1cyh1bmRlZmluZWQpO1xuXG4vLyBEZXNwaXRlIGRlcHJlY2F0aW9uLCB1c2VSZW5kZXJBY3Rpdml0eVN0YXR1cygpIGNhbiBiZSByZXRyb2ZpdHRlZCB1c2luZyB1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKCkuXG5cbmxldCBzaG93RGVwcmVjYXRpb25Ob3RlcyA9IHRydWU7XG5cbi8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGB1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKClgIGluc3RlYWQuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VSZW5kZXJBY3Rpdml0eVN0YXR1cyh7IGFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pIHtcbiAgaWYgKHNob3dEZXByZWNhdGlvbk5vdGVzKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBcInVzZVJlbmRlckFjdGl2aXR5U3RhdHVzXCIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIG9uIG9yIGFmdGVyIDIwMjItMDctMjIuIFBsZWFzZSB1c2UgXCJ1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKClcIiBpbnN0ZWFkLidcbiAgICApO1xuXG4gICAgc2hvd0RlcHJlY2F0aW9uTm90ZXMgPSBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIgPSB1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKCk7XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHJlbmRlckFjdGl2aXR5U3RhdHVzID0gY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcih7IGFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pO1xuXG4gICAgcmV0dXJuICEhcmVuZGVyQWN0aXZpdHlTdGF0dXMgJiYgcmVuZGVyQWN0aXZpdHlTdGF0dXM7XG4gIH0sIFthY3Rpdml0eSwgY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciwgbmV4dFZpc2libGVBY3Rpdml0eV0pO1xufVxuIl19