"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultGroupActivityMiddleware;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var SENT = _botframeworkWebchatCore.Constants.ActivityClientState.SENT;

function bin(items, grouping) {
  var lastBin;
  var bins = [];
  var lastItem;
  items.forEach(function (item) {
    if (lastItem && grouping(lastItem, item)) {
      lastBin.push(item);
    } else {
      lastBin = [item];
      bins.push(lastBin);
    }

    lastItem = item;
  });
  return bins;
}

function sending(activity) {
  return activity.from.role === 'user' && activity.channelData && activity.channelData.state !== SENT;
}

function shouldGroupTimestamp(activityX, activityY, groupTimestamp) {
  if (groupTimestamp === false) {
    // Hide timestamp for all activities.
    return true;
  } else if (activityX && activityY) {
    if (sending(activityX) !== sending(activityY)) {
      return false;
    }

    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : Infinity;
    var timeX = new Date(activityX.timestamp).getTime();
    var timeY = new Date(activityY.timestamp).getTime();
    return Math.abs(timeX - timeY) <= groupTimestamp;
  }

  return false;
}

function createDefaultGroupActivityMiddleware(_ref) {
  var groupTimestamp = _ref.groupTimestamp;
  return function () {
    return function () {
      return function (_ref2) {
        var activities = _ref2.activities;
        return {
          sender: bin(activities, function (x, y) {
            return x.from.role === y.from.role;
          }),
          status: bin(activities, function (x, y) {
            return shouldGroupTimestamp(x, y, groupTimestamp);
          })
        };
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9taWRkbGV3YXJlL2NyZWF0ZURlZmF1bHRHcm91cEFjdGl2aXRpZXNNaWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbIlNFTlQiLCJDb25zdGFudHMiLCJBY3Rpdml0eUNsaWVudFN0YXRlIiwiYmluIiwiaXRlbXMiLCJncm91cGluZyIsImxhc3RCaW4iLCJiaW5zIiwibGFzdEl0ZW0iLCJmb3JFYWNoIiwiaXRlbSIsInB1c2giLCJzZW5kaW5nIiwiYWN0aXZpdHkiLCJmcm9tIiwicm9sZSIsImNoYW5uZWxEYXRhIiwic3RhdGUiLCJzaG91bGRHcm91cFRpbWVzdGFtcCIsImFjdGl2aXR5WCIsImFjdGl2aXR5WSIsImdyb3VwVGltZXN0YW1wIiwiSW5maW5pdHkiLCJ0aW1lWCIsIkRhdGUiLCJ0aW1lc3RhbXAiLCJnZXRUaW1lIiwidGltZVkiLCJNYXRoIiwiYWJzIiwiY3JlYXRlRGVmYXVsdEdyb3VwQWN0aXZpdHlNaWRkbGV3YXJlIiwiYWN0aXZpdGllcyIsInNlbmRlciIsIngiLCJ5Iiwic3RhdHVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBSUEsSUFDeUJBLElBRHpCLEdBRUlDLGtDQUZKLENBQ0VDLG1CQURGLENBQ3lCRixJQUR6Qjs7QUFJQSxTQUFTRyxHQUFULENBQWdCQyxLQUFoQixFQUE0QkMsUUFBNUIsRUFBK0U7QUFDN0UsTUFBSUMsT0FBSjtBQUNBLE1BQU1DLElBQVcsR0FBRyxFQUFwQjtBQUNBLE1BQUlDLFFBQUo7QUFFQUosRUFBQUEsS0FBSyxDQUFDSyxPQUFOLENBQWMsVUFBQUMsSUFBSSxFQUFJO0FBQ3BCLFFBQUlGLFFBQVEsSUFBSUgsUUFBUSxDQUFDRyxRQUFELEVBQVdFLElBQVgsQ0FBeEIsRUFBMEM7QUFDeENKLE1BQUFBLE9BQU8sQ0FBQ0ssSUFBUixDQUFhRCxJQUFiO0FBQ0QsS0FGRCxNQUVPO0FBQ0xKLE1BQUFBLE9BQU8sR0FBRyxDQUFDSSxJQUFELENBQVY7QUFDQUgsTUFBQUEsSUFBSSxDQUFDSSxJQUFMLENBQVVMLE9BQVY7QUFDRDs7QUFFREUsSUFBQUEsUUFBUSxHQUFHRSxJQUFYO0FBQ0QsR0FURDtBQVdBLFNBQU9ILElBQVA7QUFDRDs7QUFFRCxTQUFTSyxPQUFULENBQWlCQyxRQUFqQixFQUF3RDtBQUN0RCxTQUFPQSxRQUFRLENBQUNDLElBQVQsQ0FBY0MsSUFBZCxLQUF1QixNQUF2QixJQUFpQ0YsUUFBUSxDQUFDRyxXQUExQyxJQUF5REgsUUFBUSxDQUFDRyxXQUFULENBQXFCQyxLQUFyQixLQUErQmpCLElBQS9GO0FBQ0Q7O0FBRUQsU0FBU2tCLG9CQUFULENBQ0VDLFNBREYsRUFFRUMsU0FGRixFQUdFQyxjQUhGLEVBSVc7QUFDVCxNQUFJQSxjQUFjLEtBQUssS0FBdkIsRUFBOEI7QUFDNUI7QUFDQSxXQUFPLElBQVA7QUFDRCxHQUhELE1BR08sSUFBSUYsU0FBUyxJQUFJQyxTQUFqQixFQUE0QjtBQUNqQyxRQUFJUixPQUFPLENBQUNPLFNBQUQsQ0FBUCxLQUF1QlAsT0FBTyxDQUFDUSxTQUFELENBQWxDLEVBQStDO0FBQzdDLGFBQU8sS0FBUDtBQUNEOztBQUVEQyxJQUFBQSxjQUFjLEdBQUcsT0FBT0EsY0FBUCxLQUEwQixRQUExQixHQUFxQ0EsY0FBckMsR0FBc0RDLFFBQXZFO0FBRUEsUUFBTUMsS0FBSyxHQUFHLElBQUlDLElBQUosQ0FBU0wsU0FBUyxDQUFDTSxTQUFuQixFQUE4QkMsT0FBOUIsRUFBZDtBQUNBLFFBQU1DLEtBQUssR0FBRyxJQUFJSCxJQUFKLENBQVNKLFNBQVMsQ0FBQ0ssU0FBbkIsRUFBOEJDLE9BQTlCLEVBQWQ7QUFFQSxXQUFPRSxJQUFJLENBQUNDLEdBQUwsQ0FBU04sS0FBSyxHQUFHSSxLQUFqQixLQUEyQk4sY0FBbEM7QUFDRDs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7QUFFYyxTQUFTUyxvQ0FBVCxPQUE2RjtBQUFBLE1BQTdDVCxjQUE2QyxRQUE3Q0EsY0FBNkM7QUFDMUcsU0FBTztBQUFBLFdBQ0w7QUFBQSxhQUNBO0FBQUEsWUFBR1UsVUFBSCxTQUFHQSxVQUFIO0FBQUEsZUFBcUI7QUFDbkJDLFVBQUFBLE1BQU0sRUFBRTdCLEdBQUcsQ0FBQzRCLFVBQUQsRUFBYSxVQUFDRSxDQUFELEVBQUlDLENBQUo7QUFBQSxtQkFBVUQsQ0FBQyxDQUFDbkIsSUFBRixDQUFPQyxJQUFQLEtBQWdCbUIsQ0FBQyxDQUFDcEIsSUFBRixDQUFPQyxJQUFqQztBQUFBLFdBQWIsQ0FEUTtBQUVuQm9CLFVBQUFBLE1BQU0sRUFBRWhDLEdBQUcsQ0FBQzRCLFVBQUQsRUFBYSxVQUFDRSxDQUFELEVBQUlDLENBQUo7QUFBQSxtQkFBVWhCLG9CQUFvQixDQUFDZSxDQUFELEVBQUlDLENBQUosRUFBT2IsY0FBUCxDQUE5QjtBQUFBLFdBQWI7QUFGUSxTQUFyQjtBQUFBLE9BREE7QUFBQSxLQURLO0FBQUEsR0FBUDtBQU1EIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdGFudHMsIERpcmVjdExpbmVBY3Rpdml0eSB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuXG5pbXBvcnQgR3JvdXBBY3Rpdml0aWVzTWlkZGxld2FyZSBmcm9tICcuLi8uLi90eXBlcy9Hcm91cEFjdGl2aXRpZXNNaWRkbGV3YXJlJztcblxuY29uc3Qge1xuICBBY3Rpdml0eUNsaWVudFN0YXRlOiB7IFNFTlQgfVxufSA9IENvbnN0YW50cztcblxuZnVuY3Rpb24gYmluPFQ+KGl0ZW1zOiBUW10sIGdyb3VwaW5nOiAobGFzdDogVCwgY3VycmVudDogVCkgPT4gYm9vbGVhbik6IFRbXVtdIHtcbiAgbGV0IGxhc3RCaW46IFRbXTtcbiAgY29uc3QgYmluczogVFtdW10gPSBbXTtcbiAgbGV0IGxhc3RJdGVtOiBUO1xuXG4gIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKGxhc3RJdGVtICYmIGdyb3VwaW5nKGxhc3RJdGVtLCBpdGVtKSkge1xuICAgICAgbGFzdEJpbi5wdXNoKGl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0QmluID0gW2l0ZW1dO1xuICAgICAgYmlucy5wdXNoKGxhc3RCaW4pO1xuICAgIH1cblxuICAgIGxhc3RJdGVtID0gaXRlbTtcbiAgfSk7XG5cbiAgcmV0dXJuIGJpbnM7XG59XG5cbmZ1bmN0aW9uIHNlbmRpbmcoYWN0aXZpdHk6IERpcmVjdExpbmVBY3Rpdml0eSk6IGJvb2xlYW4ge1xuICByZXR1cm4gYWN0aXZpdHkuZnJvbS5yb2xlID09PSAndXNlcicgJiYgYWN0aXZpdHkuY2hhbm5lbERhdGEgJiYgYWN0aXZpdHkuY2hhbm5lbERhdGEuc3RhdGUgIT09IFNFTlQ7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEdyb3VwVGltZXN0YW1wKFxuICBhY3Rpdml0eVg6IERpcmVjdExpbmVBY3Rpdml0eSxcbiAgYWN0aXZpdHlZOiBEaXJlY3RMaW5lQWN0aXZpdHksXG4gIGdyb3VwVGltZXN0YW1wOiBib29sZWFuIHwgbnVtYmVyXG4pOiBib29sZWFuIHtcbiAgaWYgKGdyb3VwVGltZXN0YW1wID09PSBmYWxzZSkge1xuICAgIC8vIEhpZGUgdGltZXN0YW1wIGZvciBhbGwgYWN0aXZpdGllcy5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChhY3Rpdml0eVggJiYgYWN0aXZpdHlZKSB7XG4gICAgaWYgKHNlbmRpbmcoYWN0aXZpdHlYKSAhPT0gc2VuZGluZyhhY3Rpdml0eVkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ3JvdXBUaW1lc3RhbXAgPSB0eXBlb2YgZ3JvdXBUaW1lc3RhbXAgPT09ICdudW1iZXInID8gZ3JvdXBUaW1lc3RhbXAgOiBJbmZpbml0eTtcblxuICAgIGNvbnN0IHRpbWVYID0gbmV3IERhdGUoYWN0aXZpdHlYLnRpbWVzdGFtcCkuZ2V0VGltZSgpO1xuICAgIGNvbnN0IHRpbWVZID0gbmV3IERhdGUoYWN0aXZpdHlZLnRpbWVzdGFtcCkuZ2V0VGltZSgpO1xuXG4gICAgcmV0dXJuIE1hdGguYWJzKHRpbWVYIC0gdGltZVkpIDw9IGdyb3VwVGltZXN0YW1wO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0R3JvdXBBY3Rpdml0eU1pZGRsZXdhcmUoeyBncm91cFRpbWVzdGFtcCB9KTogR3JvdXBBY3Rpdml0aWVzTWlkZGxld2FyZSB7XG4gIHJldHVybiAoKSA9PlxuICAgICgpID0+XG4gICAgKHsgYWN0aXZpdGllcyB9KSA9PiAoe1xuICAgICAgc2VuZGVyOiBiaW4oYWN0aXZpdGllcywgKHgsIHkpID0+IHguZnJvbS5yb2xlID09PSB5LmZyb20ucm9sZSksXG4gICAgICBzdGF0dXM6IGJpbihhY3Rpdml0aWVzLCAoeCwgeSkgPT4gc2hvdWxkR3JvdXBUaW1lc3RhbXAoeCwgeSwgZ3JvdXBUaW1lc3RhbXApKVxuICAgIH0pO1xufVxuIl19