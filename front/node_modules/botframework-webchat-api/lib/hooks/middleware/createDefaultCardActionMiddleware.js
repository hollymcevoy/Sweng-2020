"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultCardActionMiddleware;

var _botframeworkWebchatCore = require("botframework-webchat-core");

function createDefaultCardActionMiddleware() {
  return function (_ref) {
    var dispatch = _ref.dispatch;
    return function (next) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _args$ = args[0],
            cardAction = _args$.cardAction,
            value = _args$.cardAction.value; // We cannot use destructured "type" here because TypeScript don't recognize "messageBack" is "MessageBackCardAction".

        switch (cardAction.type) {
          case 'imBack':
            if (typeof value === 'string') {
              // TODO: [P4] Instead of calling dispatch, we should move to dispatchers instead for completeness
              dispatch((0, _botframeworkWebchatCore.sendMessage)(value, 'imBack'));
            } else {
              throw new Error('cannot send "imBack" with a non-string value');
            }

            break;

          case 'messageBack':
            dispatch((0, _botframeworkWebchatCore.sendMessageBack)(value, cardAction.text, cardAction.displayText));
            break;

          case 'postBack':
            dispatch((0, _botframeworkWebchatCore.sendPostBack)(value));
            break;

          default:
            return next.apply(void 0, args);
        }
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9taWRkbGV3YXJlL2NyZWF0ZURlZmF1bHRDYXJkQWN0aW9uTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6WyJjcmVhdGVEZWZhdWx0Q2FyZEFjdGlvbk1pZGRsZXdhcmUiLCJkaXNwYXRjaCIsIm5leHQiLCJhcmdzIiwiY2FyZEFjdGlvbiIsInZhbHVlIiwidHlwZSIsIkVycm9yIiwidGV4dCIsImRpc3BsYXlUZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBSWUsU0FBU0EsaUNBQVQsR0FBbUU7QUFDaEYsU0FBTztBQUFBLFFBQUdDLFFBQUgsUUFBR0EsUUFBSDtBQUFBLFdBQ0wsVUFBQUMsSUFBSTtBQUFBLGFBQ0osWUFBYTtBQUFBLDBDQUFUQyxJQUFTO0FBQVRBLFVBQUFBLElBQVM7QUFBQTs7QUFDWCxxQkFLSUEsSUFMSjtBQUFBLFlBRUlDLFVBRkosVUFFSUEsVUFGSjtBQUFBLFlBR2tCQyxLQUhsQixVQUdJRCxVQUhKLENBR2tCQyxLQUhsQixDQURXLENBUVg7O0FBQ0EsZ0JBQVFELFVBQVUsQ0FBQ0UsSUFBbkI7QUFDRSxlQUFLLFFBQUw7QUFDRSxnQkFBSSxPQUFPRCxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCO0FBQ0FKLGNBQUFBLFFBQVEsQ0FBQywwQ0FBWUksS0FBWixFQUFtQixRQUFuQixDQUFELENBQVI7QUFDRCxhQUhELE1BR087QUFDTCxvQkFBTSxJQUFJRSxLQUFKLENBQVUsOENBQVYsQ0FBTjtBQUNEOztBQUVEOztBQUVGLGVBQUssYUFBTDtBQUNFTixZQUFBQSxRQUFRLENBQUMsOENBQWdCSSxLQUFoQixFQUF1QkQsVUFBVSxDQUFDSSxJQUFsQyxFQUF3Q0osVUFBVSxDQUFDSyxXQUFuRCxDQUFELENBQVI7QUFFQTs7QUFFRixlQUFLLFVBQUw7QUFDRVIsWUFBQUEsUUFBUSxDQUFDLDJDQUFhSSxLQUFiLENBQUQsQ0FBUjtBQUVBOztBQUVGO0FBQ0UsbUJBQU9ILElBQUksTUFBSixTQUFRQyxJQUFSLENBQVA7QUF0Qko7QUF3QkQsT0FsQ0c7QUFBQSxLQURDO0FBQUEsR0FBUDtBQW9DRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VuZE1lc3NhZ2UsIHNlbmRNZXNzYWdlQmFjaywgc2VuZFBvc3RCYWNrIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29yZSc7XG5cbmltcG9ydCBDYXJkQWN0aW9uTWlkZGxld2FyZSBmcm9tICcuLi8uLi90eXBlcy9DYXJkQWN0aW9uTWlkZGxld2FyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRDYXJkQWN0aW9uTWlkZGxld2FyZSgpOiBDYXJkQWN0aW9uTWlkZGxld2FyZSB7XG4gIHJldHVybiAoeyBkaXNwYXRjaCB9KSA9PlxuICAgIG5leHQgPT5cbiAgICAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgW1xuICAgICAgICB7XG4gICAgICAgICAgY2FyZEFjdGlvbixcbiAgICAgICAgICBjYXJkQWN0aW9uOiB7IHZhbHVlIH1cbiAgICAgICAgfVxuICAgICAgXSA9IGFyZ3M7XG5cbiAgICAgIC8vIFdlIGNhbm5vdCB1c2UgZGVzdHJ1Y3R1cmVkIFwidHlwZVwiIGhlcmUgYmVjYXVzZSBUeXBlU2NyaXB0IGRvbid0IHJlY29nbml6ZSBcIm1lc3NhZ2VCYWNrXCIgaXMgXCJNZXNzYWdlQmFja0NhcmRBY3Rpb25cIi5cbiAgICAgIHN3aXRjaCAoY2FyZEFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2ltQmFjayc6XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFtQNF0gSW5zdGVhZCBvZiBjYWxsaW5nIGRpc3BhdGNoLCB3ZSBzaG91bGQgbW92ZSB0byBkaXNwYXRjaGVycyBpbnN0ZWFkIGZvciBjb21wbGV0ZW5lc3NcbiAgICAgICAgICAgIGRpc3BhdGNoKHNlbmRNZXNzYWdlKHZhbHVlLCAnaW1CYWNrJykpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBzZW5kIFwiaW1CYWNrXCIgd2l0aCBhIG5vbi1zdHJpbmcgdmFsdWUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdtZXNzYWdlQmFjayc6XG4gICAgICAgICAgZGlzcGF0Y2goc2VuZE1lc3NhZ2VCYWNrKHZhbHVlLCBjYXJkQWN0aW9uLnRleHQsIGNhcmRBY3Rpb24uZGlzcGxheVRleHQpKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3Bvc3RCYWNrJzpcbiAgICAgICAgICBkaXNwYXRjaChzZW5kUG9zdEJhY2sodmFsdWUpKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG5leHQoLi4uYXJncyk7XG4gICAgICB9XG4gICAgfTtcbn1cbiJdfQ==