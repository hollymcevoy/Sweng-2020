"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLocalizer;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _react = require("react");

var _getAllLocalizedStrings = _interopRequireDefault(require("../localization/getAllLocalizedStrings"));

var _useLocalizedGlobalize = _interopRequireDefault(require("./internal/useLocalizedGlobalize"));

var _useLocalizedStrings = _interopRequireDefault(require("./internal/useLocalizedStrings"));

var _isObject = _interopRequireDefault(require("../utils/isObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DEFAULT_STRINGS = (0, _getAllLocalizedStrings.default)()['en-US'];

function useLocalizer() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      plural = _ref.plural;

  var _useLocalizedGlobaliz = (0, _useLocalizedGlobalize.default)(),
      _useLocalizedGlobaliz2 = _slicedToArray(_useLocalizedGlobaliz, 1),
      globalize = _useLocalizedGlobaliz2[0];

  var localizedStrings = (0, _useLocalizedStrings.default)();
  return (0, _react.useCallback)(function (id) {
    var stringId = id;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (plural) {
      var pluralId = id;

      if (!(0, _isObject.default)(pluralId)) {
        throw new Error('useLocalizer: Plural string must pass "id" as a map instead of string.');
      } else if (typeof pluralId.other !== 'string') {
        throw new Error('useLocalizer: Plural string must have "id.other" of string.');
      } else if (typeof args[0] !== 'number') {
        throw new Error('useLocalizer: Plural string must have first argument as a number.');
      }

      for (var _i2 = 0, _arr2 = ['zero', 'one', 'two', 'few', 'many']; _i2 < _arr2.length; _i2++) {
        var pluralForm = _arr2[_i2];

        // Mitigation through allowlisting.
        // eslint-disable-next-line security/detect-object-injection
        var type = _typeof(id[pluralForm]);

        if (type !== 'string' && type !== 'undefined') {
          throw new Error("useLocalizer: Plural string must have \"id.".concat(pluralForm, "\" of string or undefined."));
        }
      }

      var unsupportedPluralForms = Object.keys(id).filter(function (pluralForm) {
        return !['zero', 'one', 'two', 'few', 'many', 'other'].includes(pluralForm);
      });

      if (unsupportedPluralForms.length) {
        throw new Error("useLocalizer: Plural string \"id\" must be either \"zero\", \"one\", \"two\", \"few\", \"many\", \"other\". But not ".concat(unsupportedPluralForms.map(function (pluralForm) {
          return "\"".concat(pluralForm, "\"");
        }).join(', '), "."));
      }

      stringId = pluralId[globalize.plural(args[0])] || pluralId.other;
    } else if (typeof id !== 'string') {
      throw new Error('useLocalizer: "id" must be a string.');
    }

    return Object.entries(args).reduce(function (str, _ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          index = _ref3[0],
          arg = _ref3[1];

      return str.replace("$".concat(+index + 1), arg);
    }, // Mitigation through denylisting.
    // eslint-disable-next-line security/detect-object-injection
    (0, _botframeworkWebchatCore.isForbiddenPropertyName)(stringId) ? '' : localizedStrings[stringId] || DEFAULT_STRINGS[stringId] || '');
  }, [globalize, localizedStrings, plural]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VMb2NhbGl6ZXIudHMiXSwibmFtZXMiOlsiREVGQVVMVF9TVFJJTkdTIiwidXNlTG9jYWxpemVyIiwicGx1cmFsIiwiZ2xvYmFsaXplIiwibG9jYWxpemVkU3RyaW5ncyIsImlkIiwic3RyaW5nSWQiLCJhcmdzIiwicGx1cmFsSWQiLCJFcnJvciIsIm90aGVyIiwicGx1cmFsRm9ybSIsInR5cGUiLCJ1bnN1cHBvcnRlZFBsdXJhbEZvcm1zIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsImluY2x1ZGVzIiwibGVuZ3RoIiwibWFwIiwiam9pbiIsImVudHJpZXMiLCJyZWR1Y2UiLCJzdHIiLCJpbmRleCIsImFyZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsZUFBZSxHQUFHLHVDQUF5QixPQUF6QixDQUF4Qjs7QUFXZSxTQUFTQyxZQUFULEdBQTZEO0FBQUEsaUZBQUosRUFBSTtBQUFBLE1BQXJDQyxNQUFxQyxRQUFyQ0EsTUFBcUM7O0FBQzFFLDhCQUFvQixxQ0FBcEI7QUFBQTtBQUFBLE1BQU9DLFNBQVA7O0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsbUNBQXpCO0FBRUEsU0FBTyx3QkFDTCxVQUFDQyxFQUFELEVBQXFFO0FBQ25FLFFBQUlDLFFBQVEsR0FBR0QsRUFBZjs7QUFEbUUsc0NBQTVDRSxJQUE0QztBQUE1Q0EsTUFBQUEsSUFBNEM7QUFBQTs7QUFHbkUsUUFBSUwsTUFBSixFQUFZO0FBQ1YsVUFBTU0sUUFBUSxHQUFHSCxFQUFqQjs7QUFFQSxVQUFJLENBQUMsdUJBQVNHLFFBQVQsQ0FBTCxFQUF5QjtBQUN2QixjQUFNLElBQUlDLEtBQUosQ0FBVSx3RUFBVixDQUFOO0FBQ0QsT0FGRCxNQUVPLElBQUksT0FBT0QsUUFBUSxDQUFDRSxLQUFoQixLQUEwQixRQUE5QixFQUF3QztBQUM3QyxjQUFNLElBQUlELEtBQUosQ0FBVSw2REFBVixDQUFOO0FBQ0QsT0FGTSxNQUVBLElBQUksT0FBT0YsSUFBSSxDQUFDLENBQUQsQ0FBWCxLQUFtQixRQUF2QixFQUFpQztBQUN0QyxjQUFNLElBQUlFLEtBQUosQ0FBVSxtRUFBVixDQUFOO0FBQ0Q7O0FBRUQsZ0NBQXlCLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsS0FBaEIsRUFBdUIsS0FBdkIsRUFBOEIsTUFBOUIsQ0FBekIsNkJBQWdFO0FBQTNELFlBQU1FLFVBQVUsYUFBaEI7O0FBQ0g7QUFDQTtBQUNBLFlBQU1DLElBQUksV0FBVVAsRUFBRSxDQUFDTSxVQUFELENBQVosQ0FBVjs7QUFFQSxZQUFJQyxJQUFJLEtBQUssUUFBVCxJQUFxQkEsSUFBSSxLQUFLLFdBQWxDLEVBQStDO0FBQzdDLGdCQUFNLElBQUlILEtBQUosc0RBQXVERSxVQUF2RCxnQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsVUFBTUUsc0JBQXNCLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVixFQUFaLEVBQWdCVyxNQUFoQixDQUM3QixVQUFBTCxVQUFVO0FBQUEsZUFBSSxDQUFDLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsS0FBaEIsRUFBdUIsS0FBdkIsRUFBOEIsTUFBOUIsRUFBc0MsT0FBdEMsRUFBK0NNLFFBQS9DLENBQXdETixVQUF4RCxDQUFMO0FBQUEsT0FEbUIsQ0FBL0I7O0FBSUEsVUFBSUUsc0JBQXNCLENBQUNLLE1BQTNCLEVBQW1DO0FBQ2pDLGNBQU0sSUFBSVQsS0FBSiwrSEFDcUdJLHNCQUFzQixDQUM1SE0sR0FEc0csQ0FDbEcsVUFBQVIsVUFBVTtBQUFBLDZCQUFRQSxVQUFSO0FBQUEsU0FEd0YsRUFFdEdTLElBRnNHLENBRWpHLElBRmlHLENBRHJHLE9BQU47QUFLRDs7QUFFRGQsTUFBQUEsUUFBUSxHQUFHRSxRQUFRLENBQUNMLFNBQVMsQ0FBQ0QsTUFBVixDQUFpQkssSUFBSSxDQUFDLENBQUQsQ0FBckIsQ0FBRCxDQUFSLElBQXVDQyxRQUFRLENBQUNFLEtBQTNEO0FBQ0QsS0FsQ0QsTUFrQ08sSUFBSSxPQUFPTCxFQUFQLEtBQWMsUUFBbEIsRUFBNEI7QUFDakMsWUFBTSxJQUFJSSxLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNEOztBQUVELFdBQU9LLE1BQU0sQ0FBQ08sT0FBUCxDQUFlZCxJQUFmLEVBQXFCZSxNQUFyQixDQUNMLFVBQUNDLEdBQUQ7QUFBQTtBQUFBLFVBQU9DLEtBQVA7QUFBQSxVQUFjQyxHQUFkOztBQUFBLGFBQXVCRixHQUFHLENBQUNHLE9BQUosWUFBZ0IsQ0FBQ0YsS0FBRCxHQUFTLENBQXpCLEdBQThCQyxHQUE5QixDQUF2QjtBQUFBLEtBREssRUFFTDtBQUNBO0FBQ0EsMERBQXdCbkIsUUFBeEIsSUFBb0MsRUFBcEMsR0FBeUNGLGdCQUFnQixDQUFDRSxRQUFELENBQWhCLElBQThCTixlQUFlLENBQUNNLFFBQUQsQ0FBN0MsSUFBMkQsRUFKL0YsQ0FBUDtBQU1ELEdBaERJLEVBaURMLENBQUNILFNBQUQsRUFBWUMsZ0JBQVosRUFBOEJGLE1BQTlCLENBakRLLENBQVA7QUFtREQiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRm9yYmlkZGVuUHJvcGVydHlOYW1lIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29yZSc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGdldEFsbExvY2FsaXplZFN0cmluZ3MgZnJvbSAnLi4vbG9jYWxpemF0aW9uL2dldEFsbExvY2FsaXplZFN0cmluZ3MnO1xuaW1wb3J0IHVzZUxvY2FsaXplZEdsb2JhbGl6ZSBmcm9tICcuL2ludGVybmFsL3VzZUxvY2FsaXplZEdsb2JhbGl6ZSc7XG5pbXBvcnQgdXNlTG9jYWxpemVkU3RyaW5ncyBmcm9tICcuL2ludGVybmFsL3VzZUxvY2FsaXplZFN0cmluZ3MnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4uL3V0aWxzL2lzT2JqZWN0JztcblxuY29uc3QgREVGQVVMVF9TVFJJTkdTID0gZ2V0QWxsTG9jYWxpemVkU3RyaW5ncygpWydlbi1VUyddO1xuXG50eXBlIFBsdXJhbCA9IHtcbiAgemVybz86IHN0cmluZztcbiAgb25lPzogc3RyaW5nO1xuICB0d28/OiBzdHJpbmc7XG4gIGZldz86IHN0cmluZztcbiAgbWFueT86IHN0cmluZztcbiAgb3RoZXI6IHN0cmluZztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUxvY2FsaXplcih7IHBsdXJhbCB9OiB7IHBsdXJhbD86IGJvb2xlYW4gfSA9IHt9KSB7XG4gIGNvbnN0IFtnbG9iYWxpemVdID0gdXNlTG9jYWxpemVkR2xvYmFsaXplKCk7XG4gIGNvbnN0IGxvY2FsaXplZFN0cmluZ3MgPSB1c2VMb2NhbGl6ZWRTdHJpbmdzKCk7XG5cbiAgcmV0dXJuIHVzZUNhbGxiYWNrKFxuICAgIChpZDogc3RyaW5nIHwgUGx1cmFsLCAuLi5hcmdzOiBbKG51bWJlciB8IHN0cmluZyk/LCAuLi5zdHJpbmdbXV0pID0+IHtcbiAgICAgIGxldCBzdHJpbmdJZCA9IGlkIGFzIHN0cmluZztcblxuICAgICAgaWYgKHBsdXJhbCkge1xuICAgICAgICBjb25zdCBwbHVyYWxJZCA9IGlkIGFzIFBsdXJhbDtcblxuICAgICAgICBpZiAoIWlzT2JqZWN0KHBsdXJhbElkKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndXNlTG9jYWxpemVyOiBQbHVyYWwgc3RyaW5nIG11c3QgcGFzcyBcImlkXCIgYXMgYSBtYXAgaW5zdGVhZCBvZiBzdHJpbmcuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdXJhbElkLm90aGVyICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndXNlTG9jYWxpemVyOiBQbHVyYWwgc3RyaW5nIG11c3QgaGF2ZSBcImlkLm90aGVyXCIgb2Ygc3RyaW5nLicpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndXNlTG9jYWxpemVyOiBQbHVyYWwgc3RyaW5nIG11c3QgaGF2ZSBmaXJzdCBhcmd1bWVudCBhcyBhIG51bWJlci4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgcGx1cmFsRm9ybSBvZiBbJ3plcm8nLCAnb25lJywgJ3R3bycsICdmZXcnLCAnbWFueSddKSB7XG4gICAgICAgICAgLy8gTWl0aWdhdGlvbiB0aHJvdWdoIGFsbG93bGlzdGluZy5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2VjdXJpdHkvZGV0ZWN0LW9iamVjdC1pbmplY3Rpb25cbiAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlkW3BsdXJhbEZvcm1dO1xuXG4gICAgICAgICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnICYmIHR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVzZUxvY2FsaXplcjogUGx1cmFsIHN0cmluZyBtdXN0IGhhdmUgXCJpZC4ke3BsdXJhbEZvcm19XCIgb2Ygc3RyaW5nIG9yIHVuZGVmaW5lZC5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bnN1cHBvcnRlZFBsdXJhbEZvcm1zID0gT2JqZWN0LmtleXMoaWQpLmZpbHRlcihcbiAgICAgICAgICBwbHVyYWxGb3JtID0+ICFbJ3plcm8nLCAnb25lJywgJ3R3bycsICdmZXcnLCAnbWFueScsICdvdGhlciddLmluY2x1ZGVzKHBsdXJhbEZvcm0pXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVuc3VwcG9ydGVkUGx1cmFsRm9ybXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYHVzZUxvY2FsaXplcjogUGx1cmFsIHN0cmluZyBcImlkXCIgbXVzdCBiZSBlaXRoZXIgXCJ6ZXJvXCIsIFwib25lXCIsIFwidHdvXCIsIFwiZmV3XCIsIFwibWFueVwiLCBcIm90aGVyXCIuIEJ1dCBub3QgJHt1bnN1cHBvcnRlZFBsdXJhbEZvcm1zXG4gICAgICAgICAgICAgIC5tYXAocGx1cmFsRm9ybSA9PiBgXCIke3BsdXJhbEZvcm19XCJgKVxuICAgICAgICAgICAgICAuam9pbignLCAnKX0uYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHJpbmdJZCA9IHBsdXJhbElkW2dsb2JhbGl6ZS5wbHVyYWwoYXJnc1swXSldIHx8IHBsdXJhbElkLm90aGVyO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndXNlTG9jYWxpemVyOiBcImlkXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGFyZ3MpLnJlZHVjZShcbiAgICAgICAgKHN0ciwgW2luZGV4LCBhcmddKSA9PiBzdHIucmVwbGFjZShgJCR7K2luZGV4ICsgMX1gLCBhcmcpLFxuICAgICAgICAvLyBNaXRpZ2F0aW9uIHRocm91Z2ggZGVueWxpc3RpbmcuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWN1cml0eS9kZXRlY3Qtb2JqZWN0LWluamVjdGlvblxuICAgICAgICBpc0ZvcmJpZGRlblByb3BlcnR5TmFtZShzdHJpbmdJZCkgPyAnJyA6IGxvY2FsaXplZFN0cmluZ3Nbc3RyaW5nSWRdIHx8IERFRkFVTFRfU1RSSU5HU1tzdHJpbmdJZF0gfHwgJydcbiAgICAgICk7XG4gICAgfSxcbiAgICBbZ2xvYmFsaXplLCBsb2NhbGl6ZWRTdHJpbmdzLCBwbHVyYWxdXG4gICk7XG59XG4iXX0=