"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCreateActivityRendererInternal;

var _react = require("react");

var _useRenderAttachment = _interopRequireDefault(require("../useRenderAttachment"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useCreateActivityRendererInternal(renderAttachmentOverride) {
  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      createActivityRenderer = _useWebChatAPIContext.activityRenderer;

  var defaultRenderAttachment = (0, _useRenderAttachment.default)();
  var renderAttachment = renderAttachmentOverride || defaultRenderAttachment;
  return (0, _react.useMemo)(function () {
    return function () {
      var renderActivity = createActivityRenderer.apply(void 0, arguments);

      if (!renderActivity) {
        return false;
      }

      return function (renderActivityOptions) {
        if ( /*#__PURE__*/(0, _react.isValidElement)(renderActivity)) {
          return renderActivity;
        }

        var activityElement = renderActivity(function () {
          return renderAttachment.apply(void 0, arguments);
        }, renderActivityOptions); // "activityElement" cannot be false. If the middleware want to hide the "activityElement", it should return "false" when we call createActivityRenderer().

        activityElement || console.warn('botframework-webchat: To hide an activity, the activity renderer should return false. It should not return a function that will return false when called.');
        return activityElement;
      };
    };
  }, [createActivityRenderer, renderAttachment]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVySW50ZXJuYWwudHMiXSwibmFtZXMiOlsidXNlQ3JlYXRlQWN0aXZpdHlSZW5kZXJlckludGVybmFsIiwicmVuZGVyQXR0YWNobWVudE92ZXJyaWRlIiwiY3JlYXRlQWN0aXZpdHlSZW5kZXJlciIsImFjdGl2aXR5UmVuZGVyZXIiLCJkZWZhdWx0UmVuZGVyQXR0YWNobWVudCIsInJlbmRlckF0dGFjaG1lbnQiLCJyZW5kZXJBY3Rpdml0eSIsInJlbmRlckFjdGl2aXR5T3B0aW9ucyIsImFjdGl2aXR5RWxlbWVudCIsImNvbnNvbGUiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBSUE7O0FBQ0E7Ozs7QUFFZSxTQUFTQSxpQ0FBVCxDQUNiQyx3QkFEYSxFQUVhO0FBQzFCLDhCQUFxRCxxQ0FBckQ7QUFBQSxNQUEwQkMsc0JBQTFCLHlCQUFRQyxnQkFBUjs7QUFDQSxNQUFNQyx1QkFBdUIsR0FBRyxtQ0FBaEM7QUFFQSxNQUFNQyxnQkFBa0MsR0FBR0osd0JBQXdCLElBQUlHLHVCQUF2RTtBQUVBLFNBQU8sb0JBQ0w7QUFBQSxXQUNFLFlBQXNDO0FBQ3BDLFVBQU1FLGNBQWMsR0FBR0osc0JBQXNCLE1BQXRCLG1CQUF2Qjs7QUFFQSxVQUFJLENBQUNJLGNBQUwsRUFBcUI7QUFDbkIsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQsYUFBTyxVQUFBQyxxQkFBcUIsRUFBSTtBQUM5QiwwQkFBSSwyQkFBZUQsY0FBZixDQUFKLEVBQW9DO0FBQ2xDLGlCQUFPQSxjQUFQO0FBQ0Q7O0FBRUQsWUFBTUUsZUFBZSxHQUFHRixjQUFjLENBQ3BDO0FBQUEsaUJBQTZCRCxnQkFBZ0IsTUFBaEIsbUJBQTdCO0FBQUEsU0FEb0MsRUFFcENFLHFCQUZvQyxDQUF0QyxDQUw4QixDQVU5Qjs7QUFDQUMsUUFBQUEsZUFBZSxJQUNiQyxPQUFPLENBQUNDLElBQVIsQ0FDRSwySkFERixDQURGO0FBS0EsZUFBT0YsZUFBUDtBQUNELE9BakJEO0FBa0JELEtBMUJIO0FBQUEsR0FESyxFQTRCTCxDQUFDTixzQkFBRCxFQUF5QkcsZ0JBQXpCLENBNUJLLENBQVA7QUE4QkQiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVmFsaWRFbGVtZW50LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBBY3Rpdml0eUNvbXBvbmVudEZhY3RvcnkgfSBmcm9tICcuLi8uLi90eXBlcy9BY3Rpdml0eU1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgUmVuZGVyQXR0YWNobWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL0F0dGFjaG1lbnRNaWRkbGV3YXJlJztcbmltcG9ydCB1c2VSZW5kZXJBdHRhY2htZW50IGZyb20gJy4uL3VzZVJlbmRlckF0dGFjaG1lbnQnO1xuaW1wb3J0IHVzZVdlYkNoYXRBUElDb250ZXh0IGZyb20gJy4vdXNlV2ViQ2hhdEFQSUNvbnRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVySW50ZXJuYWwoXG4gIHJlbmRlckF0dGFjaG1lbnRPdmVycmlkZT86IFJlbmRlckF0dGFjaG1lbnRcbik6IEFjdGl2aXR5Q29tcG9uZW50RmFjdG9yeSB7XG4gIGNvbnN0IHsgYWN0aXZpdHlSZW5kZXJlcjogY3JlYXRlQWN0aXZpdHlSZW5kZXJlciB9ID0gdXNlV2ViQ2hhdEFQSUNvbnRleHQoKTtcbiAgY29uc3QgZGVmYXVsdFJlbmRlckF0dGFjaG1lbnQgPSB1c2VSZW5kZXJBdHRhY2htZW50KCk7XG5cbiAgY29uc3QgcmVuZGVyQXR0YWNobWVudDogUmVuZGVyQXR0YWNobWVudCA9IHJlbmRlckF0dGFjaG1lbnRPdmVycmlkZSB8fCBkZWZhdWx0UmVuZGVyQXR0YWNobWVudDtcblxuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgKC4uLmNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJPcHRpb25zKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlbmRlckFjdGl2aXR5ID0gY3JlYXRlQWN0aXZpdHlSZW5kZXJlciguLi5jcmVhdGVBY3Rpdml0eVJlbmRlcmVyT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCFyZW5kZXJBY3Rpdml0eSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJBY3Rpdml0eU9wdGlvbnMgPT4ge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChyZW5kZXJBY3Rpdml0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJBY3Rpdml0eTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBhY3Rpdml0eUVsZW1lbnQgPSByZW5kZXJBY3Rpdml0eShcbiAgICAgICAgICAgICguLi5yZW5kZXJBdHRhY2htZW50QXJncykgPT4gcmVuZGVyQXR0YWNobWVudCguLi5yZW5kZXJBdHRhY2htZW50QXJncyksXG4gICAgICAgICAgICByZW5kZXJBY3Rpdml0eU9wdGlvbnNcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gXCJhY3Rpdml0eUVsZW1lbnRcIiBjYW5ub3QgYmUgZmFsc2UuIElmIHRoZSBtaWRkbGV3YXJlIHdhbnQgdG8gaGlkZSB0aGUgXCJhY3Rpdml0eUVsZW1lbnRcIiwgaXQgc2hvdWxkIHJldHVybiBcImZhbHNlXCIgd2hlbiB3ZSBjYWxsIGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIoKS5cbiAgICAgICAgICBhY3Rpdml0eUVsZW1lbnQgfHxcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBUbyBoaWRlIGFuIGFjdGl2aXR5LCB0aGUgYWN0aXZpdHkgcmVuZGVyZXIgc2hvdWxkIHJldHVybiBmYWxzZS4gSXQgc2hvdWxkIG5vdCByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0dXJuIGZhbHNlIHdoZW4gY2FsbGVkLidcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4gYWN0aXZpdHlFbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICBbY3JlYXRlQWN0aXZpdHlSZW5kZXJlciwgcmVuZGVyQXR0YWNobWVudF1cbiAgKTtcbn1cbiJdfQ==