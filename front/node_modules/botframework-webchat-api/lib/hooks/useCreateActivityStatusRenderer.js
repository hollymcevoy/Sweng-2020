"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCreateActivityStatusRenderer;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _react = _interopRequireWildcard(require("react"));

var _useGetSendTimeoutForActivity = _interopRequireDefault(require("./useGetSendTimeoutForActivity"));

var _useTimePassed = _interopRequireDefault(require("./internal/useTimePassed"));

var _useWebChatAPIContext2 = _interopRequireDefault(require("./internal/useWebChatAPIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint react/prop-types: "off" */

/* eslint react/require-default-props: "off" */
var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,
    SENDING = _Constants$ActivityCl.SENDING,
    SENT = _Constants$ActivityCl.SENT;

var ActivityStatusContainer = function ActivityStatusContainer(_ref) {
  var activity = _ref.activity,
      hideTimestamp = _ref.hideTimestamp,
      nextVisibleActivity = _ref.nextVisibleActivity;

  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),
      createActivityStatusRenderer = _useWebChatAPIContext.activityStatusRenderer;

  var getSendTimeoutForActivity = (0, _useGetSendTimeoutForActivity.default)(); // SEND_FAILED from the activity is ignored, and is instead based on styleOptions.sendTimeout.
  // Note that the derived state is time-sensitive. The useTimePassed() hook is used to make sure it changes over time.

  var _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.clientTimestamp,
      clientTimestamp = _activity$channelData2 === void 0 ? 0 : _activity$channelData2,
      state = _activity$channelData.state,
      role = activity.from.role;
  var activitySent = state !== SENDING && state !== SEND_FAILED;
  var fromUser = role === 'user';
  var sendTimeout = getSendTimeoutForActivity({
    activity: activity
  });
  var pastTimeout = (0, _useTimePassed.default)(fromUser && !activitySent ? new Date(clientTimestamp).getTime() + sendTimeout : 0);
  var sendState = activitySent || !fromUser ? SENT : pastTimeout ? SEND_FAILED : SENDING;
  return (0, _react.useMemo)(function () {
    return createActivityStatusRenderer({
      activity: activity,
      hideTimestamp: hideTimestamp,
      nextVisibleActivity: nextVisibleActivity,
      // "nextVisibleActivity" is for backward compatibility, please remove this line on or after 2022-07-22.
      sameTimestampGroup: hideTimestamp,
      // "sameTimestampGroup" is for backward compatibility, please remove this line on or after 2022-07-22.
      sendState: sendState
    });
  }, [activity, createActivityStatusRenderer, hideTimestamp, nextVisibleActivity, sendState]);
};

function useCreateActivityStatusRenderer() {
  return (0, _react.useMemo)(function () {
    return function (_ref2) {
      var activity = _ref2.activity,
          nextVisibleActivity = _ref2.nextVisibleActivity;
      return function () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            hideTimestamp = _ref3.hideTimestamp;

        return /*#__PURE__*/_react.default.createElement(ActivityStatusContainer, {
          activity: activity,
          hideTimestamp: hideTimestamp,
          nextVisibleActivity: nextVisibleActivity
        });
      };
    };
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyLnRzeCJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJBY3Rpdml0eUNsaWVudFN0YXRlIiwiU0VORF9GQUlMRUQiLCJTRU5ESU5HIiwiU0VOVCIsIkFjdGl2aXR5U3RhdHVzQ29udGFpbmVyIiwiYWN0aXZpdHkiLCJoaWRlVGltZXN0YW1wIiwibmV4dFZpc2libGVBY3Rpdml0eSIsImNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIiLCJhY3Rpdml0eVN0YXR1c1JlbmRlcmVyIiwiZ2V0U2VuZFRpbWVvdXRGb3JBY3Rpdml0eSIsImNoYW5uZWxEYXRhIiwiY2xpZW50VGltZXN0YW1wIiwic3RhdGUiLCJyb2xlIiwiZnJvbSIsImFjdGl2aXR5U2VudCIsImZyb21Vc2VyIiwic2VuZFRpbWVvdXQiLCJwYXN0VGltZW91dCIsIkRhdGUiLCJnZXRUaW1lIiwic2VuZFN0YXRlIiwic2FtZVRpbWVzdGFtcEdyb3VwIiwidXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBVEE7O0FBQ0E7QUFVQSw0QkFFSUEsa0NBRkosQ0FDRUMsbUJBREY7QUFBQSxJQUN5QkMsV0FEekIseUJBQ3lCQSxXQUR6QjtBQUFBLElBQ3NDQyxPQUR0Qyx5QkFDc0NBLE9BRHRDO0FBQUEsSUFDK0NDLElBRC9DLHlCQUMrQ0EsSUFEL0M7O0FBSUEsSUFBTUMsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixPQUFzRDtBQUFBLE1BQW5EQyxRQUFtRCxRQUFuREEsUUFBbUQ7QUFBQSxNQUF6Q0MsYUFBeUMsUUFBekNBLGFBQXlDO0FBQUEsTUFBMUJDLG1CQUEwQixRQUExQkEsbUJBQTBCOztBQUNwRiw4QkFBaUUscUNBQWpFO0FBQUEsTUFBZ0NDLDRCQUFoQyx5QkFBUUMsc0JBQVI7O0FBQ0EsTUFBTUMseUJBQXlCLEdBQUcsNENBQWxDLENBRm9GLENBSXBGO0FBQ0E7O0FBQ0EsOEJBV0lMLFFBWEosQ0FDRU0sV0FERjtBQUFBLDZEQUNnRCxFQURoRDtBQUFBLHFEQUNpQkMsZUFEakI7QUFBQSxNQUNpQkEsZUFEakIsdUNBQ21DLENBRG5DO0FBQUEsTUFDc0NDLEtBRHRDLHlCQUNzQ0EsS0FEdEM7QUFBQSxNQUVVQyxJQUZWLEdBV0lULFFBWEosQ0FFRVUsSUFGRixDQUVVRCxJQUZWO0FBYUEsTUFBTUUsWUFBWSxHQUFHSCxLQUFLLEtBQUtYLE9BQVYsSUFBcUJXLEtBQUssS0FBS1osV0FBcEQ7QUFDQSxNQUFNZ0IsUUFBUSxHQUFHSCxJQUFJLEtBQUssTUFBMUI7QUFDQSxNQUFNSSxXQUFXLEdBQUdSLHlCQUF5QixDQUFDO0FBQUVMLElBQUFBLFFBQVEsRUFBUkE7QUFBRixHQUFELENBQTdDO0FBRUEsTUFBTWMsV0FBVyxHQUFHLDRCQUFjRixRQUFRLElBQUksQ0FBQ0QsWUFBYixHQUE0QixJQUFJSSxJQUFKLENBQVNSLGVBQVQsRUFBMEJTLE9BQTFCLEtBQXNDSCxXQUFsRSxHQUFnRixDQUE5RixDQUFwQjtBQUVBLE1BQU1JLFNBQVMsR0FBR04sWUFBWSxJQUFJLENBQUNDLFFBQWpCLEdBQTRCZCxJQUE1QixHQUFtQ2dCLFdBQVcsR0FBR2xCLFdBQUgsR0FBaUJDLE9BQWpGO0FBRUEsU0FBTyxvQkFDTDtBQUFBLFdBQ0VNLDRCQUE0QixDQUFDO0FBQzNCSCxNQUFBQSxRQUFRLEVBQVJBLFFBRDJCO0FBRTNCQyxNQUFBQSxhQUFhLEVBQWJBLGFBRjJCO0FBRzNCQyxNQUFBQSxtQkFBbUIsRUFBbkJBLG1CQUgyQjtBQUdOO0FBQ3JCZ0IsTUFBQUEsa0JBQWtCLEVBQUVqQixhQUpPO0FBSVE7QUFDbkNnQixNQUFBQSxTQUFTLEVBQVRBO0FBTDJCLEtBQUQsQ0FEOUI7QUFBQSxHQURLLEVBU0wsQ0FBQ2pCLFFBQUQsRUFBV0csNEJBQVgsRUFBeUNGLGFBQXpDLEVBQXdEQyxtQkFBeEQsRUFBNkVlLFNBQTdFLENBVEssQ0FBUDtBQVdELENBdENEOztBQXdDZSxTQUFTRSwrQkFBVCxHQUd5QztBQUN0RCxTQUFPLG9CQUNMO0FBQUEsV0FDRTtBQUFBLFVBQUduQixRQUFILFNBQUdBLFFBQUg7QUFBQSxVQUFhRSxtQkFBYixTQUFhQSxtQkFBYjtBQUFBLGFBQ0E7QUFBQSx3RkFBa0QsRUFBbEQ7QUFBQSxZQUFHRCxhQUFILFNBQUdBLGFBQUg7O0FBQUEsNEJBRUksNkJBQUMsdUJBQUQ7QUFDRSxVQUFBLFFBQVEsRUFBRUQsUUFEWjtBQUVFLFVBQUEsYUFBYSxFQUFFQyxhQUZqQjtBQUdFLFVBQUEsbUJBQW1CLEVBQUVDO0FBSHZCLFVBRko7QUFBQSxPQURBO0FBQUEsS0FERjtBQUFBLEdBREssRUFXTCxFQVhLLENBQVA7QUFhRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IHJlYWN0L3Byb3AtdHlwZXM6IFwib2ZmXCIgKi9cbi8qIGVzbGludCByZWFjdC9yZXF1aXJlLWRlZmF1bHQtcHJvcHM6IFwib2ZmXCIgKi9cblxuaW1wb3J0IHsgQ29uc3RhbnRzLCBEaXJlY3RMaW5lQWN0aXZpdHkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcbmltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBTZW5kU3RhdGUgZnJvbSAnLi4vdHlwZXMvU2VuZFN0YXRlJztcbmltcG9ydCB1c2VHZXRTZW5kVGltZW91dEZvckFjdGl2aXR5IGZyb20gJy4vdXNlR2V0U2VuZFRpbWVvdXRGb3JBY3Rpdml0eSc7XG5pbXBvcnQgdXNlVGltZVBhc3NlZCBmcm9tICcuL2ludGVybmFsL3VzZVRpbWVQYXNzZWQnO1xuaW1wb3J0IHVzZVdlYkNoYXRBUElDb250ZXh0IGZyb20gJy4vaW50ZXJuYWwvdXNlV2ViQ2hhdEFQSUNvbnRleHQnO1xuXG5jb25zdCB7XG4gIEFjdGl2aXR5Q2xpZW50U3RhdGU6IHsgU0VORF9GQUlMRUQsIFNFTkRJTkcsIFNFTlQgfVxufSA9IENvbnN0YW50cztcblxuY29uc3QgQWN0aXZpdHlTdGF0dXNDb250YWluZXIgPSAoeyBhY3Rpdml0eSwgaGlkZVRpbWVzdGFtcCwgbmV4dFZpc2libGVBY3Rpdml0eSB9KSA9PiB7XG4gIGNvbnN0IHsgYWN0aXZpdHlTdGF0dXNSZW5kZXJlcjogY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciB9ID0gdXNlV2ViQ2hhdEFQSUNvbnRleHQoKTtcbiAgY29uc3QgZ2V0U2VuZFRpbWVvdXRGb3JBY3Rpdml0eSA9IHVzZUdldFNlbmRUaW1lb3V0Rm9yQWN0aXZpdHkoKTtcblxuICAvLyBTRU5EX0ZBSUxFRCBmcm9tIHRoZSBhY3Rpdml0eSBpcyBpZ25vcmVkLCBhbmQgaXMgaW5zdGVhZCBiYXNlZCBvbiBzdHlsZU9wdGlvbnMuc2VuZFRpbWVvdXQuXG4gIC8vIE5vdGUgdGhhdCB0aGUgZGVyaXZlZCBzdGF0ZSBpcyB0aW1lLXNlbnNpdGl2ZS4gVGhlIHVzZVRpbWVQYXNzZWQoKSBob29rIGlzIHVzZWQgdG8gbWFrZSBzdXJlIGl0IGNoYW5nZXMgb3ZlciB0aW1lLlxuICBjb25zdCB7XG4gICAgY2hhbm5lbERhdGE6IHsgY2xpZW50VGltZXN0YW1wID0gMCwgc3RhdGUgfSA9IHt9LFxuICAgIGZyb206IHsgcm9sZSB9XG4gIH06IHtcbiAgICBjaGFubmVsRGF0YToge1xuICAgICAgY2xpZW50VGltZXN0YW1wPzogbnVtYmVyO1xuICAgICAgc3RhdGU/OiBTZW5kU3RhdGU7XG4gICAgfTtcbiAgICBmcm9tOiB7XG4gICAgICByb2xlOiBzdHJpbmc7XG4gICAgfTtcbiAgfSA9IGFjdGl2aXR5O1xuXG4gIGNvbnN0IGFjdGl2aXR5U2VudCA9IHN0YXRlICE9PSBTRU5ESU5HICYmIHN0YXRlICE9PSBTRU5EX0ZBSUxFRDtcbiAgY29uc3QgZnJvbVVzZXIgPSByb2xlID09PSAndXNlcic7XG4gIGNvbnN0IHNlbmRUaW1lb3V0ID0gZ2V0U2VuZFRpbWVvdXRGb3JBY3Rpdml0eSh7IGFjdGl2aXR5IH0pO1xuXG4gIGNvbnN0IHBhc3RUaW1lb3V0ID0gdXNlVGltZVBhc3NlZChmcm9tVXNlciAmJiAhYWN0aXZpdHlTZW50ID8gbmV3IERhdGUoY2xpZW50VGltZXN0YW1wKS5nZXRUaW1lKCkgKyBzZW5kVGltZW91dCA6IDApO1xuXG4gIGNvbnN0IHNlbmRTdGF0ZSA9IGFjdGl2aXR5U2VudCB8fCAhZnJvbVVzZXIgPyBTRU5UIDogcGFzdFRpbWVvdXQgPyBTRU5EX0ZBSUxFRCA6IFNFTkRJTkc7XG5cbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoe1xuICAgICAgICBhY3Rpdml0eSxcbiAgICAgICAgaGlkZVRpbWVzdGFtcCxcbiAgICAgICAgbmV4dFZpc2libGVBY3Rpdml0eSwgLy8gXCJuZXh0VmlzaWJsZUFjdGl2aXR5XCIgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHBsZWFzZSByZW1vdmUgdGhpcyBsaW5lIG9uIG9yIGFmdGVyIDIwMjItMDctMjIuXG4gICAgICAgIHNhbWVUaW1lc3RhbXBHcm91cDogaGlkZVRpbWVzdGFtcCwgLy8gXCJzYW1lVGltZXN0YW1wR3JvdXBcIiBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgcGxlYXNlIHJlbW92ZSB0aGlzIGxpbmUgb24gb3IgYWZ0ZXIgMjAyMi0wNy0yMi5cbiAgICAgICAgc2VuZFN0YXRlXG4gICAgICB9KSxcbiAgICBbYWN0aXZpdHksIGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIsIGhpZGVUaW1lc3RhbXAsIG5leHRWaXNpYmxlQWN0aXZpdHksIHNlbmRTdGF0ZV1cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoKTogKHJlbmRlck9wdGlvbnM6IHtcbiAgYWN0aXZpdHk6IERpcmVjdExpbmVBY3Rpdml0eTtcbiAgbmV4dFZpc2libGVBY3Rpdml0eTogRGlyZWN0TGluZUFjdGl2aXR5O1xufSkgPT4gKHByb3BzOiB7IGhpZGVUaW1lc3RhbXA/OiBib29sZWFuIH0pID0+IFJlYWN0Tm9kZSB7XG4gIHJldHVybiB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICAoeyBhY3Rpdml0eSwgbmV4dFZpc2libGVBY3Rpdml0eSB9OiB7IGFjdGl2aXR5OiBEaXJlY3RMaW5lQWN0aXZpdHk7IG5leHRWaXNpYmxlQWN0aXZpdHk6IERpcmVjdExpbmVBY3Rpdml0eSB9KSA9PlxuICAgICAgKHsgaGlkZVRpbWVzdGFtcCB9OiB7IGhpZGVUaW1lc3RhbXA/OiBib29sZWFuIH0gPSB7fSkgPT5cbiAgICAgICAgKFxuICAgICAgICAgIDxBY3Rpdml0eVN0YXR1c0NvbnRhaW5lclxuICAgICAgICAgICAgYWN0aXZpdHk9e2FjdGl2aXR5fVxuICAgICAgICAgICAgaGlkZVRpbWVzdGFtcD17aGlkZVRpbWVzdGFtcH1cbiAgICAgICAgICAgIG5leHRWaXNpYmxlQWN0aXZpdHk9e25leHRWaXNpYmxlQWN0aXZpdHl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSxcbiAgICBbXVxuICApO1xufVxuIl19