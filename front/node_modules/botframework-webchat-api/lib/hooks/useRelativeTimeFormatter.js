"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useRelativeTimeFormatter;

var _react = require("react");

var _useDateFormatter = _interopRequireDefault(require("./useDateFormatter"));

var _useLocalizedGlobalize = _interopRequireDefault(require("./internal/useLocalizedGlobalize"));

var _useLocalizer = _interopRequireDefault(require("./useLocalizer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useRelativeTimeFormatter() {
  var formatDate = (0, _useDateFormatter.default)();
  var localize = (0, _useLocalizer.default)();

  var _useLocalizedGlobaliz = (0, _useLocalizedGlobalize.default)(),
      _useLocalizedGlobaliz2 = _slicedToArray(_useLocalizedGlobaliz, 1),
      globalize = _useLocalizedGlobaliz2[0];

  return (0, _react.useMemo)(function () {
    var relativeTimeFormatter = globalize.relativeTimeFormatter.bind(globalize);
    return function (dateOrString) {
      var date = new Date(dateOrString);
      var dateTime = date.getTime();

      if (isNaN(dateTime)) {
        return dateOrString;
      }

      var now = Date.now();
      var deltaInMs = now - dateTime;
      var deltaInMinutes = Math.floor(deltaInMs / 60000);
      var deltaInHours = Math.floor(deltaInMs / 3600000);

      if (deltaInMinutes < 1) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_JUST_NOW');
      } else if (deltaInMinutes === 1) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_ONE_MINUTE_AGO');
      } else if (deltaInHours < 1) {
        return relativeTimeFormatter('minute')(-deltaInMinutes);
      } else if (deltaInHours === 1) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_ONE_HOUR_AGO');
      } else if (deltaInHours < 5) {
        return relativeTimeFormatter('hour')(-deltaInHours);
      } else if (deltaInHours <= 24) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_TODAY');
      } else if (deltaInHours <= 48) {
        return localize('ACTIVITY_STATUS_TIMESTAMP_YESTERDAY');
      }

      return formatDate(date);
    };
  }, [formatDate, globalize, localize]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VSZWxhdGl2ZVRpbWVGb3JtYXR0ZXIudHMiXSwibmFtZXMiOlsidXNlUmVsYXRpdmVUaW1lRm9ybWF0dGVyIiwiZm9ybWF0RGF0ZSIsImxvY2FsaXplIiwiZ2xvYmFsaXplIiwicmVsYXRpdmVUaW1lRm9ybWF0dGVyIiwiYmluZCIsImRhdGVPclN0cmluZyIsImRhdGUiLCJEYXRlIiwiZGF0ZVRpbWUiLCJnZXRUaW1lIiwiaXNOYU4iLCJub3ciLCJkZWx0YUluTXMiLCJkZWx0YUluTWludXRlcyIsIk1hdGgiLCJmbG9vciIsImRlbHRhSW5Ib3VycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRWUsU0FBU0Esd0JBQVQsR0FBNkU7QUFDMUYsTUFBTUMsVUFBVSxHQUFHLGdDQUFuQjtBQUNBLE1BQU1DLFFBQVEsR0FBRyw0QkFBakI7O0FBQ0EsOEJBQW9CLHFDQUFwQjtBQUFBO0FBQUEsTUFBT0MsU0FBUDs7QUFFQSxTQUFPLG9CQUFRLFlBQU07QUFDbkIsUUFBTUMscUJBQXFCLEdBQUdELFNBQVMsQ0FBQ0MscUJBQVYsQ0FBZ0NDLElBQWhDLENBQXFDRixTQUFyQyxDQUE5QjtBQUVBLFdBQU8sVUFBQUcsWUFBWSxFQUFJO0FBQ3JCLFVBQU1DLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNGLFlBQVQsQ0FBYjtBQUNBLFVBQU1HLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxPQUFMLEVBQWpCOztBQUVBLFVBQUlDLEtBQUssQ0FBQ0YsUUFBRCxDQUFULEVBQXFCO0FBQ25CLGVBQU9ILFlBQVA7QUFDRDs7QUFFRCxVQUFNTSxHQUFHLEdBQUdKLElBQUksQ0FBQ0ksR0FBTCxFQUFaO0FBQ0EsVUFBTUMsU0FBUyxHQUFHRCxHQUFHLEdBQUdILFFBQXhCO0FBQ0EsVUFBTUssY0FBYyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLEtBQXZCLENBQXZCO0FBQ0EsVUFBTUksWUFBWSxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLE9BQXZCLENBQXJCOztBQUVBLFVBQUlDLGNBQWMsR0FBRyxDQUFyQixFQUF3QjtBQUN0QixlQUFPWixRQUFRLENBQUMsb0NBQUQsQ0FBZjtBQUNELE9BRkQsTUFFTyxJQUFJWSxjQUFjLEtBQUssQ0FBdkIsRUFBMEI7QUFDL0IsZUFBT1osUUFBUSxDQUFDLDBDQUFELENBQWY7QUFDRCxPQUZNLE1BRUEsSUFBSWUsWUFBWSxHQUFHLENBQW5CLEVBQXNCO0FBQzNCLGVBQU9iLHFCQUFxQixDQUFDLFFBQUQsQ0FBckIsQ0FBZ0MsQ0FBQ1UsY0FBakMsQ0FBUDtBQUNELE9BRk0sTUFFQSxJQUFJRyxZQUFZLEtBQUssQ0FBckIsRUFBd0I7QUFDN0IsZUFBT2YsUUFBUSxDQUFDLHdDQUFELENBQWY7QUFDRCxPQUZNLE1BRUEsSUFBSWUsWUFBWSxHQUFHLENBQW5CLEVBQXNCO0FBQzNCLGVBQU9iLHFCQUFxQixDQUFDLE1BQUQsQ0FBckIsQ0FBOEIsQ0FBQ2EsWUFBL0IsQ0FBUDtBQUNELE9BRk0sTUFFQSxJQUFJQSxZQUFZLElBQUksRUFBcEIsRUFBd0I7QUFDN0IsZUFBT2YsUUFBUSxDQUFDLGlDQUFELENBQWY7QUFDRCxPQUZNLE1BRUEsSUFBSWUsWUFBWSxJQUFJLEVBQXBCLEVBQXdCO0FBQzdCLGVBQU9mLFFBQVEsQ0FBQyxxQ0FBRCxDQUFmO0FBQ0Q7O0FBRUQsYUFBT0QsVUFBVSxDQUFDTSxJQUFELENBQWpCO0FBQ0QsS0E5QkQ7QUErQkQsR0FsQ00sRUFrQ0osQ0FBQ04sVUFBRCxFQUFhRSxTQUFiLEVBQXdCRCxRQUF4QixDQWxDSSxDQUFQO0FBbUNEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbMSwgNSwgMjQsIDQ4LCA2MDAwMCwgMzYwMDAwMF0gfV0gKi9cblxuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZURhdGVGb3JtYXR0ZXIgZnJvbSAnLi91c2VEYXRlRm9ybWF0dGVyJztcbmltcG9ydCB1c2VMb2NhbGl6ZWRHbG9iYWxpemUgZnJvbSAnLi9pbnRlcm5hbC91c2VMb2NhbGl6ZWRHbG9iYWxpemUnO1xuaW1wb3J0IHVzZUxvY2FsaXplciBmcm9tICcuL3VzZUxvY2FsaXplcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVJlbGF0aXZlVGltZUZvcm1hdHRlcigpOiAoZGF0ZU9yU3RyaW5nOiBEYXRlIHwgc3RyaW5nKSA9PiBzdHJpbmcge1xuICBjb25zdCBmb3JtYXREYXRlID0gdXNlRGF0ZUZvcm1hdHRlcigpO1xuICBjb25zdCBsb2NhbGl6ZSA9IHVzZUxvY2FsaXplcigpO1xuICBjb25zdCBbZ2xvYmFsaXplXSA9IHVzZUxvY2FsaXplZEdsb2JhbGl6ZSgpO1xuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCByZWxhdGl2ZVRpbWVGb3JtYXR0ZXIgPSBnbG9iYWxpemUucmVsYXRpdmVUaW1lRm9ybWF0dGVyLmJpbmQoZ2xvYmFsaXplKTtcblxuICAgIHJldHVybiBkYXRlT3JTdHJpbmcgPT4ge1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVPclN0cmluZyk7XG4gICAgICBjb25zdCBkYXRlVGltZSA9IGRhdGUuZ2V0VGltZSgpO1xuXG4gICAgICBpZiAoaXNOYU4oZGF0ZVRpbWUpKSB7XG4gICAgICAgIHJldHVybiBkYXRlT3JTdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBkZWx0YUluTXMgPSBub3cgLSBkYXRlVGltZTtcbiAgICAgIGNvbnN0IGRlbHRhSW5NaW51dGVzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyA2MDAwMCk7XG4gICAgICBjb25zdCBkZWx0YUluSG91cnMgPSBNYXRoLmZsb29yKGRlbHRhSW5NcyAvIDM2MDAwMDApO1xuXG4gICAgICBpZiAoZGVsdGFJbk1pbnV0ZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZSgnQUNUSVZJVFlfU1RBVFVTX1RJTUVTVEFNUF9KVVNUX05PVycpO1xuICAgICAgfSBlbHNlIGlmIChkZWx0YUluTWludXRlcyA9PT0gMSkge1xuICAgICAgICByZXR1cm4gbG9jYWxpemUoJ0FDVElWSVRZX1NUQVRVU19USU1FU1RBTVBfT05FX01JTlVURV9BR08nKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDwgMSkge1xuICAgICAgICByZXR1cm4gcmVsYXRpdmVUaW1lRm9ybWF0dGVyKCdtaW51dGUnKSgtZGVsdGFJbk1pbnV0ZXMpO1xuICAgICAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplKCdBQ1RJVklUWV9TVEFUVVNfVElNRVNUQU1QX09ORV9IT1VSX0FHTycpO1xuICAgICAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPCA1KSB7XG4gICAgICAgIHJldHVybiByZWxhdGl2ZVRpbWVGb3JtYXR0ZXIoJ2hvdXInKSgtZGVsdGFJbkhvdXJzKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDI0KSB7XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZSgnQUNUSVZJVFlfU1RBVFVTX1RJTUVTVEFNUF9UT0RBWScpO1xuICAgICAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPD0gNDgpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplKCdBQ1RJVklUWV9TVEFUVVNfVElNRVNUQU1QX1lFU1RFUkRBWScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlKTtcbiAgICB9O1xuICB9LCBbZm9ybWF0RGF0ZSwgZ2xvYmFsaXplLCBsb2NhbGl6ZV0pO1xufVxuIl19