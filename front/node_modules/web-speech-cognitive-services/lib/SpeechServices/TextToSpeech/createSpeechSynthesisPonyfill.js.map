{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js"],"names":["DEFAULT_OUTPUT_FORMAT","EMPTY_ARRAY","options","audioContext","fetchCredentials","ponyfill","AudioContext","window","webkitAudioContext","speechSynthesisDeploymentId","speechSynthesisOutputFormat","console","warn","SpeechSynthesis","queue","AudioContextQueue","updateVoices","stop","value","pause","resume","utterance","SpeechSynthesisUtterance","Error","reject","resolve","promise","handleError","errorCode","error","message","stack","addEventListener","preload","deploymentId","outputFormat","push","finally","removeEventListener","speaking","customVoiceHostname","region","speechSynthesisHostname","subscriptionKey","voices","getVoices","fetchVoices","dispatchEvent","SpeechSynthesisEvent","EventTarget","speechSynthesis"],"mappings":"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","sourcesContent":["/* eslint class-methods-use-this: 0 */\n\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim/es5';\nimport createDeferred from 'p-defer-es5';\nimport onErrorResumeNext from 'on-error-resume-next';\n\nimport AudioContextQueue from './AudioContextQueue';\nimport fetchCustomVoices from './fetchCustomVoices';\nimport fetchVoices from './fetchVoices';\nimport patchOptions from '../patchOptions';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport SpeechSynthesisUtterance from './SpeechSynthesisUtterance';\n\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#audio-outputs\nconst DEFAULT_OUTPUT_FORMAT = 'audio-24khz-160kbitrate-mono-mp3';\nconst EMPTY_ARRAY = [];\n\nexport default options => {\n  const {\n    audioContext,\n    fetchCredentials,\n    ponyfill = {\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    },\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat = DEFAULT_OUTPUT_FORMAT\n  } = patchOptions(options);\n\n  if (!audioContext && !ponyfill.AudioContext) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support Web Audio and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  class SpeechSynthesis extends EventTarget {\n    constructor() {\n      super();\n\n      this.queue = new AudioContextQueue({ audioContext, ponyfill });\n\n      this.updateVoices();\n    }\n\n    cancel() {\n      this.queue.stop();\n    }\n\n    getVoices() {\n      return EMPTY_ARRAY;\n    }\n\n    get onvoiceschanged() {\n      return getEventAttributeValue(this, 'voiceschanged');\n    }\n\n    set onvoiceschanged(value) {\n      setEventAttributeValue(this, 'voiceschanged', value);\n    }\n\n    pause() {\n      this.queue.pause();\n    }\n\n    resume() {\n      this.queue.resume();\n    }\n\n    speak(utterance) {\n      if (!(utterance instanceof SpeechSynthesisUtterance)) {\n        throw new Error('invalid utterance');\n      }\n\n      const { reject, resolve, promise } = createDeferred();\n      const handleError = ({ error: errorCode, message }) => {\n        const error = new Error(errorCode);\n\n        error.stack = message;\n\n        reject(error);\n      };\n\n      utterance.addEventListener('end', resolve);\n      utterance.addEventListener('error', handleError);\n\n      utterance.preload({\n        deploymentId: speechSynthesisDeploymentId,\n        fetchCredentials,\n        outputFormat: speechSynthesisOutputFormat\n      });\n\n      this.queue.push(utterance);\n\n      return promise.finally(() => {\n        utterance.removeEventListener('end', resolve);\n        utterance.removeEventListener('error', handleError);\n      });\n    }\n\n    get speaking() {\n      return this.queue.speaking;\n    }\n\n    async updateVoices() {\n      const { customVoiceHostname, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n      if (speechSynthesisDeploymentId) {\n        if (subscriptionKey) {\n          console.warn(\n            'web-speech-cognitive-services: Listing of custom voice models are only available when using subscription key.'\n          );\n\n          await onErrorResumeNext(async () => {\n            const voices = await fetchCustomVoices({\n              customVoiceHostname,\n              deploymentId: speechSynthesisDeploymentId,\n              region,\n              speechSynthesisHostname,\n              subscriptionKey\n            });\n\n            this.getVoices = () => voices;\n          });\n        }\n      } else {\n        // If fetch voice list failed, we will not emit \"voiceschanged\" event.\n        // In the spec, there is no \"error\" event.\n\n        await onErrorResumeNext(async () => {\n          const voices = await fetchVoices(await fetchCredentials());\n\n          this.getVoices = () => voices;\n        });\n      }\n\n      this.dispatchEvent(new SpeechSynthesisEvent('voiceschanged'));\n    }\n  }\n\n  return {\n    speechSynthesis: new SpeechSynthesis(),\n    SpeechSynthesisEvent,\n    SpeechSynthesisUtterance\n  };\n};\n"],"file":"createSpeechSynthesisPonyfill.js"}