{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/AudioContextConsumer.js"],"names":["audioContext","suspend","playingUtterance","dispatchEvent","CustomEvent","resume","queue","utterance","shift","play","stop","state"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAGE,oBAAYA,YAAZ,EAA0B;AAAA;AACxB,SAAKA,YAAL,GAAoBA,YAApB;AACD;;;;WAED,iBAAQ;AACN,WAAKA,YAAL,IAAqB,KAAKA,YAAL,CAAkBC,OAAlB,EAArB;AACA,WAAKC,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,aAAtB,CAAoC,IAAIC,WAAJ,CAAgB,OAAhB,CAApC,CAAzB;AACD;;;WAED,kBAAS;AACP,WAAKJ,YAAL,IAAqB,KAAKA,YAAL,CAAkBK,MAAlB,EAArB;AACA,WAAKH,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,aAAtB,CAAoC,IAAIC,WAAJ,CAAgB,QAAhB,CAApC,CAAzB;AACD;;;;2FAED,iBAAYE,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGUC,SAAS,GAAGD,KAAK,CAACE,KAAN,EAHtB;AAAA;AAAA;AAAA;;AAII,qBAAKN,gBAAL,GAAwBK,SAAxB;AAJJ;AAAA,uBAMUA,SAAS,CAACE,IAAV,CAAe,KAAKT,YAApB,CANV;;AAAA;AAQI,qBAAKE,gBAAL,GAAwB,IAAxB;AARJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAYA,gBAAO;AACL,WAAKA,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBQ,IAAtB,EAAzB;;AAEA,UAAI,KAAKV,YAAL,CAAkBW,KAAlB,KAA4B,WAAhC,EAA6C;AAC3C;AACA;AAEA;AACA;AACA,aAAKX,YAAL,CAAkBK,MAAlB;AACD;AACF","sourcesContent":["/* eslint no-await-in-loop: \"off\" */\n\nexport default class {\n  constructor(audioContext) {\n    this.audioContext = audioContext;\n  }\n\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('pause'));\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('resume'));\n  }\n\n  async start(queue) {\n    let utterance;\n\n    while ((utterance = queue.shift())) {\n      this.playingUtterance = utterance;\n\n      await utterance.play(this.audioContext);\n\n      this.playingUtterance = null;\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext.state === 'suspended') {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.resume();\n    }\n  }\n}\n"],"file":"AudioContextConsumer.js"}