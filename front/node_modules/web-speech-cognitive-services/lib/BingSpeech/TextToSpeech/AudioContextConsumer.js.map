{"version":3,"sources":["../../../src/BingSpeech/TextToSpeech/AudioContextConsumer.js"],"names":["audioContext","suspend","playingUtterance","emit","resume","queue","AudioContext","Error","utterance","shift","play","close","stop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;WACE,iBAAQ;AACN,WAAKA,YAAL,IAAqB,KAAKA,YAAL,CAAkBC,OAAlB,EAArB;AACA,WAAKC,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,OAA3B,CAAzB;AACD;;;WAED,kBAAS;AACP,WAAKH,YAAL,IAAqB,KAAKA,YAAL,CAAkBI,MAAlB,EAArB;AACA,WAAKF,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,QAA3B,CAAzB;AACD;;;;2FAED,iBAAYE,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqBC,gBAAAA,YAArB,QAAqBA,YAArB;;AAAA,qBACM,KAAKN,YADX;AAAA;AAAA;AAAA;;AAAA,sBAEU,IAAIO,KAAJ,CAAU,iBAAV,CAFV;;AAAA;AAAA;;AAAA;AAAA,sBAQYC,SAAS,GAAGH,KAAK,CAACI,KAAN,EARxB;AAAA;AAAA;AAAA;;AASM,qBAAKP,gBAAL,GAAwBM,SAAxB;AATN;AAAA,uBAWYA,SAAS,CAACE,IAAV,CAAe,KAAKV,YAAL,KAAsB,KAAKA,YAAL,GAAoB,IAAIM,YAAJ,EAA1C,CAAf,CAXZ;;AAAA;AAaM,qBAAKJ,gBAAL,GAAwB,IAAxB;AAbN;AAAA;;AAAA;AAAA;AAAA;AAAA,uBAgBU,KAAKF,YAhBf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAgB+B,qBAAKA,YAAL,CAAkBW,KAAlB,EAhB/B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAoBA,gBAAO;AACL,WAAKT,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBU,IAAtB,EAAzB;;AAEA,UAAI,KAAKZ,YAAT,EAAuB;AACrB;AACA;AAEA;AACA;AACA,aAAKA,YAAL,CAAkBW,KAAlB;AACA,aAAKX,YAAL,GAAoB,IAApB;AACD;AACF","sourcesContent":["export default class {\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.emit('pause');\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.emit('resume');\n  }\n\n  async start(queue, { AudioContext }) {\n    if (this.audioContext) {\n      throw new Error('already started');\n    }\n\n    let utterance;\n\n    try {\n      while ((utterance = queue.shift())) {\n        this.playingUtterance = utterance;\n\n        await utterance.play(this.audioContext || (this.audioContext = new AudioContext()));\n\n        this.playingUtterance = null;\n      }\n    } finally {\n      await this.audioContext && this.audioContext.close();\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext) {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n"],"file":"AudioContextConsumer.js"}