"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useComposerProps;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = require("react");

var _createAdaptiveCardsAttachmentForScreenReaderMiddleware = _interopRequireDefault(require("./adaptiveCards/createAdaptiveCardsAttachmentForScreenReaderMiddleware"));

var _createAdaptiveCardsAttachmentMiddleware = _interopRequireDefault(require("./adaptiveCards/createAdaptiveCardsAttachmentMiddleware"));

var _createAdaptiveCardsStyleSet = _interopRequireDefault(require("./adaptiveCards/Styles/createAdaptiveCardsStyleSet"));

var _renderMarkdown = _interopRequireDefault(require("./renderMarkdown"));

function useComposerProps(_ref) {
  var attachmentForScreenReaderMiddleware = _ref.attachmentForScreenReaderMiddleware,
      attachmentMiddleware = _ref.attachmentMiddleware,
      renderMarkdown = _ref.renderMarkdown,
      styleOptions = _ref.styleOptions,
      styleSet = _ref.styleSet;
  var patchedAttachmentMiddleware = (0, _react.useMemo)(function () {
    return [].concat((0, _toConsumableArray2.default)(attachmentMiddleware), [(0, _createAdaptiveCardsAttachmentMiddleware.default)()]);
  }, [attachmentMiddleware]);
  var patchedAttachmentForScreenReaderMiddleware = (0, _react.useMemo)(function () {
    return [].concat((0, _toConsumableArray2.default)(attachmentForScreenReaderMiddleware), [(0, _createAdaptiveCardsAttachmentForScreenReaderMiddleware.default)()]);
  }, [attachmentForScreenReaderMiddleware]); // When styleSet is not specified, the styleOptions will be used to create Adaptive Cards styleSet and merged into useStyleSet.

  var extraStyleSet = (0, _react.useMemo)(function () {
    return styleSet ? undefined : (0, _createAdaptiveCardsStyleSet.default)(styleOptions);
  }, [styleOptions, styleSet]);
  var patchedRenderMarkdown = (0, _react.useMemo)(function () {
    return typeof renderMarkdown === 'undefined' ? _renderMarkdown.default : renderMarkdown;
  }, [renderMarkdown]);
  return {
    attachmentForScreenReaderMiddleware: patchedAttachmentForScreenReaderMiddleware,
    attachmentMiddleware: patchedAttachmentMiddleware,
    extraStyleSet: extraStyleSet,
    renderMarkdown: patchedRenderMarkdown
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91c2VDb21wb3NlclByb3BzLnRzIl0sIm5hbWVzIjpbInVzZUNvbXBvc2VyUHJvcHMiLCJhdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZSIsImF0dGFjaG1lbnRNaWRkbGV3YXJlIiwicmVuZGVyTWFya2Rvd24iLCJzdHlsZU9wdGlvbnMiLCJzdHlsZVNldCIsInBhdGNoZWRBdHRhY2htZW50TWlkZGxld2FyZSIsInBhdGNoZWRBdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZSIsImV4dHJhU3R5bGVTZXQiLCJ1bmRlZmluZWQiLCJwYXRjaGVkUmVuZGVyTWFya2Rvd24iLCJkZWZhdWx0UmVuZGVyTWFya2Rvd24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRWUsU0FBU0EsZ0JBQVQsT0FpQmI7QUFBQSxNQWhCQUMsbUNBZ0JBLFFBaEJBQSxtQ0FnQkE7QUFBQSxNQWZBQyxvQkFlQSxRQWZBQSxvQkFlQTtBQUFBLE1BZEFDLGNBY0EsUUFkQUEsY0FjQTtBQUFBLE1BYkFDLFlBYUEsUUFiQUEsWUFhQTtBQUFBLE1BWkFDLFFBWUEsUUFaQUEsUUFZQTtBQUNBLE1BQU1DLDJCQUEyQixHQUFHLG9CQUNsQztBQUFBLHNEQUFVSixvQkFBVixJQUFnQyx1REFBaEM7QUFBQSxHQURrQyxFQUVsQyxDQUFDQSxvQkFBRCxDQUZrQyxDQUFwQztBQUtBLE1BQU1LLDBDQUEwQyxHQUFHLG9CQUNqRDtBQUFBLHNEQUFVTixtQ0FBVixJQUErQyxzRUFBL0M7QUFBQSxHQURpRCxFQUVqRCxDQUFDQSxtQ0FBRCxDQUZpRCxDQUFuRCxDQU5BLENBV0E7O0FBQ0EsTUFBTU8sYUFBYSxHQUFHLG9CQUNwQjtBQUFBLFdBQU9ILFFBQVEsR0FBR0ksU0FBSCxHQUFlLDBDQUE0QkwsWUFBNUIsQ0FBOUI7QUFBQSxHQURvQixFQUVwQixDQUFDQSxZQUFELEVBQWVDLFFBQWYsQ0FGb0IsQ0FBdEI7QUFLQSxNQUFNSyxxQkFBcUIsR0FBRyxvQkFDNUI7QUFBQSxXQUFPLE9BQU9QLGNBQVAsS0FBMEIsV0FBMUIsR0FBd0NRLHVCQUF4QyxHQUFnRVIsY0FBdkU7QUFBQSxHQUQ0QixFQUU1QixDQUFDQSxjQUFELENBRjRCLENBQTlCO0FBS0EsU0FBTztBQUNMRixJQUFBQSxtQ0FBbUMsRUFBRU0sMENBRGhDO0FBRUxMLElBQUFBLG9CQUFvQixFQUFFSSwyQkFGakI7QUFHTEUsSUFBQUEsYUFBYSxFQUFiQSxhQUhLO0FBSUxMLElBQUFBLGNBQWMsRUFBRU87QUFKWCxHQUFQO0FBTUQiLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlLCBBdHRhY2htZW50TWlkZGxld2FyZSB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWFwaSc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY3JlYXRlQWRhcHRpdmVDYXJkc0F0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlIGZyb20gJy4vYWRhcHRpdmVDYXJkcy9jcmVhdGVBZGFwdGl2ZUNhcmRzQXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUnO1xuaW1wb3J0IGNyZWF0ZUFkYXB0aXZlQ2FyZHNBdHRhY2htZW50TWlkZGxld2FyZSBmcm9tICcuL2FkYXB0aXZlQ2FyZHMvY3JlYXRlQWRhcHRpdmVDYXJkc0F0dGFjaG1lbnRNaWRkbGV3YXJlJztcbmltcG9ydCBjcmVhdGVBZGFwdGl2ZUNhcmRzU3R5bGVTZXQgZnJvbSAnLi9hZGFwdGl2ZUNhcmRzL1N0eWxlcy9jcmVhdGVBZGFwdGl2ZUNhcmRzU3R5bGVTZXQnO1xuaW1wb3J0IGRlZmF1bHRSZW5kZXJNYXJrZG93biBmcm9tICcuL3JlbmRlck1hcmtkb3duJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29tcG9zZXJQcm9wcyh7XG4gIGF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlLFxuICBhdHRhY2htZW50TWlkZGxld2FyZSxcbiAgcmVuZGVyTWFya2Rvd24sXG4gIHN0eWxlT3B0aW9ucyxcbiAgc3R5bGVTZXRcbn06IHtcbiAgYXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmU6IEF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlW107XG4gIGF0dGFjaG1lbnRNaWRkbGV3YXJlOiBBdHRhY2htZW50TWlkZGxld2FyZVtdO1xuICByZW5kZXJNYXJrZG93bj86IChtYXJrZG93bjogc3RyaW5nLCB7IG1hcmtkb3duUmVzcGVjdENSTEY6IGJvb2xlYW4gfSwgeyBleHRlcm5hbExpbmtBbHQ6IHN0cmluZyB9KSA9PiBzdHJpbmc7XG4gIHN0eWxlT3B0aW9uczogYW55O1xuICBzdHlsZVNldDogYW55O1xufSk6IHtcbiAgYXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmU6IEF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlW107XG4gIGF0dGFjaG1lbnRNaWRkbGV3YXJlOiBBdHRhY2htZW50TWlkZGxld2FyZVtdO1xuICByZW5kZXJNYXJrZG93bjogKG1hcmtkb3duOiBzdHJpbmcsIHsgbWFya2Rvd25SZXNwZWN0Q1JMRjogYm9vbGVhbiB9LCB7IGV4dGVybmFsTGlua0FsdDogc3RyaW5nIH0pID0+IHN0cmluZztcbiAgZXh0cmFTdHlsZVNldDogYW55O1xufSB7XG4gIGNvbnN0IHBhdGNoZWRBdHRhY2htZW50TWlkZGxld2FyZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gWy4uLmF0dGFjaG1lbnRNaWRkbGV3YXJlLCBjcmVhdGVBZGFwdGl2ZUNhcmRzQXR0YWNobWVudE1pZGRsZXdhcmUoKV0sXG4gICAgW2F0dGFjaG1lbnRNaWRkbGV3YXJlXVxuICApO1xuXG4gIGNvbnN0IHBhdGNoZWRBdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gWy4uLmF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlLCBjcmVhdGVBZGFwdGl2ZUNhcmRzQXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmUoKV0sXG4gICAgW2F0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJNaWRkbGV3YXJlXVxuICApO1xuXG4gIC8vIFdoZW4gc3R5bGVTZXQgaXMgbm90IHNwZWNpZmllZCwgdGhlIHN0eWxlT3B0aW9ucyB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIEFkYXB0aXZlIENhcmRzIHN0eWxlU2V0IGFuZCBtZXJnZWQgaW50byB1c2VTdHlsZVNldC5cbiAgY29uc3QgZXh0cmFTdHlsZVNldCA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHN0eWxlU2V0ID8gdW5kZWZpbmVkIDogY3JlYXRlQWRhcHRpdmVDYXJkc1N0eWxlU2V0KHN0eWxlT3B0aW9ucykpLFxuICAgIFtzdHlsZU9wdGlvbnMsIHN0eWxlU2V0XVxuICApO1xuXG4gIGNvbnN0IHBhdGNoZWRSZW5kZXJNYXJrZG93biA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHR5cGVvZiByZW5kZXJNYXJrZG93biA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0UmVuZGVyTWFya2Rvd24gOiByZW5kZXJNYXJrZG93biksXG4gICAgW3JlbmRlck1hcmtkb3duXVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgYXR0YWNobWVudEZvclNjcmVlblJlYWRlck1pZGRsZXdhcmU6IHBhdGNoZWRBdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyTWlkZGxld2FyZSxcbiAgICBhdHRhY2htZW50TWlkZGxld2FyZTogcGF0Y2hlZEF0dGFjaG1lbnRNaWRkbGV3YXJlLFxuICAgIGV4dHJhU3R5bGVTZXQsXG4gICAgcmVuZGVyTWFya2Rvd246IHBhdGNoZWRSZW5kZXJNYXJrZG93blxuICB9O1xufVxuIl19