"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCognitiveServicesSpeechServicesPonyfillFactory;

var _SpeechServices = _interopRequireDefault(require("web-speech-cognitive-services/lib/SpeechServices"));

var _createMicrophoneAudioConfigAndAudioContext = _interopRequireDefault(require("./speech/createMicrophoneAudioConfigAndAudioContext"));

function createCognitiveServicesSpeechServicesPonyfillFactory(_ref) {
  var audioConfig = _ref.audioConfig,
      audioContext = _ref.audioContext,
      audioInputDeviceId = _ref.audioInputDeviceId,
      credentials = _ref.credentials,
      enableTelemetry = _ref.enableTelemetry,
      speechRecognitionEndpointId = _ref.speechRecognitionEndpointId,
      speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId,
      speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat,
      textNormalization = _ref.textNormalization;

  if (!window.navigator.mediaDevices && !audioConfig) {
    console.warn('botframework-webchat: Your browser does not support Web Audio or the page is not loaded via HTTPS or localhost. Cognitive Services Speech Services is disabled. However, you may pass a custom AudioConfig to enable speech in this environment.');
    return function () {
      return {};
    };
  }

  if (audioConfig) {
    audioInputDeviceId && console.warn('botframework-webchat: "audioConfig" and "audioInputDeviceId" cannot be set at the same time; ignoring "audioInputDeviceId".');
    audioContext && console.warn('botframework-webchat: "audioConfig" and "audioContext" cannot be set at the same time; ignoring "audioContext" for speech recognition.');
  } else {
    var _createMicrophoneAudi = (0, _createMicrophoneAudioConfigAndAudioContext.default)({
      audioContext: audioContext,
      audioInputDeviceId: audioInputDeviceId,
      enableTelemetry: enableTelemetry
    });

    audioConfig = _createMicrophoneAudi.audioConfig;
    audioContext = _createMicrophoneAudi.audioContext;
  }

  return function () {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        referenceGrammarID = _ref2.referenceGrammarID;

    var _createPonyfill = (0, _SpeechServices.default)({
      audioConfig: audioConfig,
      audioContext: audioContext,
      credentials: credentials,
      enableTelemetry: enableTelemetry,
      referenceGrammars: referenceGrammarID ? ["luis/".concat(referenceGrammarID, "-PRODUCTION")] : [],
      speechRecognitionEndpointId: speechRecognitionEndpointId,
      speechSynthesisDeploymentId: speechSynthesisDeploymentId,
      speechSynthesisOutputFormat: speechSynthesisOutputFormat,
      textNormalization: textNormalization
    }),
        SpeechGrammarList = _createPonyfill.SpeechGrammarList,
        SpeechRecognition = _createPonyfill.SpeechRecognition,
        speechSynthesis = _createPonyfill.speechSynthesis,
        SpeechSynthesisUtterance = _createPonyfill.SpeechSynthesisUtterance;

    return {
      resumeAudioContext: function resumeAudioContext() {
        return audioContext && audioContext.state === 'suspended' && audioContext.resume();
      },
      SpeechGrammarList: SpeechGrammarList,
      SpeechRecognition: SpeechRecognition,
      speechSynthesis: speechSynthesis,
      SpeechSynthesisUtterance: SpeechSynthesisUtterance
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVDb2duaXRpdmVTZXJ2aWNlc1NwZWVjaFNlcnZpY2VzUG9ueWZpbGxGYWN0b3J5LnRzIl0sIm5hbWVzIjpbImNyZWF0ZUNvZ25pdGl2ZVNlcnZpY2VzU3BlZWNoU2VydmljZXNQb255ZmlsbEZhY3RvcnkiLCJhdWRpb0NvbmZpZyIsImF1ZGlvQ29udGV4dCIsImF1ZGlvSW5wdXREZXZpY2VJZCIsImNyZWRlbnRpYWxzIiwiZW5hYmxlVGVsZW1ldHJ5Iiwic3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkIiwic3BlZWNoU3ludGhlc2lzRGVwbG95bWVudElkIiwic3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0IiwidGV4dE5vcm1hbGl6YXRpb24iLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJjb25zb2xlIiwid2FybiIsInJlZmVyZW5jZUdyYW1tYXJJRCIsInJlZmVyZW5jZUdyYW1tYXJzIiwiU3BlZWNoR3JhbW1hckxpc3QiLCJTcGVlY2hSZWNvZ25pdGlvbiIsInNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsInJlc3VtZUF1ZGlvQ29udGV4dCIsInN0YXRlIiwicmVzdW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQTs7QUFLQTs7QUFFZSxTQUFTQSxvREFBVCxPQW9CYztBQUFBLE1BbkIzQkMsV0FtQjJCLFFBbkIzQkEsV0FtQjJCO0FBQUEsTUFsQjNCQyxZQWtCMkIsUUFsQjNCQSxZQWtCMkI7QUFBQSxNQWpCM0JDLGtCQWlCMkIsUUFqQjNCQSxrQkFpQjJCO0FBQUEsTUFoQjNCQyxXQWdCMkIsUUFoQjNCQSxXQWdCMkI7QUFBQSxNQWYzQkMsZUFlMkIsUUFmM0JBLGVBZTJCO0FBQUEsTUFkM0JDLDJCQWMyQixRQWQzQkEsMkJBYzJCO0FBQUEsTUFiM0JDLDJCQWEyQixRQWIzQkEsMkJBYTJCO0FBQUEsTUFaM0JDLDJCQVkyQixRQVozQkEsMkJBWTJCO0FBQUEsTUFYM0JDLGlCQVcyQixRQVgzQkEsaUJBVzJCOztBQUMzQixNQUFJLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsWUFBbEIsSUFBa0MsQ0FBQ1gsV0FBdkMsRUFBb0Q7QUFDbERZLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLGtQQURGO0FBSUEsV0FBTztBQUFBLGFBQU8sRUFBUDtBQUFBLEtBQVA7QUFDRDs7QUFFRCxNQUFJYixXQUFKLEVBQWlCO0FBQ2ZFLElBQUFBLGtCQUFrQixJQUNoQlUsT0FBTyxDQUFDQyxJQUFSLENBQ0UsNkhBREYsQ0FERjtBQUtBWixJQUFBQSxZQUFZLElBQ1ZXLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLHdJQURGLENBREY7QUFJRCxHQVZELE1BVU87QUFBQSxnQ0FDNEIseURBQTJDO0FBQzFFWixNQUFBQSxZQUFZLEVBQVpBLFlBRDBFO0FBRTFFQyxNQUFBQSxrQkFBa0IsRUFBbEJBLGtCQUYwRTtBQUcxRUUsTUFBQUEsZUFBZSxFQUFmQTtBQUgwRSxLQUEzQyxDQUQ1Qjs7QUFDRkosSUFBQUEsV0FERSx5QkFDRkEsV0FERTtBQUNXQyxJQUFBQSxZQURYLHlCQUNXQSxZQURYO0FBTU47O0FBRUQsU0FBTyxZQUFpQztBQUFBLG9GQUFQLEVBQU87QUFBQSxRQUE5QmEsa0JBQThCLFNBQTlCQSxrQkFBOEI7O0FBQ3RDLDBCQUE0Riw2QkFBZTtBQUN6R2QsTUFBQUEsV0FBVyxFQUFYQSxXQUR5RztBQUV6R0MsTUFBQUEsWUFBWSxFQUFaQSxZQUZ5RztBQUd6R0UsTUFBQUEsV0FBVyxFQUFYQSxXQUh5RztBQUl6R0MsTUFBQUEsZUFBZSxFQUFmQSxlQUp5RztBQUt6R1csTUFBQUEsaUJBQWlCLEVBQUVELGtCQUFrQixHQUFHLGdCQUFTQSxrQkFBVCxpQkFBSCxHQUErQyxFQUxxQjtBQU16R1QsTUFBQUEsMkJBQTJCLEVBQTNCQSwyQkFOeUc7QUFPekdDLE1BQUFBLDJCQUEyQixFQUEzQkEsMkJBUHlHO0FBUXpHQyxNQUFBQSwyQkFBMkIsRUFBM0JBLDJCQVJ5RztBQVN6R0MsTUFBQUEsaUJBQWlCLEVBQWpCQTtBQVR5RyxLQUFmLENBQTVGO0FBQUEsUUFBUVEsaUJBQVIsbUJBQVFBLGlCQUFSO0FBQUEsUUFBMkJDLGlCQUEzQixtQkFBMkJBLGlCQUEzQjtBQUFBLFFBQThDQyxlQUE5QyxtQkFBOENBLGVBQTlDO0FBQUEsUUFBK0RDLHdCQUEvRCxtQkFBK0RBLHdCQUEvRDs7QUFZQSxXQUFPO0FBQ0xDLE1BQUFBLGtCQUFrQixFQUFFO0FBQUEsZUFBTW5CLFlBQVksSUFBSUEsWUFBWSxDQUFDb0IsS0FBYixLQUF1QixXQUF2QyxJQUFzRHBCLFlBQVksQ0FBQ3FCLE1BQWIsRUFBNUQ7QUFBQSxPQURmO0FBRUxOLE1BQUFBLGlCQUFpQixFQUFqQkEsaUJBRks7QUFHTEMsTUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFISztBQUlMQyxNQUFBQSxlQUFlLEVBQWZBLGVBSks7QUFLTEMsTUFBQUEsd0JBQXdCLEVBQXhCQTtBQUxLLEtBQVA7QUFPRCxHQXBCRDtBQXFCRCIsInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXVkaW9Db25maWcgfSBmcm9tICdtaWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkayc7XG5pbXBvcnQgeyBXZWJTcGVlY2hQb255ZmlsbEZhY3RvcnkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IGNyZWF0ZVBvbnlmaWxsIGZyb20gJ3dlYi1zcGVlY2gtY29nbml0aXZlLXNlcnZpY2VzL2xpYi9TcGVlY2hTZXJ2aWNlcyc7XG5cbmltcG9ydCBDb2duaXRpdmVTZXJ2aWNlc0F1ZGlvT3V0cHV0Rm9ybWF0IGZyb20gJy4vdHlwZXMvQ29nbml0aXZlU2VydmljZXNBdWRpb091dHB1dEZvcm1hdCc7XG5pbXBvcnQgQ29nbml0aXZlU2VydmljZXNDcmVkZW50aWFscyBmcm9tICcuL3R5cGVzL0NvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMnO1xuaW1wb3J0IENvZ25pdGl2ZVNlcnZpY2VzVGV4dE5vcm1hbGl6YXRpb24gZnJvbSAnLi90eXBlcy9Db2duaXRpdmVTZXJ2aWNlc1RleHROb3JtYWxpemF0aW9uJztcbmltcG9ydCBjcmVhdGVNaWNyb3Bob25lQXVkaW9Db25maWdBbmRBdWRpb0NvbnRleHQgZnJvbSAnLi9zcGVlY2gvY3JlYXRlTWljcm9waG9uZUF1ZGlvQ29uZmlnQW5kQXVkaW9Db250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ29nbml0aXZlU2VydmljZXNTcGVlY2hTZXJ2aWNlc1BvbnlmaWxsRmFjdG9yeSh7XG4gIGF1ZGlvQ29uZmlnLFxuICBhdWRpb0NvbnRleHQsXG4gIGF1ZGlvSW5wdXREZXZpY2VJZCxcbiAgY3JlZGVudGlhbHMsXG4gIGVuYWJsZVRlbGVtZXRyeSxcbiAgc3BlZWNoUmVjb2duaXRpb25FbmRwb2ludElkLFxuICBzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQsXG4gIHNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCxcbiAgdGV4dE5vcm1hbGl6YXRpb25cbn06IHtcbiAgYXVkaW9Db25maWc/OiBBdWRpb0NvbmZpZztcbiAgYXVkaW9Db250ZXh0PzogQXVkaW9Db250ZXh0O1xuICBhdWRpb0lucHV0RGV2aWNlSWQ/OiBzdHJpbmc7XG4gIGNyZWRlbnRpYWxzOiBDb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzO1xuICBlbmFibGVUZWxlbWV0cnk/OiB0cnVlO1xuICBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQ/OiBzdHJpbmc7XG4gIHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZD86IHN0cmluZztcbiAgc3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0PzogQ29nbml0aXZlU2VydmljZXNBdWRpb091dHB1dEZvcm1hdDtcbiAgdGV4dE5vcm1hbGl6YXRpb24/OiBDb2duaXRpdmVTZXJ2aWNlc1RleHROb3JtYWxpemF0aW9uO1xufSk6IFdlYlNwZWVjaFBvbnlmaWxsRmFjdG9yeSB7XG4gIGlmICghd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMgJiYgIWF1ZGlvQ29uZmlnKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBXZWIgQXVkaW8gb3IgdGhlIHBhZ2UgaXMgbm90IGxvYWRlZCB2aWEgSFRUUFMgb3IgbG9jYWxob3N0LiBDb2duaXRpdmUgU2VydmljZXMgU3BlZWNoIFNlcnZpY2VzIGlzIGRpc2FibGVkLiBIb3dldmVyLCB5b3UgbWF5IHBhc3MgYSBjdXN0b20gQXVkaW9Db25maWcgdG8gZW5hYmxlIHNwZWVjaCBpbiB0aGlzIGVudmlyb25tZW50LidcbiAgICApO1xuXG4gICAgcmV0dXJuICgpID0+ICh7fSk7XG4gIH1cblxuICBpZiAoYXVkaW9Db25maWcpIHtcbiAgICBhdWRpb0lucHV0RGV2aWNlSWQgJiZcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBcImF1ZGlvQ29uZmlnXCIgYW5kIFwiYXVkaW9JbnB1dERldmljZUlkXCIgY2Fubm90IGJlIHNldCBhdCB0aGUgc2FtZSB0aW1lOyBpZ25vcmluZyBcImF1ZGlvSW5wdXREZXZpY2VJZFwiLidcbiAgICAgICk7XG5cbiAgICBhdWRpb0NvbnRleHQgJiZcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBcImF1ZGlvQ29uZmlnXCIgYW5kIFwiYXVkaW9Db250ZXh0XCIgY2Fubm90IGJlIHNldCBhdCB0aGUgc2FtZSB0aW1lOyBpZ25vcmluZyBcImF1ZGlvQ29udGV4dFwiIGZvciBzcGVlY2ggcmVjb2duaXRpb24uJ1xuICAgICAgKTtcbiAgfSBlbHNlIHtcbiAgICAoeyBhdWRpb0NvbmZpZywgYXVkaW9Db250ZXh0IH0gPSBjcmVhdGVNaWNyb3Bob25lQXVkaW9Db25maWdBbmRBdWRpb0NvbnRleHQoe1xuICAgICAgYXVkaW9Db250ZXh0LFxuICAgICAgYXVkaW9JbnB1dERldmljZUlkLFxuICAgICAgZW5hYmxlVGVsZW1ldHJ5XG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuICh7IHJlZmVyZW5jZUdyYW1tYXJJRCB9ID0ge30pID0+IHtcbiAgICBjb25zdCB7IFNwZWVjaEdyYW1tYXJMaXN0LCBTcGVlY2hSZWNvZ25pdGlvbiwgc3BlZWNoU3ludGhlc2lzLCBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgfSA9IGNyZWF0ZVBvbnlmaWxsKHtcbiAgICAgIGF1ZGlvQ29uZmlnLFxuICAgICAgYXVkaW9Db250ZXh0LFxuICAgICAgY3JlZGVudGlhbHMsXG4gICAgICBlbmFibGVUZWxlbWV0cnksXG4gICAgICByZWZlcmVuY2VHcmFtbWFyczogcmVmZXJlbmNlR3JhbW1hcklEID8gW2BsdWlzLyR7cmVmZXJlbmNlR3JhbW1hcklEfS1QUk9EVUNUSU9OYF0gOiBbXSxcbiAgICAgIHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCxcbiAgICAgIHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZCxcbiAgICAgIHNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCxcbiAgICAgIHRleHROb3JtYWxpemF0aW9uXG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdW1lQXVkaW9Db250ZXh0OiAoKSA9PiBhdWRpb0NvbnRleHQgJiYgYXVkaW9Db250ZXh0LnN0YXRlID09PSAnc3VzcGVuZGVkJyAmJiBhdWRpb0NvbnRleHQucmVzdW1lKCksXG4gICAgICBTcGVlY2hHcmFtbWFyTGlzdCxcbiAgICAgIFNwZWVjaFJlY29nbml0aW9uLFxuICAgICAgc3BlZWNoU3ludGhlc2lzLFxuICAgICAgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==