"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDirectLineSpeechAdapters;

var _botframeworkDirectlinespeechSdk = require("botframework-directlinespeech-sdk");

var _createMicrophoneAudioConfigAndAudioContext = _interopRequireDefault(require("./speech/createMicrophoneAudioConfigAndAudioContext"));

var DEFAULT_LANGUAGE = 'en-US'; // TODO: When using DLSpeech via bundle, we will add our own MicrophoneAudioConfig.

function createDirectLineSpeechAdapters(_ref) {
  var _window, _window$navigator;

  var audioConfig = _ref.audioConfig,
      audioContext = _ref.audioContext,
      audioInputDeviceId = _ref.audioInputDeviceId,
      enableInternalHTTPSupport = _ref.enableInternalHTTPSupport,
      enableTelemetry = _ref.enableTelemetry,
      fetchCredentials = _ref.fetchCredentials,
      speechRecognitionEndpointId = _ref.speechRecognitionEndpointId,
      _ref$speechRecognitio = _ref.speechRecognitionLanguage,
      speechRecognitionLanguage = _ref$speechRecognitio === void 0 ? ((_window = window) === null || _window === void 0 ? void 0 : (_window$navigator = _window.navigator) === null || _window$navigator === void 0 ? void 0 : _window$navigator.language) || DEFAULT_LANGUAGE : _ref$speechRecognitio,
      speechSynthesisDeploymentId = _ref.speechSynthesisDeploymentId,
      speechSynthesisOutputFormat = _ref.speechSynthesisOutputFormat,
      textNormalization = _ref.textNormalization,
      userID = _ref.userID,
      username = _ref.username;

  if (audioConfig) {
    audioInputDeviceId && console.warn('botframework-webchat: "audioConfig" and "audioInputDeviceId" cannot be set at the same time; ignoring "audioInputDeviceId".');
    audioContext && console.warn('botframework-webchat: "audioConfig" and "audioContext" cannot be set at the same time; ignoring "audioContext" for speech recognition.');
  } else if (!window.navigator.mediaDevices) {
    // If the browser does not support or allow microphone access, we will continue to create Direct Line Speech adapter without custom "audioConfig" and "audioContext".
    // In Direct Line Speech SDK, it will disable speech functionality, only leaving text chat available via the protocol.
    console.warn('botframework-webchat: Your browser does not support or allow microphone access or the page is not loaded via HTTPS or localhost. Speech is disabled for Direct Line Speech. However, you may pass a custom "audioConfig" to enable speech in this environment.');
  } else {
    var _createMicrophoneAudi = (0, _createMicrophoneAudioConfigAndAudioContext.default)({
      audioContext: audioContext,
      audioInputDeviceId: audioInputDeviceId,
      enableTelemetry: enableTelemetry
    });

    audioConfig = _createMicrophoneAudi.audioConfig;
    audioContext = _createMicrophoneAudi.audioContext;
  }

  return (0, _botframeworkDirectlinespeechSdk.createAdapters)({
    audioConfig: audioConfig,
    audioContext: audioContext,
    enableInternalHTTPSupport: enableInternalHTTPSupport,
    enableTelemetry: enableTelemetry,
    fetchCredentials: fetchCredentials,
    speechRecognitionEndpointId: speechRecognitionEndpointId,
    speechRecognitionLanguage: speechRecognitionLanguage,
    speechSynthesisDeploymentId: speechSynthesisDeploymentId,
    speechSynthesisOutputFormat: speechSynthesisOutputFormat,
    textNormalization: textNormalization,
    userID: userID,
    username: username
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVEaXJlY3RMaW5lU3BlZWNoQWRhcHRlcnMudHMiXSwibmFtZXMiOlsiREVGQVVMVF9MQU5HVUFHRSIsImNyZWF0ZURpcmVjdExpbmVTcGVlY2hBZGFwdGVycyIsImF1ZGlvQ29uZmlnIiwiYXVkaW9Db250ZXh0IiwiYXVkaW9JbnB1dERldmljZUlkIiwiZW5hYmxlSW50ZXJuYWxIVFRQU3VwcG9ydCIsImVuYWJsZVRlbGVtZXRyeSIsImZldGNoQ3JlZGVudGlhbHMiLCJzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQiLCJzcGVlY2hSZWNvZ25pdGlvbkxhbmd1YWdlIiwid2luZG93IiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQiLCJzcGVlY2hTeW50aGVzaXNPdXRwdXRGb3JtYXQiLCJ0ZXh0Tm9ybWFsaXphdGlvbiIsInVzZXJJRCIsInVzZXJuYW1lIiwiY29uc29sZSIsIndhcm4iLCJtZWRpYURldmljZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQU9BOztBQUVBLElBQU1BLGdCQUFnQixHQUFHLE9BQXpCLEMsQ0FFQTs7QUFDZSxTQUFTQyw4QkFBVCxPQStCYjtBQUFBOztBQUFBLE1BOUJBQyxXQThCQSxRQTlCQUEsV0E4QkE7QUFBQSxNQTdCQUMsWUE2QkEsUUE3QkFBLFlBNkJBO0FBQUEsTUE1QkFDLGtCQTRCQSxRQTVCQUEsa0JBNEJBO0FBQUEsTUEzQkFDLHlCQTJCQSxRQTNCQUEseUJBMkJBO0FBQUEsTUExQkFDLGVBMEJBLFFBMUJBQSxlQTBCQTtBQUFBLE1BekJBQyxnQkF5QkEsUUF6QkFBLGdCQXlCQTtBQUFBLE1BeEJBQywyQkF3QkEsUUF4QkFBLDJCQXdCQTtBQUFBLG1DQXZCQUMseUJBdUJBO0FBQUEsTUF2QkFBLHlCQXVCQSxzQ0F2QjRCLFlBQUFDLE1BQU0sVUFBTiwrREFBUUMsU0FBUix3RUFBbUJDLFFBQW5CLEtBQStCWixnQkF1QjNEO0FBQUEsTUF0QkFhLDJCQXNCQSxRQXRCQUEsMkJBc0JBO0FBQUEsTUFyQkFDLDJCQXFCQSxRQXJCQUEsMkJBcUJBO0FBQUEsTUFwQkFDLGlCQW9CQSxRQXBCQUEsaUJBb0JBO0FBQUEsTUFuQkFDLE1BbUJBLFFBbkJBQSxNQW1CQTtBQUFBLE1BbEJBQyxRQWtCQSxRQWxCQUEsUUFrQkE7O0FBQ0EsTUFBSWYsV0FBSixFQUFpQjtBQUNmRSxJQUFBQSxrQkFBa0IsSUFDaEJjLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLDZIQURGLENBREY7QUFLQWhCLElBQUFBLFlBQVksSUFDVmUsT0FBTyxDQUFDQyxJQUFSLENBQ0Usd0lBREYsQ0FERjtBQUlELEdBVkQsTUFVTyxJQUFJLENBQUNULE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQlMsWUFBdEIsRUFBb0M7QUFDekM7QUFDQTtBQUNBRixJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSxnUUFERjtBQUdELEdBTk0sTUFNQTtBQUFBLGdDQUM0Qix5REFBMkM7QUFDMUVoQixNQUFBQSxZQUFZLEVBQVpBLFlBRDBFO0FBRTFFQyxNQUFBQSxrQkFBa0IsRUFBbEJBLGtCQUYwRTtBQUcxRUUsTUFBQUEsZUFBZSxFQUFmQTtBQUgwRSxLQUEzQyxDQUQ1Qjs7QUFDRkosSUFBQUEsV0FERSx5QkFDRkEsV0FERTtBQUNXQyxJQUFBQSxZQURYLHlCQUNXQSxZQURYO0FBTU47O0FBRUQsU0FBTyxxREFBZTtBQUNwQkQsSUFBQUEsV0FBVyxFQUFYQSxXQURvQjtBQUVwQkMsSUFBQUEsWUFBWSxFQUFaQSxZQUZvQjtBQUdwQkUsSUFBQUEseUJBQXlCLEVBQXpCQSx5QkFIb0I7QUFJcEJDLElBQUFBLGVBQWUsRUFBZkEsZUFKb0I7QUFLcEJDLElBQUFBLGdCQUFnQixFQUFoQkEsZ0JBTG9CO0FBTXBCQyxJQUFBQSwyQkFBMkIsRUFBM0JBLDJCQU5vQjtBQU9wQkMsSUFBQUEseUJBQXlCLEVBQXpCQSx5QkFQb0I7QUFRcEJJLElBQUFBLDJCQUEyQixFQUEzQkEsMkJBUm9CO0FBU3BCQyxJQUFBQSwyQkFBMkIsRUFBM0JBLDJCQVRvQjtBQVVwQkMsSUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFWb0I7QUFXcEJDLElBQUFBLE1BQU0sRUFBTkEsTUFYb0I7QUFZcEJDLElBQUFBLFFBQVEsRUFBUkE7QUFab0IsR0FBZixDQUFQO0FBY0QiLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF1ZGlvQ29uZmlnIH0gZnJvbSAnbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsnO1xuaW1wb3J0IHsgY3JlYXRlQWRhcHRlcnMgfSBmcm9tICdib3RmcmFtZXdvcmstZGlyZWN0bGluZXNwZWVjaC1zZGsnO1xuaW1wb3J0IHsgRGlyZWN0TGluZUpTQm90Q29ubmVjdGlvbiB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuaW1wb3J0IHsgV2ViU3BlZWNoUG9ueWZpbGwgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuXG5pbXBvcnQgQ29nbml0aXZlU2VydmljZXNBdWRpb091dHB1dEZvcm1hdCBmcm9tICcuL3R5cGVzL0NvZ25pdGl2ZVNlcnZpY2VzQXVkaW9PdXRwdXRGb3JtYXQnO1xuaW1wb3J0IENvZ25pdGl2ZVNlcnZpY2VzQ3JlZGVudGlhbHMgZnJvbSAnLi90eXBlcy9Db2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzJztcbmltcG9ydCBDb2duaXRpdmVTZXJ2aWNlc1RleHROb3JtYWxpemF0aW9uIGZyb20gJy4vdHlwZXMvQ29nbml0aXZlU2VydmljZXNUZXh0Tm9ybWFsaXphdGlvbic7XG5pbXBvcnQgY3JlYXRlTWljcm9waG9uZUF1ZGlvQ29uZmlnQW5kQXVkaW9Db250ZXh0IGZyb20gJy4vc3BlZWNoL2NyZWF0ZU1pY3JvcGhvbmVBdWRpb0NvbmZpZ0FuZEF1ZGlvQ29udGV4dCc7XG5cbmNvbnN0IERFRkFVTFRfTEFOR1VBR0UgPSAnZW4tVVMnO1xuXG4vLyBUT0RPOiBXaGVuIHVzaW5nIERMU3BlZWNoIHZpYSBidW5kbGUsIHdlIHdpbGwgYWRkIG91ciBvd24gTWljcm9waG9uZUF1ZGlvQ29uZmlnLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGlyZWN0TGluZVNwZWVjaEFkYXB0ZXJzKHtcbiAgYXVkaW9Db25maWcsXG4gIGF1ZGlvQ29udGV4dCxcbiAgYXVkaW9JbnB1dERldmljZUlkLFxuICBlbmFibGVJbnRlcm5hbEhUVFBTdXBwb3J0LFxuICBlbmFibGVUZWxlbWV0cnksXG4gIGZldGNoQ3JlZGVudGlhbHMsXG4gIHNwZWVjaFJlY29nbml0aW9uRW5kcG9pbnRJZCxcbiAgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSA9IHdpbmRvdz8ubmF2aWdhdG9yPy5sYW5ndWFnZSB8fCBERUZBVUxUX0xBTkdVQUdFLFxuICBzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQsXG4gIHNwZWVjaFN5bnRoZXNpc091dHB1dEZvcm1hdCxcbiAgdGV4dE5vcm1hbGl6YXRpb24sXG4gIHVzZXJJRCxcbiAgdXNlcm5hbWVcbn06IHtcbiAgYXVkaW9Db25maWc/OiBBdWRpb0NvbmZpZztcbiAgYXVkaW9Db250ZXh0PzogQXVkaW9Db250ZXh0O1xuICBhdWRpb0lucHV0RGV2aWNlSWQ/OiBzdHJpbmc7XG4gIGVuYWJsZUludGVybmFsSFRUUFN1cHBvcnQ/OiB0cnVlO1xuICBlbmFibGVUZWxlbWV0cnk/OiB0cnVlO1xuICBmZXRjaENyZWRlbnRpYWxzOiBDb2duaXRpdmVTZXJ2aWNlc0NyZWRlbnRpYWxzO1xuICBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQ/OiBzdHJpbmc7XG4gIHNwZWVjaFJlY29nbml0aW9uTGFuZ3VhZ2U/OiBzdHJpbmc7XG4gIHNwZWVjaFN5bnRoZXNpc0RlcGxveW1lbnRJZD86IHN0cmluZztcbiAgc3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0PzogQ29nbml0aXZlU2VydmljZXNBdWRpb091dHB1dEZvcm1hdDtcbiAgdGV4dE5vcm1hbGl6YXRpb24/OiBDb2duaXRpdmVTZXJ2aWNlc1RleHROb3JtYWxpemF0aW9uO1xuICB1c2VySUQ/OiBzdHJpbmc7XG4gIHVzZXJuYW1lPzogc3RyaW5nO1xufSk6IHtcbiAgZGlyZWN0TGluZTogRGlyZWN0TGluZUpTQm90Q29ubmVjdGlvbjtcbiAgd2ViU3BlZWNoUG9ueWZpbGw6IFdlYlNwZWVjaFBvbnlmaWxsO1xufSB7XG4gIGlmIChhdWRpb0NvbmZpZykge1xuICAgIGF1ZGlvSW5wdXREZXZpY2VJZCAmJlxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFwiYXVkaW9Db25maWdcIiBhbmQgXCJhdWRpb0lucHV0RGV2aWNlSWRcIiBjYW5ub3QgYmUgc2V0IGF0IHRoZSBzYW1lIHRpbWU7IGlnbm9yaW5nIFwiYXVkaW9JbnB1dERldmljZUlkXCIuJ1xuICAgICAgKTtcblxuICAgIGF1ZGlvQ29udGV4dCAmJlxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFwiYXVkaW9Db25maWdcIiBhbmQgXCJhdWRpb0NvbnRleHRcIiBjYW5ub3QgYmUgc2V0IGF0IHRoZSBzYW1lIHRpbWU7IGlnbm9yaW5nIFwiYXVkaW9Db250ZXh0XCIgZm9yIHNwZWVjaCByZWNvZ25pdGlvbi4nXG4gICAgICApO1xuICB9IGVsc2UgaWYgKCF3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgIC8vIElmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgb3IgYWxsb3cgbWljcm9waG9uZSBhY2Nlc3MsIHdlIHdpbGwgY29udGludWUgdG8gY3JlYXRlIERpcmVjdCBMaW5lIFNwZWVjaCBhZGFwdGVyIHdpdGhvdXQgY3VzdG9tIFwiYXVkaW9Db25maWdcIiBhbmQgXCJhdWRpb0NvbnRleHRcIi5cbiAgICAvLyBJbiBEaXJlY3QgTGluZSBTcGVlY2ggU0RLLCBpdCB3aWxsIGRpc2FibGUgc3BlZWNoIGZ1bmN0aW9uYWxpdHksIG9ubHkgbGVhdmluZyB0ZXh0IGNoYXQgYXZhaWxhYmxlIHZpYSB0aGUgcHJvdG9jb2wuXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBvciBhbGxvdyBtaWNyb3Bob25lIGFjY2VzcyBvciB0aGUgcGFnZSBpcyBub3QgbG9hZGVkIHZpYSBIVFRQUyBvciBsb2NhbGhvc3QuIFNwZWVjaCBpcyBkaXNhYmxlZCBmb3IgRGlyZWN0IExpbmUgU3BlZWNoLiBIb3dldmVyLCB5b3UgbWF5IHBhc3MgYSBjdXN0b20gXCJhdWRpb0NvbmZpZ1wiIHRvIGVuYWJsZSBzcGVlY2ggaW4gdGhpcyBlbnZpcm9ubWVudC4nXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAoeyBhdWRpb0NvbmZpZywgYXVkaW9Db250ZXh0IH0gPSBjcmVhdGVNaWNyb3Bob25lQXVkaW9Db25maWdBbmRBdWRpb0NvbnRleHQoe1xuICAgICAgYXVkaW9Db250ZXh0LFxuICAgICAgYXVkaW9JbnB1dERldmljZUlkLFxuICAgICAgZW5hYmxlVGVsZW1ldHJ5XG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUFkYXB0ZXJzKHtcbiAgICBhdWRpb0NvbmZpZyxcbiAgICBhdWRpb0NvbnRleHQsXG4gICAgZW5hYmxlSW50ZXJuYWxIVFRQU3VwcG9ydCxcbiAgICBlbmFibGVUZWxlbWV0cnksXG4gICAgZmV0Y2hDcmVkZW50aWFscyxcbiAgICBzcGVlY2hSZWNvZ25pdGlvbkVuZHBvaW50SWQsXG4gICAgc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSxcbiAgICBzcGVlY2hTeW50aGVzaXNEZXBsb3ltZW50SWQsXG4gICAgc3BlZWNoU3ludGhlc2lzT3V0cHV0Rm9ybWF0LFxuICAgIHRleHROb3JtYWxpemF0aW9uLFxuICAgIHVzZXJJRCxcbiAgICB1c2VybmFtZVxuICB9KTtcbn1cbiJdfQ==