"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAudioConfig;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _microsoftCognitiveservicesSpeechSdk = require("microsoft-cognitiveservices-speech-sdk");

var _CustomAudioInputStream = _interopRequireDefault(require("./CustomAudioInputStream"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var SYMBOL_ATTACH = Symbol('attach');
var SYMBOL_TURN_OFF = Symbol('turnOff');

var CreateAudioConfigAudioInputStream = /*#__PURE__*/function (_CustomAudioInputStre) {
  (0, _inherits2.default)(CreateAudioConfigAudioInputStream, _CustomAudioInputStre);

  var _super = _createSuper(CreateAudioConfigAudioInputStream);

  function CreateAudioConfigAudioInputStream(_ref) {
    var _this;

    var attach = _ref.attach,
        debug = _ref.debug,
        turnOff = _ref.turnOff;
    (0, _classCallCheck2.default)(this, CreateAudioConfigAudioInputStream);

    if (!attach || typeof attach !== 'function') {
      throw new Error('"attach" must be a function.');
    }

    if (turnOff && typeof turnOff !== 'function') {
      throw new Error('"turnOff", if defined, must be a function.');
    }

    _this = _super.call(this, {
      debug: debug
    }); // False alarm: indexer is a constant of type Symbol.
    // eslint-disable-next-line security/detect-object-injection

    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), SYMBOL_ATTACH, void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), SYMBOL_TURN_OFF, void 0);
    _this[SYMBOL_ATTACH] = attach; // False alarm: indexer is a constant of type Symbol.
    // eslint-disable-next-line security/detect-object-injection

    _this[SYMBOL_TURN_OFF] = turnOff;
    return _this;
  }

  (0, _createClass2.default)(CreateAudioConfigAudioInputStream, [{
    key: "performAttach",
    value: function performAttach(audioNodeId) {
      // False alarm: indexer is a constant of type Symbol.
      // eslint-disable-next-line security/detect-object-injection
      return this[SYMBOL_ATTACH](audioNodeId);
    }
  }, {
    key: "performTurnOff",
    value: function performTurnOff() {
      var turnOff = this[SYMBOL_TURN_OFF];
      return turnOff && turnOff();
    }
  }]);
  return CreateAudioConfigAudioInputStream;
}(_CustomAudioInputStream.default);

function createAudioConfig(options) {
  return _microsoftCognitiveservicesSpeechSdk.AudioConfig.fromStreamInput(new CreateAudioConfigAudioInputStream(options));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGVlY2gvY3JlYXRlQXVkaW9Db25maWcudHMiXSwibmFtZXMiOlsiU1lNQk9MX0FUVEFDSCIsIlN5bWJvbCIsIlNZTUJPTF9UVVJOX09GRiIsIkNyZWF0ZUF1ZGlvQ29uZmlnQXVkaW9JbnB1dFN0cmVhbSIsImF0dGFjaCIsImRlYnVnIiwidHVybk9mZiIsIkVycm9yIiwiYXVkaW9Ob2RlSWQiLCJDdXN0b21BdWRpb0lucHV0U3RyZWFtIiwiY3JlYXRlQXVkaW9Db25maWciLCJvcHRpb25zIiwiQXVkaW9Db25maWciLCJmcm9tU3RyZWFtSW5wdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7O0FBRUE7Ozs7OztBQVVBLElBQU1BLGFBQWEsR0FBR0MsTUFBTSxDQUFDLFFBQUQsQ0FBNUI7QUFDQSxJQUFNQyxlQUFlLEdBQUdELE1BQU0sQ0FBQyxTQUFELENBQTlCOztJQWlCTUUsaUM7Ozs7O0FBQ0osbURBQWtFO0FBQUE7O0FBQUEsUUFBcERDLE1BQW9ELFFBQXBEQSxNQUFvRDtBQUFBLFFBQTVDQyxLQUE0QyxRQUE1Q0EsS0FBNEM7QUFBQSxRQUFyQ0MsT0FBcUMsUUFBckNBLE9BQXFDO0FBQUE7O0FBQ2hFLFFBQUksQ0FBQ0YsTUFBRCxJQUFXLE9BQU9BLE1BQVAsS0FBa0IsVUFBakMsRUFBNkM7QUFDM0MsWUFBTSxJQUFJRyxLQUFKLENBQVUsOEJBQVYsQ0FBTjtBQUNEOztBQUVELFFBQUlELE9BQU8sSUFBSSxPQUFPQSxPQUFQLEtBQW1CLFVBQWxDLEVBQThDO0FBQzVDLFlBQU0sSUFBSUMsS0FBSixDQUFVLDRDQUFWLENBQU47QUFDRDs7QUFFRCw4QkFBTTtBQUFFRixNQUFBQSxLQUFLLEVBQUxBO0FBQUYsS0FBTixFQVRnRSxDQVdoRTtBQUNBOztBQVpnRSwrRUFvQmpFTCxhQXBCaUU7QUFBQSwrRUFxQmpFRSxlQXJCaUU7QUFhaEUsVUFBS0YsYUFBTCxJQUFzQkksTUFBdEIsQ0FiZ0UsQ0FlaEU7QUFDQTs7QUFDQSxVQUFLRixlQUFMLElBQXdCSSxPQUF4QjtBQWpCZ0U7QUFrQmpFOzs7O1dBS0QsdUJBQXdCRSxXQUF4QixFQUlHO0FBQ0Q7QUFDQTtBQUNBLGFBQU8sS0FBS1IsYUFBTCxFQUFvQlEsV0FBcEIsQ0FBUDtBQUNEOzs7V0FFRCwwQkFBMEM7QUFDeEMsVUFBMkJGLE9BQTNCLEdBQXVDLElBQXZDLENBQVNKLGVBQVQ7QUFFQSxhQUFPSSxPQUFPLElBQUlBLE9BQU8sRUFBekI7QUFDRDs7O0VBdEM2Q0csK0I7O0FBeUNqQyxTQUFTQyxpQkFBVCxDQUEyQkMsT0FBM0IsRUFBOEQ7QUFDM0UsU0FBT0MsaURBQVlDLGVBQVosQ0FBNEIsSUFBSVYsaUNBQUosQ0FBc0NRLE9BQXRDLENBQTVCLENBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogW1AyXSAjMzk3NiBXZSBzaG91bGQgZXhwb3J0IHRoaXMgdG8gYWxsb3cgd2ViIGRldmVsb3BlcnMgdG8gYnJpbmcgaW4gdGhlaXIgb3duIG1pY3JvcGhvbmUuXG4vLyAgICAgICBGb3IgZXhhbXBsZSwgaXQgc2hvdWxkIGVuYWJsZSBSZWFjdCBOYXRpdmUgZGV2cyB0byBicmluZyBpbiB0aGVpciBtaWNyb3Bob25lIGltcGxlbWVudGF0aW9uIGFuZCB1c2UgQ29nbml0aXZlIFNlcnZpY2VzIFNwZWVjaCBTZXJ2aWNlcy5cblxuaW1wb3J0IHsgQXVkaW9Db25maWcgfSBmcm9tICdtaWNyb3NvZnQtY29nbml0aXZlc2VydmljZXMtc3BlZWNoLXNkayc7XG5cbmltcG9ydCBDdXN0b21BdWRpb0lucHV0U3RyZWFtLCB7IEF1ZGlvU3RyZWFtTm9kZSwgRGV2aWNlSW5mbywgRm9ybWF0IH0gZnJvbSAnLi9DdXN0b21BdWRpb0lucHV0U3RyZWFtJztcblxudHlwZSBBdHRhY2hGdW5jdGlvbiA9IChhdWRpb05vZGVJZDogc3RyaW5nKSA9PiBQcm9taXNlPHtcbiAgYXVkaW9TdHJlYW1Ob2RlOiBBdWRpb1N0cmVhbU5vZGU7XG4gIGRldmljZUluZm86IERldmljZUluZm87XG4gIGZvcm1hdDogRm9ybWF0O1xufT47XG5cbnR5cGUgVHVybk9mZkZ1bmN0aW9uID0gKCkgPT4gUHJvbWlzZTx2b2lkPjtcblxuY29uc3QgU1lNQk9MX0FUVEFDSCA9IFN5bWJvbCgnYXR0YWNoJyk7XG5jb25zdCBTWU1CT0xfVFVSTl9PRkYgPSBTeW1ib2woJ3R1cm5PZmYnKTtcblxudHlwZSBDcmVhdGVBdWRpb0NvbmZpZ09wdGlvbnMgPSB7XG4gIC8qKiBDYWxsYmFjayBmdW5jdGlvbiBmb3IgYXR0YWNoaW5nIHRoZSBkZXZpY2UgYnkgcmV0dXJuaW5nIGFuIGF1ZGlvIG5vZGUuICovXG4gIGF0dGFjaDogQXR0YWNoRnVuY3Rpb247XG5cbiAgLyoqIGB0cnVlYCB0byBlbmFibGUgZGlhZ25vc3RpYyBpbmZvcm1hdGlvbiwgb3RoZXJ3aXNlLCBgZmFsc2VgLiAqL1xuICBkZWJ1Zz86IHRydWU7XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB0dXJuaW5nIG9mZiB0aGUgZGV2aWNlIGJlZm9yZSBkZXRhY2hpbmcgaXRzIG5vZGUgZnJvbSBhbiBhdWRpbyBncmFwaC5cbiAgICpcbiAgICogTm90ZTogdGhpcyBpcyBub3QgY2FsbGVkIGZvciBEaXJlY3QgTGluZSBTcGVlY2guXG4gICAqL1xuICB0dXJuT2ZmPzogVHVybk9mZkZ1bmN0aW9uO1xufTtcblxuY2xhc3MgQ3JlYXRlQXVkaW9Db25maWdBdWRpb0lucHV0U3RyZWFtIGV4dGVuZHMgQ3VzdG9tQXVkaW9JbnB1dFN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yKHsgYXR0YWNoLCBkZWJ1ZywgdHVybk9mZiB9OiBDcmVhdGVBdWRpb0NvbmZpZ09wdGlvbnMpIHtcbiAgICBpZiAoIWF0dGFjaCB8fCB0eXBlb2YgYXR0YWNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiYXR0YWNoXCIgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmICh0dXJuT2ZmICYmIHR5cGVvZiB0dXJuT2ZmICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1widHVybk9mZlwiLCBpZiBkZWZpbmVkLCBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgc3VwZXIoeyBkZWJ1ZyB9KTtcblxuICAgIC8vIEZhbHNlIGFsYXJtOiBpbmRleGVyIGlzIGEgY29uc3RhbnQgb2YgdHlwZSBTeW1ib2wuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlY3VyaXR5L2RldGVjdC1vYmplY3QtaW5qZWN0aW9uXG4gICAgdGhpc1tTWU1CT0xfQVRUQUNIXSA9IGF0dGFjaDtcblxuICAgIC8vIEZhbHNlIGFsYXJtOiBpbmRleGVyIGlzIGEgY29uc3RhbnQgb2YgdHlwZSBTeW1ib2wuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlY3VyaXR5L2RldGVjdC1vYmplY3QtaW5qZWN0aW9uXG4gICAgdGhpc1tTWU1CT0xfVFVSTl9PRkZdID0gdHVybk9mZjtcbiAgfVxuXG4gIFtTWU1CT0xfQVRUQUNIXTogQXR0YWNoRnVuY3Rpb247XG4gIFtTWU1CT0xfVFVSTl9PRkZdOiBUdXJuT2ZmRnVuY3Rpb247XG5cbiAgcHJvdGVjdGVkIHBlcmZvcm1BdHRhY2goYXVkaW9Ob2RlSWQ6IHN0cmluZyk6IFByb21pc2U8e1xuICAgIGF1ZGlvU3RyZWFtTm9kZTogQXVkaW9TdHJlYW1Ob2RlO1xuICAgIGRldmljZUluZm86IERldmljZUluZm87XG4gICAgZm9ybWF0OiBGb3JtYXQ7XG4gIH0+IHtcbiAgICAvLyBGYWxzZSBhbGFybTogaW5kZXhlciBpcyBhIGNvbnN0YW50IG9mIHR5cGUgU3ltYm9sLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWN1cml0eS9kZXRlY3Qtb2JqZWN0LWluamVjdGlvblxuICAgIHJldHVybiB0aGlzW1NZTUJPTF9BVFRBQ0hdKGF1ZGlvTm9kZUlkKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwZXJmb3JtVHVybk9mZigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IFtTWU1CT0xfVFVSTl9PRkZdOiB0dXJuT2ZmIH0gPSB0aGlzO1xuXG4gICAgcmV0dXJuIHR1cm5PZmYgJiYgdHVybk9mZigpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUF1ZGlvQ29uZmlnKG9wdGlvbnM6IENyZWF0ZUF1ZGlvQ29uZmlnT3B0aW9ucykge1xuICByZXR1cm4gQXVkaW9Db25maWcuZnJvbVN0cmVhbUlucHV0KG5ldyBDcmVhdGVBdWRpb0NvbmZpZ0F1ZGlvSW5wdXRTdHJlYW0ob3B0aW9ucykpO1xufVxuIl19