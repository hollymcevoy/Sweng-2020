"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useParseAdaptiveCardJSON;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _react = require("react");

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../useAdaptiveCardsPackage"));

var _useStyleOptions3 = _interopRequireDefault(require("../../../hooks/useStyleOptions"));

var useDirection = _botframeworkWebchatComponent.hooks.useDirection;

function updateRTLInline(element, rtl, adaptiveCardsPackage) {
  if (element instanceof adaptiveCardsPackage.Container) {
    element.rtl = rtl;
  } // Tree traversal to add rtl boolean to child elements


  if (element.getItemAt && element.getItemCount) {
    var count = element.getItemCount();

    for (var index = 0; index < count; index++) {
      var child = element.getItemAt(index);
      updateRTLInline(child, rtl, adaptiveCardsPackage);
    }
  }
}

function useParseAdaptiveCardJSON() {
  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];

  var _useDirection = useDirection(),
      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),
      direction = _useDirection2[0];

  var _useStyleOptions = (0, _useStyleOptions3.default)(),
      _useStyleOptions2 = (0, _slicedToArray2.default)(_useStyleOptions, 1),
      adaptiveCardsParserMaxVersion = _useStyleOptions2[0].adaptiveCardsParserMaxVersion;

  var AdaptiveCard = adaptiveCardsPackage.AdaptiveCard,
      SerializationContext = adaptiveCardsPackage.SerializationContext,
      Version = adaptiveCardsPackage.Version;
  var maxVersion = (0, _react.useMemo)(function () {
    var maxVersion = Version.parse(adaptiveCardsParserMaxVersion, new SerializationContext());

    if (maxVersion && !maxVersion.isValid) {
      console.warn('botframework-webchat: "adaptiveCardsParserMaxVersion" specified is not a valid version.');
      return;
    }

    return maxVersion;
  }, [adaptiveCardsParserMaxVersion, SerializationContext, Version]);
  return (0, _react.useCallback)(function (content) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$ignoreErrors = _ref.ignoreErrors,
        ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors;

    if (!content) {
      return;
    }

    var card = new AdaptiveCard();
    var errors = [];
    var serializationContext = new SerializationContext(maxVersion);
    card.parse(content, serializationContext);
    var eventCount = serializationContext.eventCount;

    for (var i = 0; i < eventCount; i++) {
      errors.push(serializationContext.getEventAt(i));
    }

    if (!ignoreErrors && errors.length) {
      console.error('botframework-webchat: Failed to parse Adaptive Card', {
        errors: errors
      });
      throw new Error('botframework-webchat: Failed to parse Adaptive Card');
    }

    updateRTLInline(card, direction === 'rtl', adaptiveCardsPackage);
    return card;
  }, [AdaptiveCard, adaptiveCardsPackage, direction, maxVersion, SerializationContext]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL2hvb2tzL2ludGVybmFsL3VzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTi50cyJdLCJuYW1lcyI6WyJ1c2VEaXJlY3Rpb24iLCJob29rcyIsInVwZGF0ZVJUTElubGluZSIsImVsZW1lbnQiLCJydGwiLCJhZGFwdGl2ZUNhcmRzUGFja2FnZSIsIkNvbnRhaW5lciIsImdldEl0ZW1BdCIsImdldEl0ZW1Db3VudCIsImNvdW50IiwiaW5kZXgiLCJjaGlsZCIsInVzZVBhcnNlQWRhcHRpdmVDYXJkSlNPTiIsImRpcmVjdGlvbiIsImFkYXB0aXZlQ2FyZHNQYXJzZXJNYXhWZXJzaW9uIiwiQWRhcHRpdmVDYXJkIiwiU2VyaWFsaXphdGlvbkNvbnRleHQiLCJWZXJzaW9uIiwibWF4VmVyc2lvbiIsInBhcnNlIiwiaXNWYWxpZCIsImNvbnNvbGUiLCJ3YXJuIiwiY29udGVudCIsImlnbm9yZUVycm9ycyIsImNhcmQiLCJlcnJvcnMiLCJzZXJpYWxpemF0aW9uQ29udGV4dCIsImV2ZW50Q291bnQiLCJpIiwicHVzaCIsImdldEV2ZW50QXQiLCJsZW5ndGgiLCJlcnJvciIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUVBLElBQVFBLFlBQVIsR0FBeUJDLG1DQUF6QixDQUFRRCxZQUFSOztBQUVBLFNBQVNFLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDQyxHQUFsQyxFQUF1Q0Msb0JBQXZDLEVBQTZEO0FBQzNELE1BQUlGLE9BQU8sWUFBWUUsb0JBQW9CLENBQUNDLFNBQTVDLEVBQXVEO0FBQ3JESCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsR0FBY0EsR0FBZDtBQUNELEdBSDBELENBSzNEOzs7QUFDQSxNQUFJRCxPQUFPLENBQUNJLFNBQVIsSUFBcUJKLE9BQU8sQ0FBQ0ssWUFBakMsRUFBK0M7QUFDN0MsUUFBTUMsS0FBSyxHQUFHTixPQUFPLENBQUNLLFlBQVIsRUFBZDs7QUFFQSxTQUFLLElBQUlFLEtBQUssR0FBRyxDQUFqQixFQUFvQkEsS0FBSyxHQUFHRCxLQUE1QixFQUFtQ0MsS0FBSyxFQUF4QyxFQUE0QztBQUMxQyxVQUFNQyxLQUFLLEdBQUdSLE9BQU8sQ0FBQ0ksU0FBUixDQUFrQkcsS0FBbEIsQ0FBZDtBQUVBUixNQUFBQSxlQUFlLENBQUNTLEtBQUQsRUFBUVAsR0FBUixFQUFhQyxvQkFBYixDQUFmO0FBQ0Q7QUFDRjtBQUNGOztBQUVjLFNBQVNPLHdCQUFULEdBQW9DO0FBQ2pELDhCQUErQix1Q0FBL0I7QUFBQTtBQUFBLE1BQU9QLG9CQUFQOztBQUNBLHNCQUFvQkwsWUFBWSxFQUFoQztBQUFBO0FBQUEsTUFBT2EsU0FBUDs7QUFDQSx5QkFBNEMsZ0NBQTVDO0FBQUE7QUFBQSxNQUFTQyw2QkFBVCx3QkFBU0EsNkJBQVQ7O0FBRUEsTUFBUUMsWUFBUixHQUF3RFYsb0JBQXhELENBQVFVLFlBQVI7QUFBQSxNQUFzQkMsb0JBQXRCLEdBQXdEWCxvQkFBeEQsQ0FBc0JXLG9CQUF0QjtBQUFBLE1BQTRDQyxPQUE1QyxHQUF3RFosb0JBQXhELENBQTRDWSxPQUE1QztBQUVBLE1BQU1DLFVBQVUsR0FBRyxvQkFBUSxZQUFNO0FBQy9CLFFBQU1BLFVBQVUsR0FBR0QsT0FBTyxDQUFDRSxLQUFSLENBQWNMLDZCQUFkLEVBQTZDLElBQUlFLG9CQUFKLEVBQTdDLENBQW5COztBQUVBLFFBQUlFLFVBQVUsSUFBSSxDQUFDQSxVQUFVLENBQUNFLE9BQTlCLEVBQXVDO0FBQ3JDQyxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSx5RkFBYjtBQUVBO0FBQ0Q7O0FBRUQsV0FBT0osVUFBUDtBQUNELEdBVmtCLEVBVWhCLENBQUNKLDZCQUFELEVBQWdDRSxvQkFBaEMsRUFBc0RDLE9BQXRELENBVmdCLENBQW5CO0FBWUEsU0FBTyx3QkFDTCxVQUFDTSxPQUFELEVBQTRDO0FBQUEsbUZBQVAsRUFBTztBQUFBLGlDQUFoQ0MsWUFBZ0M7QUFBQSxRQUFoQ0EsWUFBZ0Msa0NBQWpCLEtBQWlCOztBQUMxQyxRQUFJLENBQUNELE9BQUwsRUFBYztBQUNaO0FBQ0Q7O0FBRUQsUUFBTUUsSUFBSSxHQUFHLElBQUlWLFlBQUosRUFBYjtBQUNBLFFBQU1XLE1BQU0sR0FBRyxFQUFmO0FBQ0EsUUFBTUMsb0JBQW9CLEdBQUcsSUFBSVgsb0JBQUosQ0FBeUJFLFVBQXpCLENBQTdCO0FBRUFPLElBQUFBLElBQUksQ0FBQ04sS0FBTCxDQUFXSSxPQUFYLEVBQW9CSSxvQkFBcEI7QUFFQSxRQUFRQyxVQUFSLEdBQXVCRCxvQkFBdkIsQ0FBUUMsVUFBUjs7QUFFQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELFVBQXBCLEVBQWdDQyxDQUFDLEVBQWpDLEVBQXFDO0FBQ25DSCxNQUFBQSxNQUFNLENBQUNJLElBQVAsQ0FBWUgsb0JBQW9CLENBQUNJLFVBQXJCLENBQWdDRixDQUFoQyxDQUFaO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDTCxZQUFELElBQWlCRSxNQUFNLENBQUNNLE1BQTVCLEVBQW9DO0FBQ2xDWCxNQUFBQSxPQUFPLENBQUNZLEtBQVIsQ0FBYyxxREFBZCxFQUFxRTtBQUFFUCxRQUFBQSxNQUFNLEVBQU5BO0FBQUYsT0FBckU7QUFFQSxZQUFNLElBQUlRLEtBQUosQ0FBVSxxREFBVixDQUFOO0FBQ0Q7O0FBRURoQyxJQUFBQSxlQUFlLENBQUN1QixJQUFELEVBQU9aLFNBQVMsS0FBSyxLQUFyQixFQUE0QlIsb0JBQTVCLENBQWY7QUFFQSxXQUFPb0IsSUFBUDtBQUNELEdBM0JJLEVBNEJMLENBQUNWLFlBQUQsRUFBZVYsb0JBQWYsRUFBcUNRLFNBQXJDLEVBQWdESyxVQUFoRCxFQUE0REYsb0JBQTVELENBNUJLLENBQVA7QUE4QkQiLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhvb2tzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29tcG9uZW50JztcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UgZnJvbSAnLi4vdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UnO1xuaW1wb3J0IHVzZVN0eWxlT3B0aW9ucyBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VTdHlsZU9wdGlvbnMnO1xuXG5jb25zdCB7IHVzZURpcmVjdGlvbiB9ID0gaG9va3M7XG5cbmZ1bmN0aW9uIHVwZGF0ZVJUTElubGluZShlbGVtZW50LCBydGwsIGFkYXB0aXZlQ2FyZHNQYWNrYWdlKSB7XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgYWRhcHRpdmVDYXJkc1BhY2thZ2UuQ29udGFpbmVyKSB7XG4gICAgZWxlbWVudC5ydGwgPSBydGw7XG4gIH1cblxuICAvLyBUcmVlIHRyYXZlcnNhbCB0byBhZGQgcnRsIGJvb2xlYW4gdG8gY2hpbGQgZWxlbWVudHNcbiAgaWYgKGVsZW1lbnQuZ2V0SXRlbUF0ICYmIGVsZW1lbnQuZ2V0SXRlbUNvdW50KSB7XG4gICAgY29uc3QgY291bnQgPSBlbGVtZW50LmdldEl0ZW1Db3VudCgpO1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvdW50OyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGVsZW1lbnQuZ2V0SXRlbUF0KGluZGV4KTtcblxuICAgICAgdXBkYXRlUlRMSW5saW5lKGNoaWxkLCBydGwsIGFkYXB0aXZlQ2FyZHNQYWNrYWdlKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlUGFyc2VBZGFwdGl2ZUNhcmRKU09OKCkge1xuICBjb25zdCBbYWRhcHRpdmVDYXJkc1BhY2thZ2VdID0gdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UoKTtcbiAgY29uc3QgW2RpcmVjdGlvbl0gPSB1c2VEaXJlY3Rpb24oKTtcbiAgY29uc3QgW3sgYWRhcHRpdmVDYXJkc1BhcnNlck1heFZlcnNpb24gfV0gPSB1c2VTdHlsZU9wdGlvbnMoKTtcblxuICBjb25zdCB7IEFkYXB0aXZlQ2FyZCwgU2VyaWFsaXphdGlvbkNvbnRleHQsIFZlcnNpb24gfSA9IGFkYXB0aXZlQ2FyZHNQYWNrYWdlO1xuXG4gIGNvbnN0IG1heFZlcnNpb24gPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBtYXhWZXJzaW9uID0gVmVyc2lvbi5wYXJzZShhZGFwdGl2ZUNhcmRzUGFyc2VyTWF4VmVyc2lvbiwgbmV3IFNlcmlhbGl6YXRpb25Db250ZXh0KCkpO1xuXG4gICAgaWYgKG1heFZlcnNpb24gJiYgIW1heFZlcnNpb24uaXNWYWxpZCkge1xuICAgICAgY29uc29sZS53YXJuKCdib3RmcmFtZXdvcmstd2ViY2hhdDogXCJhZGFwdGl2ZUNhcmRzUGFyc2VyTWF4VmVyc2lvblwiIHNwZWNpZmllZCBpcyBub3QgYSB2YWxpZCB2ZXJzaW9uLicpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heFZlcnNpb247XG4gIH0sIFthZGFwdGl2ZUNhcmRzUGFyc2VyTWF4VmVyc2lvbiwgU2VyaWFsaXphdGlvbkNvbnRleHQsIFZlcnNpb25dKTtcblxuICByZXR1cm4gdXNlQ2FsbGJhY2soXG4gICAgKGNvbnRlbnQsIHsgaWdub3JlRXJyb3JzID0gZmFsc2UgfSA9IHt9KSA9PiB7XG4gICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjYXJkID0gbmV3IEFkYXB0aXZlQ2FyZCgpO1xuICAgICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgICBjb25zdCBzZXJpYWxpemF0aW9uQ29udGV4dCA9IG5ldyBTZXJpYWxpemF0aW9uQ29udGV4dChtYXhWZXJzaW9uKTtcblxuICAgICAgY2FyZC5wYXJzZShjb250ZW50LCBzZXJpYWxpemF0aW9uQ29udGV4dCk7XG5cbiAgICAgIGNvbnN0IHsgZXZlbnRDb3VudCB9ID0gc2VyaWFsaXphdGlvbkNvbnRleHQ7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRDb3VudDsgaSsrKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHNlcmlhbGl6YXRpb25Db250ZXh0LmdldEV2ZW50QXQoaSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlnbm9yZUVycm9ycyAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBGYWlsZWQgdG8gcGFyc2UgQWRhcHRpdmUgQ2FyZCcsIHsgZXJyb3JzIH0pO1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IEZhaWxlZCB0byBwYXJzZSBBZGFwdGl2ZSBDYXJkJyk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZVJUTElubGluZShjYXJkLCBkaXJlY3Rpb24gPT09ICdydGwnLCBhZGFwdGl2ZUNhcmRzUGFja2FnZSk7XG5cbiAgICAgIHJldHVybiBjYXJkO1xuICAgIH0sXG4gICAgW0FkYXB0aXZlQ2FyZCwgYWRhcHRpdmVDYXJkc1BhY2thZ2UsIGRpcmVjdGlvbiwgbWF4VmVyc2lvbiwgU2VyaWFsaXphdGlvbkNvbnRleHRdXG4gICk7XG59XG4iXX0=