"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _useAdaptiveCardsHostConfig = _interopRequireDefault(require("../hooks/useAdaptiveCardsHostConfig"));

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../hooks/useAdaptiveCardsPackage"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint no-magic-numbers: ["error", { "ignore": [-1, 0, 2] }] */
var ErrorBox = _botframeworkWebchatComponent.Components.ErrorBox;
var useDisabled = _botframeworkWebchatComponent.hooks.useDisabled,
    useLocalizer = _botframeworkWebchatComponent.hooks.useLocalizer,
    usePerformCardAction = _botframeworkWebchatComponent.hooks.usePerformCardAction,
    useRenderMarkdownAsHTML = _botframeworkWebchatComponent.hooks.useRenderMarkdownAsHTML,
    useScrollToEnd = _botframeworkWebchatComponent.hooks.useScrollToEnd,
    useStyleSet = _botframeworkWebchatComponent.hooks.useStyleSet;
var node_env = undefined || "production";

function bunchUndos() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function () {
    return fns.forEach(function (fn) {
      return fn === null || fn === void 0 ? void 0 : fn();
    });
  };
}
/**
 * Adds a class to the `HTMLElement`. Returns `true` if the class is added, otherwise, `undefined`.
 */


function addClass(element, className) {
  var classList = element.classList;

  if (!classList.contains(className)) {
    classList.add(className);
    return true;
  }
}
/**
 * Adds a class to the `HTMLElement` and re-add on mutations.
 *
 * @returns {function} A function, when called, will restore to previous state.
 */


function addPersistentClassWithUndo(element, className) {
  if (!element) {
    return;
  }

  if (addClass(element, className)) {
    // After we add the class, keep observing the element to make sure the class is not removed.
    var observer = new MutationObserver(function () {
      return addClass(element, className);
    });
    observer.observe(element, {
      attributes: true,
      attributeFilter: ['class']
    });
    return function () {
      var classNames = new Set(element.className.split(' '));
      classNames.delete(className);
      element.className = Array.from(classNames).join(' ');
      observer.disconnect();
    };
  }
}
/**
 * Returns `true`, if the object is a plain object and not a class, otherwise, `false`.
 */


function isPlainObject(obj) {
  return Object.getPrototypeOf(obj) === Object.prototype;
}
/**
 * Sets an attribute.
 *
 * @returns {function} A function, when called, will restore to previous state.
 */


function setAttributeWithUndo(element, qualifiedName, nextValue) {
  if (!element) {
    return;
  }

  var value = element.getAttribute(qualifiedName);

  if (value !== nextValue) {
    element.setAttribute(qualifiedName, nextValue);
    return function () {
      return value ? element.setAttribute(qualifiedName, value) : element.removeAttribute(qualifiedName);
    };
  }
}
/**
 * An event handler for disabling event bubbling and propagation.
 */


var disabledHandler = function disabledHandler(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
  event.stopPropagation();
};
/**
 * Listens to event once. Returns a function, when called, will stop listening.
 */


function addEventListenerOnceWithUndo(element, name, handler) {
  if (!element) {
    return;
  }
  /* eslint-disable-next-line prefer-const */


  var detach;

  var detachingHandler = function detachingHandler(event) {
    try {
      handler(event);
    } finally {
      // IE11 does not support { once: true }, so we need to detach manually.
      detach();
    }
  };

  detach = function detach() {
    return element.removeEventListener(name, detachingHandler);
  };

  element.addEventListener(name, detachingHandler, {
    once: true
  });
  return detach;
}
/**
 * Listens to event. Returns a function, when called, will stop listening.
 */


function addEventListenerWithUndo(element, name, handler) {
  if (!element) {
    return;
  }

  element.addEventListener(name, handler);
  return function () {
    return element.removeEventListener(name, handler);
  };
}
/**
 * Disables an element with undo function.
 *
 * @returns {function} A function, when called, will restore to previous state.
 */


function disableElementWithUndo(element) {
  if (!element) {
    return;
  }

  var undoStack = [];
  var isActive = element === document.activeElement;
  var tag = element.nodeName.toLowerCase();
  /* eslint-disable-next-line default-case */

  switch (tag) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      undoStack.push(setAttributeWithUndo(element, 'aria-disabled', 'true'));

      if (isActive) {
        undoStack.push(addEventListenerOnceWithUndo(element, 'blur', function () {
          return undoStack.push(setAttributeWithUndo(element, 'disabled', 'disabled'));
        }));
      } else {
        undoStack.push(setAttributeWithUndo(element, 'disabled', 'disabled'));
      }

      if (tag === 'input' || tag === 'textarea') {
        undoStack.push(addEventListenerWithUndo(element, 'click', disabledHandler));
        undoStack.push(setAttributeWithUndo(element, 'readonly', 'readonly'));
      } else if (tag === 'select') {
        undoStack.push.apply(undoStack, (0, _toConsumableArray2.default)([].map.call(element.querySelectorAll('option'), function (option) {
          return setAttributeWithUndo(option, 'disabled', 'disabled');
        })));
      }

      break;
  }

  return bunchUndos.apply(void 0, undoStack);
}
/**
 * Disables all inputtable descendants.
 *
 * @param {HTMLElement | undefined} element Container element to start looking for inputtable descendants.
 * @param {boolean} observeSubtree `true` to applies to all future inputtable descendants, otherwise, `false`.
 *
 * @returns {function} A function, when called, will restore to previous state.
 */


function disableInputElementsWithUndo(element) {
  var observeSubtree = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!element) {
    return;
  }

  var undoStack = [].map.call(element.querySelectorAll('button, input, select, textarea'), function (element) {
    return disableElementWithUndo(element);
  });
  var tag = element.nodeName.toLowerCase(); // Only set tabindex="-1" on focusable element. Otherwise, we will make <div> focusable by mouse.

  (tag === 'a' || tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea') && undoStack.push(setAttributeWithUndo(element, 'tabindex', '-1'));

  if (observeSubtree) {
    var observer = new MutationObserver(function (mutations) {
      return mutations.forEach(function (_ref) {
        var addedNodes = _ref.addedNodes;
        return undoStack.push.apply(undoStack, (0, _toConsumableArray2.default)([].map.call(addedNodes, function (addedNode) {
          return disableInputElementsWithUndo(addedNode, false);
        })));
      });
    });
    observer.observe(element, {
      childList: true,
      subtree: true
    });
    undoStack.push(function () {
      return observer.disconnect();
    });
  }

  return bunchUndos.apply(void 0, (0, _toConsumableArray2.default)(undoStack));
}
/**
 * Gets the value of an attribute from an element.
 *
 * @returns {false | string} The value of the attribute. `false` if the attribute was not set.
 */


function getAttribute(element, qualifiedName) {
  return !!element && element.hasAttribute(qualifiedName) && (element.getAttribute(qualifiedName) || '');
}
/**
 * Sets or removes an attribute from an element.
 *
 * @param {HTMLElement} element - The element to set or remove attribute from.
 * @param {string} qualifiedName - The name of the attribute.
 * @param {false | string} value - The value of the attribute. When passing `false`, remove the attribute.
 */


function setOrRemoveAttribute(element, qualifiedName, value) {
  if (value === false) {
    element === null || element === void 0 ? void 0 : element.removeAttribute(qualifiedName);
  } else {
    element === null || element === void 0 ? void 0 : element.setAttribute(qualifiedName, value);
  }
}
/**
 * Sets or removes an attribute from an element with an undo function.
 *
 * @param {HTMLElement} element - The element to set or remove attribute from.
 * @param {string} qualifiedName - The name of the attribute.
 * @param {false | string} value - The value of the attribute. When passing `false`, remove the attribute.
 *
 * @returns {() => void} The undo function, when called, will undo all manipulations by restoring values recorded at the time of the function call.
 */


function setOrRemoveAttributeWithUndo(element, qualifiedName, value) {
  if (!element) {
    return;
  }

  var prevValue = getAttribute(element, qualifiedName);
  setOrRemoveAttribute(element, qualifiedName, value);
  return function () {
    return setOrRemoveAttribute(element, qualifiedName, prevValue);
  };
}
/**
 * Finds the first ancestor that fulfill the predicate.
 *
 * @param {HTMLElement} element - The starting element. This element will not be checked against the predicate.
 * @param {(ancestor: HTMLElement) => boolean} predicate - The predicate to fulfill.
 *
 * @returns {HTMLElement | undefined} The first ancestor that fulfill the predicate, otherwise, `undefined`.
 */


function findAncestor(element, predicate) {
  var current = element;

  while (current = current.parentElement) {
    if (predicate.call(element, current)) {
      return current;
    }
  }
}
/**
 * Indicates the action selected by performing a series of manipulations, with undo:
 *
 * - Accessibility: set `aria-pressed` to `true`
 * - Applies `styleOptions.actionPerformedClassName`
 *
 * @param {HTMLElement[]} selectedActionElements - An array of elements that are representing the action and is selected.
 * @param {string?} actionPerformedClassName - The name of the class to apply to all elements.
 *
 * @returns {() => void} The undo function, when called, will undo all manipulations by restoring values recorded at the time of the function call.
 */


function indicateActionSelectionWithUndo(selectedActionElements, actionPerformedClassName) {
  if (!(selectedActionElements !== null && selectedActionElements !== void 0 && selectedActionElements.length)) {
    return;
  } // Verify all input elements are "ac-pushButton", could belongs to ActionSet or "card actions".


  if (selectedActionElements.some(function (actionElement) {
    return !actionElement.classList.contains('ac-pushButton');
  })) {
    console.warn('botframework-webchat: Cannot mark selected action in the card, some elements are not an "ac-pushButton".');
    return;
  } // A distinct set of action set containers which has selections, excluding containers without actions.
  // Multiple submission in an Adaptive Card is still a vague area and TBD.
  // We might want to disable the whole card, just buttons in same container, or do nothing (today).


  var actionSetElements = new Set();
  selectedActionElements.forEach(function (selectedActionElement) {
    var actionSetElement = findAncestor(selectedActionElement, function (ancestor) {
      return ancestor.getAttribute('role') === 'menubar';
    });
    actionSetElement && actionSetElements.add(actionSetElement);
  });
  var undoStack = [];
  actionSetElements.forEach(function (actionSetElement) {
    // Remove "role" from every "ac-actionSet" container.
    undoStack.push(setOrRemoveAttributeWithUndo(actionSetElement, 'role', false)); // Modify "role" of every actions in the container.

    Array.from(actionSetElement.querySelectorAll('.ac-pushButton')).forEach(function (actionElement) {
      if (selectedActionElements.includes(actionElement)) {
        // Add "aria-pressed" and set "role" attribute to "button" (which is required by "aria-pressed").
        undoStack.push(setOrRemoveAttributeWithUndo(actionElement, 'aria-pressed', 'true'));
        undoStack.push(setOrRemoveAttributeWithUndo(actionElement, 'role', 'button')); // Highlight actions by applying `styleOptions.actionPerformedClassName`.

        actionPerformedClassName && undoStack.push(addPersistentClassWithUndo(actionElement, actionPerformedClassName));
      } else {
        // We removed "role=menubar" from the container, we must remove "role=menuitem" from unselected actions.
        undoStack.push(setOrRemoveAttributeWithUndo(actionElement, 'role', false));
      }
    });
  });
  return bunchUndos.apply(void 0, undoStack);
}
/**
 * Fixes accessibility issues from Adaptive Card, with undo.
 *
 * @returns {() => void} The undo function, when called, will undo all manipulations by restoring values recorded at the time of the function call.
 */


function fixAccessibilityIssuesWithUndo(element) {
  if (!element) {
    return;
  } // These hacks should be done in Adaptive Cards library instead.
  // Related to #3949: All action buttons inside role="menubar" should be role="menuitem".


  var undoStack = Array.from(element.querySelectorAll('.ac-actionSet[role="menubar"] [role="button"]')).map(function (actionButton) {
    return setAttributeWithUndo(actionButton, 'role', 'menuitem');
  });
  return function () {
    return undoStack.forEach(function (undo) {
      return undo === null || undo === void 0 ? void 0 : undo();
    });
  };
}

function getFocusableElements(element) {
  return [].filter.call(element.querySelectorAll(['a', 'body', 'button', 'frame', 'iframe', 'img', 'input', 'isindex', 'object', 'select', 'textarea', '[tabindex]'].join(', ')), function (element) {
    var tabIndex = (0, _botframeworkWebchatComponent.getTabIndex)(element);
    return typeof tabIndex === 'number' && tabIndex >= 0;
  });
}

function restoreActiveElementIndex(element, activeElementIndex) {
  var _getFocusableElements;

  (_getFocusableElements = getFocusableElements(element)[+activeElementIndex]) === null || _getFocusableElements === void 0 ? void 0 : _getFocusableElements.focus();
}

function saveActiveElementIndex(element) {
  return getFocusableElements(element).indexOf(document.activeElement);
}

function restoreInputValues(element, inputValues) {
  var inputs = element.querySelectorAll('input, select, textarea');
  [].forEach.call(inputs, function (input, index) {
    var value = inputValues[+index];

    if (typeof value !== 'undefined') {
      var tagName = input.tagName,
          type = input.type;

      if (tagName === 'INPUT' && (type === 'checkbox' || type === 'radio')) {
        if (typeof value === 'boolean') {
          input.checked = value;
        }
      } else if (typeof value === 'string') {
        input.value = value;
      }
    }
  });
}

function saveInputValues(element) {
  var inputs = element.querySelectorAll('input, select, textarea');
  return [].map.call(inputs, function (input) {
    var type = input.type;

    if (input.tagName === 'INPUT' && (type === 'checkbox' || type === 'radio')) {
      return input.checked;
    }

    return input.value;
  });
}

var AdaptiveCardRenderer = function AdaptiveCardRenderer(_ref2) {
  var actionPerformedClassName = _ref2.actionPerformedClassName,
      adaptiveCard = _ref2.adaptiveCard,
      disabledFromProps = _ref2.disabled,
      tapAction = _ref2.tapAction;

  var _useStyleSet = useStyleSet(),
      _useStyleSet2 = (0, _slicedToArray2.default)(_useStyleSet, 1),
      adaptiveCardRendererStyleSet = _useStyleSet2[0].adaptiveCardRenderer;

  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      _useAdaptiveCardsPack3 = _useAdaptiveCardsPack2[0],
      GlobalSettings = _useAdaptiveCardsPack3.GlobalSettings,
      HostConfig = _useAdaptiveCardsPack3.HostConfig;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      actionsPerformed = _useState2[0],
      setActionsPerformed = _useState2[1];

  var _useAdaptiveCardsHost = (0, _useAdaptiveCardsHostConfig.default)(),
      _useAdaptiveCardsHost2 = (0, _slicedToArray2.default)(_useAdaptiveCardsHost, 1),
      adaptiveCardsHostConfig = _useAdaptiveCardsHost2[0];

  var _useDisabled = useDisabled(),
      _useDisabled2 = (0, _slicedToArray2.default)(_useDisabled, 1),
      disabledFromComposer = _useDisabled2[0];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      errors = _useState4[0],
      setErrors = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      lastRender = _useState6[0],
      setLastRender = _useState6[1];

  var activeElementIndexRef = (0, _react.useRef)(-1);
  var adaptiveCardElementRef = (0, _react.useRef)();
  var contentRef = (0, _react.useRef)();
  var inputValuesRef = (0, _react.useRef)([]);
  var localize = useLocalizer();
  var performCardAction = usePerformCardAction();
  var renderMarkdownAsHTML = useRenderMarkdownAsHTML();
  var scrollToEnd = useScrollToEnd();
  var disabled = disabledFromComposer || disabledFromProps; // TODO: [P2] #3199 We should consider using `adaptiveCard.selectAction` instead.
  // The null check for "tapAction" is in "handleClickAndKeyPressForTapAction".

  var handleClickAndKeyPress = (0, _react.useCallback)(function (event) {
    var _ref3 = event,
        key = _ref3.key,
        type = _ref3.type;
    var target = event.target; // Some items, e.g. tappable text, cannot be disabled thru DOM attributes

    var current = contentRef.current;
    var adaptiveCardRoot = current.querySelector('.ac-adaptiveCard[tabindex="0"]');

    if (!adaptiveCardRoot) {
      return console.warn('botframework-webchat: No Adaptive Card root container can be found; the card is probably on an unsupported Adaptive Card version.');
    } // For "keypress" event, we only listen to ENTER and SPACEBAR key.


    if (type === 'keypress') {
      if (key !== 'Enter' && key !== ' ') {
        return;
      }

      event.preventDefault();
    } // We will call performCardAction if either:
    // 1. We are on the target, or
    // 2. The event-dispatching element is not interactive


    if (target !== adaptiveCardRoot) {
      var tabIndex = (0, _botframeworkWebchatComponent.getTabIndex)(target); // If the user is clicking on something that is already clickable, do not allow them to click the card.
      // E.g. a hero card can be tappable, and image and buttons inside the hero card can also be tappable.

      if (typeof tabIndex === 'number' && tabIndex >= 0) {
        return;
      }
    }

    performCardAction(tapAction);
    scrollToEnd();
  }, [contentRef, performCardAction, scrollToEnd, tapAction]); // Only listen to event if it is not disabled and have "tapAction" prop.

  var handleClickAndKeyPressForTapAction = !disabled && tapAction ? handleClickAndKeyPress : undefined;
  var addActionsPerformed = (0, _react.useCallback)(function (action) {
    return !~actionsPerformed.indexOf(action) && setActionsPerformed([].concat((0, _toConsumableArray2.default)(actionsPerformed), [action]));
  }, [actionsPerformed, setActionsPerformed]);
  var handleExecuteAction = (0, _react.useCallback)(function (action) {
    // Some items, e.g. tappable image, cannot be disabled thru DOM attributes
    if (disabled) {
      return;
    }

    addActionsPerformed(action);
    var actionTypeName = action.getJsonTypeName();
    var image = action.iconUrl,
        title = action.title; // We cannot use "instanceof" check here, because web devs may bring their own version of Adaptive Cards package.
    // We need to check using "getJsonTypeName()" instead.

    if (actionTypeName === 'Action.OpenUrl') {
      var _ref4 = action,
          value = _ref4.url;
      performCardAction({
        image: image,
        title: title,
        type: 'openUrl',
        value: value
      });
    } else if (actionTypeName === 'Action.Submit') {
      var _ref5 = action,
          data = _ref5.data;

      if (typeof data !== 'undefined') {
        if (typeof data === 'string') {
          performCardAction({
            image: image,
            title: title,
            type: 'imBack',
            value: data
          });
        } else if (data.__isBotFrameworkCardAction) {
          performCardAction(data.cardAction);
        } else {
          performCardAction({
            image: image,
            title: title,
            type: 'postBack',
            value: data
          });
        }
      }

      scrollToEnd();
    } else {
      console.error("Web Chat: received unknown action from Adaptive Cards");
      console.error(action);
    }
  }, [addActionsPerformed, disabled, performCardAction, scrollToEnd]);
  (0, _react.useLayoutEffect)(function () {
    var current = contentRef.current;

    if (!current || !adaptiveCard) {
      activeElementIndexRef.current = -1;
      inputValuesRef.current = [];
    } // Currently, the only way to set the Markdown engine is to set it thru static member of AdaptiveCard class
    // TODO: [P3] Checks if we could make the "renderMarkdownAsHTML" per card
    //       This could be limitations from Adaptive Cards package (not supported as of 1.2.5)
    //       Because there could be timing difference between .parse and .render, we could be using wrong Markdown engine
    // "onProcessMarkdown" is a static function but we are trying to scope it to the current object instead.
    // eslint-disable-next-line dot-notation


    adaptiveCard.constructor['onProcessMarkdown'] = function (text, result) {
      if (renderMarkdownAsHTML) {
        result.outputHtml = renderMarkdownAsHTML(text);
        result.didProcess = true;
      }
    };

    if (adaptiveCardsHostConfig) {
      adaptiveCard.hostConfig = isPlainObject(adaptiveCardsHostConfig) ? new HostConfig(adaptiveCardsHostConfig) : adaptiveCardsHostConfig;
    } // For accessibility issue #1340, `tabindex="0"` must not be set for the root container if it is not interactive.


    GlobalSettings.setTabIndexAtCardRoot = !!tapAction;

    var _adaptiveCard$validat = adaptiveCard.validateProperties(),
        validationEvents = _adaptiveCard$validat.validationEvents;

    if (validationEvents.length) {
      return setErrors(validationEvents.reduce(function (items, _ref6) {
        var message = _ref6.message;
        return [].concat((0, _toConsumableArray2.default)(items), [new Error(message)]);
      }, []));
    }

    var element;

    try {
      element = adaptiveCard.render();
    } catch (error) {
      return setErrors([error]);
    }

    if (!element) {
      return setErrors([new Error('Adaptive Card rendered as empty element')]);
    } // Clear errors on next render


    setErrors([]);
    restoreInputValues(element, inputValuesRef.current);
    current.appendChild(element);
    adaptiveCardElementRef.current = element; // Focus can only be restored after the DOM is attached.

    restoreActiveElementIndex(element, activeElementIndexRef.current);
    setLastRender(Date.now());
    return function () {
      activeElementIndexRef.current = saveActiveElementIndex(element);
      inputValuesRef.current = saveInputValues(element);
      current.removeChild(adaptiveCardElementRef.current);
      adaptiveCardElementRef.current = undefined;
    };
  }, [adaptiveCard, adaptiveCardsHostConfig, contentRef, GlobalSettings, HostConfig, renderMarkdownAsHTML, setErrors, tapAction]);
  (0, _react.useEffect)(function () {
    // Set onExecuteAction without causing unnecessary re-render.
    adaptiveCard.onExecuteAction = disabled ? undefined : handleExecuteAction;
  }, [adaptiveCard, disabled, handleExecuteAction]);
  (0, _react.useEffect)(function () {
    return fixAccessibilityIssuesWithUndo(adaptiveCardElementRef.current);
  }, [adaptiveCardElementRef, lastRender]);
  (0, _react.useEffect)(function () {
    // If the Adaptive Card get re-rendered, re-disable elements as needed.
    if (disabled) {
      return disableInputElementsWithUndo(adaptiveCardElementRef.current);
    }
  }, [adaptiveCardElementRef, disabled, lastRender]);
  (0, _react.useEffect)(function () {
    // If the Adaptive Card changed, reset all actions performed.
    setActionsPerformed([]);
  }, [adaptiveCard]);
  (0, _react.useEffect)(function () {
    return indicateActionSelectionWithUndo( // Actions that do not have "renderedElement" means it is the Adaptive Card itself, such as "selectAction" (AC) or "tapAction" (rich cards).
    // We do not need to mark the whole card as performed.
    actionsPerformed.map(function (_ref7) {
      var renderedElement = _ref7.renderedElement;
      return renderedElement;
    }).filter(function (renderedElement) {
      return renderedElement;
    }), actionPerformedClassName);
  }, [actionsPerformed, actionPerformedClassName, lastRender]);
  return errors.length ? node_env === 'development' && /*#__PURE__*/_react.default.createElement(ErrorBox, {
    error: errors[0],
    type: localize('ADAPTIVE_CARD_ERROR_BOX_TITLE_RENDER')
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(adaptiveCardRendererStyleSet + '', 'webchat__adaptive-card-renderer'),
    onClick: handleClickAndKeyPressForTapAction,
    onKeyPress: handleClickAndKeyPressForTapAction,
    ref: contentRef
  });
};

AdaptiveCardRenderer.defaultProps = {
  actionPerformedClassName: '',
  disabled: undefined,
  tapAction: undefined
};
AdaptiveCardRenderer.propTypes = {
  actionPerformedClassName: _propTypes.default.string,
  adaptiveCard: _propTypes.default.any.isRequired,
  disabled: _propTypes.default.bool,
  // TypeScript class is not mappable to PropTypes.func
  // @ts-ignore
  tapAction: _propTypes.default.shape({
    image: _propTypes.default.string,
    title: _propTypes.default.string,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.string
  })
};
var _default = AdaptiveCardRenderer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,