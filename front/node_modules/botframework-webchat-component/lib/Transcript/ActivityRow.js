"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _detectBrowser = require("../Utils/detectBrowser");

var _FocusTrap = _interopRequireDefault(require("./FocusTrap"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _Speak = _interopRequireDefault(require("../Activity/Speak"));

var _useActiveDescendantId = _interopRequireDefault(require("../providers/TranscriptFocus/useActiveDescendantId"));

var _useActivityAccessibleName = _interopRequireDefault(require("./useActivityAccessibleName"));

var _useFocusByActivityKey = _interopRequireDefault(require("../providers/TranscriptFocus/useFocusByActivityKey"));

var _useGetDescendantIdByActivityKey = _interopRequireDefault(require("../providers/TranscriptFocus/useGetDescendantIdByActivityKey"));

var _useValueRef = _interopRequireDefault(require("../hooks/internal/useValueRef"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useActivityKeysByRead = _botframeworkWebchatApi.hooks.useActivityKeysByRead,
    useGetHasAcknowledgedByActivityKey = _botframeworkWebchatApi.hooks.useGetHasAcknowledgedByActivityKey,
    useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity;
var ActivityRow = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _activity$channelData, _activity$channelData2;

  var activity = _ref.activity,
      children = _ref.children;

  var _useActiveDescendantI = (0, _useActiveDescendantId.default)(),
      _useActiveDescendantI2 = _slicedToArray(_useActiveDescendantI, 1),
      activeDescendantId = _useActiveDescendantI2[0];

  var _useActivityKeysByRea = useActivityKeysByRead(),
      _useActivityKeysByRea2 = _slicedToArray(_useActivityKeysByRea, 1),
      readActivityKeys = _useActivityKeysByRea2[0];

  var bodyRef = (0, _react.useRef)();
  var focusByActivityKey = (0, _useFocusByActivityKey.default)();
  var getKeyByActivity = useGetKeyByActivity(); // TODO: [P2] #2858 We should use core/definitions/speakingActivity for this predicate instead

  var shouldSpeak = (_activity$channelData = activity.channelData) === null || _activity$channelData === void 0 ? void 0 : _activity$channelData.speak;

  var _useActivityAccessibl = (0, _useActivityAccessibleName.default)(activity, bodyRef),
      _useActivityAccessibl2 = _slicedToArray(_useActivityAccessibl, 1),
      accessibleName = _useActivityAccessibl2[0];

  var activityKey = getKeyByActivity(activity);
  var acknowledged = useGetHasAcknowledgedByActivityKey()(activityKey);
  var activityKeyRef = (0, _useValueRef.default)(activityKey);
  var descendantId = (0, _useGetDescendantIdByActivityKey.default)()(activityKey);
  var descendantLabelId = "webchat__basic-transcript__active-descendant-label--".concat(activityKey);
  var isActiveDescendant = descendantId === activeDescendantId;
  var read = readActivityKeys.includes(activityKey);
  var focusSelf = (0, _react.useCallback)(function (withFocus) {
    return focusByActivityKey(activityKeyRef.current, withFocus);
  }, [activityKeyRef, focusByActivityKey]); // When a child of the activity receives focus, notify the transcript to set the `aria-activedescendant` to this activity.

  var handleDescendantFocus = (0, _react.useCallback)(function () {
    return focusSelf(false);
  }, [focusSelf]); // When receive Escape key from descendant, focus back to the activity.

  var handleLeaveFocusTrap = (0, _react.useCallback)(function () {
    return focusSelf();
  }, [focusSelf]); // When the user press UP/DOWN arrow keys, we put a visual focus indicator around the focused activity.
  // We should do the same for mouse, when the user click on the activity, we should also put a visual focus indicator around the activity.
  // We are doing it in event capture phase to prevent descendants from stopping event propagation to us.

  var handleMouseDownCapture = (0, _react.useCallback)(function () {
    return focusSelf(false);
  }, [focusSelf]);
  return (
    /*#__PURE__*/
    // TODO: [P2] Add `aria-roledescription="message"` for better AX, need localization strings.
    _react.default.createElement("article", {
      "aria-hidden": ((_activity$channelData2 = activity.channelData) === null || _activity$channelData2 === void 0 ? void 0 : _activity$channelData2['webchat:fallback-text']) === '',
      className: (0, _classnames.default)('webchat__basic-transcript__activity', {
        'webchat__basic-transcript__activity--acknowledged': acknowledged,
        'webchat__basic-transcript__activity--read': read
      }) // When NVDA is in browse mode, using up/down arrow key to "browse" will dispatch "click" and "mousedown" events for <article> element (inside <ScreenReaderActivity>).
      ,
      onMouseDownCapture: handleMouseDownCapture,
      ref: ref
    }, !_detectBrowser.android && /*#__PURE__*/_react.default.createElement("div", {
      "aria-labelledby": descendantLabelId,
      className: "webchat__basic-transcript__activity-active-descendant" // "id" is required for "aria-labelledby"
      // eslint-disable-next-line react/forbid-dom-props
      ,
      id: descendantId,
      role: "article"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      "aria-hidden": true,
      id: descendantLabelId,
      text: accessibleName
    })), /*#__PURE__*/_react.default.createElement(_FocusTrap.default, {
      onFocus: handleDescendantFocus,
      onLeave: handleLeaveFocusTrap
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "webchat__basic-transcript__activity-body",
      ref: bodyRef
    }, children)), shouldSpeak && /*#__PURE__*/_react.default.createElement(_Speak.default, {
      activity: activity
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('webchat__basic-transcript__activity-indicator', {
        'webchat__basic-transcript__activity-indicator--focus': isActiveDescendant
      })
    }))
  );
});
ActivityRow.defaultProps = {
  children: undefined
};
ActivityRow.propTypes = {
  activity: _propTypes.default.shape({
    channelData: _propTypes.default.shape({
      speak: _propTypes.default.bool,
      'webchat:fallback-text': _propTypes.default.string
    })
  }).isRequired,
  children: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.arrayOf(_propTypes.default.element)])
};
var _default = ActivityRow;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,