"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useActivityAccessibleName;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = require("react");

var _activityAltText = _interopRequireDefault(require("../Utils/activityAltText"));

var _tabbableElements = _interopRequireDefault(require("../Utils/tabbableElements"));

var _useRenderMarkdownAsHTML = _interopRequireDefault(require("../hooks/useRenderMarkdownAsHTML"));

var _useValueRef = _interopRequireDefault(require("../hooks/internal/useValueRef"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var InteractiveType;

(function (InteractiveType) {
  InteractiveType[InteractiveType["LINK"] = 0] = "LINK";
  InteractiveType[InteractiveType["WIDGET"] = 1] = "WIDGET";
})(InteractiveType || (InteractiveType = {}));

var useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;
var ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {
  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',
  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',
  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',
  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',
  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'
};

function useActivityAccessibleName(activity, bodyRef) {
  var _activity$from, _activity$attachments;

  var _useAvatarForBot = useAvatarForBot(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      interactiveType = _useState2[0],
      setInteractiveType = _useState2[1];

  var fromSelf = ((_activity$from = activity.from) === null || _activity$from === void 0 ? void 0 : _activity$from.role) === 'user';
  var localize = useLocalizer();
  var localizeWithPlural = useLocalizer({
    plural: true
  });
  var numAttachments = ((_activity$attachments = activity.attachments) === null || _activity$attachments === void 0 ? void 0 : _activity$attachments.length) || 0;
  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();
  var activityInteractiveAlt = localize('ACTIVITY_INTERACTIVE_LABEL_ALT'); // "Click to interact."

  var activityInteractiveWithLinkAlt = localize('ACTIVITY_INTERACTIVE_WITH_LINKS_LABEL_ALT'); // "Click to interact."

  var greetingAlt = (0, _react.useMemo)(function () {
    return (fromSelf ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  }, [botInitials, fromSelf, localize]);
  var interactiveTypeRef = (0, _useValueRef.default)(interactiveType);
  var messageTextAlt = (0, _react.useMemo)(function () {
    return (0, _activityAltText.default)(activity, renderMarkdownAsHTML);
  }, [activity, renderMarkdownAsHTML]);
  var numAttachmentsAlt = (0, _react.useMemo)(function () {
    return numAttachments ? localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numAttachments) : '';
  }, [localizeWithPlural, numAttachments]);
  var accessibleName = (0, _react.useMemo)( // We are concatenating in a single string for Safari. If we split it up, Safari will only narrate the first section.
  function () {
    return "".concat(greetingAlt, " ").concat(messageTextAlt, " ").concat(numAttachmentsAlt, " ").concat(interactiveType === InteractiveType.LINK ? activityInteractiveWithLinkAlt : interactiveType === InteractiveType.WIDGET ? activityInteractiveAlt : '');
  }, [activityInteractiveAlt, activityInteractiveWithLinkAlt, greetingAlt, interactiveType, messageTextAlt, numAttachmentsAlt]);
  (0, _react.useEffect)(function () {
    var _bodyRef$current;

    var hasLinks = !!((_bodyRef$current = bodyRef.current) !== null && _bodyRef$current !== void 0 && _bodyRef$current.querySelector('a'));
    var hasWidgets = !!(0, _tabbableElements.default)(bodyRef.current).length;
    interactiveTypeRef.current !== hasWidgets && setInteractiveType(hasLinks ? InteractiveType.LINK : hasWidgets ? InteractiveType.WIDGET : false);
  }, [bodyRef, interactiveTypeRef, setInteractiveType]);
  return [accessibleName];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,