"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _FocusRedirector = _interopRequireDefault(require("../Utils/FocusRedirector"));

var _tabbableElements = _interopRequireDefault(require("../Utils/tabbableElements"));

var _useValueRef = _interopRequireDefault(require("../hooks/internal/useValueRef"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FocusTrap = function FocusTrap(_ref) {
  var children = _ref.children,
      onFocus = _ref.onFocus,
      onLeave = _ref.onLeave;
  var bodyRef = (0, _react.useRef)();
  var onLeaveRef = (0, _useValueRef.default)(onLeave);
  var handleBodyKeyDown = (0, _react.useCallback)(function (event) {
    if (event.key === 'Escape') {
      var _onLeaveRef$current;

      event.preventDefault();
      event.stopPropagation();
      (_onLeaveRef$current = onLeaveRef.current) === null || _onLeaveRef$current === void 0 ? void 0 : _onLeaveRef$current.call(onLeaveRef);
    }
  }, [onLeaveRef]);
  var handleFirstSentinelFocus = (0, _react.useCallback)(function () {
    var _focusables;

    var focusables = (0, _tabbableElements.default)(bodyRef.current);
    (_focusables = focusables[focusables.length - 1]) === null || _focusables === void 0 ? void 0 : _focusables.focus();
  }, [bodyRef]);
  var handleLastSentinelFocus = (0, _react.useCallback)(function () {
    var _tabbableElements$;

    return (_tabbableElements$ = (0, _tabbableElements.default)(bodyRef.current)[0]) === null || _tabbableElements$ === void 0 ? void 0 : _tabbableElements$.focus();
  }, [bodyRef]);
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_FocusRedirector.default, {
    onFocus: handleFirstSentinelFocus
  }), /*#__PURE__*/_react.default.createElement("div", {
    onFocus: onFocus,
    onKeyDown: handleBodyKeyDown,
    ref: bodyRef
  }, children), /*#__PURE__*/_react.default.createElement(_FocusRedirector.default, {
    onFocus: handleLastSentinelFocus
  }));
};

FocusTrap.defaultProps = {
  children: undefined,
  onFocus: undefined
};
FocusTrap.propTypes = {
  children: _propTypes.default.any,
  onFocus: _propTypes.default.func,
  onLeave: _propTypes.default.func.isRequired
};
var _default = FocusTrap;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UcmFuc2NyaXB0L0ZvY3VzVHJhcC50c3giXSwibmFtZXMiOlsiRm9jdXNUcmFwIiwiY2hpbGRyZW4iLCJvbkZvY3VzIiwib25MZWF2ZSIsImJvZHlSZWYiLCJvbkxlYXZlUmVmIiwiaGFuZGxlQm9keUtleURvd24iLCJldmVudCIsImtleSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY3VycmVudCIsImhhbmRsZUZpcnN0U2VudGluZWxGb2N1cyIsImZvY3VzYWJsZXMiLCJsZW5ndGgiLCJmb2N1cyIsImhhbmRsZUxhc3RTZW50aW5lbEZvY3VzIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYW55IiwiZnVuYyIsImlzUmVxdWlyZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUlBOztBQUNBOztBQUNBOzs7Ozs7OztBQU9BLElBQU1BLFNBQTZCLEdBQUcsU0FBaENBLFNBQWdDLE9BQW9DO0FBQUEsTUFBakNDLFFBQWlDLFFBQWpDQSxRQUFpQztBQUFBLE1BQXZCQyxPQUF1QixRQUF2QkEsT0FBdUI7QUFBQSxNQUFkQyxPQUFjLFFBQWRBLE9BQWM7QUFDeEUsTUFBTUMsT0FBTyxHQUFHLG9CQUFoQjtBQUNBLE1BQU1DLFVBQVUsR0FBRywwQkFBd0JGLE9BQXhCLENBQW5CO0FBRUEsTUFBTUcsaUJBQXVDLEdBQUcsd0JBQzlDLFVBQUFDLEtBQUssRUFBSTtBQUNQLFFBQUlBLEtBQUssQ0FBQ0MsR0FBTixLQUFjLFFBQWxCLEVBQTRCO0FBQUE7O0FBQzFCRCxNQUFBQSxLQUFLLENBQUNFLGNBQU47QUFDQUYsTUFBQUEsS0FBSyxDQUFDRyxlQUFOO0FBRUEsNkJBQUFMLFVBQVUsQ0FBQ00sT0FBWCxpRkFBQU4sVUFBVTtBQUNYO0FBQ0YsR0FSNkMsRUFTOUMsQ0FBQ0EsVUFBRCxDQVQ4QyxDQUFoRDtBQVlBLE1BQU1PLHdCQUFvQyxHQUFHLHdCQUFZLFlBQU07QUFBQTs7QUFDN0QsUUFBTUMsVUFBVSxHQUFHLCtCQUFpQlQsT0FBTyxDQUFDTyxPQUF6QixDQUFuQjtBQUVBLG1CQUFBRSxVQUFVLENBQUNBLFVBQVUsQ0FBQ0MsTUFBWCxHQUFvQixDQUFyQixDQUFWLDREQUFtQ0MsS0FBbkM7QUFDRCxHQUo0QyxFQUkxQyxDQUFDWCxPQUFELENBSjBDLENBQTdDO0FBTUEsTUFBTVksdUJBQW1DLEdBQUcsd0JBQzFDO0FBQUE7O0FBQUEsaUNBQU0sK0JBQWlCWixPQUFPLENBQUNPLE9BQXpCLEVBQWtDLENBQWxDLENBQU4sdURBQU0sbUJBQXNDSSxLQUF0QyxFQUFOO0FBQUEsR0FEMEMsRUFFMUMsQ0FBQ1gsT0FBRCxDQUYwQyxDQUE1QztBQUtBLHNCQUNFLDZCQUFDLGVBQUQscUJBQ0UsNkJBQUMsd0JBQUQ7QUFBaUIsSUFBQSxPQUFPLEVBQUVRO0FBQTFCLElBREYsZUFFRTtBQUFLLElBQUEsT0FBTyxFQUFFVixPQUFkO0FBQXVCLElBQUEsU0FBUyxFQUFFSSxpQkFBbEM7QUFBcUQsSUFBQSxHQUFHLEVBQUVGO0FBQTFELEtBQ0dILFFBREgsQ0FGRixlQUtFLDZCQUFDLHdCQUFEO0FBQWlCLElBQUEsT0FBTyxFQUFFZTtBQUExQixJQUxGLENBREY7QUFTRCxDQXBDRDs7QUFzQ0FoQixTQUFTLENBQUNpQixZQUFWLEdBQXlCO0FBQ3ZCaEIsRUFBQUEsUUFBUSxFQUFFaUIsU0FEYTtBQUV2QmhCLEVBQUFBLE9BQU8sRUFBRWdCO0FBRmMsQ0FBekI7QUFLQWxCLFNBQVMsQ0FBQ21CLFNBQVYsR0FBc0I7QUFDcEJsQixFQUFBQSxRQUFRLEVBQUVtQixtQkFBVUMsR0FEQTtBQUVwQm5CLEVBQUFBLE9BQU8sRUFBRWtCLG1CQUFVRSxJQUZDO0FBR3BCbkIsRUFBQUEsT0FBTyxFQUFFaUIsbUJBQVVFLElBQVYsQ0FBZUM7QUFISixDQUF0QjtlQU1ldkIsUyIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBGQywgS2V5Ym9hcmRFdmVudEhhbmRsZXIsIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRm9jdXNSZWRpcmVjdG9yIGZyb20gJy4uL1V0aWxzL0ZvY3VzUmVkaXJlY3Rvcic7XG5pbXBvcnQgdGFiYmFibGVFbGVtZW50cyBmcm9tICcuLi9VdGlscy90YWJiYWJsZUVsZW1lbnRzJztcbmltcG9ydCB1c2VWYWx1ZVJlZiBmcm9tICcuLi9ob29rcy9pbnRlcm5hbC91c2VWYWx1ZVJlZic7XG5cbnR5cGUgRm9jdXNUcmFwUHJvcHMgPSBQcm9wc1dpdGhDaGlsZHJlbjx7XG4gIG9uRm9jdXM6ICgpID0+IHZvaWQ7XG4gIG9uTGVhdmU6ICgpID0+IHZvaWQ7XG59PjtcblxuY29uc3QgRm9jdXNUcmFwOiBGQzxGb2N1c1RyYXBQcm9wcz4gPSAoeyBjaGlsZHJlbiwgb25Gb2N1cywgb25MZWF2ZSB9KSA9PiB7XG4gIGNvbnN0IGJvZHlSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gIGNvbnN0IG9uTGVhdmVSZWYgPSB1c2VWYWx1ZVJlZjwoKSA9PiB2b2lkPihvbkxlYXZlKTtcblxuICBjb25zdCBoYW5kbGVCb2R5S2V5RG93bjogS2V5Ym9hcmRFdmVudEhhbmRsZXIgPSB1c2VDYWxsYmFjayhcbiAgICBldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBvbkxlYXZlUmVmLmN1cnJlbnQ/LigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uTGVhdmVSZWZdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlRmlyc3RTZW50aW5lbEZvY3VzOiAoKSA9PiB2b2lkID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGZvY3VzYWJsZXMgPSB0YWJiYWJsZUVsZW1lbnRzKGJvZHlSZWYuY3VycmVudCk7XG5cbiAgICBmb2N1c2FibGVzW2ZvY3VzYWJsZXMubGVuZ3RoIC0gMV0/LmZvY3VzKCk7XG4gIH0sIFtib2R5UmVmXSk7XG5cbiAgY29uc3QgaGFuZGxlTGFzdFNlbnRpbmVsRm9jdXM6ICgpID0+IHZvaWQgPSB1c2VDYWxsYmFjayhcbiAgICAoKSA9PiB0YWJiYWJsZUVsZW1lbnRzKGJvZHlSZWYuY3VycmVudClbMF0/LmZvY3VzKCksXG4gICAgW2JvZHlSZWZdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Rm9jdXNSZWRpcmVjdG9yIG9uRm9jdXM9e2hhbmRsZUZpcnN0U2VudGluZWxGb2N1c30gLz5cbiAgICAgIDxkaXYgb25Gb2N1cz17b25Gb2N1c30gb25LZXlEb3duPXtoYW5kbGVCb2R5S2V5RG93bn0gcmVmPXtib2R5UmVmfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgICA8Rm9jdXNSZWRpcmVjdG9yIG9uRm9jdXM9e2hhbmRsZUxhc3RTZW50aW5lbEZvY3VzfSAvPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59O1xuXG5Gb2N1c1RyYXAuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBvbkZvY3VzOiB1bmRlZmluZWRcbn07XG5cbkZvY3VzVHJhcC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25MZWF2ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9jdXNUcmFwO1xuIl19