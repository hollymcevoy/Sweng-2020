"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mathRandom = _interopRequireDefault(require("math-random"));

var _react = _interopRequireWildcard(require("react"));

var _LiveRegionTwinComposer = _interopRequireDefault(require("../providers/LiveRegionTwin/LiveRegionTwinComposer"));

var _ScreenReaderActivity = _interopRequireDefault(require("../ScreenReaderActivity"));

var _tabbableElements = _interopRequireDefault(require("../Utils/tabbableElements"));

var _useActivityTreeWithRenderer = _interopRequireDefault(require("../providers/ActivityTree/useActivityTreeWithRenderer"));

var _useQueueStaticElement = _interopRequireDefault(require("../providers/LiveRegionTwin/useQueueStaticElement"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__live-region-transcript': {
    '& .webchat__live-region-transcript__interactive_note': {
      color: 'transparent',
      height: 1,
      overflow: 'hidden',
      position: 'absolute',
      top: 0,
      whiteSpace: 'nowrap',
      width: 1
    }
  }
};
/**
 * Checks if the rendering activity is presentational or not. Returns `true` if presentational, otherwise, `false`.
 *
 * Presentational activity, will be rendered visually but not going through screen reader.
 */

function isPresentational(activity) {
  var _channelData$messageB, _activity$attachments;

  var channelData = activity.channelData; // "Fallback text" includes both message text and narratives for attachments.
  // Emptying out "fallback text" essentially mute for both message and attachments.

  var fallbackText = channelData === null || channelData === void 0 ? void 0 : channelData['webchat:fallback-text'];

  if (typeof fallbackText === 'string') {
    return !fallbackText;
  } // If there are "displayText" (MessageBack), "text", or any attachments, there are something to narrate.


  return !(channelData !== null && channelData !== void 0 && (_channelData$messageB = channelData.messageBack) !== null && _channelData$messageB !== void 0 && _channelData$messageB.displayText || activity.text || (_activity$attachments = activity.attachments) !== null && _activity$attachments !== void 0 && _activity$attachments.length);
}

var LiveRegionTranscriptCore = function LiveRegionTranscriptCore(_ref) {
  var activityElementMapRef = _ref.activityElementMapRef;

  var _useActivityTreeWithR = (0, _useActivityTreeWithRenderer.default)({
    flat: true
  }),
      _useActivityTreeWithR2 = _slicedToArray(_useActivityTreeWithR, 1),
      flattenedActivityTree = _useActivityTreeWithR2[0];

  var getKeyByActivity = useGetKeyByActivity();
  var localize = useLocalizer();
  var queueStaticElement = (0, _useQueueStaticElement.default)();
  var liveRegionInteractiveLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_LABEL_ALT');
  var liveRegionInteractiveWithLinkLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_WITH_LINKS_LABEL_ALT');
  var renderingActivities = (0, _react.useMemo)(function () {
    return Object.freeze(flattenedActivityTree.reduce(function (intermediate, _ref2) {
      var activity = _ref2.activity;
      return intermediate.set(getKeyByActivity(activity), activity);
    }, new Map()));
  }, [flattenedActivityTree, getKeyByActivity]);
  var prevRenderingActivitiesRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    var prevRenderingActivities = prevRenderingActivitiesRef.current;
    var appendedActivities = []; // Bottom-up, find activities which are recently appended (i.e. new activity will have a new key).
    // We only consider new activities added to the bottom of the chat history.
    // Based on how `aria-relevant="additions"` works, activities that are updated, deleted, or reordered, should be ignored.

    var _iterator = _createForOfIteratorHelper(Array.from(renderingActivities.entries()).reverse()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            activity = _step$value[1];

        if (prevRenderingActivities !== null && prevRenderingActivities !== void 0 && prevRenderingActivities.has(key)) {
          break;
        }

        appendedActivities.unshift({
          activity: activity,
          key: key
        });
        isPresentational(activity) || queueStaticElement( /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {
          activity: activity
        }));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    var hasNewLink = appendedActivities.some(function (_ref3) {
      var _activityElementMapRe;

      var key = _ref3.key;
      return (_activityElementMapRe = activityElementMapRef.current.get(key)) === null || _activityElementMapRe === void 0 ? void 0 : _activityElementMapRe.querySelector('a');
    });
    var hasNewWidget = appendedActivities.some(function (_ref4) {
      var _activityElementMapRe2;

      var key = _ref4.key;
      return !!(0, _tabbableElements.default)((_activityElementMapRe2 = activityElementMapRef.current.get(key)) === null || _activityElementMapRe2 === void 0 ? void 0 : _activityElementMapRe2.querySelector('.webchat__basic-transcript__activity-body')).length;
    });

    if (hasNewLink || hasNewWidget) {
      // eslint-disable-next-line no-magic-numbers
      var labelId = "webchat__live-region-transcript__interactive_note--".concat((0, _mathRandom.default)().toString(36).substr(2, 5));
      queueStaticElement(
      /*#__PURE__*/
      // Inside ARIA live region:
      // - Edge + Narrator:
      //   - It read if `aria-labelledby` or `aria-label` is set;
      //   - It read nothing if `aria-labelledby` or `aria-label` are not set (in this case, it read "note").
      // - Safari + VoiceOver and Chrome + NVDA:
      //   - They read its content and ignore `aria-labelledby` or `aria-label`
      //   - They will not read if it is simply <div aria-label="Something" /> without content (self-closing tag).
      // For best compatibility, we need both `aria-labelledby` and contented <div>.
      _react.default.createElement("div", {
        "aria-atomic": "true",
        "aria-labelledby": labelId,
        className: "webchat__live-region-transcript__interactive_note",
        role: "note"
      }, /*#__PURE__*/_react.default.createElement("span", {
        id: labelId
      }, hasNewLink ? liveRegionInteractiveWithLinkLabelAlt : liveRegionInteractiveLabelAlt)));
    }

    prevRenderingActivitiesRef.current = renderingActivities;
  }, [activityElementMapRef, getKeyByActivity, liveRegionInteractiveLabelAlt, liveRegionInteractiveWithLinkLabelAlt, prevRenderingActivitiesRef, queueStaticElement, renderingActivities]);
  return null;
};

var LiveRegionTranscript = function LiveRegionTranscript(_ref5) {
  var activityElementMapRef = _ref5.activityElementMapRef;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      internalLiveRegionFadeAfter = _useStyleOptions2[0].internalLiveRegionFadeAfter;

  var localize = useLocalizer();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');
  return /*#__PURE__*/_react.default.createElement(_LiveRegionTwinComposer.default, {
    "aria-roledescription": transcriptRoleDescription,
    className: (0, _classnames.default)('webchat__live-region-transcript', rootClassName),
    fadeAfter: internalLiveRegionFadeAfter,
    role: "log"
  }, /*#__PURE__*/_react.default.createElement(LiveRegionTranscriptCore, {
    activityElementMapRef: activityElementMapRef
  }));
};

LiveRegionTranscript.propTypes = {
  // PropTypes cannot be fully expressed in TypeScript.
  // @ts-ignore
  activityElementMapRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(Map)
  }).isRequired
};
var _default = LiveRegionTranscript;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,