"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useReplaceEmoticon;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;

function useReplaceEmoticon() {
  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      emojiSet = _useStyleOptions2[0].emojiSet;

  return (0, _react.useCallback)( // We need to know where (in offset) the change is, then we can decide which emoticon to update.
  // We need to distinguish in this case, string change from "abc:)xyz" to "abc:))xyz".
  // If the caret position is after the first parenthesis, we will change it to "abcðŸ˜Š)xyz".
  // But if the caret position is after the second parenthesis, we will not change it but leave it as "abc:))xyz".
  // This is because the user already decided to undo the emoji and just added a parenthesis after the emoticon. It should not affect the emoticon.
  function (_ref) {
    var selectionEnd = _ref.selectionEnd,
        selectionStart = _ref.selectionStart,
        value = _ref.value;

    if (typeof selectionEnd !== 'number') {
      console.warn('botframework-webchat: The first argument passed to "useReplaceEmoticon" must contains "selectionEnd" of type number, indicating the caret position.');
    } else if (typeof selectionStart !== 'number') {
      console.warn('botframework-webchat: The first argument passed to "useReplaceEmoticon" must contains "selectionStart" of type number, indicating the caret position.');
    } else if (typeof value !== 'string') {
      console.warn('botframework-webchat: The first argument passed to "useReplaceEmoticon" must contains "value" of type string.');
    } // We only change when the user is not selecting anything.


    selectionEnd === selectionStart && Object.entries(emojiSet).every(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          emoticon = _ref3[0],
          emoji = _ref3[1];

      var length = emoticon.length;

      if (value.slice(selectionStart - length, selectionStart) === emoticon) {
        value = "".concat(value.slice(0, selectionStart - length)).concat(emoji).concat(value.slice(selectionStart));
        selectionEnd = selectionStart += emoji.length - length;
        return false;
      }

      return true;
    });
    return {
      selectionEnd: selectionEnd,
      selectionStart: selectionStart,
      value: value
    };
  }, [emojiSet]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VSZXBsYWNlRW1vdGljb24uanMiXSwibmFtZXMiOlsidXNlU3R5bGVPcHRpb25zIiwiaG9va3MiLCJ1c2VSZXBsYWNlRW1vdGljb24iLCJlbW9qaVNldCIsInNlbGVjdGlvbkVuZCIsInNlbGVjdGlvblN0YXJ0IiwidmFsdWUiLCJjb25zb2xlIiwid2FybiIsIk9iamVjdCIsImVudHJpZXMiLCJldmVyeSIsImVtb3RpY29uIiwiZW1vamkiLCJsZW5ndGgiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOzs7Ozs7Ozs7Ozs7OztBQUVBLElBQVFBLGVBQVIsR0FBNEJDLDZCQUE1QixDQUFRRCxlQUFSOztBQUVlLFNBQVNFLGtCQUFULEdBQThCO0FBQzNDLHlCQUF1QkYsZUFBZSxFQUF0QztBQUFBO0FBQUEsTUFBU0csUUFBVCx3QkFBU0EsUUFBVDs7QUFFQSxTQUFPLHlCQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBNkM7QUFBQSxRQUExQ0MsWUFBMEMsUUFBMUNBLFlBQTBDO0FBQUEsUUFBNUJDLGNBQTRCLFFBQTVCQSxjQUE0QjtBQUFBLFFBQVpDLEtBQVksUUFBWkEsS0FBWTs7QUFDM0MsUUFBSSxPQUFPRixZQUFQLEtBQXdCLFFBQTVCLEVBQXNDO0FBQ3BDRyxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSxxSkFERjtBQUdELEtBSkQsTUFJTyxJQUFJLE9BQU9ILGNBQVAsS0FBMEIsUUFBOUIsRUFBd0M7QUFDN0NFLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLHVKQURGO0FBR0QsS0FKTSxNQUlBLElBQUksT0FBT0YsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUNwQ0MsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0UsK0dBREY7QUFHRCxLQWIwQyxDQWUzQzs7O0FBQ0FKLElBQUFBLFlBQVksS0FBS0MsY0FBakIsSUFDRUksTUFBTSxDQUFDQyxPQUFQLENBQWVQLFFBQWYsRUFBeUJRLEtBQXpCLENBQStCLGlCQUF1QjtBQUFBO0FBQUEsVUFBckJDLFFBQXFCO0FBQUEsVUFBWEMsS0FBVzs7QUFDcEQsVUFBUUMsTUFBUixHQUFtQkYsUUFBbkIsQ0FBUUUsTUFBUjs7QUFFQSxVQUFJUixLQUFLLENBQUNTLEtBQU4sQ0FBWVYsY0FBYyxHQUFHUyxNQUE3QixFQUFxQ1QsY0FBckMsTUFBeURPLFFBQTdELEVBQXVFO0FBQ3JFTixRQUFBQSxLQUFLLGFBQU1BLEtBQUssQ0FBQ1MsS0FBTixDQUFZLENBQVosRUFBZVYsY0FBYyxHQUFHUyxNQUFoQyxDQUFOLFNBQWdERCxLQUFoRCxTQUF3RFAsS0FBSyxDQUFDUyxLQUFOLENBQVlWLGNBQVosQ0FBeEQsQ0FBTDtBQUNBRCxRQUFBQSxZQUFZLEdBQUdDLGNBQWMsSUFBSVEsS0FBSyxDQUFDQyxNQUFOLEdBQWVBLE1BQWhEO0FBRUEsZUFBTyxLQUFQO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0QsS0FYRCxDQURGO0FBY0EsV0FBTztBQUFFVixNQUFBQSxZQUFZLEVBQVpBLFlBQUY7QUFBZ0JDLE1BQUFBLGNBQWMsRUFBZEEsY0FBaEI7QUFBZ0NDLE1BQUFBLEtBQUssRUFBTEE7QUFBaEMsS0FBUDtBQUNELEdBckNJLEVBc0NMLENBQUNILFFBQUQsQ0F0Q0ssQ0FBUDtBQXdDRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiLyplc2xpbnQgcmVxdWlyZS11bmljb2RlLXJlZ2V4cDogXCJvZmZcIiAqL1xuXG5pbXBvcnQgeyBob29rcyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWFwaSc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuY29uc3QgeyB1c2VTdHlsZU9wdGlvbnMgfSA9IGhvb2tzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VSZXBsYWNlRW1vdGljb24oKSB7XG4gIGNvbnN0IFt7IGVtb2ppU2V0IH1dID0gdXNlU3R5bGVPcHRpb25zKCk7XG5cbiAgcmV0dXJuIHVzZUNhbGxiYWNrKFxuICAgIC8vIFdlIG5lZWQgdG8ga25vdyB3aGVyZSAoaW4gb2Zmc2V0KSB0aGUgY2hhbmdlIGlzLCB0aGVuIHdlIGNhbiBkZWNpZGUgd2hpY2ggZW1vdGljb24gdG8gdXBkYXRlLlxuICAgIC8vIFdlIG5lZWQgdG8gZGlzdGluZ3Vpc2ggaW4gdGhpcyBjYXNlLCBzdHJpbmcgY2hhbmdlIGZyb20gXCJhYmM6KXh5elwiIHRvIFwiYWJjOikpeHl6XCIuXG4gICAgLy8gSWYgdGhlIGNhcmV0IHBvc2l0aW9uIGlzIGFmdGVyIHRoZSBmaXJzdCBwYXJlbnRoZXNpcywgd2Ugd2lsbCBjaGFuZ2UgaXQgdG8gXCJhYmPwn5iKKXh5elwiLlxuICAgIC8vIEJ1dCBpZiB0aGUgY2FyZXQgcG9zaXRpb24gaXMgYWZ0ZXIgdGhlIHNlY29uZCBwYXJlbnRoZXNpcywgd2Ugd2lsbCBub3QgY2hhbmdlIGl0IGJ1dCBsZWF2ZSBpdCBhcyBcImFiYzopKXh5elwiLlxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGUgdXNlciBhbHJlYWR5IGRlY2lkZWQgdG8gdW5kbyB0aGUgZW1vamkgYW5kIGp1c3QgYWRkZWQgYSBwYXJlbnRoZXNpcyBhZnRlciB0aGUgZW1vdGljb24uIEl0IHNob3VsZCBub3QgYWZmZWN0IHRoZSBlbW90aWNvbi5cbiAgICAoeyBzZWxlY3Rpb25FbmQsIHNlbGVjdGlvblN0YXJ0LCB2YWx1ZSB9KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdGlvbkVuZCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogVGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBcInVzZVJlcGxhY2VFbW90aWNvblwiIG11c3QgY29udGFpbnMgXCJzZWxlY3Rpb25FbmRcIiBvZiB0eXBlIG51bWJlciwgaW5kaWNhdGluZyB0aGUgY2FyZXQgcG9zaXRpb24uJ1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZWN0aW9uU3RhcnQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFRoZSBmaXJzdCBhcmd1bWVudCBwYXNzZWQgdG8gXCJ1c2VSZXBsYWNlRW1vdGljb25cIiBtdXN0IGNvbnRhaW5zIFwic2VsZWN0aW9uU3RhcnRcIiBvZiB0eXBlIG51bWJlciwgaW5kaWNhdGluZyB0aGUgY2FyZXQgcG9zaXRpb24uJ1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFRoZSBmaXJzdCBhcmd1bWVudCBwYXNzZWQgdG8gXCJ1c2VSZXBsYWNlRW1vdGljb25cIiBtdXN0IGNvbnRhaW5zIFwidmFsdWVcIiBvZiB0eXBlIHN0cmluZy4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG9ubHkgY2hhbmdlIHdoZW4gdGhlIHVzZXIgaXMgbm90IHNlbGVjdGluZyBhbnl0aGluZy5cbiAgICAgIHNlbGVjdGlvbkVuZCA9PT0gc2VsZWN0aW9uU3RhcnQgJiZcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZW1vamlTZXQpLmV2ZXJ5KChbZW1vdGljb24sIGVtb2ppXSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBlbW90aWNvbjtcblxuICAgICAgICAgIGlmICh2YWx1ZS5zbGljZShzZWxlY3Rpb25TdGFydCAtIGxlbmd0aCwgc2VsZWN0aW9uU3RhcnQpID09PSBlbW90aWNvbikge1xuICAgICAgICAgICAgdmFsdWUgPSBgJHt2YWx1ZS5zbGljZSgwLCBzZWxlY3Rpb25TdGFydCAtIGxlbmd0aCl9JHtlbW9qaX0ke3ZhbHVlLnNsaWNlKHNlbGVjdGlvblN0YXJ0KX1gO1xuICAgICAgICAgICAgc2VsZWN0aW9uRW5kID0gc2VsZWN0aW9uU3RhcnQgKz0gZW1vamkubGVuZ3RoIC0gbGVuZ3RoO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICByZXR1cm4geyBzZWxlY3Rpb25FbmQsIHNlbGVjdGlvblN0YXJ0LCB2YWx1ZSB9O1xuICAgIH0sXG4gICAgW2Vtb2ppU2V0XVxuICApO1xufVxuIl19