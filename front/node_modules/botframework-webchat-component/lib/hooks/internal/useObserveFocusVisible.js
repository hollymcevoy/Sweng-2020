"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useObserveFocusVisible;

var _react = require("react");

var _supportPseudoClass = _interopRequireDefault(require("../../Utils/supportPseudoClass"));

var _useNonce3 = _interopRequireDefault(require("./useNonce"));

var _useValueRef = _interopRequireDefault(require("./useValueRef"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var INPUT_TYPES_ALLOW_LIST = ['date', 'datetime-local', 'datetime', 'email', 'month', 'number', 'password', 'search', 'tel', 'text', 'time', 'url', 'week'];
/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} el
 * @return {boolean}
 */

function focusTriggersKeyboardModality(el) {
  var isContentEditable = el.isContentEditable,
      readOnly = el.readOnly,
      tagName = el.tagName,
      type = el.type;
  return tagName === 'INPUT' && INPUT_TYPES_ALLOW_LIST.includes(type) && !readOnly || tagName === 'TEXTAREA' && !readOnly || isContentEditable;
}

function createEventSubscription(target, types, handler) {
  var subscribed;

  var subscribe = function subscribe() {
    if (!subscribed) {
      types.forEach(function (type) {
        return target.addEventListener(type, handler);
      });
      subscribed = true;
    }
  };

  var unsubscribe = function unsubscribe() {
    if (subscribed) {
      types.forEach(function (type) {
        return target.removeEventListener(type, handler);
      });
      subscribed = undefined;
    }
  };

  return {
    pause: unsubscribe,
    resume: subscribe
  };
} // TODO: Add tests
//       1. Focus via keyboard vs. mouse
//       2. Focus via keyboard, switch app, switch back (expect to get another focusVisible after switch back)
//       3. Focus via mouse, switch app, switch back (do NOT expect to get another focusVisible after switch back)


function useObserveFocusVisibleForLegacyBrowsers(targetRef, onFocusVisibleRef) {
  // This polyfill algorithm is adopted from https://github.com/WICG/focus-visible.
  var blurSinceRef = (0, _react.useRef)(0);
  var hadKeyboardEventRef = (0, _react.useRef)(true);
  var hasFocusVisibleRef = (0, _react.useRef)(false);
  var eventSubscription = (0, _react.useMemo)(function () {
    return createEventSubscription(document, ['mousemove', 'mousedown', 'mouseup', 'pointermove', 'pointerdown', 'pointerup', 'touchmove', 'touchstart', 'touchend'], function (event) {
      var _nodeName;

      if (((_nodeName = event.target.nodeName) === null || _nodeName === void 0 ? void 0 : _nodeName.toLowerCase()) !== 'html') {
        hadKeyboardEventRef.current = false;
        eventSubscription.pause();
      }
    });
  }, [hadKeyboardEventRef]);
  var setHasFocusVisible = (0, _react.useCallback)(function (nextHasFocusVisible) {
    if (hasFocusVisibleRef.current !== nextHasFocusVisible) {
      hasFocusVisibleRef.current = nextHasFocusVisible;
      nextHasFocusVisible && (onFocusVisibleRef === null || onFocusVisibleRef === void 0 ? void 0 : onFocusVisibleRef.current());
    }
  }, [hasFocusVisibleRef, onFocusVisibleRef]);
  var handleKeyDown = (0, _react.useCallback)(function (event) {
    if (event.altKey || event.ctrlKey || event.metaKey) {
      return;
    }

    if (event.target === targetRef.current) {
      setHasFocusVisible(true);
    }

    hadKeyboardEventRef.current = true;
  }, [hadKeyboardEventRef, setHasFocusVisible, targetRef]);
  var handlePointerDown = (0, _react.useCallback)(function () {
    hadKeyboardEventRef.current = false;
  }, [hadKeyboardEventRef]);
  var handleFocus = (0, _react.useCallback)(function (_ref) {
    var target = _ref.target;
    target === targetRef.current && (hadKeyboardEventRef.current || focusTriggersKeyboardModality(target)) && setHasFocusVisible(true);
  }, [hadKeyboardEventRef, setHasFocusVisible, targetRef]);
  var handleBlur = (0, _react.useCallback)(function (event) {
    if (event.target === targetRef.current && hasFocusVisibleRef.current) {
      blurSinceRef.current = Date.now();
      setHasFocusVisible(false);
    }
  }, [blurSinceRef, hasFocusVisibleRef, setHasFocusVisible, targetRef]);
  var handleVisibilityChange = (0, _react.useCallback)(function () {
    if (document.visibilityState === 'hidden') {
      // The element is blurred due to "visibilityState" set to "hidden".
      // 100ms is referenced from the WICG polyfill.
      // eslint-disable-next-line no-magic-numbers
      if (Date.now() - blurSinceRef.current < 100) {
        hadKeyboardEventRef.current = true;
      }

      eventSubscription.resume();
    }
  }, [blurSinceRef, eventSubscription, hadKeyboardEventRef]);
  (0, _react.useEffect)(function () {
    document.addEventListener('keydown', handleKeyDown, true);
    document.addEventListener('mousedown', handlePointerDown, true);
    document.addEventListener('pointerdown', handlePointerDown, true);
    document.addEventListener('touchstart', handlePointerDown, true);
    document.addEventListener('visibilitychange', handleVisibilityChange, true);
    return function () {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('mousedown', handlePointerDown);
      document.removeEventListener('pointerdown', handlePointerDown);
      document.removeEventListener('touchstart', handlePointerDown);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [handleKeyDown, handlePointerDown, handleVisibilityChange]);
  (0, _react.useEffect)(function () {
    var target = targetRef.current;
    target.addEventListener('blur', handleBlur, true);
    target.addEventListener('focus', handleFocus, true);
    return function () {
      target.removeEventListener('blur', handleBlur);
      target.removeEventListener('focus', handleFocus);
    }; // We specifically add "targetRef.current" here.
    // If the target element changed, we should reattach our event listeners.
  }, [handleBlur, handleFocus, targetRef]);
  (0, _react.useEffect)(function () {
    eventSubscription.resume();
    return function () {
      return eventSubscription.pause();
    };
  }, [eventSubscription]);
}

function useObserveFocusVisibleForModernBrowsers(targetRef, onFocusVisibleRef) {
  var handleFocus = (0, _react.useCallback)(function () {
    if (targetRef.current.matches(':focus-visible')) {
      onFocusVisibleRef === null || onFocusVisibleRef === void 0 ? void 0 : onFocusVisibleRef.current();
    }
  }, [onFocusVisibleRef, targetRef]);
  (0, _react.useEffect)(function () {
    var target = targetRef.current;
    target.addEventListener('focus', handleFocus);
    return function () {
      return target.removeEventListener('focus', handleFocus);
    }; // We specifically add "targetRef.current" here.
    // If the target element changed, we should reattach our event listeners.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [handleFocus, targetRef, targetRef.current]);
}

function useObserveFocusVisible(targetRef, onFocusVisible) {
  var _useNonce = (0, _useNonce3.default)(),
      _useNonce2 = _slicedToArray(_useNonce, 1),
      nonce = _useNonce2[0];

  var onFocusVisibleRef = (0, _useValueRef.default)(onFocusVisible); // The nonce is use for browser capabilities. Just in case the "nonce" had changed unexpectedly, the capabilities of the browser should never change.
  // Thus, we are using an initial version of "nonce". In case web devs changed the "nonce" to an invalid value, we won't break rules of hooks (as stated below).

  var nonceRef = (0, _react.useRef)(nonce); // ":focus-visible" selector is supported from Chrome/Edge 86+ and not supported in IE11 or Safari.
  // Doing a capability check on pseudo classes requires injecting a stylesheet, thus nonce is needed.

  var supportFocusVisible = (0, _react.useMemo)(function () {
    return (0, _supportPseudoClass.default)(':focus-visible', nonceRef.current);
  }, [nonceRef]); // Since "supportPseudoClass" is a browser capability, the result should be constant during the page lifetime.
  // Thus, running hooks conditionally is okay here.

  if (supportFocusVisible) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useObserveFocusVisibleForModernBrowsers(targetRef, onFocusVisibleRef);
  } else {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useObserveFocusVisibleForLegacyBrowsers(targetRef, onFocusVisibleRef);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,