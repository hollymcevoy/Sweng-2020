"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useMemoize;

var _react = require("react");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * `useMemoize` will memoize multiple calls to the same memoize function.
 *
 * This is similar to `useMemo`. But instead of calling it once, `useMemoize` enables multiple calls while the `callback` function is executed.
 *
 * @param {Fn<TArgs, TIntermediate>} fn - The function to be memoized.
 * @param {(fn: Fn<TArgs, TIntermediate>) => TFinal} callback - When called, this function should execute the memoizing function.
 * @param {DependencyList[]} deps - Dependencies to detect for chagnes.
 */
function useMemoize(fn, callback, deps) {
  if (typeof fn !== 'function') {
    throw new Error('The first argument must be a function.');
  } else if (typeof callback !== 'function') {
    throw new Error('The second argument must be a function.');
  } else if (!Array.isArray(deps)) {
    throw new Error('The third argument must be an array.');
  }

  var memoizedFn = (0, _react.useMemo)(function () {
    var cache = [];
    return function (run) {
      var nextCache = [];
      var result = run(function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _ref = [].concat(_toConsumableArray(cache), nextCache).find(function (_ref2) {
          var cachedArgs = _ref2.args;
          return args.length === cachedArgs.length && args.every(function (arg, index) {
            return Object.is(arg, cachedArgs[+index]);
          });
        }) || {
          result: fn.apply(void 0, args)
        },
            result = _ref.result;

        nextCache.push({
          args: args,
          result: result
        });
        return result;
      });
      cache = nextCache;
      return result;
    }; // We are manually creating the deps here. The "callback" arg is also designed not to be impact deps, similar to useEffect(fn), where "fn" is not in deps.

    /* eslint-disable-next-line react-hooks/exhaustive-deps */
  }, [fn].concat(_toConsumableArray(deps)));
  return memoizedFn(callback);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VNZW1vaXplLnRzIl0sIm5hbWVzIjpbInVzZU1lbW9pemUiLCJmbiIsImNhbGxiYWNrIiwiZGVwcyIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5IiwibWVtb2l6ZWRGbiIsImNhY2hlIiwicnVuIiwibmV4dENhY2hlIiwicmVzdWx0IiwiYXJncyIsImZpbmQiLCJjYWNoZWRBcmdzIiwibGVuZ3RoIiwiZXZlcnkiLCJhcmciLCJpbmRleCIsIk9iamVjdCIsImlzIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLFVBQVQsQ0FDYkMsRUFEYSxFQUViQyxRQUZhLEVBR2JDLElBSGEsRUFJTDtBQUNSLE1BQUksT0FBT0YsRUFBUCxLQUFjLFVBQWxCLEVBQThCO0FBQzVCLFVBQU0sSUFBSUcsS0FBSixDQUFVLHdDQUFWLENBQU47QUFDRCxHQUZELE1BRU8sSUFBSSxPQUFPRixRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ3pDLFVBQU0sSUFBSUUsS0FBSixDQUFVLHlDQUFWLENBQU47QUFDRCxHQUZNLE1BRUEsSUFBSSxDQUFDQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsSUFBZCxDQUFMLEVBQTBCO0FBQy9CLFVBQU0sSUFBSUMsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRDs7QUFFRCxNQUFNRyxVQUFVLEdBQUcsb0JBQVEsWUFBTTtBQUMvQixRQUFJQyxLQUFvQyxHQUFHLEVBQTNDO0FBRUEsV0FBTyxVQUFDQyxHQUFELEVBQW1EO0FBQ3hELFVBQU1DLFNBQXdDLEdBQUcsRUFBakQ7QUFDQSxVQUFNQyxNQUFNLEdBQUdGLEdBQUcsQ0FBQyxZQUFhO0FBQUEsMENBQVRHLElBQVM7QUFBVEEsVUFBQUEsSUFBUztBQUFBOztBQUM5QixtQkFBbUIsNkJBQUlKLEtBQUosR0FBY0UsU0FBZCxFQUF5QkcsSUFBekIsQ0FDakI7QUFBQSxjQUFTQyxVQUFULFNBQUdGLElBQUg7QUFBQSxpQkFDRUEsSUFBSSxDQUFDRyxNQUFMLEtBQWdCRCxVQUFVLENBQUNDLE1BQTNCLElBQXFDSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxVQUFDQyxHQUFELEVBQU1DLEtBQU47QUFBQSxtQkFBZ0JDLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVSCxHQUFWLEVBQWVILFVBQVUsQ0FBQyxDQUFDSSxLQUFGLENBQXpCLENBQWhCO0FBQUEsV0FBWCxDQUR2QztBQUFBLFNBRGlCLEtBR2Q7QUFBRVAsVUFBQUEsTUFBTSxFQUFFVixFQUFFLE1BQUYsU0FBTVcsSUFBTjtBQUFWLFNBSEw7QUFBQSxZQUFRRCxNQUFSLFFBQVFBLE1BQVI7O0FBS0FELFFBQUFBLFNBQVMsQ0FBQ1csSUFBVixDQUFlO0FBQUVULFVBQUFBLElBQUksRUFBSkEsSUFBRjtBQUFRRCxVQUFBQSxNQUFNLEVBQU5BO0FBQVIsU0FBZjtBQUVBLGVBQU9BLE1BQVA7QUFDRCxPQVRpQixDQUFsQjtBQVdBSCxNQUFBQSxLQUFLLEdBQUdFLFNBQVI7QUFFQSxhQUFPQyxNQUFQO0FBQ0QsS0FoQkQsQ0FIK0IsQ0FvQi9COztBQUNBO0FBQ0QsR0F0QmtCLEdBc0JmVixFQXRCZSw0QkFzQlJFLElBdEJRLEdBQW5CO0FBd0JBLFNBQU9JLFVBQVUsQ0FBQ0wsUUFBRCxDQUFqQjtBQUNEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXBlbmRlbmN5TGlzdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxudHlwZSBDYWNoZTxUQXJncywgVFJlc3VsdD4gPSB7IGFyZ3M6IFRBcmdzW107IHJlc3VsdDogVFJlc3VsdCB9O1xudHlwZSBGbjxUQXJncywgVFJlc3VsdD4gPSAoLi4uYXJnczogVEFyZ3NbXSkgPT4gVFJlc3VsdDtcblxuLyoqXG4gKiBgdXNlTWVtb2l6ZWAgd2lsbCBtZW1vaXplIG11bHRpcGxlIGNhbGxzIHRvIHRoZSBzYW1lIG1lbW9pemUgZnVuY3Rpb24uXG4gKlxuICogVGhpcyBpcyBzaW1pbGFyIHRvIGB1c2VNZW1vYC4gQnV0IGluc3RlYWQgb2YgY2FsbGluZyBpdCBvbmNlLCBgdXNlTWVtb2l6ZWAgZW5hYmxlcyBtdWx0aXBsZSBjYWxscyB3aGlsZSB0aGUgYGNhbGxiYWNrYCBmdW5jdGlvbiBpcyBleGVjdXRlZC5cbiAqXG4gKiBAcGFyYW0ge0ZuPFRBcmdzLCBUSW50ZXJtZWRpYXRlPn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gYmUgbWVtb2l6ZWQuXG4gKiBAcGFyYW0geyhmbjogRm48VEFyZ3MsIFRJbnRlcm1lZGlhdGU+KSA9PiBURmluYWx9IGNhbGxiYWNrIC0gV2hlbiBjYWxsZWQsIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGV4ZWN1dGUgdGhlIG1lbW9pemluZyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RGVwZW5kZW5jeUxpc3RbXX0gZGVwcyAtIERlcGVuZGVuY2llcyB0byBkZXRlY3QgZm9yIGNoYWduZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU1lbW9pemU8VEFyZ3MgZXh0ZW5kcyBbXSwgVEludGVybWVkaWF0ZSwgVEZpbmFsPihcbiAgZm46IEZuPFRBcmdzLCBUSW50ZXJtZWRpYXRlPixcbiAgY2FsbGJhY2s6IChmbjogRm48VEFyZ3MsIFRJbnRlcm1lZGlhdGU+KSA9PiBURmluYWwsXG4gIGRlcHM6IERlcGVuZGVuY3lMaXN0W11cbik6IFRGaW5hbCB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShkZXBzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIHRoaXJkIGFyZ3VtZW50IG11c3QgYmUgYW4gYXJyYXkuJyk7XG4gIH1cblxuICBjb25zdCBtZW1vaXplZEZuID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IGNhY2hlOiBDYWNoZTxUQXJncywgVEludGVybWVkaWF0ZT5bXSA9IFtdO1xuXG4gICAgcmV0dXJuIChydW46IChmbjogRm48VEFyZ3MsIFRJbnRlcm1lZGlhdGU+KSA9PiBURmluYWwpID0+IHtcbiAgICAgIGNvbnN0IG5leHRDYWNoZTogQ2FjaGU8VEFyZ3MsIFRJbnRlcm1lZGlhdGU+W10gPSBbXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJ1bigoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCB7IHJlc3VsdCB9ID0gWy4uLmNhY2hlLCAuLi5uZXh0Q2FjaGVdLmZpbmQoXG4gICAgICAgICAgKHsgYXJnczogY2FjaGVkQXJncyB9KSA9PlxuICAgICAgICAgICAgYXJncy5sZW5ndGggPT09IGNhY2hlZEFyZ3MubGVuZ3RoICYmIGFyZ3MuZXZlcnkoKGFyZywgaW5kZXgpID0+IE9iamVjdC5pcyhhcmcsIGNhY2hlZEFyZ3NbK2luZGV4XSkpXG4gICAgICAgICkgfHwgeyByZXN1bHQ6IGZuKC4uLmFyZ3MpIH07XG5cbiAgICAgICAgbmV4dENhY2hlLnB1c2goeyBhcmdzLCByZXN1bHQgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuXG4gICAgICBjYWNoZSA9IG5leHRDYWNoZTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIC8vIFdlIGFyZSBtYW51YWxseSBjcmVhdGluZyB0aGUgZGVwcyBoZXJlLiBUaGUgXCJjYWxsYmFja1wiIGFyZyBpcyBhbHNvIGRlc2lnbmVkIG5vdCB0byBiZSBpbXBhY3QgZGVwcywgc2ltaWxhciB0byB1c2VFZmZlY3QoZm4pLCB3aGVyZSBcImZuXCIgaXMgbm90IGluIGRlcHMuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuICB9LCBbZm4sIC4uLmRlcHNdKTtcblxuICByZXR1cm4gbWVtb2l6ZWRGbihjYWxsYmFjayk7XG59XG4iXX0=