"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useRenderMarkdownAsHTML = _interopRequireDefault(require("../hooks/useRenderMarkdownAsHTML"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var TextContent = function TextContent(_ref) {
  var contentType = _ref.contentType,
      text = _ref.text;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      textContentStyleSet = _useStyleSet2[0].textContent;

  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();
  var contentTypeMarkdown = contentType === 'text/markdown';
  return contentTypeMarkdown && renderMarkdownAsHTML ? /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('markdown', textContentStyleSet + ''),
    dangerouslySetInnerHTML: {
      __html: renderMarkdownAsHTML(text || '')
    }
  }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (text || '').split('\n').map(function (line, index) {
    return /*#__PURE__*/_react.default.createElement("p", {
      className: (0, _classnames.default)('plain', textContentStyleSet + ''),
      key: index
    }, line.trim());
  }));
};

TextContent.defaultProps = {
  contentType: 'text/markdown'
};
TextContent.propTypes = {
  contentType: _propTypes.default.string,
  text: _propTypes.default.string.isRequired
};
var _default = TextContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdHRhY2htZW50L1RleHRDb250ZW50LnRzeCJdLCJuYW1lcyI6WyJUZXh0Q29udGVudCIsImNvbnRlbnRUeXBlIiwidGV4dCIsInRleHRDb250ZW50U3R5bGVTZXQiLCJ0ZXh0Q29udGVudCIsInJlbmRlck1hcmtkb3duQXNIVE1MIiwiY29udGVudFR5cGVNYXJrZG93biIsIl9faHRtbCIsInNwbGl0IiwibWFwIiwibGluZSIsImluZGV4IiwidHJpbSIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFLQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQU9BLElBQU1BLFdBQWlDLEdBQUcsU0FBcENBLFdBQW9DLE9BQTJCO0FBQUEsTUFBeEJDLFdBQXdCLFFBQXhCQSxXQUF3QjtBQUFBLE1BQVhDLElBQVcsUUFBWEEsSUFBVzs7QUFDbkUscUJBQStDLDRCQUEvQztBQUFBO0FBQUEsTUFBc0JDLG1CQUF0QixvQkFBU0MsV0FBVDs7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyx1Q0FBN0I7QUFDQSxNQUFNQyxtQkFBbUIsR0FBR0wsV0FBVyxLQUFLLGVBQTVDO0FBRUEsU0FBT0ssbUJBQW1CLElBQUlELG9CQUF2QixnQkFDTDtBQUNFLElBQUEsU0FBUyxFQUFFLHlCQUFXLFVBQVgsRUFBdUJGLG1CQUFtQixHQUFHLEVBQTdDLENBRGI7QUFFRSxJQUFBLHVCQUF1QixFQUFFO0FBQUVJLE1BQUFBLE1BQU0sRUFBRUYsb0JBQW9CLENBQUNILElBQUksSUFBSSxFQUFUO0FBQTlCO0FBRjNCLElBREssZ0JBTUwsNkJBQUMsY0FBRCxDQUFPLFFBQVAsUUFDRyxDQUFDQSxJQUFJLElBQUksRUFBVCxFQUFhTSxLQUFiLENBQW1CLElBQW5CLEVBQXlCQyxHQUF6QixDQUE2QixVQUFDQyxJQUFELEVBQU9DLEtBQVA7QUFBQSx3QkFDNUI7QUFBRyxNQUFBLFNBQVMsRUFBRSx5QkFBVyxPQUFYLEVBQW9CUixtQkFBbUIsR0FBRyxFQUExQyxDQUFkO0FBQTZELE1BQUEsR0FBRyxFQUFFUTtBQUFsRSxPQUNHRCxJQUFJLENBQUNFLElBQUwsRUFESCxDQUQ0QjtBQUFBLEdBQTdCLENBREgsQ0FORjtBQWNELENBbkJEOztBQXFCQVosV0FBVyxDQUFDYSxZQUFaLEdBQTJCO0FBQ3pCWixFQUFBQSxXQUFXLEVBQUU7QUFEWSxDQUEzQjtBQUlBRCxXQUFXLENBQUNjLFNBQVosR0FBd0I7QUFDdEJiLEVBQUFBLFdBQVcsRUFBRWMsbUJBQVVDLE1BREQ7QUFFdEJkLEVBQUFBLElBQUksRUFBRWEsbUJBQVVDLE1BQVYsQ0FBaUJDO0FBRkQsQ0FBeEI7ZUFLZWpCLFciLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCByZWFjdC9uby1kYW5nZXI6IFwib2ZmXCIgKi9cbi8qIGVzbGludCByZWFjdC9uby1hcnJheS1pbmRleC1rZXk6IFwib2ZmXCIgKi9cblxuLy8gVGhlIGNvbnRlbnQgcmVuZGVyZWQgaGVyZSBpcyBzYW5pdGl6ZWQuXG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGQyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHVzZVJlbmRlck1hcmtkb3duQXNIVE1MIGZyb20gJy4uL2hvb2tzL3VzZVJlbmRlck1hcmtkb3duQXNIVE1MJztcbmltcG9ydCB1c2VTdHlsZVNldCBmcm9tICcuLi9ob29rcy91c2VTdHlsZVNldCc7XG5cbnR5cGUgVGV4dENvbnRlbnRQcm9wcyA9IHtcbiAgY29udGVudFR5cGU/OiBzdHJpbmc7XG4gIHRleHQ6IHN0cmluZztcbn07XG5cbmNvbnN0IFRleHRDb250ZW50OiBGQzxUZXh0Q29udGVudFByb3BzPiA9ICh7IGNvbnRlbnRUeXBlLCB0ZXh0IH0pID0+IHtcbiAgY29uc3QgW3sgdGV4dENvbnRlbnQ6IHRleHRDb250ZW50U3R5bGVTZXQgfV0gPSB1c2VTdHlsZVNldCgpO1xuICBjb25zdCByZW5kZXJNYXJrZG93bkFzSFRNTCA9IHVzZVJlbmRlck1hcmtkb3duQXNIVE1MKCk7XG4gIGNvbnN0IGNvbnRlbnRUeXBlTWFya2Rvd24gPSBjb250ZW50VHlwZSA9PT0gJ3RleHQvbWFya2Rvd24nO1xuXG4gIHJldHVybiBjb250ZW50VHlwZU1hcmtkb3duICYmIHJlbmRlck1hcmtkb3duQXNIVE1MID8gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbWFya2Rvd24nLCB0ZXh0Q29udGVudFN0eWxlU2V0ICsgJycpfVxuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiByZW5kZXJNYXJrZG93bkFzSFRNTCh0ZXh0IHx8ICcnKSB9fVxuICAgIC8+XG4gICkgOiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgeyh0ZXh0IHx8ICcnKS5zcGxpdCgnXFxuJykubWFwKChsaW5lLCBpbmRleCkgPT4gKFxuICAgICAgICA8cCBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3BsYWluJywgdGV4dENvbnRlbnRTdHlsZVNldCArICcnKX0ga2V5PXtpbmRleH0+XG4gICAgICAgICAge2xpbmUudHJpbSgpfVxuICAgICAgICA8L3A+XG4gICAgICApKX1cbiAgICA8L1JlYWN0LkZyYWdtZW50PlxuICApO1xufTtcblxuVGV4dENvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBjb250ZW50VHlwZTogJ3RleHQvbWFya2Rvd24nXG59O1xuXG5UZXh0Q29udGVudC5wcm9wVHlwZXMgPSB7XG4gIGNvbnRlbnRUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRDb250ZW50O1xuIl19