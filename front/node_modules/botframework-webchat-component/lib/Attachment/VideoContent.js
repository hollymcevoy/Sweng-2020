"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _HTMLVideoContent = _interopRequireDefault(require("./HTMLVideoContent"));

var _VimeoContent = _interopRequireDefault(require("./VimeoContent"));

var _YouTubeContent = _interopRequireDefault(require("./YouTubeContent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var YOUTUBE_DOMAIN = 'youtube.com';
var YOUTUBE_WWW_DOMAIN = 'www.youtube.com';
var YOUTUBE_SHORT_DOMAIN = 'youtu.be';
var YOUTUBE_WWW_SHORT_DOMAIN = 'www.youtu.be';
var VIMEO_DOMAIN = 'vimeo.com';
var VIMEO_WWW_DOMAIN = 'www.vimeo.com'; // This is a workaround
// - Today, there is no good URL polyfill for older browser
// - Instead of writing a URL parser, for older browser, we will use this <a href> trick to parse the URL

function parseURL(url) {
  var urlLike;

  if (typeof URL === 'function') {
    urlLike = new URL(url);
  } else {
    urlLike = document.createElement('a');
    urlLike.setAttribute('href', url);
  }

  var _urlLike = urlLike,
      hostname = _urlLike.hostname,
      pathname = _urlLike.pathname,
      search = _urlLike.search;
  return {
    hostname: hostname,
    pathname: pathname,
    search: search
  };
}

var VideoContent = function VideoContent(_ref) {
  var alt = _ref.alt,
      autoPlay = _ref.autoPlay,
      loop = _ref.loop,
      poster = _ref.poster,
      src = _ref.src;

  var _parseURL = parseURL(src),
      hostname = _parseURL.hostname,
      pathname = _parseURL.pathname,
      search = _parseURL.search;

  var lastSegment = pathname.split('/').pop();
  var searchParams = new URLSearchParams(search);

  switch (hostname) {
    case VIMEO_DOMAIN:
    case VIMEO_WWW_DOMAIN:
      return /*#__PURE__*/_react.default.createElement(_VimeoContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        embedID: lastSegment,
        loop: loop
      });

    case YOUTUBE_DOMAIN:
    case YOUTUBE_WWW_DOMAIN:
      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        embedID: searchParams.get('v'),
        loop: loop
      });

    case YOUTUBE_SHORT_DOMAIN:
    case YOUTUBE_WWW_SHORT_DOMAIN:
      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        embedID: lastSegment,
        loop: loop
      });

    default:
      return /*#__PURE__*/_react.default.createElement(_HTMLVideoContent.default, {
        alt: alt,
        autoPlay: autoPlay,
        loop: loop,
        poster: poster,
        src: src
      });
  }
};

VideoContent.defaultProps = {
  alt: '',
  autoPlay: false,
  loop: false,
  poster: ''
};
VideoContent.propTypes = {
  alt: _propTypes.default.string,
  autoPlay: _propTypes.default.bool,
  loop: _propTypes.default.bool,
  poster: _propTypes.default.string,
  src: _propTypes.default.string.isRequired
};
var _default = VideoContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdHRhY2htZW50L1ZpZGVvQ29udGVudC50c3giXSwibmFtZXMiOlsiWU9VVFVCRV9ET01BSU4iLCJZT1VUVUJFX1dXV19ET01BSU4iLCJZT1VUVUJFX1NIT1JUX0RPTUFJTiIsIllPVVRVQkVfV1dXX1NIT1JUX0RPTUFJTiIsIlZJTUVPX0RPTUFJTiIsIlZJTUVPX1dXV19ET01BSU4iLCJwYXJzZVVSTCIsInVybCIsInVybExpa2UiLCJVUkwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJob3N0bmFtZSIsInBhdGhuYW1lIiwic2VhcmNoIiwiVmlkZW9Db250ZW50IiwiYWx0IiwiYXV0b1BsYXkiLCJsb29wIiwicG9zdGVyIiwic3JjIiwibGFzdFNlZ21lbnQiLCJzcGxpdCIsInBvcCIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImdldCIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImJvb2wiLCJpc1JlcXVpcmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxjQUFjLEdBQUcsYUFBdkI7QUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxpQkFBM0I7QUFDQSxJQUFNQyxvQkFBb0IsR0FBRyxVQUE3QjtBQUNBLElBQU1DLHdCQUF3QixHQUFHLGNBQWpDO0FBQ0EsSUFBTUMsWUFBWSxHQUFHLFdBQXJCO0FBQ0EsSUFBTUMsZ0JBQWdCLEdBQUcsZUFBekIsQyxDQUVBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTQyxRQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUNyQixNQUFJQyxPQUFKOztBQUVBLE1BQUksT0FBT0MsR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzdCRCxJQUFBQSxPQUFPLEdBQUcsSUFBSUMsR0FBSixDQUFRRixHQUFSLENBQVY7QUFDRCxHQUZELE1BRU87QUFDTEMsSUFBQUEs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SE87QUFJdkJaLEVBQUFBLE1BQU0sRUFBRVUsbUJBQVVDLE1BSks7QUFLdkJWLEVBQUFBLEdBQUcsRUFBRVMsbUJBQVVDLE1BQVYsQ0FBaUJFO0FBTEMsQ0FBekI7ZUFRZWpCLFkiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgRkMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBIVE1MVmlkZW9Db250ZW50IGZyb20gJy4vSFRNTFZpZGVvQ29udGVudCc7XG5pbXBvcnQgVmltZW9Db250ZW50IGZyb20gJy4vVmltZW9Db250ZW50JztcbmltcG9ydCBZb3VUdWJlQ29udGVudCBmcm9tICcuL1lvdVR1YmVDb250ZW50JztcblxuY29uc3QgWU9VVFVCRV9ET01BSU4gPSAneW91dHViZS5jb20nO1xuY29uc3QgWU9VVFVCRV9XV1dfRE9NQUlOID0gJ3d3dy55b3V0dWJlLmNvbSc7XG5jb25zdCBZT1VUVUJFX1NIT1JUX0RPTUFJTiA9ICd5b3V0dS5iZSc7XG5jb25zdCBZT1VUVUJFX1dXV19TSE9SVF9ET01BSU4gPSAnd3d3LnlvdXR1LmJlJztcbmNvbnN0IFZJTUVPX0RPTUFJTiA9ICd2aW1lby5jb20nO1xuY29uc3QgVklNRU9fV1dXX0RPTUFJTiA9ICd3d3cudmltZW8uY29tJztcblxuLy8gVGhpcyBpcyBhIHdvcmthcm91bmRcbi8vIC0gVG9kYXksIHRoZXJlIGlzIG5vIGdvb2QgVVJMIHBvbHlmaWxsIGZvciBvbGRlciBicm93c2VyXG4vLyAtIEluc3RlYWQgb2Ygd3JpdGluZyBhIFVSTCBwYXJzZXIsIGZvciBvbGRlciBicm93c2VyLCB3ZSB3aWxsIHVzZSB0aGlzIDxhIGhyZWY+IHRyaWNrIHRvIHBhcnNlIHRoZSBVUkxcbmZ1bmN0aW9uIHBhcnNlVVJMKHVybCkge1xuICBsZXQgdXJsTGlrZTtcblxuICBpZiAodHlwZW9mIFVSTCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHVybExpa2UgPSBuZXcgVVJMKHVybCk7XG4gIH0gZWxzZSB7XG4gICAgdXJsTGlrZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB1cmxMaWtlLnNldEF0dHJpYnV0ZSgnaHJlZicsIHVybCk7XG4gIH1cblxuICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSwgc2VhcmNoIH0gPSB1cmxMaWtlO1xuXG4gIHJldHVybiB7IGhvc3RuYW1lLCBwYXRobmFtZSwgc2VhcmNoIH07XG59XG5cbnR5cGUgVmlkZW9Db250ZW50UHJvcHMgPSB7XG4gIGFsdD86IHN0cmluZztcbiAgYXV0b1BsYXk/OiBib29sZWFuO1xuICBsb29wPzogYm9vbGVhbjtcbiAgcG9zdGVyPzogc3RyaW5nO1xuICBzcmM6IHN0cmluZztcbn07XG5cbmNvbnN0IFZpZGVvQ29udGVudDogRkM8VmlkZW9Db250ZW50UHJvcHM+ID0gKHsgYWx0LCBhdXRvUGxheSwgbG9vcCwgcG9zdGVyLCBzcmMgfSkgPT4ge1xuICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSwgc2VhcmNoIH0gPSBwYXJzZVVSTChzcmMpO1xuICBjb25zdCBsYXN0U2VnbWVudCA9IHBhdGhuYW1lLnNwbGl0KCcvJykucG9wKCk7XG4gIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKTtcblxuICBzd2l0Y2ggKGhvc3RuYW1lKSB7XG4gICAgY2FzZSBWSU1FT19ET01BSU46XG4gICAgY2FzZSBWSU1FT19XV1dfRE9NQUlOOlxuICAgICAgcmV0dXJuIDxWaW1lb0NvbnRlbnQgYWx0PXthbHR9IGF1dG9QbGF5PXthdXRvUGxheX0gZW1iZWRJRD17bGFzdFNlZ21lbnR9IGxvb3A9e2xvb3B9IC8+O1xuXG4gICAgY2FzZSBZT1VUVUJFX0RPTUFJTjpcbiAgICBjYXNlIFlPVVRVQkVfV1dXX0RPTUFJTjpcbiAgICAgIHJldHVybiA8WW91VHViZUNvbnRlbnQgYWx0PXthbHR9IGF1dG9QbGF5PXthdXRvUGxheX0gZW1iZWRJRD17c2VhcmNoUGFyYW1zLmdldCgndicpfSBsb29wPXtsb29wfSAvPjtcblxuICAgIGNhc2UgWU9VVFVCRV9TSE9SVF9ET01BSU46XG4gICAgY2FzZSBZT1VUVUJFX1dXV19TSE9SVF9ET01BSU46XG4gICAgICByZXR1cm4gPFlvdVR1YmVDb250ZW50IGFsdD17YWx0fSBhdXRvUGxheT17YXV0b1BsYXl9IGVtYmVkSUQ9e2xhc3RTZWdtZW50fSBsb29wPXtsb29wfSAvPjtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gPEhUTUxWaWRlb0NvbnRlbnQgYWx0PXthbHR9IGF1dG9QbGF5PXthdXRvUGxheX0gbG9vcD17bG9vcH0gcG9zdGVyPXtwb3N0ZXJ9IHNyYz17c3JjfSAvPjtcbiAgfVxufTtcblxuVmlkZW9Db250ZW50LmRlZmF1bHRQcm9wcyA9IHtcbiAgYWx0OiAnJyxcbiAgYXV0b1BsYXk6IGZhbHNlLFxuICBsb29wOiBmYWxzZSxcbiAgcG9zdGVyOiAnJ1xufTtcblxuVmlkZW9Db250ZW50LnByb3BUeXBlcyA9IHtcbiAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhdXRvUGxheTogUHJvcFR5cGVzLmJvb2wsXG4gIGxvb3A6IFByb3BUeXBlcy5ib29sLFxuICBwb3N0ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBWaWRlb0NvbnRlbnQ7XG4iXX0=