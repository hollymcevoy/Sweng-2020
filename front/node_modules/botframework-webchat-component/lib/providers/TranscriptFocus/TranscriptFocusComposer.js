"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _mathRandom = _interopRequireDefault(require("math-random"));

var _react = _interopRequireWildcard(require("react"));

var _scrollIntoViewWithBlockNearest = _interopRequireDefault(require("../../Utils/scrollIntoViewWithBlockNearest"));

var _Context = _interopRequireDefault(require("./private/Context"));

var _useActivityTreeWithRenderer = _interopRequireDefault(require("../ActivityTree/useActivityTreeWithRenderer"));

var _usePrevious = _interopRequireDefault(require("../../hooks/internal/usePrevious"));

var _useStateRef3 = _interopRequireDefault(require("../../hooks/internal/useStateRef"));

var _useValueRef = _interopRequireDefault(require("../../hooks/internal/useValueRef"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity;

function last(array) {
  return array[array.length - 1];
}

function uniqueId() {
  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  return (0, _mathRandom.default)() // eslint-disable-next-line no-magic-numbers
  .toString(36) // eslint-disable-next-line no-magic-numbers
  .substring(2, 2 + count);
}

var TranscriptFocusComposer = function TranscriptFocusComposer(_ref) {
  var _containerRef$current;

  var children = _ref.children,
      containerRef = _ref.containerRef;

  var _useActivityTreeWithR = (0, _useActivityTreeWithRenderer.default)({
    flat: true
  }),
      _useActivityTreeWithR2 = _slicedToArray(_useActivityTreeWithR, 1),
      flattenedActivityTree = _useActivityTreeWithR2[0];

  var _useStateRef = (0, _useStateRef3.default)(),
      _useStateRef2 = _slicedToArray(_useStateRef, 3),
      _ = _useStateRef2[0],
      setRawFocusedActivityKey = _useStateRef2[1],
      rawFocusedActivityKeyRef = _useStateRef2[2];

  var getKeyByActivity = useGetKeyByActivity(); // As we need to use IDREF for `aria-activedescendant`,
  // this prefix will differentiate multiple instances of transcript on the same page.
  // eslint-disable-next-line no-magic-numbers

  var prefix = (0, _react.useMemo)(function () {
    return uniqueId(3);
  }, []);
  var getDescendantIdByActivityKey = (0, _react.useCallback)(function (activityKey) {
    return activityKey && "webchat__transcript-focus-".concat(prefix, "__activity-").concat(activityKey);
  }, [prefix]);
  var renderingActivityKeys = (0, _react.useMemo)(function () {
    return Object.freeze(flattenedActivityTree.map(function (_ref2) {
      var activity = _ref2.activity;
      return getKeyByActivity(activity);
    }));
  }, [flattenedActivityTree, getKeyByActivity]);
  var renderingActivityKeysRef = (0, _useValueRef.default)(renderingActivityKeys); // While the transcript or any descendants are not focused, if the transcript is updated, reset the user-selected active descendant.
  // This will assume the last activity, if any, will be the active descendant.

  var prevRenderingActivityKeys = (0, _usePrevious.default)(renderingActivityKeys);

  if (renderingActivityKeys !== prevRenderingActivityKeys && !((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(document.activeElement))) {
    rawFocusedActivityKeyRef.current = undefined;
  }

  var rawFocusedActivityKey = rawFocusedActivityKeyRef.current;
  var focusedActivityKey = (0, _react.useMemo)(function () {
    return renderingActivityKeys.includes(rawFocusedActivityKey) ? rawFocusedActivityKey : last(renderingActivityKeys);
  }, [renderingActivityKeys, rawFocusedActivityKey]);
  var focusedActivityKeyRef = (0, _useValueRef.default)(focusedActivityKey);
  var activeDescendantId = (0, _react.useMemo)(function () {
    return getDescendantIdByActivityKey(focusedActivityKey);
  }, [getDescendantIdByActivityKey, focusedActivityKey]);
  var focusByActivityKey = (0, _react.useCallback)(function (activityKey) {
    var withFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (activityKey === false) {
      // `false` means set it to nothing.
      setRawFocusedActivityKey(undefined);
    } else if (activityKey === true) {
      // `true` means set to something if it is not set.
      setRawFocusedActivityKey(function (key) {
        return key || focusedActivityKeyRef.current;
      });
    } else if (activityKey) {
      setRawFocusedActivityKey(activityKey);
    }

    if (withFocus) {
      var _containerRef$current2;

      (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.focus();

      var _activeDescendantId = getDescendantIdByActivityKey(activityKey === false ? // If "activityKey" is false, it means "focus nothing and reset it to the last activity".
      last(renderingActivityKeysRef.current) : activityKey && activityKey !== true ? // If "activity" is not "undefined" and not "true", it means "focus on this activity".
      activityKey : // If "activityKey" is "undefined", it means "don't modify the focus".
      // If "activityKey" is "true", it means "try to focus on anything".
      rawFocusedActivityKeyRef.current);

      var activeDescendantElement = _activeDescendantId && document.getElementById(_activeDescendantId); // Don't scroll active descendant into view if the focus is already inside it.
      // Otherwise, given the focus is on the send box, clicking on any <input> inside the Adaptive Cards may cause the view to move.
      // This UX is not desirable because click should not cause scroll.


      if (activeDescendantElement && !activeDescendantElement.contains(document.activeElement)) {
        (0, _scrollIntoViewWithBlockNearest.default)(activeDescendantElement);
      }
    }
  }, [getDescendantIdByActivityKey, containerRef, focusedActivityKeyRef, renderingActivityKeysRef, rawFocusedActivityKeyRef, setRawFocusedActivityKey]);
  var focusRelativeActivity = (0, _react.useCallback)(function (delta) {
    var orderedActivityKeys = renderingActivityKeysRef.current;

    if (isNaN(delta) || !orderedActivityKeys.length) {
      return focusByActivityKey(false, true);
    }

    var focusedActivityKey = focusedActivityKeyRef.current;
    var index = orderedActivityKeys.indexOf(focusedActivityKey);
    var nextIndex = ~index ? Math.max(0, Math.min(orderedActivityKeys.length - 1, index + delta)) : orderedActivityKeys.length - 1;
    focusByActivityKey(orderedActivityKeys[+nextIndex], true);
  }, [focusedActivityKeyRef, renderingActivityKeysRef, focusByActivityKey]);
  var contextValue = (0, _react.useMemo)(function () {
    return {
      activeDescendantIdState: Object.freeze([activeDescendantId]),
      getDescendantIdByActivityKey: getDescendantIdByActivityKey,
      focusByActivityKey: focusByActivityKey,
      focusedActivityKeyState: Object.freeze([focusedActivityKey]),
      focusedExplicitlyState: Object.freeze([!!rawFocusedActivityKey]),
      focusRelativeActivity: focusRelativeActivity
    };
  }, [activeDescendantId, getDescendantIdByActivityKey, focusByActivityKey, focusedActivityKey, focusRelativeActivity, rawFocusedActivityKey]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: contextValue
  }, children);
};

TranscriptFocusComposer.propTypes = {
  // PropTypes is not fully compatible with TypeScript.
  // @ts-ignore
  containerRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(HTMLElement)
  }).isRequired
};
var _default = TranscriptFocusComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,