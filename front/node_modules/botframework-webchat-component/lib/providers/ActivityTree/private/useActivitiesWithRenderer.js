"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useActivitiesWithRenderer;

var _react = require("react");

var _useMemoize = _interopRequireDefault(require("../../../hooks/internal/useMemoize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useActivitiesWithRenderer(activities, createActivityRenderer) {
  var createActivityRendererWithLiteralArgs = (0, _react.useCallback)(function (activity, nextVisibleActivity) {
    return createActivityRenderer({
      activity: activity,
      nextVisibleActivity: nextVisibleActivity
    });
  }, [createActivityRenderer]); // Create a memoized context of the createActivityRenderer function.
  // TODO: [P2] Rename useMemoize to useMemoAll

  var entries = (0, _useMemoize.default)(createActivityRendererWithLiteralArgs, function (createActivityRendererWithLiteralArgsMemoized) {
    // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).
    // In the next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return the memoized result instead.
    // This is an improvement to React useMemo(), because it only allows 1 memoization.
    // useMemoize() allows any number of memoization.
    var activitiesWithRenderer = [];
    var nextVisibleActivity;

    for (var index = activities.length - 1; index >= 0; index--) {
      var activity = activities[+index];
      var renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);

      if (renderActivity) {
        activitiesWithRenderer.splice(0, 0, {
          activity: activity,
          renderActivity: renderActivity
        });
        nextVisibleActivity = activity;
      }
    }

    return Object.freeze(activitiesWithRenderer);
  }, [activities]);
  var prevEntriesRef = (0, _react.useRef)([]);
  var prevEntries = prevEntriesRef.current;

  if (prevEntries.length !== entries.length || prevEntries.some(function (prevEntry, index) {
    var entry = entries[+index];
    return entry.activity !== prevEntry.activity || entry.renderActivity !== prevEntry.renderActivity;
  })) {
    prevEntriesRef.current = entries;
  }

  return prevEntriesRef.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvQWN0aXZpdHlUcmVlL3ByaXZhdGUvdXNlQWN0aXZpdGllc1dpdGhSZW5kZXJlci50cyJdLCJuYW1lcyI6WyJ1c2VBY3Rpdml0aWVzV2l0aFJlbmRlcmVyIiwiYWN0aXZpdGllcyIsImNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIiLCJjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzIiwiYWN0aXZpdHkiLCJuZXh0VmlzaWJsZUFjdGl2aXR5IiwiZW50cmllcyIsImNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3NNZW1vaXplZCIsImFjdGl2aXRpZXNXaXRoUmVuZGVyZXIiLCJpbmRleCIsImxlbmd0aCIsInJlbmRlckFjdGl2aXR5Iiwic3BsaWNlIiwiT2JqZWN0IiwiZnJlZXplIiwicHJldkVudHJpZXNSZWYiLCJwcmV2RW50cmllcyIsImN1cnJlbnQiLCJzb21lIiwicHJldkVudHJ5IiwiZW50cnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFJQTs7OztBQUllLFNBQVNBLHlCQUFULENBQ2JDLFVBRGEsRUFFYkMsc0JBRmEsRUFHb0I7QUFDakMsTUFBTUMscUNBQXFDLEdBQUcsd0JBQzVDLFVBQUNDLFFBQUQsRUFBK0JDLG1CQUEvQjtBQUFBLFdBQ0VILHNCQUFzQixDQUFDO0FBQUVFLE1BQUFBLFFBQVEsRUFBUkEsUUFBRjtBQUFZQyxNQUFBQSxtQkFBbUIsRUFBbkJBO0FBQVosS0FBRCxDQUR4QjtBQUFBLEdBRDRDLEVBRzVDLENBQUNILHNCQUFELENBSDRDLENBQTlDLENBRGlDLENBT2pDO0FBQ0E7O0FBQ0EsTUFBTUksT0FBTyxHQUFHLHlCQUNkSCxxQ0FEYyxFQUVkLFVBQUFJLDZDQUE2QyxFQUFJO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBRUEsUUFBTUMsc0JBQThDLEdBQUcsRUFBdkQ7QUFDQSxRQUFJSCxtQkFBSjs7QUFFQSxTQUFLLElBQUlJLEtBQUssR0FBR1IsVUFBVSxDQUFDUyxNQUFYLEdBQW9CLENBQXJDLEVBQXdDRCxLQUFLLElBQUksQ0FBakQsRUFBb0RBLEtBQUssRUFBekQsRUFBNkQ7QUFDM0QsVUFBTUwsUUFBUSxHQUFHSCxVQUFVLENBQUMsQ0FBQ1EsS0FBRixDQUEzQjtBQUNBLFVBQU1FLGNBQWMsR0FBR0osNkNBQTZDLENBQUNILFFBQUQsRUFBV0MsbUJBQVgsQ0FBcEU7O0FBRUEsVUFBSU0sY0FBSixFQUFvQjtBQUNsQkgsUUFBQUEsc0JBQXNCLENBQUNJLE1BQXZCLENBQThCLENBQTlCLEVBQWlDLENBQWpDLEVBQW9DO0FBQ2xDUixVQUFBQSxRQUFRLEVBQVJBLFFBRGtDO0FBRWxDTyxVQUFBQSxjQUFjLEVBQWRBO0FBRmtDLFNBQXBDO0FBS0FOLFFBQUFBLG1CQUFtQixHQUFHRCxRQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsV0FBT1MsTUFBTSxDQUFDQyxNQUFQLENBQWNOLHNCQUFkLENBQVA7QUFDRCxHQTFCYSxFQTJCZCxDQUFDUCxVQUFELENBM0JjLENBQWhCO0FBOEJBLE1BQU1jLGNBQWMsR0FBRyxtQkFBd0MsRUFBeEMsQ0FBdkI7QUFDQSxNQUFpQkMsV0FBakIsR0FBaUNELGNBQWpDLENBQVFFLE9BQVI7O0FBRUEsTUFDRUQsV0FBVyxDQUFDTixNQUFaLEtBQXVCSixPQUFPLENBQUNJLE1BQS9CLElBQ0FNLFdBQVcsQ0FBQ0UsSUFBWixDQUFpQixVQUFDQyxTQUFELEVBQVlWLEtBQVosRUFBc0I7QUFDckMsUUFBTVcsS0FBSyxHQUFHZCxPQUFPLENBQUMsQ0FBQ0csS0FBRixDQUFyQjtBQUVBLFdBQU9XLEtBQUssQ0FBQ2hCLFFBQU4sS0FBbUJlLFNBQVMsQ0FBQ2YsUUFBN0IsSUFBeUNnQixLQUFLLENBQUNULGNBQU4sS0FBeUJRLFNBQVMsQ0FBQ1IsY0FBbkY7QUFDRCxHQUpELENBRkYsRUFPRTtBQUNBSSxJQUFBQSxjQUFjLENBQUNFLE9BQWYsR0FBeUJYLE9BQXpCO0FBQ0Q7O0FBRUQsU0FBT1MsY0FBYyxDQUFDRSxPQUF0QjtBQUNEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7IERpcmVjdExpbmVBY3Rpdml0eSB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuXG5pbXBvcnQgdXNlTWVtb2l6ZSBmcm9tICcuLi8uLi8uLi9ob29rcy9pbnRlcm5hbC91c2VNZW1vaXplJztcblxuaW1wb3J0IHR5cGUgeyBBY3Rpdml0eVdpdGhSZW5kZXJlciB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VBY3Rpdml0aWVzV2l0aFJlbmRlcmVyKFxuICBhY3Rpdml0aWVzOiByZWFkb25seSBEaXJlY3RMaW5lQWN0aXZpdHlbXSxcbiAgY3JlYXRlQWN0aXZpdHlSZW5kZXJlclxuKTogcmVhZG9ubHkgQWN0aXZpdHlXaXRoUmVuZGVyZXJbXSB7XG4gIGNvbnN0IGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3MgPSB1c2VDYWxsYmFjayhcbiAgICAoYWN0aXZpdHk6IERpcmVjdExpbmVBY3Rpdml0eSwgbmV4dFZpc2libGVBY3Rpdml0eTogRGlyZWN0TGluZUFjdGl2aXR5KSA9PlxuICAgICAgY3JlYXRlQWN0aXZpdHlSZW5kZXJlcih7IGFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pLFxuICAgIFtjcmVhdGVBY3Rpdml0eVJlbmRlcmVyXVxuICApO1xuXG4gIC8vIENyZWF0ZSBhIG1lbW9pemVkIGNvbnRleHQgb2YgdGhlIGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIgZnVuY3Rpb24uXG4gIC8vIFRPRE86IFtQMl0gUmVuYW1lIHVzZU1lbW9pemUgdG8gdXNlTWVtb0FsbFxuICBjb25zdCBlbnRyaWVzID0gdXNlTWVtb2l6ZShcbiAgICBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzLFxuICAgIGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3NNZW1vaXplZCA9PiB7XG4gICAgICAvLyBBbGwgY2FsbHMgdG8gY3JlYXRlQWN0aXZpdHlSZW5kZXJlcldpdGhMaXRlcmFsQXJnc01lbW9pemVkKCkgaW4gdGhpcyBmdW5jdGlvbiB3aWxsIGJlIG1lbW9pemVkIChMUlUgPSAxKS5cbiAgICAgIC8vIEluIHRoZSBuZXh0IHJlbmRlciBjeWNsZSwgY2FsbHMgdG8gY3JlYXRlQWN0aXZpdHlSZW5kZXJlcldpdGhMaXRlcmFsQXJnc01lbW9pemVkKCkgbWlnaHQgcmV0dXJuIHRoZSBtZW1vaXplZCByZXN1bHQgaW5zdGVhZC5cbiAgICAgIC8vIFRoaXMgaXMgYW4gaW1wcm92ZW1lbnQgdG8gUmVhY3QgdXNlTWVtbygpLCBiZWNhdXNlIGl0IG9ubHkgYWxsb3dzIDEgbWVtb2l6YXRpb24uXG4gICAgICAvLyB1c2VNZW1vaXplKCkgYWxsb3dzIGFueSBudW1iZXIgb2YgbWVtb2l6YXRpb24uXG5cbiAgICAgIGNvbnN0IGFjdGl2aXRpZXNXaXRoUmVuZGVyZXI6IEFjdGl2aXR5V2l0aFJlbmRlcmVyW10gPSBbXTtcbiAgICAgIGxldCBuZXh0VmlzaWJsZUFjdGl2aXR5OiBEaXJlY3RMaW5lQWN0aXZpdHk7XG5cbiAgICAgIGZvciAobGV0IGluZGV4ID0gYWN0aXZpdGllcy5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2aXR5ID0gYWN0aXZpdGllc1sraW5kZXhdO1xuICAgICAgICBjb25zdCByZW5kZXJBY3Rpdml0eSA9IGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3NNZW1vaXplZChhY3Rpdml0eSwgbmV4dFZpc2libGVBY3Rpdml0eSk7XG5cbiAgICAgICAgaWYgKHJlbmRlckFjdGl2aXR5KSB7XG4gICAgICAgICAgYWN0aXZpdGllc1dpdGhSZW5kZXJlci5zcGxpY2UoMCwgMCwge1xuICAgICAgICAgICAgYWN0aXZpdHksXG4gICAgICAgICAgICByZW5kZXJBY3Rpdml0eVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbmV4dFZpc2libGVBY3Rpdml0eSA9IGFjdGl2aXR5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKGFjdGl2aXRpZXNXaXRoUmVuZGVyZXIpO1xuICAgIH0sXG4gICAgW2FjdGl2aXRpZXNdXG4gICk7XG5cbiAgY29uc3QgcHJldkVudHJpZXNSZWYgPSB1c2VSZWY8cmVhZG9ubHkgQWN0aXZpdHlXaXRoUmVuZGVyZXJbXT4oW10pO1xuICBjb25zdCB7IGN1cnJlbnQ6IHByZXZFbnRyaWVzIH0gPSBwcmV2RW50cmllc1JlZjtcblxuICBpZiAoXG4gICAgcHJldkVudHJpZXMubGVuZ3RoICE9PSBlbnRyaWVzLmxlbmd0aCB8fFxuICAgIHByZXZFbnRyaWVzLnNvbWUoKHByZXZFbnRyeSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1sraW5kZXhdO1xuXG4gICAgICByZXR1cm4gZW50cnkuYWN0aXZpdHkgIT09IHByZXZFbnRyeS5hY3Rpdml0eSB8fCBlbnRyeS5yZW5kZXJBY3Rpdml0eSAhPT0gcHJldkVudHJ5LnJlbmRlckFjdGl2aXR5O1xuICAgIH0pXG4gICkge1xuICAgIHByZXZFbnRyaWVzUmVmLmN1cnJlbnQgPSBlbnRyaWVzO1xuICB9XG5cbiAgcmV0dXJuIHByZXZFbnRyaWVzUmVmLmN1cnJlbnQ7XG59XG4iXX0=