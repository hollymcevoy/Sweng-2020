"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _activityAltText = _interopRequireDefault(require("./Utils/activityAltText"));

var _useStyleToEmotionObject = _interopRequireDefault(require("./hooks/internal/useStyleToEmotionObject"));

var _useRenderMarkdownAsHTML = _interopRequireDefault(require("./hooks/useRenderMarkdownAsHTML"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,
    useCreateAttachmentForScreenReaderRenderer = _botframeworkWebchatApi.hooks.useCreateAttachmentForScreenReaderRenderer,
    useDateFormatter = _botframeworkWebchatApi.hooks.useDateFormatter,
    useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;
var ROOT_STYLE = {
  '&.webchat__screen-reader-activity': {
    color: 'transparent',
    height: 1,
    opacity: 0,
    overflow: 'hidden',
    position: 'absolute',
    top: 0,
    whiteSpace: 'nowrap',
    width: 1
  }
};
var ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {
  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',
  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',
  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',
  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',
  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'
};

var ScreenReaderAttachments = function ScreenReaderAttachments(_ref) {
  var activity = _ref.activity,
      renderAttachments = _ref.renderAttachments;
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments;
  var createAttachmentForScreenReaderRenderer = useCreateAttachmentForScreenReaderRenderer();
  var localizeWithPlural = useLocalizer({
    plural: true
  });
  var attachmentForScreenReaderRenderers = renderAttachments ? attachments.map(function (attachment) {
    return createAttachmentForScreenReaderRenderer({
      activity: activity,
      attachment: attachment
    });
  }).filter(function (render) {
    return render;
  }) : [];
  var numGenericAttachments = attachments.length - attachmentForScreenReaderRenderers.length;
  var numAttachmentsAlt = !!numGenericAttachments && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numGenericAttachments);
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, !!attachmentForScreenReaderRenderers.length && /*#__PURE__*/_react.default.createElement("ul", null, attachmentForScreenReaderRenderers.map(function (render, index) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      _react.default.createElement("li", {
        key: index
      }, render())
    );
  })), numAttachmentsAlt && /*#__PURE__*/_react.default.createElement("p", null, numAttachmentsAlt));
};

ScreenReaderAttachments.propTypes = {
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.array
  }).isRequired,
  renderAttachments: _propTypes.default.bool.isRequired
}; // When "renderAttachments" is false, we will not render the content of attachments.
// That means, it will only render "2 attachments", instead of "image attachment".
// This is used in the visual transcript, where we render "Press ENTER to interact."

var ScreenReaderActivity = function ScreenReaderActivity(_ref2) {
  var activity = _ref2.activity,
      children = _ref2.children,
      id = _ref2.id,
      renderAttachments = _ref2.renderAttachments;

  var _useAvatarForBot = useAvatarForBot(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var formatDate = useDateFormatter();
  var getKeyByActivity = useGetKeyByActivity();
  var localize = useLocalizer();
  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var textAlt = (0, _react.useMemo)(function () {
    return (0, _activityAltText.default)(activity, renderMarkdownAsHTML);
  }, [activity, renderMarkdownAsHTML]);
  var _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var fallbackText = _activity$channelData['webchat:fallback-text'],
      _activity$from = activity.from;
  _activity$from = _activity$from === void 0 ? {} : _activity$from;
  var role = _activity$from.role,
      timestamp = activity.timestamp;
  var fromUser = role === 'user';
  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  var timestampAlt = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(timestamp));
  var labelId = (0, _react.useMemo)(function () {
    return "webchat__screen-reader-activity__label-".concat(getKeyByActivity(activity));
  }, [activity, getKeyByActivity]);
  return /*#__PURE__*/_react.default.createElement("article", {
    "aria-atomic": true // Narrator requires the "aria-labelledby" attribute, otherwise, it will only read "aria-roledescription".
    // However, iOS VoiceOver and NVDA both ignore the "aria-labelledby" and read out the whole content, including timestamp.
    ,
    "aria-labelledby": labelId,
    "aria-roledescription": "message",
    className: (0, _classnames.default)('webchat__screen-reader-activity', rootClassName) // "id" attribute is used by `aria-labelledby`.
    // eslint-disable-next-line react/forbid-dom-props
    ,
    id: id
  }, /*#__PURE__*/_react.default.createElement("p", {
    id: labelId
  }, /*#__PURE__*/_react.default.createElement("span", null, greetingAlt), /*#__PURE__*/_react.default.createElement("span", null, textAlt)), !fallbackText && /*#__PURE__*/_react.default.createElement(ScreenReaderAttachments, {
    activity: activity,
    renderAttachments: renderAttachments
  }), /*#__PURE__*/_react.default.createElement("p", {
    className: "webchat__screen-reader-activity__timestamp"
  }, timestampAlt), children);
};

ScreenReaderActivity.defaultProps = {
  children: undefined,
  id: undefined,
  renderAttachments: true
};
ScreenReaderActivity.propTypes = {
  activity: _propTypes.default.any.isRequired,
  children: _propTypes.default.any,
  id: _propTypes.default.string,
  renderAttachments: _propTypes.default.bool
};
var _default = ScreenReaderActivity;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TY3JlZW5SZWFkZXJBY3Rpdml0eS5qcyJdLCJuYW1lcyI6WyJ1c2VBdmF0YXJGb3JCb3QiLCJob29rcyIsInVzZUNyZWF0ZUF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlciIsInVzZURhdGVGb3JtYXR0ZXIiLCJ1c2VHZXRLZXlCeUFjdGl2aXR5IiwidXNlTG9jYWxpemVyIiwiUk9PVF9TVFlMRSIsImNvbG9yIiwiaGVpZ2h0Iiwib3BhY2l0eSIsIm92ZXJmbG93IiwicG9zaXRpb24iLCJ0b3AiLCJ3aGl0ZVNwYWNlIiwid2lkdGgiLCJBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfQUxUX0lEUyIsImZldyIsIm1hbnkiLCJvbmUiLCJvdGhlciIsInR3byIsIlNjcmVlblJlYWRlckF0dGFjaG1lbnRzIiwiYWN0aXZpdHkiLCJyZW5kZXJBdHRhY2htZW50cyIsImF0dGFjaG1lbnRzIiwiY3JlYXRlQXR0YWNobWVudEZvclNjcmVlblJlYWRlclJlbmRlcmVyIiwibG9jYWxpemVXaXRoUGx1cmFsIiwicGx1cmFsIiwiYXR0YWNobWVudEZvclNjcmVlblJlYWRlclJlbmRlcmVycyIsIm1hcCIsImF0dGFjaG1lbnQiLCJmaWx0ZXIiLCJyZW5kZXIiLCJudW1HZW5lcmljQXR0YWNobWVudHMiLCJsZW5ndGgiLCJudW1BdHRhY2htZW50c0FsdCIsImluZGV4IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJhcnJheSIsImlzUmVxdWlyZWQiLCJib29sIiwiU2NyZWVuUmVhZGVyQWN0aXZpdHkiLCJjaGlsZHJlbiIsImlkIiwiYm90SW5pdGlhbHMiLCJpbml0aWFscyIsImZvcm1hdERhdGUiLCJnZXRLZXlCeUFjdGl2aXR5IiwibG9jYWxpemUiLCJyZW5kZXJNYXJrZG93bkFzSFRNTCIsInJvb3RDbGFzc05hbWUiLCJ0ZXh0QWx0IiwiY2hhbm5lbERhdGEiLCJmYWxsYmFja1RleHQiLCJmcm9tIiwicm9sZSIsInRpbWVzdGFtcCIsImZyb21Vc2VyIiwiZ3JlZXRpbmdBbHQiLCJyZXBsYWNlIiwidGltZXN0YW1wQWx0IiwibGFiZWxJZCIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCIsImFueSIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFDRUEsZUFERixHQU1JQyw2QkFOSixDQUNFRCxlQURGO0FBQUEsSUFFRUUsMENBRkYsR0FNSUQsNkJBTkosQ0FFRUMsMENBRkY7QUFBQSxJQUdFQyxnQkFIRixHQU1JRiw2QkFOSixDQUdFRSxnQkFIRjtBQUFBLElBSUVDLG1CQUpGLEdBTUlILDZCQU5KLENBSUVHLG1CQUpGO0FBQUEsSUFLRUMsWUFMRixHQU1JSiw2QkFOSixDQUtFSSxZQUxGO0FBUUEsSUFBTUMsVUFBVSxHQUFHO0FBQ2pCLHVDQUFxQztBQUNuQ0MsSUFBQUEsS0FBSyxFQUFFLGFBRDRCO0FBRW5DQyxJQUFBQSxNQUFNLEVBQUUsQ0FGMkI7QUFHbkNDLElBQUFBLE9BQU8sRUFBRSxDQUgwQjtBQUluQ0MsSUFBQUEsUUFBUSxFQUFFLFFBSnlCO0FBS25DQyxJQUFBQSxRQUFRLEVBQUUsVUFMeUI7QUFNbkNDLElBQUFBLEdBQUcsRUFBRSxDQU44QjtBQU9uQ0MsSUFBQUEsVUFBVSxFQUFFLFFBUHVCO0FBUW5DQyxJQUFBQSxLQUFLLEVBQUU7QUFSNEI7QUFEcEIsQ0FBbkI7QUFhQSxJQUFNQyxnQ0FBZ0MsR0FBRztBQUN2Q0MsRUFBQUEsR0FBRyxFQUFFLGtDQURrQztBQUV2Q0MsRUFBQUEsSUFBSSxFQUFFLG1DQUZpQztBQUd2Q0MsRUFBQUEsR0FBRyxFQUFFLGtDQUhrQztBQUl2Q0MsRUFBQUEsS0FBSyxFQUFFLG9DQUpnQztBQUt2Q0MsRUFBQUEsR0FBRyxFQUFFO0FBTGtDLENBQXpDOztBQVFBLElBQU1DLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsT0FBcUM7QUFBQSxNQUFsQ0MsUUFB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Q2xDcEIsRUFBQUEsUUFBUSxFQUFFcUIsU0FEd0I7QUFFbENwQixFQUFBQSxFQUFFLEVBQUVvQixTQUY4QjtBQUdsQzFDLEVBQUFBLGlCQUFpQixFQUFFO0FBSGUsQ0FBcEM7QUFNQW9CLG9CQUFvQixDQUFDTixTQUFyQixHQUFpQztBQUMvQmYsRUFBQUEsUUFBUSxFQUFFZ0IsbUJBQVU0QixHQUFWLENBQWN6QixVQURPO0FBRS9CRyxFQUFBQSxRQUFRLEVBQUVOLG1CQUFVNEIsR0FGVztBQUcvQnJCLEVBQUFBLEVBQUUsRUFBRVAsbUJBQVU2QixNQUhpQjtBQUkvQjVDLEVBQUFBLGlCQUFpQixFQUFFZSxtQkFBVUk7QUFKRSxDQUFqQztlQU9lQyxvQiIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogWzJdIH1dICovXG5cbmltcG9ydCB7IGhvb2tzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtYXBpJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGFjdGl2aXR5QWx0VGV4dCBmcm9tICcuL1V0aWxzL2FjdGl2aXR5QWx0VGV4dCc7XG5pbXBvcnQgdXNlU3R5bGVUb0Vtb3Rpb25PYmplY3QgZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VTdHlsZVRvRW1vdGlvbk9iamVjdCc7XG5pbXBvcnQgdXNlUmVuZGVyTWFya2Rvd25Bc0hUTUwgZnJvbSAnLi9ob29rcy91c2VSZW5kZXJNYXJrZG93bkFzSFRNTCc7XG5cbmNvbnN0IHtcbiAgdXNlQXZhdGFyRm9yQm90LFxuICB1c2VDcmVhdGVBdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyUmVuZGVyZXIsXG4gIHVzZURhdGVGb3JtYXR0ZXIsXG4gIHVzZUdldEtleUJ5QWN0aXZpdHksXG4gIHVzZUxvY2FsaXplclxufSA9IGhvb2tzO1xuXG5jb25zdCBST09UX1NUWUxFID0ge1xuICAnJi53ZWJjaGF0X19zY3JlZW4tcmVhZGVyLWFjdGl2aXR5Jzoge1xuICAgIGNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGhlaWdodDogMSxcbiAgICBvcGFjaXR5OiAwLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgd2lkdGg6IDFcbiAgfVxufTtcblxuY29uc3QgQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX0FMVF9JRFMgPSB7XG4gIGZldzogJ0FDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19GRVdfQUxUJyxcbiAgbWFueTogJ0FDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19NQU5ZX0FMVCcsXG4gIG9uZTogJ0FDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19PTkVfQUxUJyxcbiAgb3RoZXI6ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfT1RIRVJfQUxUJyxcbiAgdHdvOiAnQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX1RXT19BTFQnXG59O1xuXG5jb25zdCBTY3JlZW5SZWFkZXJBdHRhY2htZW50cyA9ICh7IGFjdGl2aXR5LCByZW5kZXJBdHRhY2htZW50cyB9KSA9PiB7XG4gIGNvbnN0IHsgYXR0YWNobWVudHMgPSBbXSB9ID0gYWN0aXZpdHk7XG4gIGNvbnN0IGNyZWF0ZUF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlciA9IHVzZUNyZWF0ZUF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlcigpO1xuICBjb25zdCBsb2NhbGl6ZVdpdGhQbHVyYWwgPSB1c2VMb2NhbGl6ZXIoeyBwbHVyYWw6IHRydWUgfSk7XG5cbiAgY29uc3QgYXR0YWNobWVudEZvclNjcmVlblJlYWRlclJlbmRlcmVycyA9IHJlbmRlckF0dGFjaG1lbnRzXG4gICAgPyBhdHRhY2htZW50c1xuICAgICAgICAubWFwKGF0dGFjaG1lbnQgPT4gY3JlYXRlQXR0YWNobWVudEZvclNjcmVlblJlYWRlclJlbmRlcmVyKHsgYWN0aXZpdHksIGF0dGFjaG1lbnQgfSkpXG4gICAgICAgIC5maWx0ZXIocmVuZGVyID0+IHJlbmRlcilcbiAgICA6IFtdO1xuXG4gIGNvbnN0IG51bUdlbmVyaWNBdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzLmxlbmd0aCAtIGF0dGFjaG1lbnRGb3JTY3JlZW5SZWFkZXJSZW5kZXJlcnMubGVuZ3RoO1xuXG4gIGNvbnN0IG51bUF0dGFjaG1lbnRzQWx0ID1cbiAgICAhIW51bUdlbmVyaWNBdHRhY2htZW50cyAmJiBsb2NhbGl6ZVdpdGhQbHVyYWwoQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX0FMVF9JRFMsIG51bUdlbmVyaWNBdHRhY2htZW50cyk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICB7ISFhdHRhY2htZW50Rm9yU2NyZWVuUmVhZGVyUmVuZGVyZXJzLmxlbmd0aCAmJiAoXG4gICAgICAgIDx1bD5cbiAgICAgICAgICB7YXR0YWNobWVudEZvclNjcmVlblJlYWRlclJlbmRlcmVycy5tYXAoKHJlbmRlciwgaW5kZXgpID0+IChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1hcnJheS1pbmRleC1rZXlcbiAgICAgICAgICAgIDxsaSBrZXk9e2luZGV4fT57cmVuZGVyKCl9PC9saT5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC91bD5cbiAgICAgICl9XG4gICAgICB7bnVtQXR0YWNobWVudHNBbHQgJiYgPHA+e251bUF0dGFjaG1lbnRzQWx0fTwvcD59XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn07XG5cblNjcmVlblJlYWRlckF0dGFjaG1lbnRzLnByb3BUeXBlcyA9IHtcbiAgYWN0aXZpdHk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXR0YWNobWVudHM6IFByb3BUeXBlcy5hcnJheVxuICB9KS5pc1JlcXVpcmVkLFxuICByZW5kZXJBdHRhY2htZW50czogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufTtcblxuLy8gV2hlbiBcInJlbmRlckF0dGFjaG1lbnRzXCIgaXMgZmFsc2UsIHdlIHdpbGwgbm90IHJlbmRlciB0aGUgY29udGVudCBvZiBhdHRhY2htZW50cy5cbi8vIFRoYXQgbWVhbnMsIGl0IHdpbGwgb25seSByZW5kZXIgXCIyIGF0dGFjaG1lbnRzXCIsIGluc3RlYWQgb2YgXCJpbWFnZSBhdHRhY2htZW50XCIuXG4vLyBUaGlzIGlzIHVzZWQgaW4gdGhlIHZpc3VhbCB0cmFuc2NyaXB0LCB3aGVyZSB3ZSByZW5kZXIgXCJQcmVzcyBFTlRFUiB0byBpbnRlcmFjdC5cIlxuY29uc3QgU2NyZWVuUmVhZGVyQWN0aXZpdHkgPSAoeyBhY3Rpdml0eSwgY2hpbGRyZW4sIGlkLCByZW5kZXJBdHRhY2htZW50cyB9KSA9PiB7XG4gIGNvbnN0IFt7IGluaXRpYWxzOiBib3RJbml0aWFscyB9XSA9IHVzZUF2YXRhckZvckJvdCgpO1xuICBjb25zdCBmb3JtYXREYXRlID0gdXNlRGF0ZUZvcm1hdHRlcigpO1xuICBjb25zdCBnZXRLZXlCeUFjdGl2aXR5ID0gdXNlR2V0S2V5QnlBY3Rpdml0eSgpO1xuICBjb25zdCBsb2NhbGl6ZSA9IHVzZUxvY2FsaXplcigpO1xuICBjb25zdCByZW5kZXJNYXJrZG93bkFzSFRNTCA9IHVzZVJlbmRlck1hcmtkb3duQXNIVE1MKCk7XG4gIGNvbnN0IHJvb3RDbGFzc05hbWUgPSB1c2VTdHlsZVRvRW1vdGlvbk9iamVjdCgpKFJPT1RfU1RZTEUpICsgJyc7XG4gIGNvbnN0IHRleHRBbHQgPSB1c2VNZW1vKCgpID0+IGFjdGl2aXR5QWx0VGV4dChhY3Rpdml0eSwgcmVuZGVyTWFya2Rvd25Bc0hUTUwpLCBbYWN0aXZpdHksIHJlbmRlck1hcmtkb3duQXNIVE1MXSk7XG5cbiAgY29uc3QgeyBjaGFubmVsRGF0YTogeyAnd2ViY2hhdDpmYWxsYmFjay10ZXh0JzogZmFsbGJhY2tUZXh0IH0gPSB7fSwgZnJvbTogeyByb2xlIH0gPSB7fSwgdGltZXN0YW1wIH0gPSBhY3Rpdml0eTtcblxuICBjb25zdCBmcm9tVXNlciA9IHJvbGUgPT09ICd1c2VyJztcblxuICBjb25zdCBncmVldGluZ0FsdCA9IChcbiAgICBmcm9tVXNlciA/IGxvY2FsaXplKCdBQ1RJVklUWV9ZT1VfU0FJRF9BTFQnKSA6IGxvY2FsaXplKCdBQ1RJVklUWV9CT1RfU0FJRF9BTFQnLCBib3RJbml0aWFscyB8fCAnJylcbiAgKS5yZXBsYWNlKC9cXHN7Mix9L2d1LCAnICcpO1xuXG4gIGNvbnN0IHRpbWVzdGFtcEFsdCA9IGxvY2FsaXplKCdBQ1RJVklUWV9TVEFUVVNfU0VORF9TVEFUVVNfQUxUX1NFTlRfQVQnLCBmb3JtYXREYXRlKHRpbWVzdGFtcCkpO1xuICBjb25zdCBsYWJlbElkID0gdXNlTWVtbyhcbiAgICAoKSA9PiBgd2ViY2hhdF9fc2NyZWVuLXJlYWRlci1hY3Rpdml0eV9fbGFiZWwtJHtnZXRLZXlCeUFjdGl2aXR5KGFjdGl2aXR5KX1gLFxuICAgIFthY3Rpdml0eSwgZ2V0S2V5QnlBY3Rpdml0eV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxhcnRpY2xlXG4gICAgICBhcmlhLWF0b21pYz17dHJ1ZX1cbiAgICAgIC8vIE5hcnJhdG9yIHJlcXVpcmVzIHRoZSBcImFyaWEtbGFiZWxsZWRieVwiIGF0dHJpYnV0ZSwgb3RoZXJ3aXNlLCBpdCB3aWxsIG9ubHkgcmVhZCBcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCIuXG4gICAgICAvLyBIb3dldmVyLCBpT1MgVm9pY2VPdmVyIGFuZCBOVkRBIGJvdGggaWdub3JlIHRoZSBcImFyaWEtbGFiZWxsZWRieVwiIGFuZCByZWFkIG91dCB0aGUgd2hvbGUgY29udGVudCwgaW5jbHVkaW5nIHRpbWVzdGFtcC5cbiAgICAgIGFyaWEtbGFiZWxsZWRieT17bGFiZWxJZH1cbiAgICAgIGFyaWEtcm9sZWRlc2NyaXB0aW9uPVwibWVzc2FnZVwiXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3dlYmNoYXRfX3NjcmVlbi1yZWFkZXItYWN0aXZpdHknLCByb290Q2xhc3NOYW1lKX1cbiAgICAgIC8vIFwiaWRcIiBhdHRyaWJ1dGUgaXMgdXNlZCBieSBgYXJpYS1sYWJlbGxlZGJ5YC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtZG9tLXByb3BzXG4gICAgICBpZD17aWR9XG4gICAgPlxuICAgICAgey8qIFwiaWRcIiBhdHRyaWJ1dGUgaXMgdXNlZCBieSBgYXJpYS1sYWJlbGxlZGJ5YC4gKi99XG4gICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2ZvcmJpZC1kb20tcHJvcHMgKi99XG4gICAgICA8cCBpZD17bGFiZWxJZH0+XG4gICAgICAgIDxzcGFuPntncmVldGluZ0FsdH08L3NwYW4+XG4gICAgICAgIDxzcGFuPnt0ZXh0QWx0fTwvc3Bhbj5cbiAgICAgIDwvcD5cbiAgICAgIHshZmFsbGJhY2tUZXh0ICYmIDxTY3JlZW5SZWFkZXJBdHRhY2htZW50cyBhY3Rpdml0eT17YWN0aXZpdHl9IHJlbmRlckF0dGFjaG1lbnRzPXtyZW5kZXJBdHRhY2htZW50c30gLz59XG4gICAgICA8cCBjbGFzc05hbWU9XCJ3ZWJjaGF0X19zY3JlZW4tcmVhZGVyLWFjdGl2aXR5X190aW1lc3RhbXBcIj57dGltZXN0YW1wQWx0fTwvcD5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2FydGljbGU+XG4gICk7XG59O1xuXG5TY3JlZW5SZWFkZXJBY3Rpdml0eS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiB1bmRlZmluZWQsXG4gIGlkOiB1bmRlZmluZWQsXG4gIHJlbmRlckF0dGFjaG1lbnRzOiB0cnVlXG59O1xuXG5TY3JlZW5SZWFkZXJBY3Rpdml0eS5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2aXR5OiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVuZGVyQXR0YWNobWVudHM6IFByb3BUeXBlcy5ib29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTY3JlZW5SZWFkZXJBY3Rpdml0eTtcbiJdfQ==