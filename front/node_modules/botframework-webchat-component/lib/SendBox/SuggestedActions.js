"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.connectSuggestedActions = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactFilm = _interopRequireWildcard(require("react-film"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _SuggestedAction = _interopRequireDefault(require("./SuggestedAction"));

var _useLocalizeAccessKey = _interopRequireDefault(require("../hooks/internal/useLocalizeAccessKey"));

var _useNonce3 = _interopRequireDefault(require("../hooks/internal/useNonce"));

var _useStyleSet7 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

var _useSuggestedActionsAccessKey = _interopRequireDefault(require("../hooks/internal/useSuggestedActionsAccessKey"));

var _useUniqueId = _interopRequireDefault(require("../hooks/internal/useUniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__suggested-actions': {
    '&.webchat__suggested-actions--flow-layout .webchat__suggested-actions__flow-box': {
      display: 'flex',
      flexWrap: 'wrap'
    },
    '&.webchat__suggested-actions--stack-layout .webchat__suggested-actions__stack': {
      display: 'flex',
      flexDirection: 'column'
    }
  }
};

function suggestedActionText(_ref) {
  var displayText = _ref.displayText,
      title = _ref.title,
      type = _ref.type,
      value = _ref.value;

  if (type === 'messageBack') {
    return title || displayText;
  } else if (title) {
    return title;
  } else if (typeof value === 'string') {
    return value;
  }

  return JSON.stringify(value);
}

var connectSuggestedActions = function connectSuggestedActions() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref2) {
    var language = _ref2.language,
        suggestedActions = _ref2.suggestedActions;
    return {
      language: language,
      suggestedActions: suggestedActions
    };
  }].concat(selectors));
};

exports.connectSuggestedActions = connectSuggestedActions;

var SuggestedActionCarouselContainer = function SuggestedActionCarouselContainer(_ref3) {
  var children = _ref3.children,
      className = _ref3.className,
      screenReaderText = _ref3.screenReaderText;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      suggestedActionsCarouselFlipperBoxWidth = _useStyleOptions2$.suggestedActionsCarouselFlipperBoxWidth,
      suggestedActionsCarouselFlipperCursor = _useStyleOptions2$.suggestedActionsCarouselFlipperCursor,
      suggestedActionsCarouselFlipperSize = _useStyleOptions2$.suggestedActionsCarouselFlipperSize;

  var _useStyleSet = (0, _useStyleSet7.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      suggestedActionsStyleSet = _useStyleSet2[0].suggestedActions;

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var _useNonce = (0, _useNonce3.default)(),
      _useNonce2 = _slicedToArray(_useNonce, 1),
      nonce = _useNonce2[0];

  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var filmStyleSet = (0, _react.useMemo)(function () {
    return (0, _reactFilm.createBasicStyleSet)({
      autoHide: false,
      cursor: suggestedActionsCarouselFlipperCursor,
      flipperBoxWidth: suggestedActionsCarouselFlipperBoxWidth,
      flipperSize: suggestedActionsCarouselFlipperSize
    });
  }, [suggestedActionsCarouselFlipperBoxWidth, suggestedActionsCarouselFlipperCursor, suggestedActionsCarouselFlipperSize]);
  return (
    /*#__PURE__*/
    // TODO: The content of suggested actions should be the labelled by the activity.
    //       That means, when the user focus into the suggested actions, it should read similar to "Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button."
    _react.default.createElement("div", {
      "aria-labelledby": ariaLabelId,
      "aria-live": "polite",
      className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--carousel-layout', {
        'webchat__suggested-actions--rtl': direction === 'rtl'
      }, rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
      role: "status"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      id: ariaLabelId,
      text: screenReaderText
    }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(_reactFilm.default, {
      autoCenter: false,
      className: "webchat__suggested-actions__carousel",
      dir: direction,
      flipperBlurFocusOnClick: true,
      nonce: nonce,
      showDots: false,
      showScrollBar: false,
      styleSet: filmStyleSet
    }, children))
  );
};

SuggestedActionCarouselContainer.defaultProps = {
  children: undefined,
  className: undefined
};
SuggestedActionCarouselContainer.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  screenReaderText: _propTypes.default.string.isRequired
};

var SuggestedActionFlowContainer = function SuggestedActionFlowContainer(_ref4) {
  var children = _ref4.children,
      className = _ref4.className,
      screenReaderText = _ref4.screenReaderText;

  var _useStyleSet3 = (0, _useStyleSet7.default)(),
      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),
      suggestedActionsStyleSet = _useStyleSet4[0].suggestedActions;

  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-labelledby": ariaLabelId,
    "aria-live": "polite",
    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--flow-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
    role: "status"
  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
    id: ariaLabelId,
    text: screenReaderText
  }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__suggested-actions__flow-box"
  }, _react.default.Children.map(children, function (child) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "webchat__suggested-actions__flow-item-box"
    }, child);
  })));
};

SuggestedActionFlowContainer.defaultProps = {
  children: undefined,
  className: undefined
};
SuggestedActionFlowContainer.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  screenReaderText: _propTypes.default.string.isRequired
};

var SuggestedActionStackedContainer = function SuggestedActionStackedContainer(_ref5) {
  var children = _ref5.children,
      className = _ref5.className,
      screenReaderText = _ref5.screenReaderText;

  var _useStyleSet5 = (0, _useStyleSet7.default)(),
      _useStyleSet6 = _slicedToArray(_useStyleSet5, 1),
      suggestedActionsStyleSet = _useStyleSet6[0].suggestedActions;

  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-labelledby": ariaLabelId,
    "aria-live": "polite",
    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--stacked-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),
    role: "status"
  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
    id: ariaLabelId,
    text: screenReaderText
  }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__suggested-actions__stack"
  }, children));
};

SuggestedActionStackedContainer.defaultProps = {
  children: undefined,
  className: undefined
};
SuggestedActionStackedContainer.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  screenReaderText: _propTypes.default.string.isRequired
};

var SuggestedActions = function SuggestedActions(_ref6) {
  var className = _ref6.className,
      _ref6$suggestedAction = _ref6.suggestedActions,
      suggestedActions = _ref6$suggestedAction === void 0 ? [] : _ref6$suggestedAction;

  var _useStyleOptions3 = useStyleOptions(),
      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),
      _useStyleOptions4$ = _useStyleOptions4[0],
      suggestedActionLayout = _useStyleOptions4$.suggestedActionLayout,
      suggestedActionsStackedLayoutButtonTextWrap = _useStyleOptions4$.suggestedActionsStackedLayoutButtonTextWrap;

  var _useSuggestedActionsA = (0, _useSuggestedActionsAccessKey.default)(),
      _useSuggestedActionsA2 = _slicedToArray(_useSuggestedActionsA, 1),
      accessKey = _useSuggestedActionsA2[0];

  var hideEmptyRef = (0, _react.useRef)(true);
  var localize = useLocalizer();
  var localizeAccessKey = (0, _useLocalizeAccessKey.default)();
  var screenReaderText = localize('SUGGESTED_ACTIONS_ALT', suggestedActions.length ? accessKey ? localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT_AND_ACCESS_KEY', localizeAccessKey(accessKey)) : localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT') : localize('SUGGESTED_ACTIONS_ALT_NO_CONTENT'));
  var children = suggestedActions.map(function (cardAction, index) {
    var _ref7 = cardAction,
        displayText = _ref7.displayText,
        image = _ref7.image,
        imageAltText = _ref7.imageAltText,
        text = _ref7.text,
        title = _ref7.title,
        type = _ref7.type,
        value = _ref7.value;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "webchat__suggested-actions__item-box",
      key: index
    }, /*#__PURE__*/_react.default.createElement(_SuggestedAction.default, {
      buttonText: suggestedActionText({
        displayText: displayText,
        title: title,
        type: type,
        value: value
      }),
      className: "webchat__suggested-actions__button",
      displayText: displayText,
      image: image,
      imageAlt: imageAltText,
      text: text,
      textClassName: suggestedActionLayout === 'stacked' && suggestedActionsStackedLayoutButtonTextWrap ? 'webchat__suggested-actions__button-text-stacked-text-wrap' : 'webchat__suggested-actions__button-text',
      type: type,
      value: value
    }));
  }); // (Related to #4021)
  //
  // To improve accessibility UX, if there are no suggested actions, and this container was never shown.
  // Then, avoid rendering the alt-text "Suggested Actions Container: Is empty".
  //
  // This is to reduce the narration of "Is empty".
  //
  // After any suggested actions were shown during the lifetime of this container, then we will
  // continue to start showing "Suggested Actions Container: Is empty" when the container is empty.

  if (!children.length && hideEmptyRef.current) {
    return null;
  } // Otherwise, if we have rendered once, we will continue to render "Is empty".


  hideEmptyRef.current = false;

  if (suggestedActionLayout === 'flow') {
    return /*#__PURE__*/_react.default.createElement(SuggestedActionFlowContainer, {
      className: className,
      screenReaderText: screenReaderText
    }, children);
  } else if (suggestedActionLayout === 'stacked') {
    return /*#__PURE__*/_react.default.createElement(SuggestedActionStackedContainer, {
      className: className,
      screenReaderText: screenReaderText
    }, children);
  }

  return /*#__PURE__*/_react.default.createElement(SuggestedActionCarouselContainer, {
    className: className,
    screenReaderText: screenReaderText
  }, children);
};

SuggestedActions.defaultProps = {
  className: ''
};
SuggestedActions.propTypes = {
  className: _propTypes.default.string,
  // TypeScript class is not mappable to PropTypes.func
  // @ts-ignore
  suggestedActions: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayText: _propTypes.default.string,
    image: _propTypes.default.string,
    imageAltText: _propTypes.default.string,
    text: _propTypes.default.string,
    title: _propTypes.default.string,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.any
  })).isRequired
};

var _default = connectSuggestedActions()(SuggestedActions);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,