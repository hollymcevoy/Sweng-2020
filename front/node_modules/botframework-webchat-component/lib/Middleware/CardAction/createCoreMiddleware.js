"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultCardActionMiddleware;

var _detectBrowser = require("../../Utils/detectBrowser");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// This code is adopted from sanitize-html/naughtyScheme.
// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.
// https://github.com/apostrophecms/sanitize-html/
function getScheme(href) {
  // Browsers ignore character codes of 32 (space) and below in a surprising
  // number of situations. Start reading here:
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab

  /* eslint-disable-next-line no-control-regex */
  href = href.replace(/[\0- ]+/g, ''); // Clobber any comments in URLs, which the browser might
  // interpret inside an XML data island, allowing
  // a javascript: URL to be snuck through

  href = href.replace(/<!\x2D\x2D(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\x2D\x2D>/g, ''); // Case insensitive so we don't get faked out by JAVASCRIPT #1

  var matches = href.match(/^([A-Za-z]+):/);

  if (!matches) {
    // Protocol-relative URL or no scheme
    return;
  }

  return matches[1].toLowerCase();
}

var ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];

function createDefaultCardActionMiddleware() {
  return [function () {
    return function (next) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var _args$ = args[0],
            _args$$cardAction = _args$.cardAction,
            type = _args$$cardAction.type,
            value = _args$$cardAction.value,
            getSignInUrl = _args$.getSignInUrl;

        switch (type) {
          case 'call':
          case 'downloadFile':
          case 'openUrl':
          case 'playAudio':
          case 'playVideo':
          case 'showImage':
            if (ALLOWED_SCHEMES.includes(getScheme(value))) {
              if (_detectBrowser.ie11) {
                var newWindow = window.open();
                newWindow.opener = null;
                newWindow.location = value;
              } else {
                // False alarm: this is "window.open", and not "fs.open".
                // eslint-disable-next-line security/detect-non-literal-fs-filename
                window.open(value, '_blank', 'noopener noreferrer');
              }
            } else {
              console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);
            }

            break;

          case 'signin':
            {
              /**
               * @todo TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand
               *       This is to eliminate the delay between window.open() and location.href call
               */
              _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var popup, url;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        popup = window.open();
                        _context.next = 3;
                        return getSignInUrl();

                      case 3:
                        url = _context.sent;

                        if (['http', 'https'].includes(getScheme(url))) {
                          popup.location.href = url;
                        } else {
                          console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', url);
                          popup.close();
                        }

                      case 5:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }))();

              break;
            }

          default:
            return next.apply(void 0, args);
        }
      };
    };
  }];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL0NhcmRBY3Rpb24vY3JlYXRlQ29yZU1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiZ2V0U2NoZW1lIiwiaHJlZiIsInJlcGxhY2UiLCJtYXRjaGVzIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsIkFMTE9XRURfU0NIRU1FUyIsImNyZWF0ZURlZmF1bHRDYXJkQWN0aW9uTWlkZGxld2FyZSIsIm5leHQiLCJhcmdzIiwiY2FyZEFjdGlvbiIsInR5cGUiLCJ2YWx1ZSIsImdldFNpZ25JblVybCIsImluY2x1ZGVzIiwiaWUxMSIsIm5ld1dpbmRvdyIsIndpbmRvdyIsIm9wZW4iLCJvcGVuZXIiLCJsb2NhdGlvbiIsImNvbnNvbGUiLCJ3YXJuIiwicG9wdXAiLCJ1cmwiLCJjbG9zZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQUEsRUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNDLE9BQUwsQ0FBYSxVQUFiLEVBQStCLEVBQS9CLENBQVAsQ0FOdUIsQ0FRdkI7QUFDQTtBQUNBOztBQUNBRCxFQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsT0FBTCxDQUFhLHNMQUFiLEVBQTZCLEVBQTdCLENBQVAsQ0FYdUIsQ0FhdkI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRixJQUFJLENBQUNHLEtBQUwsQ0FBVyxlQUFYLENBQWhCOztBQUVBLE1BQUksQ0FBQ0QsT0FBTCxFQUFjO0FBQ1o7QUFDQTtBQUNEOztBQUVELFNBQU9BLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV0UsV0FBWCxFQUFQO0FBQ0Q7O0FBRUQsSUFBTUMsZUFBZSxHQUFHLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsRUFBaUMsUUFBakMsRUFBMkMsS0FBM0MsRUFBa0QsS0FBbEQsQ0FBeEI7O0FBRWUsU0FBU0MsaUNBQVQsR0FBNkM7QUFDMUQsU0FBTyxDQUNMO0FBQUEsV0FDRSxVQUFBQyxJQUFJO0FBQUEsYUFDSixZQUFhO0FBQUEsMENBQVRDLElBQVM7QUFBVEEsVUFBQUEsSUFBUztBQUFBOztBQUNYLHFCQUtJQSxJQUxKO0FBQUEsdUNBRUlDLFVBRko7QUFBQSxZQUVrQkMsSUFGbEIscUJBRWtCQSxJQUZsQjtBQUFBLFlBRXdCQyxLQUZ4QixxQkFFd0JBLEtBRnhCO0FBQUEsWUFHSUMsWUFISixVQUdJQSxZQUhKOztBQU9BLGdCQUFRRixJQUFSO0FBQ0UsZUFBSyxNQUFMO0FBQ0EsZUFBSyxjQUFMO0FBQ0EsZUFBSyxTQUFMO0FBQ0EsZUFBSyxXQUFMO0FBQ0EsZUFBSyxXQUFMO0FBQ0EsZUFBSyxXQUFMO0FBQ0UsZ0JBQUlMLGVBQWUsQ0FBQ1EsUUFBaEIsQ0FBeUJkLFNBQVMsQ0FBQ1ksS0FBRCxDQUFsQyxDQUFKLEVBQWdEO0FBQzlDLGtCQUFJRyxtQkFBSixFQUFVO0FBQ1Isb0JBQU1DLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLEVBQWxCO0FBQ0FGLGdCQUFBQSxTQUFTLENBQUNHLE1BQVYsR0FBbUIsSUFBbkI7QUFDQUgsZ0JBQUFBLFNBQVMsQ0FBQ0ksUUFBVixHQUFxQlIsS0FBckI7QUFDRCxlQUpELE1BSU87QUFDTDtBQUNBO0FBQ0FLLGdCQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWU4sS0FBWixFQUFtQixRQUFuQixFQUE2QixxQkFBN0I7QUFDRDtBQUNGLGFBVkQsTUFVTztBQUNMUyxjQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxnRUFBYixFQUErRVYsS0FBL0U7QUFDRDs7QUFFRDs7QUFFRixlQUFLLFFBQUw7QUFBZTtBQUNiO0FBQ1o7QUFDQTtBQUNBO0FBRVksc0VBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ09XLHdCQUFBQSxLQURQLEdBQ2VOLE1BQU0sQ0FBQ0MsSUFBUCxFQURmO0FBQUE7QUFBQSwrQkFFbUJMLFlBQVksRUFGL0I7O0FBQUE7QUFFT1csd0JBQUFBLEdBRlA7O0FBSUMsNEJBQUksQ0FBQyxNQUFELEVBQVMsT0FBVCxFQUFrQlYsUUFBbEIsQ0FBMkJkLFNBQVMsQ0FBQ3dCLEdBQUQsQ0FBcEMsQ0FBSixFQUFnRDtBQUM5Q0QsMEJBQUFBLEtBQUssQ0FBQ0gsUUFBTixDQUFlbkIsSUFBZixHQUFzQnVCLEdBQXRCO0FBQ0QseUJBRkQsTUFFTztBQUNMSCwwQkFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsZ0VBQWIsRUFBK0VFLEdBQS9FO0FBRUFELDBCQUFBQSxLQUFLLENBQUNFLEtBQU47QUFDRDs7QUFWRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxlQUFEOztBQWFBO0FBQ0Q7O0FBRUQ7QUFDRSxtQkFBT2pCLElBQUksTUFBSixTQUFRQyxJQUFSLENBQVA7QUE5Q0o7QUFnREQsT0F6REc7QUFBQSxLQUROO0FBQUEsR0FESyxDQUFQO0FBNkREIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpZTExIH0gZnJvbSAnLi4vLi4vVXRpbHMvZGV0ZWN0QnJvd3Nlcic7XG5cbi8vIFRoaXMgY29kZSBpcyBhZG9wdGVkIGZyb20gc2FuaXRpemUtaHRtbC9uYXVnaHR5U2NoZW1lLlxuLy8gc2FuaXRpemUtaHRtbCBpcyBhIGRlcGVuZGVuY3kgb2YgV2ViIENoYXQgYnV0IHRoZSBuYXVnaHRTY2hlbWUgZnVuY3Rpb24gaXMgbmVpdGhlciBleHBvc2VkIG5vciByZXVzYWJsZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9zdHJvcGhlY21zL3Nhbml0aXplLWh0bWwvXG5mdW5jdGlvbiBnZXRTY2hlbWUoaHJlZikge1xuICAvLyBCcm93c2VycyBpZ25vcmUgY2hhcmFjdGVyIGNvZGVzIG9mIDMyIChzcGFjZSkgYW5kIGJlbG93IGluIGEgc3VycHJpc2luZ1xuICAvLyBudW1iZXIgb2Ygc2l0dWF0aW9ucy4gU3RhcnQgcmVhZGluZyBoZXJlOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldCNFbWJlZGRlZF90YWJcblxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleCAqL1xuICBocmVmID0gaHJlZi5yZXBsYWNlKC9bXFx4MDAtXFx4MjBdKy9ndSwgJycpO1xuXG4gIC8vIENsb2JiZXIgYW55IGNvbW1lbnRzIGluIFVSTHMsIHdoaWNoIHRoZSBicm93c2VyIG1pZ2h0XG4gIC8vIGludGVycHJldCBpbnNpZGUgYW4gWE1MIGRhdGEgaXNsYW5kLCBhbGxvd2luZ1xuICAvLyBhIGphdmFzY3JpcHQ6IFVSTCB0byBiZSBzbnVjayB0aHJvdWdoXG4gIGhyZWYgPSBocmVmLnJlcGxhY2UoLzwhLS0uKj8tLT4vZ3UsICcnKTtcblxuICAvLyBDYXNlIGluc2Vuc2l0aXZlIHNvIHdlIGRvbid0IGdldCBmYWtlZCBvdXQgYnkgSkFWQVNDUklQVCAjMVxuICBjb25zdCBtYXRjaGVzID0gaHJlZi5tYXRjaCgvXihbYS16QS1aXSspOi91KTtcblxuICBpZiAoIW1hdGNoZXMpIHtcbiAgICAvLyBQcm90b2NvbC1yZWxhdGl2ZSBVUkwgb3Igbm8gc2NoZW1lXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXNbMV0udG9Mb3dlckNhc2UoKTtcbn1cblxuY29uc3QgQUxMT1dFRF9TQ0hFTUVTID0gWydkYXRhJywgJ2h0dHAnLCAnaHR0cHMnLCAnZnRwJywgJ21haWx0bycsICdzaXAnLCAndGVsJ107XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRDYXJkQWN0aW9uTWlkZGxld2FyZSgpIHtcbiAgcmV0dXJuIFtcbiAgICAoKSA9PlxuICAgICAgbmV4dCA9PlxuICAgICAgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNhcmRBY3Rpb246IHsgdHlwZSwgdmFsdWUgfSxcbiAgICAgICAgICAgIGdldFNpZ25JblVybFxuICAgICAgICAgIH1cbiAgICAgICAgXSA9IGFyZ3M7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAnY2FsbCc6XG4gICAgICAgICAgY2FzZSAnZG93bmxvYWRGaWxlJzpcbiAgICAgICAgICBjYXNlICdvcGVuVXJsJzpcbiAgICAgICAgICBjYXNlICdwbGF5QXVkaW8nOlxuICAgICAgICAgIGNhc2UgJ3BsYXlWaWRlbyc6XG4gICAgICAgICAgY2FzZSAnc2hvd0ltYWdlJzpcbiAgICAgICAgICAgIGlmIChBTExPV0VEX1NDSEVNRVMuaW5jbHVkZXMoZ2V0U2NoZW1lKHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgaWYgKGllMTEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdXaW5kb3cgPSB3aW5kb3cub3BlbigpO1xuICAgICAgICAgICAgICAgIG5ld1dpbmRvdy5vcGVuZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIG5ld1dpbmRvdy5sb2NhdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEZhbHNlIGFsYXJtOiB0aGlzIGlzIFwid2luZG93Lm9wZW5cIiwgYW5kIG5vdCBcImZzLm9wZW5cIi5cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2VjdXJpdHkvZGV0ZWN0LW5vbi1saXRlcmFsLWZzLWZpbGVuYW1lXG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4odmFsdWUsICdfYmxhbmsnLCAnbm9vcGVuZXIgbm9yZWZlcnJlcicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBDYW5ub3Qgb3BlbiBVUkwgd2l0aCBkaXNhbGxvd2VkIHNjaGVtZXMuJywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3NpZ25pbic6IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHRvZG8gVE9ETzogW1AzXSBXZSBzaG91bGQgcHJpbWUgdGhlIFVSTCBpbnRvIHRoZSBPQXV0aENhcmQgZGlyZWN0bHksIGluc3RlYWQgb2YgY2FsbGluZyBnZXRTZXNzaW9uSWQgb24tZGVtYW5kXG4gICAgICAgICAgICAgKiAgICAgICBUaGlzIGlzIHRvIGVsaW1pbmF0ZSB0aGUgZGVsYXkgYmV0d2VlbiB3aW5kb3cub3BlbigpIGFuZCBsb2NhdGlvbi5ocmVmIGNhbGxcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjb25zdCBwb3B1cCA9IHdpbmRvdy5vcGVuKCk7XG4gICAgICAgICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IGdldFNpZ25JblVybCgpO1xuXG4gICAgICAgICAgICAgIGlmIChbJ2h0dHAnLCAnaHR0cHMnXS5pbmNsdWRlcyhnZXRTY2hlbWUodXJsKSkpIHtcbiAgICAgICAgICAgICAgICBwb3B1cC5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IENhbm5vdCBvcGVuIFVSTCB3aXRoIGRpc2FsbG93ZWQgc2NoZW1lcy4nLCB1cmwpO1xuXG4gICAgICAgICAgICAgICAgcG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBuZXh0KC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gIF07XG59XG4iXX0=