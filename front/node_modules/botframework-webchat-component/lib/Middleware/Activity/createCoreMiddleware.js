"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCoreMiddleware;

var _react = _interopRequireDefault(require("react"));

var _CarouselLayout = _interopRequireDefault(require("../../Activity/CarouselLayout"));

var _StackedLayout = _interopRequireDefault(require("../../Activity/StackedLayout"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function createCoreMiddleware() {
  return [function () {
    return function (next) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var activity = args[0].activity; // TODO: [P4] Can we simplify these if-statement to something more readable?

        var type = activity.type; // Filter out activities that should not be visible

        if (type === 'conversationUpdate' || type === 'event' || type === 'invoke' || type === 'typing') {
          return false;
        } else if (type === 'message') {
          var _activity$attachments = activity.attachments,
              attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
              channelData = activity.channelData,
              text = activity.text;

          if ( // Do not show postback
          channelData && channelData.postBack || // Do not show messageBack if displayText is undefined
          channelData && channelData.messageBack && !channelData.messageBack.displayText || // Do not show empty bubbles (no text and attachments, and not "typing")
          !(text || attachments.length)) {
            return false;
          } // eslint-disable-next-line no-dupe-else-if

        } else if (type === 'typing' && activity.from.role === 'user') {
          // Do not show typing by oneself
          return false;
        }

        if (type === 'message' || type === 'typing') {
          if (type === 'message' && (activity.attachments || []).length > 1 && activity.attachmentLayout === 'carousel') {
            // The following line is not a React functional component, it's a render function called by useCreateActivityRenderer() hook.
            // The function signature need to be compatible with older version of activity middleware, which was:
            //
            // renderActivity(
            //   renderAttachment: ({ activity, attachment }) => React.Element
            // ) => React.Element
            return function renderCarouselLayout(renderAttachment, props) {
              typeof props === 'undefined' && console.warn('botframework-webchat: One or more arguments were missing after passing through the activity middleware. Please check your custom activity middleware to make sure it passes all arguments.');
              return /*#__PURE__*/_react.default.createElement(_CarouselLayout.default, _extends({
                activity: activity,
                renderAttachment: renderAttachment
              }, props));
            };
          } // The following line is not a React functional component, it's a render function called by useCreateActivityRenderer() hook.


          return function renderStackedLayout(renderAttachment, props) {
            typeof props === 'undefined' && console.warn('botframework-webchat: One or more arguments were missing after passing through the activity middleware. Please check your custom activity middleware to make sure it passes all arguments.');
            return /*#__PURE__*/_react.default.createElement(_StackedLayout.default, _extends({
              activity: activity,
              renderAttachment: renderAttachment
            }, props));
          };
        }

        return next.apply(void 0, args);
      };
    };
  }];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL0FjdGl2aXR5L2NyZWF0ZUNvcmVNaWRkbGV3YXJlLnRzeCJdLCJuYW1lcyI6WyJjcmVhdGVDb3JlTWlkZGxld2FyZSIsIm5leHQiLCJhcmdzIiwiYWN0aXZpdHkiLCJ0eXBlIiwiYXR0YWNobWVudHMiLCJjaGFubmVsRGF0YSIsInRleHQiLCJwb3N0QmFjayIsIm1lc3NhZ2VCYWNrIiwiZGlzcGxheVRleHQiLCJsZW5ndGgiLCJmcm9tIiwicm9sZSIsImF0dGFjaG1lbnRMYXlvdXQiLCJyZW5kZXJDYXJvdXNlbExheW91dCIsInJlbmRlckF0dGFjaG1lbnQiLCJwcm9wcyIsImNvbnNvbGUiLCJ3YXJuIiwicmVuZGVyU3RhY2tlZExheW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUVBOztBQUNBOzs7Ozs7QUFFZSxTQUFTQSxvQkFBVCxHQUFzRDtBQUNuRSxTQUFPLENBQ0w7QUFBQSxXQUNFLFVBQUFDLElBQUk7QUFBQSxhQUNKLFlBQWE7QUFBQSwwQ0FBVEMsSUFBUztBQUFUQSxVQUFBQSxJQUFTO0FBQUE7O0FBQ1gsWUFBU0MsUUFBVCxHQUF1QkQsSUFBdkIsSUFBU0MsUUFBVCxDQURXLENBR1g7O0FBRUEsWUFBUUMsSUFBUixHQUFpQkQsUUFBakIsQ0FBUUMsSUFBUixDQUxXLENBT1g7O0FBQ0EsWUFBSUEsSUFBSSxLQUFLLG9CQUFULElBQWlDQSxJQUFJLEtBQUssT0FBMUMsSUFBcURBLElBQUksS0FBSyxRQUE5RCxJQUEwRUEsSUFBSSxLQUFLLFFBQXZGLEVBQWlHO0FBQy9GLGlCQUFPLEtBQVA7QUFDRCxTQUZELE1BRU8sSUFBSUEsSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDN0Isc0NBQWdERCxRQUFoRCxDQUFRRSxXQUFSO0FBQUEsY0FBUUEsV0FBUixzQ0FBc0IsRUFBdEI7QUFBQSxjQUEwQkMsV0FBMUIsR0FBZ0RILFFBQWhELENBQTBCRyxXQUExQjtBQUFBLGNBQXVDQyxJQUF2QyxHQUFnREosUUFBaEQsQ0FBdUNJLElBQXZDOztBQUVBLGVBQ0U7QUFDQ0QsVUFBQUEsV0FBVyxJQUFJQSxXQUFXLENBQUNFLFFBQTVCLElBQ0E7QUFDQ0YsVUFBQUEsV0FBVyxJQUFJQSxXQUFXLENBQUNHLFdBQTNCLElBQTBDLENBQUNILFdBQVcsQ0FBQ0csV0FBWixDQUF3QkMsV0FGcEUsSUFHQTtBQUNBLFlBQUVILElBQUksSUFBSUYsV0FBVyxDQUFDTSxNQUF0QixDQU5GLEVBT0U7QUFDQSxtQkFBTyxLQUFQO0FBQ0QsV0FaNEIsQ0FhN0I7O0FBQ0QsU0FkTSxNQWNBLElBQUlQLElBQUksS0FBSyxRQUFULElBQXFCRCxRQUFRLENBQUNTLElBQVQsQ0FBY0MsSUFBZCxLQUF1QixNQUFoRCxFQUF3RDtBQUM3RDtBQUNBLGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxZQUFJVCxJQUFJLEtBQUssU0FBVCxJQUFzQkEsSUFBSSxLQUFLLFFBQW5DLEVBQTZDO0FBQzNDLGNBQ0VBLElBQUksS0FBSyxTQUFULElBQ0EsQ0FBQ0QsUUFBUSxDQUFDRSxXQUFULElBQXdCLEVBQXpCLEVBQTZCTSxNQUE3QixHQUFzQyxDQUR0QyxJQUVBUixRQUFRLENBQUNXLGdCQUFULEtBQThCLFVBSGhDLEVBSUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxtQkFBTyxTQUFTQyxvQkFBVCxDQUE4QkMsZ0JBQTlCLEVBQWdEQyxLQUFoRCxFQUF1RDtBQUM1RCxxQkFBT0EsS0FBUCxLQUFpQixXQUFqQixJQUNFQyxPQUFPLENBQUNDLElBQVIsQ0FDRSw0TEFERixDQURGO0FBS0Esa0NBQU8sNkJBQUMsdUJBQUQ7QUFBZ0IsZ0JBQUEsUUFBUSxFQUFFaEIsUUFBMUI7QUFBb0MsZ0JBQUEsZ0JBQWdCLEVBQUVhO0FBQXRELGlCQUE0RUMsS0FBNUUsRUFBUDtBQUNELGFBUEQ7QUFRRCxXQXJCMEMsQ0F1QjNDOzs7QUFDQSxpQkFBTyxTQUFTRyxtQkFBVCxDQUE2QkosZ0JBQTdCLEVBQStDQyxLQUEvQyxFQUFzRDtBQUMzRCxtQkFBT0EsS0FBUCxLQUFpQixXQUFqQixJQUNFQyxPQUFPLENBQUNDLElBQVIsQ0FDRSw0TEFERixDQURGO0FBS0EsZ0NBQU8sNkJBQUMsc0JBQUQ7QUFBZSxjQUFBLFFBQVEsRUFBRWhCLFFBQXpCO0FBQW1DLGNBQUEsZ0JBQWdCLEVBQUVhO0FBQXJELGVBQTJFQyxLQUEzRSxFQUFQO0FBQ0QsV0FQRDtBQVFEOztBQUVELGVBQU9oQixJQUFJLE1BQUosU0FBUUMsSUFBUixDQUFQO0FBQ0QsT0FqRUc7QUFBQSxLQUROO0FBQUEsR0FESyxDQUFQO0FBcUVEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjb21wbGV4aXR5ICovXG5pbXBvcnQgeyBBY3Rpdml0eU1pZGRsZXdhcmUgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IENhcm91c2VsTGF5b3V0IGZyb20gJy4uLy4uL0FjdGl2aXR5L0Nhcm91c2VsTGF5b3V0JztcbmltcG9ydCBTdGFja2VkTGF5b3V0IGZyb20gJy4uLy4uL0FjdGl2aXR5L1N0YWNrZWRMYXlvdXQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDb3JlTWlkZGxld2FyZSgpOiBBY3Rpdml0eU1pZGRsZXdhcmVbXSB7XG4gIHJldHVybiBbXG4gICAgKCkgPT5cbiAgICAgIG5leHQgPT5cbiAgICAgICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IFt7IGFjdGl2aXR5IH1dID0gYXJncztcblxuICAgICAgICAvLyBUT0RPOiBbUDRdIENhbiB3ZSBzaW1wbGlmeSB0aGVzZSBpZi1zdGF0ZW1lbnQgdG8gc29tZXRoaW5nIG1vcmUgcmVhZGFibGU/XG5cbiAgICAgICAgY29uc3QgeyB0eXBlIH0gPSBhY3Rpdml0eTtcblxuICAgICAgICAvLyBGaWx0ZXIgb3V0IGFjdGl2aXRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHZpc2libGVcbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb252ZXJzYXRpb25VcGRhdGUnIHx8IHR5cGUgPT09ICdldmVudCcgfHwgdHlwZSA9PT0gJ2ludm9rZScgfHwgdHlwZSA9PT0gJ3R5cGluZycpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgY29uc3QgeyBhdHRhY2htZW50cyA9IFtdLCBjaGFubmVsRGF0YSwgdGV4dCB9ID0gYWN0aXZpdHk7XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBEbyBub3Qgc2hvdyBwb3N0YmFja1xuICAgICAgICAgICAgKGNoYW5uZWxEYXRhICYmIGNoYW5uZWxEYXRhLnBvc3RCYWNrKSB8fFxuICAgICAgICAgICAgLy8gRG8gbm90IHNob3cgbWVzc2FnZUJhY2sgaWYgZGlzcGxheVRleHQgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICAoY2hhbm5lbERhdGEgJiYgY2hhbm5lbERhdGEubWVzc2FnZUJhY2sgJiYgIWNoYW5uZWxEYXRhLm1lc3NhZ2VCYWNrLmRpc3BsYXlUZXh0KSB8fFxuICAgICAgICAgICAgLy8gRG8gbm90IHNob3cgZW1wdHkgYnViYmxlcyAobm8gdGV4dCBhbmQgYXR0YWNobWVudHMsIGFuZCBub3QgXCJ0eXBpbmdcIilcbiAgICAgICAgICAgICEodGV4dCB8fCBhdHRhY2htZW50cy5sZW5ndGgpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWVsc2UtaWZcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndHlwaW5nJyAmJiBhY3Rpdml0eS5mcm9tLnJvbGUgPT09ICd1c2VyJykge1xuICAgICAgICAgIC8vIERvIG5vdCBzaG93IHR5cGluZyBieSBvbmVzZWxmXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdtZXNzYWdlJyB8fCB0eXBlID09PSAndHlwaW5nJykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGUgPT09ICdtZXNzYWdlJyAmJlxuICAgICAgICAgICAgKGFjdGl2aXR5LmF0dGFjaG1lbnRzIHx8IFtdKS5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICBhY3Rpdml0eS5hdHRhY2htZW50TGF5b3V0ID09PSAnY2Fyb3VzZWwnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGxpbmUgaXMgbm90IGEgUmVhY3QgZnVuY3Rpb25hbCBjb21wb25lbnQsIGl0J3MgYSByZW5kZXIgZnVuY3Rpb24gY2FsbGVkIGJ5IHVzZUNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIoKSBob29rLlxuICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBuZWVkIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBvbGRlciB2ZXJzaW9uIG9mIGFjdGl2aXR5IG1pZGRsZXdhcmUsIHdoaWNoIHdhczpcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyByZW5kZXJBY3Rpdml0eShcbiAgICAgICAgICAgIC8vICAgcmVuZGVyQXR0YWNobWVudDogKHsgYWN0aXZpdHksIGF0dGFjaG1lbnQgfSkgPT4gUmVhY3QuRWxlbWVudFxuICAgICAgICAgICAgLy8gKSA9PiBSZWFjdC5FbGVtZW50XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiByZW5kZXJDYXJvdXNlbExheW91dChyZW5kZXJBdHRhY2htZW50LCBwcm9wcykge1xuICAgICAgICAgICAgICB0eXBlb2YgcHJvcHMgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBPbmUgb3IgbW9yZSBhcmd1bWVudHMgd2VyZSBtaXNzaW5nIGFmdGVyIHBhc3NpbmcgdGhyb3VnaCB0aGUgYWN0aXZpdHkgbWlkZGxld2FyZS4gUGxlYXNlIGNoZWNrIHlvdXIgY3VzdG9tIGFjdGl2aXR5IG1pZGRsZXdhcmUgdG8gbWFrZSBzdXJlIGl0IHBhc3NlcyBhbGwgYXJndW1lbnRzLidcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHJldHVybiA8Q2Fyb3VzZWxMYXlvdXQgYWN0aXZpdHk9e2FjdGl2aXR5fSByZW5kZXJBdHRhY2htZW50PXtyZW5kZXJBdHRhY2htZW50fSB7Li4ucHJvcHN9IC8+O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGxpbmUgaXMgbm90IGEgUmVhY3QgZnVuY3Rpb25hbCBjb21wb25lbnQsIGl0J3MgYSByZW5kZXIgZnVuY3Rpb24gY2FsbGVkIGJ5IHVzZUNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIoKSBob29rLlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiByZW5kZXJTdGFja2VkTGF5b3V0KHJlbmRlckF0dGFjaG1lbnQsIHByb3BzKSB7XG4gICAgICAgICAgICB0eXBlb2YgcHJvcHMgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IE9uZSBvciBtb3JlIGFyZ3VtZW50cyB3ZXJlIG1pc3NpbmcgYWZ0ZXIgcGFzc2luZyB0aHJvdWdoIHRoZSBhY3Rpdml0eSBtaWRkbGV3YXJlLiBQbGVhc2UgY2hlY2sgeW91ciBjdXN0b20gYWN0aXZpdHkgbWlkZGxld2FyZSB0byBtYWtlIHN1cmUgaXQgcGFzc2VzIGFsbCBhcmd1bWVudHMuJ1xuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gPFN0YWNrZWRMYXlvdXQgYWN0aXZpdHk9e2FjdGl2aXR5fSByZW5kZXJBdHRhY2htZW50PXtyZW5kZXJBdHRhY2htZW50fSB7Li4ucHJvcHN9IC8+O1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dCguLi5hcmdzKTtcbiAgICAgIH1cbiAgXTtcbn1cbiJdfQ==