"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createScrollToEndButtonStyle;

function createScrollToEndButtonStyle(_ref) {
  var paddingRegular = _ref.paddingRegular,
      primaryFont = _ref.primaryFont,
      scrollToEndButtonFontSize = _ref.scrollToEndButtonFontSize,
      transcriptOverlayButtonBackground = _ref.transcriptOverlayButtonBackground,
      transcriptOverlayButtonBackgroundOnFocus = _ref.transcriptOverlayButtonBackgroundOnFocus,
      transcriptOverlayButtonBackgroundOnHover = _ref.transcriptOverlayButtonBackgroundOnHover,
      transcriptOverlayButtonColor = _ref.transcriptOverlayButtonColor,
      transcriptOverlayButtonColorOnFocus = _ref.transcriptOverlayButtonColorOnFocus,
      transcriptOverlayButtonColorOnHover = _ref.transcriptOverlayButtonColorOnHover;
  return {
    '&.webchat__scroll-to-end-button': {
      // TODO: [P3] Can we not to unset borderWidth and outline earlier?
      '@media screen and (forced-colors: active)': {
        borderWidth: 'initial',
        outline: 'initial'
      },
      appearance: 'none',
      backgroundColor: transcriptOverlayButtonBackground,
      borderRadius: paddingRegular,
      borderWidth: 0,
      bottom: 5,
      color: transcriptOverlayButtonColor,
      fontFamily: primaryFont,
      fontSize: scrollToEndButtonFontSize,
      outline: 0,
      padding: paddingRegular,
      position: 'absolute',
      zIndex: 1,
      // We formed a stacking context in the parent container, so we can use "z-index" here.
      '&:hover': {
        backgroundColor: transcriptOverlayButtonBackgroundOnHover,
        color: transcriptOverlayButtonColorOnHover || transcriptOverlayButtonColor
      },
      '&:focus': {
        backgroundColor: transcriptOverlayButtonBackgroundOnFocus,
        color: transcriptOverlayButtonColorOnFocus || transcriptOverlayButtonColor
      },
      '&:not(.webchat__scroll-to-end-button--rtl)': {
        right: 20
      },
      '&.webchat__scroll-to-end-button--rtl': {
        left: 20
      }
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TdHlsZXMvU3R5bGVTZXQvU2Nyb2xsVG9FbmRCdXR0b24udHMiXSwibmFtZXMiOlsiY3JlYXRlU2Nyb2xsVG9FbmRCdXR0b25TdHlsZSIsInBhZGRpbmdSZWd1bGFyIiwicHJpbWFyeUZvbnQiLCJzY3JvbGxUb0VuZEJ1dHRvbkZvbnRTaXplIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uSG92ZXIiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Ib3ZlciIsImJvcmRlcldpZHRoIiwib3V0bGluZSIsImFwcGVhcmFuY2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJib3R0b20iLCJjb2xvciIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsInBhZGRpbmciLCJwb3NpdGlvbiIsInpJbmRleCIsInJpZ2h0IiwibGVmdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVlLFNBQVNBLDRCQUFULE9BVVE7QUFBQSxNQVRyQkMsY0FTcUIsUUFUckJBLGNBU3FCO0FBQUEsTUFSckJDLFdBUXFCLFFBUnJCQSxXQVFxQjtBQUFBLE1BUHJCQyx5QkFPcUIsUUFQckJBLHlCQU9xQjtBQUFBLE1BTnJCQyxpQ0FNcUIsUUFOckJBLGlDQU1xQjtBQUFBLE1BTHJCQyx3Q0FLcUIsUUFMckJBLHdDQUtxQjtBQUFBLE1BSnJCQyx3Q0FJcUIsUUFKckJBLHdDQUlxQjtBQUFBLE1BSHJCQyw0QkFHcUIsUUFIckJBLDRCQUdxQjtBQUFBLE1BRnJCQyxtQ0FFcUIsUUFGckJBLG1DQUVxQjtBQUFBLE1BRHJCQyxtQ0FDcUIsUUFEckJBLG1DQUNxQjtBQUNyQixTQUFPO0FBQ0wsdUNBQW1DO0FBQ2pDO0FBQ0EsbURBQTZDO0FBQzNDQyxRQUFBQSxXQUFXLEVBQUUsU0FEOEI7QUFFM0NDLFFBQUFBLE9BQU8sRUFBRTtBQUZrQyxPQUZaO0FBT2pDQyxNQUFBQSxVQUFVLEVBQUUsTUFQcUI7QUFRakNDLE1BQUFBLGVBQWUsRUFBRVQsaUNBUmdCO0FBU2pDVSxNQUFBQSxZQUFZLEVBQUViLGNBVG1CO0FBVWpDUyxNQUFBQSxXQUFXLEVBQUUsQ0FWb0I7QUFXakNLLE1BQUFBLE1BQU0sRUFBRSxDQVh5QjtBQVlqQ0MsTUFBQUEsS0FBSyxFQUFFVCw0QkFaMEI7QUFhakNVLE1BQUFBLFVBQVUsRUFBRWYsV0FicUI7QUFjakNnQixNQUFBQSxRQUFRLEVBQUVmLHlCQWR1QjtBQWVqQ1EsTUFBQUEsT0FBTyxFQUFFLENBZndCO0FBZ0JqQ1EsTUFBQUEsT0FBTyxFQUFFbEIsY0FoQndCO0FBaUJqQ21CLE1BQUFBLFFBQVEsRUFBRSxVQWpCdUI7QUFrQmpDQyxNQUFBQSxNQUFNLEVBQUUsQ0FsQnlCO0FBa0J0QjtBQUVYLGlCQUFXO0FBQ1RSLFFBQUFBLGVBQWUsRUFBRVAsd0NBRFI7QUFFVFUsUUFBQUEsS0FBSyxFQUFFUCxtQ0FBbUMsSUFBSUY7QUFGckMsT0FwQnNCO0FBeUJqQyxpQkFBVztBQUNUTSxRQUFBQSxlQUFlLEVBQUVSLHdDQURSO0FBRVRXLFFBQUFBLEtBQUssRUFBRVIsbUNBQW1DLElBQUlEO0FBRnJDLE9BekJzQjtBQThCakMsb0RBQThDO0FBQzVDZSxRQUFBQSxLQUFLLEVBQUU7QUFEcUMsT0E5QmI7QUFrQ2pDLDhDQUF3QztBQUN0Q0MsUUFBQUEsSUFBSSxFQUFFO0FBRGdDO0FBbENQO0FBRDlCLEdBQVA7QUF3Q0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmljdFN0eWxlT3B0aW9ucyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWFwaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNjcm9sbFRvRW5kQnV0dG9uU3R5bGUoe1xuICBwYWRkaW5nUmVndWxhcixcbiAgcHJpbWFyeUZvbnQsXG4gIHNjcm9sbFRvRW5kQnV0dG9uRm9udFNpemUsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZCxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Ib3ZlcixcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvcixcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkhvdmVyXG59OiBTdHJpY3RTdHlsZU9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICAnJi53ZWJjaGF0X19zY3JvbGwtdG8tZW5kLWJ1dHRvbic6IHtcbiAgICAgIC8vIFRPRE86IFtQM10gQ2FuIHdlIG5vdCB0byB1bnNldCBib3JkZXJXaWR0aCBhbmQgb3V0bGluZSBlYXJsaWVyP1xuICAgICAgJ0BtZWRpYSBzY3JlZW4gYW5kIChmb3JjZWQtY29sb3JzOiBhY3RpdmUpJzoge1xuICAgICAgICBib3JkZXJXaWR0aDogJ2luaXRpYWwnLFxuICAgICAgICBvdXRsaW5lOiAnaW5pdGlhbCdcbiAgICAgIH0sXG5cbiAgICAgIGFwcGVhcmFuY2U6ICdub25lJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kLFxuICAgICAgYm9yZGVyUmFkaXVzOiBwYWRkaW5nUmVndWxhcixcbiAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgYm90dG9tOiA1LFxuICAgICAgY29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3IsXG4gICAgICBmb250RmFtaWx5OiBwcmltYXJ5Rm9udCxcbiAgICAgIGZvbnRTaXplOiBzY3JvbGxUb0VuZEJ1dHRvbkZvbnRTaXplLFxuICAgICAgb3V0bGluZTogMCxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdSZWd1bGFyLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB6SW5kZXg6IDEsIC8vIFdlIGZvcm1lZCBhIHN0YWNraW5nIGNvbnRleHQgaW4gdGhlIHBhcmVudCBjb250YWluZXIsIHNvIHdlIGNhbiB1c2UgXCJ6LWluZGV4XCIgaGVyZS5cblxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Ib3ZlcixcbiAgICAgICAgY29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkhvdmVyIHx8IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JcbiAgICAgIH0sXG5cbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uRm9jdXMsXG4gICAgICAgIGNvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Gb2N1cyB8fCB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yXG4gICAgICB9LFxuXG4gICAgICAnJjpub3QoLndlYmNoYXRfX3Njcm9sbC10by1lbmQtYnV0dG9uLS1ydGwpJzoge1xuICAgICAgICByaWdodDogMjBcbiAgICAgIH0sXG5cbiAgICAgICcmLndlYmNoYXRfX3Njcm9sbC10by1lbmQtYnV0dG9uLS1ydGwnOiB7XG4gICAgICAgIGxlZnQ6IDIwXG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIl19