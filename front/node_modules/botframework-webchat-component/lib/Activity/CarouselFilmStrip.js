"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.connectCarouselFilmStrip = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactFilm = require("react-film");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _CarouselFilmStripAttachment = _interopRequireDefault(require("./CarouselFilmStripAttachment"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _isZeroOrPositive = _interopRequireDefault(require("../Utils/isZeroOrPositive"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("../hooks/internal/useStyleToEmotionObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,
    useAvatarForUser = _botframeworkWebchatApi.hooks.useAvatarForUser,
    useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__carousel-filmstrip': {
    display: 'flex',
    flexDirection: 'column',
    MsOverflowStyle: 'none',
    overflowX: 'scroll',
    overflowY: 'hidden',
    position: 'relative',
    // This is to keep screen reader text in the destinated area.
    touchAction: 'manipulation',
    WebkitOverflowScrolling: 'touch',
    '&::-webkit-scrollbar': {
      display: 'none'
    },
    '& .webchat__carousel-filmstrip__alignment-pad': {
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip-attachment': {
      flex: 1
    },
    '& .webchat__carousel-filmstrip__attachments': {
      display: 'flex',
      listStyleType: 'none',
      margin: 0,
      padding: 0
    },
    '& .webchat__carousel-filmstrip__avatar': {
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip__avatar-gutter': {
      display: 'flex',
      flexDirection: 'column',
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip__complimentary': {
      display: 'flex'
    },
    '& .webchat__carousel-filmstrip__complimentary-content': {
      display: 'flex',
      flexGrow: 1,
      flexDirection: 'column'
    },
    '& .webchat__carousel-filmstrip__content': {
      display: 'flex',
      flexGrow: 1,
      flexDirection: 'column'
    },
    '& .webchat__carousel-filmstrip__filler': {
      flexGrow: 10000,
      flexShrink: 1
    },
    '& .webchat__carousel-filmstrip__main': {
      display: 'flex'
    },
    '& .webchat__carousel-filmstrip__message': {
      display: 'flex'
    },
    '& .webchat__carousel-filmstrip__nub-pad': {
      flexShrink: 0
    },
    '& .webchat__carousel-filmstrip__status': {
      display: 'flex'
    }
  }
};

var connectCarouselFilmStrip = function connectCarouselFilmStrip() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var _ref2$activity = _ref2.activity;
    _ref2$activity = _ref2$activity === void 0 ? {} : _ref2$activity;
    var _ref2$activity$from = _ref2$activity.from;
    _ref2$activity$from = _ref2$activity$from === void 0 ? {} : _ref2$activity$from;
    var role = _ref2$activity$from.role;
    return {
      avatarInitials: role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language
    };
  }].concat(selectors));
};

exports.connectCarouselFilmStrip = connectCarouselFilmStrip;

var CarouselFilmStrip = function CarouselFilmStrip(_ref3) {
  var activity = _ref3.activity,
      className = _ref3.className,
      hideTimestamp = _ref3.hideTimestamp,
      renderActivityStatus = _ref3.renderActivityStatus,
      renderAttachment = _ref3.renderAttachment,
      renderAvatar = _ref3.renderAvatar,
      showCallout = _ref3.showCallout;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      bubbleNubOffset = _useStyleOptions2$.bubbleNubOffset,
      bubbleNubSize = _useStyleOptions2$.bubbleNubSize,
      bubbleFromUserNubOffset = _useStyleOptions2$.bubbleFromUserNubOffset,
      bubbleFromUserNubSize = _useStyleOptions2$.bubbleFromUserNubSize;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      carouselFilmStripStyleSet = _useStyleSet2[0].carouselFilmStrip;

  var _useAvatarForBot = useAvatarForBot(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var _useAvatarForUser = useAvatarForUser(),
      _useAvatarForUser2 = _slicedToArray(_useAvatarForUser, 1),
      userInitials = _useAvatarForUser2[0].initials;

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var localize = useLocalizer();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var showActivityStatus = typeof renderActivityStatus === 'function';
  var itemContainerCallbackRef = (0, _reactFilm.useItemContainerCallbackRef)();
  var scrollableCallbackRef = (0, _reactFilm.useScrollableCallbackRef)();
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
      _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.messageBack;
  _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
  var messageBackDisplayText = _activity$channelData2.displayText,
      _activity$from = activity.from;
  _activity$from = _activity$from === void 0 ? {} : _activity$from;
  var role = _activity$from.role,
      text = activity.text,
      textFormat = activity.textFormat;
  var activityDisplayText = messageBackDisplayText || text;
  var fromUser = role === 'user';
  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  var initials = fromUser ? userInitials : botInitials;
  var nubOffset = fromUser ? bubbleFromUserNubOffset : bubbleNubOffset;
  var nubSize = fromUser ? bubbleFromUserNubSize : bubbleNubSize;
  var otherInitials = fromUser ? botInitials : userInitials;
  var otherNubSize = fromUser ? bubbleNubSize : bubbleFromUserNubSize;
  var hasAvatar = initials || typeof initials === 'string';
  var hasOtherAvatar = otherInitials || typeof otherInitials === 'string';
  var hasNub = typeof nubSize === 'number';
  var hasOtherNub = typeof otherNubSize === 'number';
  var topAlignedCallout = (0, _isZeroOrPositive.default)(nubOffset);
  var extraTrailing = !hasOtherAvatar && hasOtherNub; // This is for bot message with user nub and no user avatar. And vice versa.

  var showAvatar = showCallout && hasAvatar && !!renderAvatar;
  var showNub = showCallout && hasNub && (topAlignedCallout || !attachments.length);
  var hideNub = hasNub && !showNub;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('webchat__carousel-filmstrip', {
      'webchat__carousel-filmstrip--extra-trailing': extraTrailing,
      'webchat__carousel-filmstrip--hide-avatar': hasAvatar && !showAvatar,
      'webchat__carousel-filmstrip--hide-nub': hideNub,
      'webchat__carousel-filmstrip--no-message': !activityDisplayText,
      'webchat__carousel-filmstrip--rtl': direction === 'rtl',
      'webchat__carousel-filmstrip--show-avatar': showAvatar,
      'webchat__carousel-filmstrip--show-nub': showNub,
      'webchat__carousel-filmstrip--top-callout': topAlignedCallout
    }, 'react-film__filmstrip', rootClassName, carouselFilmStripStyleSet + '', (className || '') + ''),
    ref: scrollableCallbackRef,
    role: "group"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__main"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__avatar-gutter"
  }, showAvatar && renderAvatar({
    activity: activity
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__content"
  }, !!activityDisplayText && /*#__PURE__*/_react.default.createElement("div", {
    "aria-roledescription": "message",
    className: "webchat__carousel-filmstrip__message",
    role: "group"
  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
    text: greetingAlt
  }), /*#__PURE__*/_react.default.createElement(_Bubble.default, {
    className: "webchat__carousel-filmstrip__bubble",
    fromUser: fromUser,
    nub: showNub || (hasAvatar || hasNub) && 'hidden'
  }, renderAttachment({
    activity: activity,
    attachment: {
      content: activityDisplayText,
      contentType: (0, _textFormatToContentType.default)(textFormat)
    }
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__filler"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__complimentary"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__nub-pad"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__complimentary-content c"
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "webchat__carousel-filmstrip__attachments react-film__filmstrip__list",
    ref: itemContainerCallbackRef
  }, attachments.map(function (attachment, index) {
    return /*#__PURE__*/_react.default.createElement(_CarouselFilmStripAttachment.default, {
      activity: activity,
      attachment: attachment,
      fromUser: fromUser,
      hasAvatar: hasAvatar,
      hideNub: hideNub,
      index: index
      /* Attachments do not have an ID; it is always indexed by number */
      // eslint-disable-next-line react/no-array-index-key
      ,
      key: index,
      renderAttachment: renderAttachment,
      showAvatar: showAvatar,
      showNub: showNub
    });
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__alignment-pad"
  })), showActivityStatus && /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__status"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__avatar-gutter"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__carousel-filmstrip__nub-pad"
  }), renderActivityStatus({
    hideTimestamp: hideTimestamp
  })));
};

CarouselFilmStrip.defaultProps = {
  className: '',
  hideTimestamp: false,
  renderActivityStatus: false,
  renderAvatar: false,
  showCallout: false
};
CarouselFilmStrip.propTypes = {
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.array,
    channelData: _propTypes.default.shape({
      messageBack: _propTypes.default.shape({
        displayText: _propTypes.default.string
      }),
      state: _propTypes.default.string
    }),
    from: _propTypes.default.shape({
      role: _propTypes.default.string.isRequired
    }).isRequired,
    text: _propTypes.default.string,
    textFormat: _propTypes.default.string,
    timestamp: _propTypes.default.string
  }).isRequired,
  className: _propTypes.default.string,
  hideTimestamp: _propTypes.default.bool,
  renderActivityStatus: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.func]),
  renderAttachment: _propTypes.default.func.isRequired,
  renderAvatar: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.func]),
  showCallout: _propTypes.default.bool
};
var _default = CarouselFilmStrip;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY3Rpdml0eS9DYXJvdXNlbEZpbG1TdHJpcC5qcyJdLCJuYW1lcyI6WyJ1c2VBdmF0YXJGb3JCb3QiLCJob29rcyIsInVzZUF2YXRhckZvclVzZXIiLCJ1c2VEaXJlY3Rpb24iLCJ1c2VMb2NhbGl6ZXIiLCJ1c2VTdHlsZU9wdGlvbnMiLCJST09UX1NUWUxFIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJNc092ZXJmbG93U3R5bGUiLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwb3NpdGlvbiIsInRvdWNoQWN0aW9uIiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJmbGV4U2hyaW5rIiwiZmxleCIsImxpc3RTdHlsZVR5cGUiLCJtYXJnaW4iLCJwYWRkaW5nIiwiZmxleEdyb3ciLCJjb25uZWN0Q2Fyb3VzZWxGaWxtU3RyaXAiLCJzZWxlY3RvcnMiLCJjb25uZWN0VG9XZWJDaGF0IiwibGFuZ3VhZ2UiLCJzdHlsZVNldCIsIm9wdGlvbnMiLCJib3RBdmF0YXJJbml0aWFscyIsInVzZXJBdmF0YXJJbml0aWFscyIsImFjdGl2aXR5IiwiZnJvbSIsInJvbGUiLCJhdmF0YXJJbml0aWFscyIsIkNhcm91c2VsRmlsbVN0cmlwIiwiY2xhc3NOYW1lIiwiaGlkZVRpbWVzdGFtcCIsInJlbmRlckFjdGl2aXR5U3RhdHVzIiwicmVuZGVyQXR0YWNobWVudCIsInJlbmRlckF2YXRhciIsInNob3dDYWxsb3V0IiwiYnViYmxlTnViT2Zmc2V0IiwiYnViYmxlTnViU2l6ZSIsImJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0IiwiYnViYmxlRnJvbVVzZXJOdWJTaXplIiwiY2Fyb3VzZWxGaWxtU3RyaXBTdHlsZVNldCIsImNhcm91c2VsRmlsbVN0cmlwIiwiYm90SW5pdGlhbHMiLCJpbml0aWFscyIsInVzZXJJbml0aWFscyIsImRpcmVjdGlvbiIsImxvY2FsaXplIiwicm9vdENsYXNzTmFtZSIsInNob3dBY3Rpdml0eVN0YXR1cyIsIml0ZW1Db250YWluZXJDYWxsYmFja1JlZiIsInNjcm9sbGFibGVDYWxsYmFja1JlZiIsImF0dGFjaG1lbnRzIiwiY2hhbm5lbERhdGEiLCJtZXNzYWdlQmFjayIsIm1lc3NhZ2VCYWNrRGlzcGxheVRleHQiLCJkaXNwbGF5VGV4dCIsInRleHQiLCJ0ZXh0Rm9ybWF0IiwiYWN0aXZpdHlEaXNwbGF5VGV4dCIsImZyb21Vc2VyIiwiZ3JlZXRpbmdBbHQiLCJyZXBsYWNlIiwibnViT2Zmc2V0IiwibnViU2l6ZSIsIm90aGVySW5pdGlhbHMiLCJvdGhlck51YlNpemUiLCJoYXNBdmF0YXIiLCJoYXNPdGhlckF2YXRhciIsImhhc051YiIsImhhc090aGVyTnViIiwidG9wQWxpZ25lZENhbGxvdXQiLCJleHRyYVRyYWlsaW5nIiwic2hvd0F2YXRhciIsInNob3dOdWIiLCJsZW5ndGgiLCJoaWRlTnViIiwiYXR0YWNobWVudCIsImNvbnRlbnQiLCJjb250ZW50VHlwZSIsIm1hcCIsImluZGV4IiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJhcnJheSIsInN0cmluZyIsInN0YXRlIiwiaXNSZXF1aXJlZCIsInRpbWVzdGFtcCIsImJvb2wiLCJvbmVPZlR5cGUiLCJvbmVPZiIsImZ1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQVFBLGVBQVIsR0FBMkZDLDZCQUEzRixDQUFRRCxlQUFSO0FBQUEsSUFBeUJFLGdCQUF6QixHQUEyRkQsNkJBQTNGLENBQXlCQyxnQkFBekI7QUFBQSxJQUEyQ0MsWUFBM0MsR0FBMkZGLDZCQUEzRixDQUEyQ0UsWUFBM0M7QUFBQSxJQUF5REMsWUFBekQsR0FBMkZILDZCQUEzRixDQUF5REcsWUFBekQ7QUFBQSxJQUF1RUMsZUFBdkUsR0FBMkZKLDZCQUEzRixDQUF1RUksZUFBdkU7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QUFWLENBQWlCRTtBQURILEtBQWhCLEVBRUhBLFVBVnFCO0FBV3hCaEMsSUFBQUEsSUFBSSxFQUFFMkIsbUJBQVVHLE1BWFE7QUFZeEI3QixJQUFBQSxVQUFVLEVBQUUwQixtQkFBVUcsTUFaRTtBQWF4QkcsSUFBQUEsU0FBUyxFQUFFTixtQkFBVUc7QUFiRyxHQUFoQixFQWNQRSxVQWZ5QjtBQWdCNUIxRCxFQUFBQSxTQUFTLEVBQUVxRCxtQkFBVUcsTUFoQk87QUFpQjVCdkQsRUFBQUEsYUFBYSxFQUFFb0QsbUJBQVVPLElBakJHO0FBa0I1QjFELEVBQUFBLG9CQUFvQixFQUFFbUQsbUJBQVVRLFNBQVYsQ0FBb0IsQ0FBQ1IsbUJBQVVTLEtBQVYsQ0FBZ0IsQ0FBQyxLQUFELENBQWhCLENBQUQsRUFBMkJULG1CQUFVVSxJQUFyQyxDQUFwQixDQWxCTTtBQW1CNUI1RCxFQUFBQSxnQkFBZ0IsRUFBRWtELG1CQUFVVSxJQUFWLENBQWVMLFVBbkJMO0FBb0I1QnRELEVBQUFBLFlBQVksRUFBRWlELG1CQUFVUSxTQUFWLENBQW9CLENBQUNSLG1CQUFVUyxLQUFWLENBQWdCLENBQUMsS0FBRCxDQUFoQixDQUFELEVBQTJCVCxtQkFBVVUsSUFBckMsQ0FBcEIsQ0FwQmM7QUFxQjVCMUQsRUFBQUEsV0FBVyxFQUFFZ0QsbUJBQVVPO0FBckJLLENBQTlCO2VBd0JlN0QsaUIiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBjb21wbGV4aXR5OiBbXCJlcnJvclwiLCAzMF0gKi9cblxuaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IHsgdXNlSXRlbUNvbnRhaW5lckNhbGxiYWNrUmVmLCB1c2VTY3JvbGxhYmxlQ2FsbGJhY2tSZWYgfSBmcm9tICdyZWFjdC1maWxtJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCdWJibGUgZnJvbSAnLi9CdWJibGUnO1xuaW1wb3J0IENhcm91c2VsRmlsbVN0cmlwQXR0YWNobWVudCBmcm9tICcuL0Nhcm91c2VsRmlsbVN0cmlwQXR0YWNobWVudCc7XG5pbXBvcnQgY29ubmVjdFRvV2ViQ2hhdCBmcm9tICcuLi9jb25uZWN0VG9XZWJDaGF0JztcbmltcG9ydCBpc1plcm9PclBvc2l0aXZlIGZyb20gJy4uL1V0aWxzL2lzWmVyb09yUG9zaXRpdmUnO1xuaW1wb3J0IFNjcmVlblJlYWRlclRleHQgZnJvbSAnLi4vU2NyZWVuUmVhZGVyVGV4dCc7XG5pbXBvcnQgdGV4dEZvcm1hdFRvQ29udGVudFR5cGUgZnJvbSAnLi4vVXRpbHMvdGV4dEZvcm1hdFRvQ29udGVudFR5cGUnO1xuaW1wb3J0IHVzZVN0eWxlU2V0IGZyb20gJy4uL2hvb2tzL3VzZVN0eWxlU2V0JztcbmltcG9ydCB1c2VTdHlsZVRvRW1vdGlvbk9iamVjdCBmcm9tICcuLi9ob29rcy9pbnRlcm5hbC91c2VTdHlsZVRvRW1vdGlvbk9iamVjdCc7XG5cbmNvbnN0IHsgdXNlQXZhdGFyRm9yQm90LCB1c2VBdmF0YXJGb3JVc2VyLCB1c2VEaXJlY3Rpb24sIHVzZUxvY2FsaXplciwgdXNlU3R5bGVPcHRpb25zIH0gPSBob29rcztcblxuY29uc3QgUk9PVF9TVFlMRSA9IHtcbiAgJyYud2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwJzoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBNc092ZXJmbG93U3R5bGU6ICdub25lJyxcbiAgICBvdmVyZmxvd1g6ICdzY3JvbGwnLFxuICAgIG92ZXJmbG93WTogJ2hpZGRlbicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsIC8vIFRoaXMgaXMgdG8ga2VlcCBzY3JlZW4gcmVhZGVyIHRleHQgaW4gdGhlIGRlc3RpbmF0ZWQgYXJlYS5cbiAgICB0b3VjaEFjdGlvbjogJ21hbmlwdWxhdGlvbicsXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG5cbiAgICAnJjo6LXdlYmtpdC1zY3JvbGxiYXInOiB7XG4gICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICB9LFxuXG4gICAgJyYgLndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcF9fYWxpZ25tZW50LXBhZCc6IHtcbiAgICAgIGZsZXhTaHJpbms6IDBcbiAgICB9LFxuXG4gICAgJyYgLndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcC1hdHRhY2htZW50Jzoge1xuICAgICAgZmxleDogMVxuICAgIH0sXG5cbiAgICAnJiAud2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19hdHRhY2htZW50cyc6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGxpc3RTdHlsZVR5cGU6ICdub25lJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9LFxuXG4gICAgJyYgLndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcF9fYXZhdGFyJzoge1xuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAnJiAud2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19hdmF0YXItZ3V0dGVyJzoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgICcmIC53ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX2NvbXBsaW1lbnRhcnknOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICB9LFxuXG4gICAgJyYgLndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcF9fY29tcGxpbWVudGFyeS1jb250ZW50Jzoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleEdyb3c6IDEsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH0sXG5cbiAgICAnJiAud2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19jb250ZW50Jzoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleEdyb3c6IDEsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH0sXG5cbiAgICAnJiAud2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19maWxsZXInOiB7XG4gICAgICBmbGV4R3JvdzogMTAwMDAsXG4gICAgICBmbGV4U2hyaW5rOiAxXG4gICAgfSxcblxuICAgICcmIC53ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX21haW4nOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICB9LFxuXG4gICAgJyYgLndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcF9fbWVzc2FnZSc6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH0sXG5cbiAgICAnJiAud2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19udWItcGFkJzoge1xuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAnJiAud2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19zdGF0dXMnOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IGNvbm5lY3RDYXJvdXNlbEZpbG1TdHJpcCA9ICguLi5zZWxlY3RvcnMpID0+XG4gIGNvbm5lY3RUb1dlYkNoYXQoXG4gICAgKFxuICAgICAge1xuICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgc3R5bGVTZXQ6IHtcbiAgICAgICAgICBvcHRpb25zOiB7IGJvdEF2YXRhckluaXRpYWxzLCB1c2VyQXZhdGFySW5pdGlhbHMgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgeyBhY3Rpdml0eTogeyBmcm9tOiB7IHJvbGUgfSA9IHt9IH0gPSB7fSB9XG4gICAgKSA9PiAoe1xuICAgICAgYXZhdGFySW5pdGlhbHM6IHJvbGUgPT09ICd1c2VyJyA/IHVzZXJBdmF0YXJJbml0aWFscyA6IGJvdEF2YXRhckluaXRpYWxzLFxuICAgICAgbGFuZ3VhZ2VcbiAgICB9KSxcbiAgICAuLi5zZWxlY3RvcnNcbiAgKTtcblxuY29uc3QgQ2Fyb3VzZWxGaWxtU3RyaXAgPSAoe1xuICBhY3Rpdml0eSxcbiAgY2xhc3NOYW1lLFxuICBoaWRlVGltZXN0YW1wLFxuICByZW5kZXJBY3Rpdml0eVN0YXR1cyxcbiAgcmVuZGVyQXR0YWNobWVudCxcbiAgcmVuZGVyQXZhdGFyLFxuICBzaG93Q2FsbG91dFxufSkgPT4ge1xuICBjb25zdCBbeyBidWJibGVOdWJPZmZzZXQsIGJ1YmJsZU51YlNpemUsIGJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0LCBidWJibGVGcm9tVXNlck51YlNpemUgfV0gPSB1c2VTdHlsZU9wdGlvbnMoKTtcbiAgY29uc3QgW3sgY2Fyb3VzZWxGaWxtU3RyaXA6IGNhcm91c2VsRmlsbVN0cmlwU3R5bGVTZXQgfV0gPSB1c2VTdHlsZVNldCgpO1xuICBjb25zdCBbeyBpbml0aWFsczogYm90SW5pdGlhbHMgfV0gPSB1c2VBdmF0YXJGb3JCb3QoKTtcbiAgY29uc3QgW3sgaW5pdGlhbHM6IHVzZXJJbml0aWFscyB9XSA9IHVzZUF2YXRhckZvclVzZXIoKTtcbiAgY29uc3QgW2RpcmVjdGlvbl0gPSB1c2VEaXJlY3Rpb24oKTtcbiAgY29uc3QgbG9jYWxpemUgPSB1c2VMb2NhbGl6ZXIoKTtcbiAgY29uc3Qgcm9vdENsYXNzTmFtZSA9IHVzZVN0eWxlVG9FbW90aW9uT2JqZWN0KCkoUk9PVF9TVFlMRSkgKyAnJztcbiAgY29uc3Qgc2hvd0FjdGl2aXR5U3RhdHVzID0gdHlwZW9mIHJlbmRlckFjdGl2aXR5U3RhdHVzID09PSAnZnVuY3Rpb24nO1xuXG4gIGNvbnN0IGl0ZW1Db250YWluZXJDYWxsYmFja1JlZiA9IHVzZUl0ZW1Db250YWluZXJDYWxsYmFja1JlZigpO1xuICBjb25zdCBzY3JvbGxhYmxlQ2FsbGJhY2tSZWYgPSB1c2VTY3JvbGxhYmxlQ2FsbGJhY2tSZWYoKTtcblxuICBjb25zdCB7XG4gICAgYXR0YWNobWVudHMgPSBbXSxcbiAgICBjaGFubmVsRGF0YTogeyBtZXNzYWdlQmFjazogeyBkaXNwbGF5VGV4dDogbWVzc2FnZUJhY2tEaXNwbGF5VGV4dCB9ID0ge30gfSA9IHt9LFxuICAgIGZyb206IHsgcm9sZSB9ID0ge30sXG4gICAgdGV4dCxcbiAgICB0ZXh0Rm9ybWF0XG4gIH0gPSBhY3Rpdml0eTtcblxuICBjb25zdCBhY3Rpdml0eURpc3BsYXlUZXh0ID0gbWVzc2FnZUJhY2tEaXNwbGF5VGV4dCB8fCB0ZXh0O1xuICBjb25zdCBmcm9tVXNlciA9IHJvbGUgPT09ICd1c2VyJztcblxuICBjb25zdCBncmVldGluZ0FsdCA9IChcbiAgICBmcm9tVXNlciA/IGxvY2FsaXplKCdBQ1RJVklUWV9ZT1VfU0FJRF9BTFQnKSA6IGxvY2FsaXplKCdBQ1RJVklUWV9CT1RfU0FJRF9BTFQnLCBib3RJbml0aWFscyB8fCAnJylcbiAgKS5yZXBsYWNlKC9cXHN7Mix9L2d1LCAnICcpO1xuXG4gIGNvbnN0IGluaXRpYWxzID0gZnJvbVVzZXIgPyB1c2VySW5pdGlhbHMgOiBib3RJbml0aWFscztcbiAgY29uc3QgbnViT2Zmc2V0ID0gZnJvbVVzZXIgPyBidWJibGVGcm9tVXNlck51Yk9mZnNldCA6IGJ1YmJsZU51Yk9mZnNldDtcbiAgY29uc3QgbnViU2l6ZSA9IGZyb21Vc2VyID8gYnViYmxlRnJvbVVzZXJOdWJTaXplIDogYnViYmxlTnViU2l6ZTtcbiAgY29uc3Qgb3RoZXJJbml0aWFscyA9IGZyb21Vc2VyID8gYm90SW5pdGlhbHMgOiB1c2VySW5pdGlhbHM7XG4gIGNvbnN0IG90aGVyTnViU2l6ZSA9IGZyb21Vc2VyID8gYnViYmxlTnViU2l6ZSA6IGJ1YmJsZUZyb21Vc2VyTnViU2l6ZTtcblxuICBjb25zdCBoYXNBdmF0YXIgPSBpbml0aWFscyB8fCB0eXBlb2YgaW5pdGlhbHMgPT09ICdzdHJpbmcnO1xuICBjb25zdCBoYXNPdGhlckF2YXRhciA9IG90aGVySW5pdGlhbHMgfHwgdHlwZW9mIG90aGVySW5pdGlhbHMgPT09ICdzdHJpbmcnO1xuICBjb25zdCBoYXNOdWIgPSB0eXBlb2YgbnViU2l6ZSA9PT0gJ251bWJlcic7XG4gIGNvbnN0IGhhc090aGVyTnViID0gdHlwZW9mIG90aGVyTnViU2l6ZSA9PT0gJ251bWJlcic7XG4gIGNvbnN0IHRvcEFsaWduZWRDYWxsb3V0ID0gaXNaZXJvT3JQb3NpdGl2ZShudWJPZmZzZXQpO1xuXG4gIGNvbnN0IGV4dHJhVHJhaWxpbmcgPSAhaGFzT3RoZXJBdmF0YXIgJiYgaGFzT3RoZXJOdWI7IC8vIFRoaXMgaXMgZm9yIGJvdCBtZXNzYWdlIHdpdGggdXNlciBudWIgYW5kIG5vIHVzZXIgYXZhdGFyLiBBbmQgdmljZSB2ZXJzYS5cblxuICBjb25zdCBzaG93QXZhdGFyID0gc2hvd0NhbGxvdXQgJiYgaGFzQXZhdGFyICYmICEhcmVuZGVyQXZhdGFyO1xuICBjb25zdCBzaG93TnViID0gc2hvd0NhbGxvdXQgJiYgaGFzTnViICYmICh0b3BBbGlnbmVkQ2FsbG91dCB8fCAhYXR0YWNobWVudHMubGVuZ3RoKTtcblxuICBjb25zdCBoaWRlTnViID0gaGFzTnViICYmICFzaG93TnViO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAnd2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwJyxcbiAgICAgICAge1xuICAgICAgICAgICd3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXAtLWV4dHJhLXRyYWlsaW5nJzogZXh0cmFUcmFpbGluZyxcbiAgICAgICAgICAnd2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwLS1oaWRlLWF2YXRhcic6IGhhc0F2YXRhciAmJiAhc2hvd0F2YXRhcixcbiAgICAgICAgICAnd2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwLS1oaWRlLW51Yic6IGhpZGVOdWIsXG4gICAgICAgICAgJ3dlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcC0tbm8tbWVzc2FnZSc6ICFhY3Rpdml0eURpc3BsYXlUZXh0LFxuICAgICAgICAgICd3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXAtLXJ0bCc6IGRpcmVjdGlvbiA9PT0gJ3J0bCcsXG4gICAgICAgICAgJ3dlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcC0tc2hvdy1hdmF0YXInOiBzaG93QXZhdGFyLFxuICAgICAgICAgICd3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXAtLXNob3ctbnViJzogc2hvd051YixcbiAgICAgICAgICAnd2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwLS10b3AtY2FsbG91dCc6IHRvcEFsaWduZWRDYWxsb3V0XG4gICAgICAgIH0sXG4gICAgICAgICdyZWFjdC1maWxtX19maWxtc3RyaXAnLFxuICAgICAgICByb290Q2xhc3NOYW1lLFxuICAgICAgICBjYXJvdXNlbEZpbG1TdHJpcFN0eWxlU2V0ICsgJycsXG4gICAgICAgIChjbGFzc05hbWUgfHwgJycpICsgJydcbiAgICAgICl9XG4gICAgICByZWY9e3Njcm9sbGFibGVDYWxsYmFja1JlZn1cbiAgICAgIHJvbGU9XCJncm91cFwiXG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX21haW5cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX2F2YXRhci1ndXR0ZXJcIj57c2hvd0F2YXRhciAmJiByZW5kZXJBdmF0YXIoeyBhY3Rpdml0eSB9KX08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX2NvbnRlbnRcIj5cbiAgICAgICAgICB7ISFhY3Rpdml0eURpc3BsYXlUZXh0ICYmIChcbiAgICAgICAgICAgIDxkaXYgYXJpYS1yb2xlZGVzY3JpcHRpb249XCJtZXNzYWdlXCIgY2xhc3NOYW1lPVwid2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19tZXNzYWdlXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgICAgICAgIDxTY3JlZW5SZWFkZXJUZXh0IHRleHQ9e2dyZWV0aW5nQWx0fSAvPlxuICAgICAgICAgICAgICA8QnViYmxlXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwid2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19idWJibGVcIlxuICAgICAgICAgICAgICAgIGZyb21Vc2VyPXtmcm9tVXNlcn1cbiAgICAgICAgICAgICAgICBudWI9e3Nob3dOdWIgfHwgKChoYXNBdmF0YXIgfHwgaGFzTnViKSAmJiAnaGlkZGVuJyl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7cmVuZGVyQXR0YWNobWVudCh7XG4gICAgICAgICAgICAgICAgICBhY3Rpdml0eSxcbiAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogYWN0aXZpdHlEaXNwbGF5VGV4dCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IHRleHRGb3JtYXRUb0NvbnRlbnRUeXBlKHRleHRGb3JtYXQpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvQnViYmxlPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcF9fZmlsbGVyXCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX2NvbXBsaW1lbnRhcnlcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19udWItcGFkXCIgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19jb21wbGltZW50YXJ5LWNvbnRlbnQgY1wiPlxuICAgICAgICAgICAgICA8dWxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX2F0dGFjaG1lbnRzIHJlYWN0LWZpbG1fX2ZpbG1zdHJpcF9fbGlzdFwiXG4gICAgICAgICAgICAgICAgcmVmPXtpdGVtQ29udGFpbmVyQ2FsbGJhY2tSZWZ9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7YXR0YWNobWVudHMubWFwKChhdHRhY2htZW50LCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgPENhcm91c2VsRmlsbVN0cmlwQXR0YWNobWVudFxuICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eT17YWN0aXZpdHl9XG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQ9e2F0dGFjaG1lbnR9XG4gICAgICAgICAgICAgICAgICAgIGZyb21Vc2VyPXtmcm9tVXNlcn1cbiAgICAgICAgICAgICAgICAgICAgaGFzQXZhdGFyPXtoYXNBdmF0YXJ9XG4gICAgICAgICAgICAgICAgICAgIGhpZGVOdWI9e2hpZGVOdWJ9XG4gICAgICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgLyogQXR0YWNobWVudHMgZG8gbm90IGhhdmUgYW4gSUQ7IGl0IGlzIGFsd2F5cyBpbmRleGVkIGJ5IG51bWJlciAqL1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckF0dGFjaG1lbnQ9e3JlbmRlckF0dGFjaG1lbnR9XG4gICAgICAgICAgICAgICAgICAgIHNob3dBdmF0YXI9e3Nob3dBdmF0YXJ9XG4gICAgICAgICAgICAgICAgICAgIHNob3dOdWI9e3Nob3dOdWJ9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcF9fYWxpZ25tZW50LXBhZFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIHtzaG93QWN0aXZpdHlTdGF0dXMgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndlYmNoYXRfX2Nhcm91c2VsLWZpbG1zdHJpcF9fc3RhdHVzXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19jYXJvdXNlbC1maWxtc3RyaXBfX2F2YXRhci1ndXR0ZXJcIiAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2ViY2hhdF9fY2Fyb3VzZWwtZmlsbXN0cmlwX19udWItcGFkXCIgLz5cbiAgICAgICAgICB7cmVuZGVyQWN0aXZpdHlTdGF0dXMoeyBoaWRlVGltZXN0YW1wIH0pfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5DYXJvdXNlbEZpbG1TdHJpcC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogJycsXG4gIGhpZGVUaW1lc3RhbXA6IGZhbHNlLFxuICByZW5kZXJBY3Rpdml0eVN0YXR1czogZmFsc2UsXG4gIHJlbmRlckF2YXRhcjogZmFsc2UsXG4gIHNob3dDYWxsb3V0OiBmYWxzZVxufTtcblxuQ2Fyb3VzZWxGaWxtU3RyaXAucHJvcFR5cGVzID0ge1xuICBhY3Rpdml0eTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhdHRhY2htZW50czogUHJvcFR5cGVzLmFycmF5LFxuICAgIGNoYW5uZWxEYXRhOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgbWVzc2FnZUJhY2s6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGRpc3BsYXlUZXh0OiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgICB9KSxcbiAgICAgIHN0YXRlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSksXG4gICAgZnJvbTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0ZXh0Rm9ybWF0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpbWVzdGFtcDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KS5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhpZGVUaW1lc3RhbXA6IFByb3BUeXBlcy5ib29sLFxuICByZW5kZXJBY3Rpdml0eVN0YXR1czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFtmYWxzZV0pLCBQcm9wVHlwZXMuZnVuY10pLFxuICByZW5kZXJBdHRhY2htZW50OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICByZW5kZXJBdmF0YXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbZmFsc2VdKSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgc2hvd0NhbGxvdXQ6IFByb3BUeXBlcy5ib29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDYXJvdXNlbEZpbG1TdHJpcDtcblxuZXhwb3J0IHsgY29ubmVjdENhcm91c2VsRmlsbVN0cmlwIH07XG4iXX0=