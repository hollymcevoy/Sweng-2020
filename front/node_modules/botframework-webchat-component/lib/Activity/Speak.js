"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.connectSpeakActivity = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactSay = _interopRequireWildcard(require("react-say"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _SayAlt = _interopRequireDefault(require("./SayAlt"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useMarkActivityAsSpoken = _botframeworkWebchatApi.hooks.useMarkActivityAsSpoken,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions,
    useVoiceSelector = _botframeworkWebchatApi.hooks.useVoiceSelector; // TODO: [P4] Consider moving this feature into BasicActivity
//       And it has better DOM position for showing visual spoken text
// TODO: [P3] We should add a "spoken" or "speakState" flag to indicate whether this activity is going to speak, or spoken

var connectSpeakActivity = function connectSpeakActivity() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        markActivity = _ref.markActivity,
        _selectVoice = _ref.selectVoice;
    var activity = _ref2.activity;
    return {
      language: language,
      markAsSpoken: function markAsSpoken() {
        return markActivity(activity, 'speak', false);
      },
      selectVoice: function selectVoice(voices) {
        return _selectVoice(voices, activity);
      }
    };
  }].concat(selectors));
};

exports.connectSpeakActivity = connectSpeakActivity;

var Speak = function Speak(_ref3) {
  var activity = _ref3.activity;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      showSpokenText = _useStyleOptions2[0].showSpokenText;

  var markActivityAsSpoken = useMarkActivityAsSpoken();
  var selectVoice = useVoiceSelector(activity);
  var markAsSpoken = (0, _react.useCallback)(function () {
    markActivityAsSpoken(activity);
  }, [activity, markActivityAsSpoken]);
  var singleLine = (0, _react.useMemo)(function () {
    var _activity$attachments = activity.attachments,
        attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
        speak = activity.speak,
        text = activity.text;
    return !!activity && [speak || text].concat(_toConsumableArray(attachments.filter(function (_ref4) {
      var contentType = _ref4.contentType;
      return contentType === 'application/vnd.microsoft.card.adaptive';
    }).map(function (attachment) {
      var _attachment$content;

      return attachment === null || attachment === void 0 ? void 0 : (_attachment$content = attachment.content) === null || _attachment$content === void 0 ? void 0 : _attachment$content.speak;
    }))).filter(function (line) {
      return line;
    }).join('\r\n');
  }, [activity]);
  var _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var speechSynthesisUtterance = _activity$channelData.speechSynthesisUtterance;
  return !!activity && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, speechSynthesisUtterance ? /*#__PURE__*/_react.default.createElement(_reactSay.SayUtterance, {
    onEnd: markAsSpoken,
    onError: markAsSpoken,
    utterance: speechSynthesisUtterance
  }) : /*#__PURE__*/_react.default.createElement(_reactSay.default, {
    onEnd: markAsSpoken,
    onError: markAsSpoken,
    text: singleLine,
    voice: selectVoice
  }), !!showSpokenText && /*#__PURE__*/_react.default.createElement(_SayAlt.default, {
    speak: singleLine
  }));
};

Speak.propTypes = {
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.arrayOf(_propTypes.default.shape({
      speak: _propTypes.default.string,
      subtitle: _propTypes.default.string,
      text: _propTypes.default.string,
      title: _propTypes.default.string
    })),
    channelData: _propTypes.default.shape({
      speechSynthesisUtterance: _propTypes.default.any
    }),
    speak: _propTypes.default.string,
    text: _propTypes.default.string
  }).isRequired
};
var _default = Speak;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,