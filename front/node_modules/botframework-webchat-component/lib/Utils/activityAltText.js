"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = activityAltText;

var _textFormatToContentType = _interopRequireDefault(require("./textFormatToContentType"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function walk(document, walker) {
  var nodes = [].slice.call(document.childNodes);
  var results = [];

  while (nodes.length) {
    var _node = nodes.shift();

    var childNodes = _node.childNodes;
    results.push.apply(results, _toConsumableArray(walker(_node) || []));
    nodes.unshift.apply(nodes, _toConsumableArray([].slice.call(childNodes)));
  }

  return results;
} // From https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements


var HTML_INLINE_TAGS = ['A', 'ABBR', 'ACRONYM', 'AUDIO', 'B', 'BDI', 'BDO', 'BIG', 'BR', 'BUTTON', 'CANVAS', 'CITE', 'CODE', 'DATA', 'DATALIST', 'DEL', 'DFN', 'EM', 'EMBED', 'I', 'IFRAME', 'IMG', 'INPUT', 'INS', 'KBD', 'LABEL', 'MAP', 'MARK', 'METER', 'NOSCRIPT', 'OBJECT', 'OUTPUT', 'PICTURE', 'PROGRESS', 'Q', 'RUBY', 'S', 'SAMP', 'SCRIPT', 'SELECT', 'SLOT', 'SMALL', 'SPAN', 'STRONG', 'SUB', 'SUP', 'SVG', 'TEMPLATE', 'TEXTAREA', 'TIME', 'U', 'TT', 'VAR', 'VIDEO', 'WBR'];
/**
 * Computes all text from a given HTML document as flattened array. This is best-effort.
 *
 * @param {Document} document - HTML document to computes texts from.
 */

function htmlTextAlternatives(document) {
  // TODO: [P2] #3923 Revisit this logic with W3C standard, we could do a better text alternatives computation.
  //       For example, <abbr title="..."> is not computed.
  //       https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_name
  return walk(document, function (node) {
    var nodeType = node.nodeType,
        tagName = node.tagName,
        textContent = node.textContent;

    if (nodeType === Node.TEXT_NODE) {
      return [textContent];
    } else if (tagName === 'IMG') {
      return [node.getAttribute('alt')];
    } else if (!HTML_INLINE_TAGS.includes(tagName)) {
      return ['\n'];
    }
  });
}
/**
 * Returns the text alternatives for a message activity.
 *
 * @param {object} activity - Activity to compute the text alternatives.
 * @param {function} renderMarkdownAsHTML - Callback function to render Markdown as HTML string.
 */


function activityAltText(activity, renderMarkdownAsHTML) {
  var _activity$channelData, _activity$channelData2, _activity$channelData3;

  if (activity.type !== 'message') {
    return false;
  }

  var fallbackText = activity === null || activity === void 0 ? void 0 : (_activity$channelData = activity.channelData) === null || _activity$channelData === void 0 ? void 0 : _activity$channelData['webchat:fallback-text'];

  if (typeof fallbackText === 'string') {
    // If `fallbackText` is an empty string, we will treat the activity as presentational and skip narrating it (return false).
    return fallbackText || false;
  }

  var text = (activity === null || activity === void 0 ? void 0 : (_activity$channelData2 = activity.channelData) === null || _activity$channelData2 === void 0 ? void 0 : (_activity$channelData3 = _activity$channelData2.messageBack) === null || _activity$channelData3 === void 0 ? void 0 : _activity$channelData3.displayText) || activity.text;

  if (!text) {
    // We will continue to narrate the activity, as empty.
    return '';
  }

  if (renderMarkdownAsHTML && (0, _textFormatToContentType.default)(activity.textFormat) === 'text/markdown') {
    return htmlTextAlternatives(new DOMParser().parseFromString(renderMarkdownAsHTML(text), 'text/html')).join('').replace(/\n{2,}/g, '\n').trim();
  }

  return text;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,