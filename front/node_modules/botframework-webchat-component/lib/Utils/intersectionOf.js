"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = intersectionOf;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Intersects 2 or more arrays and return an array of values which are common to all of them.
 */
function intersectionOf(arg0) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return args.reduce(function (interim, arg) {
    return interim.reduce(function (intersection, item) {
      arg.includes(item) && intersection.push(item);
      return intersection;
    }, []);
  }, _toConsumableArray(arg0));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VdGlscy9pbnRlcnNlY3Rpb25PZi50cyJdLCJuYW1lcyI6WyJpbnRlcnNlY3Rpb25PZiIsImFyZzAiLCJhcmdzIiwicmVkdWNlIiwiaW50ZXJpbSIsImFyZyIsImludGVyc2VjdGlvbiIsIml0ZW0iLCJpbmNsdWRlcyIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDZSxTQUFTQSxjQUFULENBQTJCQyxJQUEzQixFQUF3RjtBQUFBLG9DQUF0Q0MsSUFBc0M7QUFBdENBLElBQUFBLElBQXNDO0FBQUE7O0FBQ3JHLFNBQU9BLElBQUksQ0FBQ0MsTUFBTCxDQUNMLFVBQUNDLE9BQUQsRUFBZUMsR0FBZjtBQUFBLFdBQ0VELE9BQU8sQ0FBQ0QsTUFBUixDQUFlLFVBQUNHLFlBQUQsRUFBb0JDLElBQXBCLEVBQWdDO0FBQzdDRixNQUFBQSxHQUFHLENBQUNHLFFBQUosQ0FBYUQsSUFBYixLQUFzQkQsWUFBWSxDQUFDRyxJQUFiLENBQWtCRixJQUFsQixDQUF0QjtBQUVBLGFBQU9ELFlBQVA7QUFDRCxLQUpELEVBSUcsRUFKSCxDQURGO0FBQUEsR0FESyxxQkFPREwsSUFQQyxFQUFQO0FBU0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW50ZXJzZWN0cyAyIG9yIG1vcmUgYXJyYXlzIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgdmFsdWVzIHdoaWNoIGFyZSBjb21tb24gdG8gYWxsIG9mIHRoZW0uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGludGVyc2VjdGlvbk9mPFQ+KGFyZzA6IHJlYWRvbmx5IFRbXSwgLi4uYXJnczogcmVhZG9ubHkgKHJlYWRvbmx5IFRbXSlbXSk6IFRbXSB7XG4gIHJldHVybiBhcmdzLnJlZHVjZTxUW10+KFxuICAgIChpbnRlcmltOiBUW10sIGFyZzogcmVhZG9ubHkgVFtdKSA9PlxuICAgICAgaW50ZXJpbS5yZWR1Y2UoKGludGVyc2VjdGlvbjogVFtdLCBpdGVtOiBUKSA9PiB7XG4gICAgICAgIGFyZy5pbmNsdWRlcyhpdGVtKSAmJiBpbnRlcnNlY3Rpb24ucHVzaChpdGVtKTtcblxuICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xuICAgICAgfSwgW10pLFxuICAgIFsuLi5hcmcwXVxuICApO1xufVxuIl19