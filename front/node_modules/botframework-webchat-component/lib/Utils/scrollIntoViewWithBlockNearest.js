"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = scrollIntoViewWithBlockNearest;

var _computeScrollIntoView = _interopRequireDefault(require("compute-scroll-into-view"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Calls `targetElement.scrollIntoView({ block: 'nearest' })`.
 *
 * If browser do not support options for `scrollIntoView`, fallback to polyfill.
 */
function scrollIntoViewWithBlockNearest(targetElement) {
  // Checks if `scrollIntoView` support options or not.
  // - https://github.com/Modernizr/Modernizr/issues/1568#issuecomment-419457972
  // - https://stackoverflow.com/questions/46919627/is-it-possible-to-test-for-scrollintoview-browser-compatibility
  if ('scrollBehavior' in document.documentElement.style) {
    return targetElement.scrollIntoView({
      block: 'nearest'
    });
  } // We should only move transcript scrollable, and not other scrollable, such as document.body which is from the hosting page.


  var _computeScrollIntoVie = (0, _computeScrollIntoView.default)(targetElement, {
    block: 'nearest'
  }),
      _computeScrollIntoVie2 = _slicedToArray(_computeScrollIntoVie, 1),
      action = _computeScrollIntoVie2[0];

  action.el.scrollTop = action.top;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VdGlscy9zY3JvbGxJbnRvVmlld1dpdGhCbG9ja05lYXJlc3QudHMiXSwibmFtZXMiOlsic2Nyb2xsSW50b1ZpZXdXaXRoQmxvY2tOZWFyZXN0IiwidGFyZ2V0RWxlbWVudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJzY3JvbGxJbnRvVmlldyIsImJsb2NrIiwiYWN0aW9uIiwiZWwiLCJzY3JvbGxUb3AiLCJ0b3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxTQUFTQSw4QkFBVCxDQUF3Q0MsYUFBeEMsRUFBMEU7QUFDdkY7QUFDQTtBQUNBO0FBQ0EsTUFBSSxvQkFBb0JDLFFBQVEsQ0FBQ0MsZUFBVCxDQUF5QkMsS0FBakQsRUFBd0Q7QUFDdEQsV0FBT0gsYUFBYSxDQUFDSSxjQUFkLENBQTZCO0FBQUVDLE1BQUFBLEtBQUssRUFBRTtBQUFULEtBQTdCLENBQVA7QUFDRCxHQU5zRixDQVF2Rjs7O0FBQ0EsOEJBQWlCLG9DQUFzQkwsYUFBdEIsRUFBcUM7QUFBRUssSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBckMsQ0FBakI7QUFBQTtBQUFBLE1BQU9DLE1BQVA7O0FBRUFBLEVBQUFBLE1BQU0sQ0FBQ0MsRUFBUCxDQUFVQyxTQUFWLEdBQXNCRixNQUFNLENBQUNHLEdBQTdCO0FBQ0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wdXRlU2Nyb2xsSW50b1ZpZXcgZnJvbSAnY29tcHV0ZS1zY3JvbGwtaW50by12aWV3JztcblxuLyoqXG4gKiBDYWxscyBgdGFyZ2V0RWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiAnbmVhcmVzdCcgfSlgLlxuICpcbiAqIElmIGJyb3dzZXIgZG8gbm90IHN1cHBvcnQgb3B0aW9ucyBmb3IgYHNjcm9sbEludG9WaWV3YCwgZmFsbGJhY2sgdG8gcG9seWZpbGwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3V2l0aEJsb2NrTmVhcmVzdCh0YXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAvLyBDaGVja3MgaWYgYHNjcm9sbEludG9WaWV3YCBzdXBwb3J0IG9wdGlvbnMgb3Igbm90LlxuICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy8xNTY4I2lzc3VlY29tbWVudC00MTk0NTc5NzJcbiAgLy8gLSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjkxOTYyNy9pcy1pdC1wb3NzaWJsZS10by10ZXN0LWZvci1zY3JvbGxpbnRvdmlldy1icm93c2VyLWNvbXBhdGliaWxpdHlcbiAgaWYgKCdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB7XG4gICAgcmV0dXJuIHRhcmdldEVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogJ25lYXJlc3QnIH0pO1xuICB9XG5cbiAgLy8gV2Ugc2hvdWxkIG9ubHkgbW92ZSB0cmFuc2NyaXB0IHNjcm9sbGFibGUsIGFuZCBub3Qgb3RoZXIgc2Nyb2xsYWJsZSwgc3VjaCBhcyBkb2N1bWVudC5ib2R5IHdoaWNoIGlzIGZyb20gdGhlIGhvc3RpbmcgcGFnZS5cbiAgY29uc3QgW2FjdGlvbl0gPSBjb21wdXRlU2Nyb2xsSW50b1ZpZXcodGFyZ2V0RWxlbWVudCwgeyBibG9jazogJ25lYXJlc3QnIH0pO1xuXG4gIGFjdGlvbi5lbC5zY3JvbGxUb3AgPSBhY3Rpb24udG9wO1xufVxuIl19