"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FocusRedirector = function FocusRedirector(_ref) {
  var className = _ref.className,
      onFocus = _ref.onFocus,
      redirectRef = _ref.redirectRef;
  var handleFocus = (0, _react.useCallback)(function () {
    var _redirectRef$current;

    redirectRef === null || redirectRef === void 0 ? void 0 : (_redirectRef$current = redirectRef.current) === null || _redirectRef$current === void 0 ? void 0 : _redirectRef$current.focus();
    onFocus && onFocus();
  }, [onFocus, redirectRef]); // For NVDA, we should set aria-hidden="true".
  // When using NVDA in browse mode, press up/down arrow keys will focus on this redirector.
  // This redirector is designed to capture TAB only and should not react on browse mode.
  // However, reacting with browse mode is currently okay. Just better to leave it alone.

  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": "true",
    className: className,
    onFocus: handleFocus,
    tabIndex: 0
  });
};

FocusRedirector.defaultProps = {
  className: undefined,
  onFocus: undefined,
  redirectRef: undefined
};
FocusRedirector.propTypes = {
  className: _propTypes.default.string,
  onFocus: _propTypes.default.func,
  // PropTypes is not fully compatible with TypeScript.
  // @ts-ignore
  redirectRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(HTMLElement)
  })
};
var _default = FocusRedirector;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VdGlscy9Gb2N1c1JlZGlyZWN0b3IudHN4Il0sIm5hbWVzIjpbIkZvY3VzUmVkaXJlY3RvciIsImNsYXNzTmFtZSIsIm9uRm9jdXMiLCJyZWRpcmVjdFJlZiIsImhhbmRsZUZvY3VzIiwiY3VycmVudCIsImZvY3VzIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiZnVuYyIsInNoYXBlIiwiaW5zdGFuY2VPZiIsIkhUTUxFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7QUFtQkEsSUFBTUEsZUFBeUMsR0FBRyxTQUE1Q0EsZUFBNEMsT0FBeUM7QUFBQSxNQUF0Q0MsU0FBc0MsUUFBdENBLFNBQXNDO0FBQUEsTUFBM0JDLE9BQTJCLFFBQTNCQSxPQUEyQjtBQUFBLE1BQWxCQyxXQUFrQixRQUFsQkEsV0FBa0I7QUFDekYsTUFBTUMsV0FBVyxHQUFHLHdCQUFZLFlBQU07QUFBQTs7QUFDcENELElBQUFBLFdBQVcsU0FBWCxJQUFBQSxXQUFXLFdBQVgsb0NBQUFBLFdBQVcsQ0FBRUUsT0FBYiw4RUFBc0JDLEtBQXRCO0FBQ0FKLElBQUFBLE9BQU8sSUFBSUEsT0FBTyxFQUFsQjtBQUNELEdBSG1CLEVBR2pCLENBQUNBLE9BQUQsRUFBVUMsV0FBVixDQUhpQixDQUFwQixDQUR5RixDQU16RjtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxzQkFBTztBQUFLLG1CQUFZLE1BQWpCO0FBQXdCLElBQUEsU0FBUyxFQUFFRixTQUFuQztBQUE4QyxJQUFBLE9BQU8sRUFBRUcsV0FBdkQ7QUFBb0UsSUFBQSxRQUFRLEVBQUU7QUFBOUUsSUFBUDtBQUNELENBWEQ7O0FBYUFKLGVBQWUsQ0FBQ08sWUFBaEIsR0FBK0I7QUFDN0JOLEVBQUFBLFNBQVMsRUFBRU8sU0FEa0I7QUFFN0JOLEVBQUFBLE9BQU8sRUFBRU0sU0FGb0I7QUFHN0JMLEVBQUFBLFdBQVcsRUFBRUs7QUFIZ0IsQ0FBL0I7QUFNQVIsZUFBZSxDQUFDUyxTQUFoQixHQUE0QjtBQUMxQlIsRUFBQUEsU0FBUyxFQUFFUyxtQkFBVUMsTUFESztBQUUxQlQsRUFBQUEsT0FBTyxFQUFFUSxtQkFBVUUsSUFGTztBQUcxQjtBQUNBO0FBQ0FULEVBQUFBLFdBQVcsRUFBRU8sbUJBQVVHLEtBQVYsQ0FBZ0I7QUFDM0JSLElBQUFBLE9BQU8sRUFBRUssbUJBQVVJLFVBQVYsQ0FBcUJDLFdBQXJCO0FBRGtCLEdBQWhCO0FBTGEsQ0FBNUI7ZUFVZWYsZSIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBGQywgTXV0YWJsZVJlZk9iamVjdCB9IGZyb20gJ3JlYWN0JztcblxuLy8gVGhpcyBpcyBhbiBlbGVtZW50LCB3aGVuIGZvY3VzZWQsIHdpbGwgc2VuZCB0aGUgZm9jdXMgdG8gdGhlIHJlZiBzcGVjaWZpZWQgaW4gXCJyZWRpcmVjdFJlZlwiLlxuLy8gQWx0aG91Z2ggdGhlIGZvY3VzIGlzIGJlaW5nIHJlZGlyZWN0ZWQsIGJyb3dzZXIgd2lsbCBzY3JvbGwgdGhpcyByZWRpcmVjdG9yIGVsZW1lbnQgaW50byB2aWV3LlxuXG4vLyBCcm93c2VyJ3MgXCJzY3JvbGxJbnRvVmlldygpXCIgY2FsbCBjYW5ub3QgYmUgcHJldmVudGVkIHRocm91Z2ggZXZlbnQucHJldmVudERlZmF1bHQoKSBpbiBib3RoXG4vLyBidWJibGUgYW5kIGNhcHR1cmUgcGhhc2Ugb2YgXCJmb2N1c1wiIGV2ZW50LlxuXG4vLyBXaGVuIHRoaXMgZm9jdXMgcmVkaXJlY3RvciBpcyBwdXQgaW5zaWRlIGEgc2Nyb2xsYWJsZSBjb250YWluZXIsIHlvdSBtYXkgd2FudCB0byByZXNpemUgb3IgcmVwb3NpdGlvblxuLy8gaXQgdG8gcHJldmVudCB1bmludGVudGlvbmFsIHNjcm9sbCBkb25lIGJ5IHRoZSBicm93c2VyIGRlZmF1bHQgYmVoYXZpb3IuXG5cbnR5cGUgRm9jdXNSZWRpcmVjdG9yUHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgb25Gb2N1cz86ICgpID0+IHZvaWQ7XG4gIHJlZGlyZWN0UmVmPzogTXV0YWJsZVJlZk9iamVjdDxIVE1MRWxlbWVudD47XG59O1xuXG5jb25zdCBGb2N1c1JlZGlyZWN0b3I6IEZDPEZvY3VzUmVkaXJlY3RvclByb3BzPiA9ICh7IGNsYXNzTmFtZSwgb25Gb2N1cywgcmVkaXJlY3RSZWYgfSkgPT4ge1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZWRpcmVjdFJlZj8uY3VycmVudD8uZm9jdXMoKTtcbiAgICBvbkZvY3VzICYmIG9uRm9jdXMoKTtcbiAgfSwgW29uRm9jdXMsIHJlZGlyZWN0UmVmXSk7XG5cbiAgLy8gRm9yIE5WREEsIHdlIHNob3VsZCBzZXQgYXJpYS1oaWRkZW49XCJ0cnVlXCIuXG4gIC8vIFdoZW4gdXNpbmcgTlZEQSBpbiBicm93c2UgbW9kZSwgcHJlc3MgdXAvZG93biBhcnJvdyBrZXlzIHdpbGwgZm9jdXMgb24gdGhpcyByZWRpcmVjdG9yLlxuICAvLyBUaGlzIHJlZGlyZWN0b3IgaXMgZGVzaWduZWQgdG8gY2FwdHVyZSBUQUIgb25seSBhbmQgc2hvdWxkIG5vdCByZWFjdCBvbiBicm93c2UgbW9kZS5cbiAgLy8gSG93ZXZlciwgcmVhY3Rpbmcgd2l0aCBicm93c2UgbW9kZSBpcyBjdXJyZW50bHkgb2theS4gSnVzdCBiZXR0ZXIgdG8gbGVhdmUgaXQgYWxvbmUuXG4gIHJldHVybiA8ZGl2IGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBvbkZvY3VzPXtoYW5kbGVGb2N1c30gdGFiSW5kZXg9ezB9IC8+O1xufTtcblxuRm9jdXNSZWRpcmVjdG9yLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gIG9uRm9jdXM6IHVuZGVmaW5lZCxcbiAgcmVkaXJlY3RSZWY6IHVuZGVmaW5lZFxufTtcblxuRm9jdXNSZWRpcmVjdG9yLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLy8gUHJvcFR5cGVzIGlzIG5vdCBmdWxseSBjb21wYXRpYmxlIHdpdGggVHlwZVNjcmlwdC5cbiAgLy8gQHRzLWlnbm9yZVxuICByZWRpcmVjdFJlZjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihIVE1MRWxlbWVudClcbiAgfSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvY3VzUmVkaXJlY3RvcjtcbiJdfQ==