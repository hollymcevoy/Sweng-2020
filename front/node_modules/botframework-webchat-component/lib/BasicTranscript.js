"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _detectBrowser = require("./Utils/detectBrowser");

var _ActivityRow = _interopRequireDefault(require("./Transcript/ActivityRow"));

var _BasicTypingIndicator = _interopRequireDefault(require("./BasicTypingIndicator"));

var _FocusRedirector = _interopRequireDefault(require("./Utils/FocusRedirector"));

var _inputtableKey = _interopRequireDefault(require("./Utils/TypeFocusSink/inputtableKey"));

var _isZeroOrPositive = _interopRequireDefault(require("./Utils/isZeroOrPositive"));

var _KeyboardHelp = _interopRequireDefault(require("./Transcript/KeyboardHelp"));

var _LiveRegionTranscript = _interopRequireDefault(require("./Transcript/LiveRegionTranscript"));

var _tabbableElements = _interopRequireDefault(require("./Utils/tabbableElements"));

var _TranscriptFocusComposer = _interopRequireDefault(require("./providers/TranscriptFocus/TranscriptFocusComposer"));

var _useActiveDescendantId = _interopRequireDefault(require("./providers/TranscriptFocus/useActiveDescendantId"));

var _useActivityTreeWithRenderer = _interopRequireDefault(require("./providers/ActivityTree/useActivityTreeWithRenderer"));

var _useDispatchScrollPosition = _interopRequireDefault(require("./hooks/internal/useDispatchScrollPosition"));

var _useDispatchTranscriptFocusByActivityKey = _interopRequireDefault(require("./hooks/internal/useDispatchTranscriptFocusByActivityKey"));

var _useFocus = _interopRequireDefault(require("./hooks/useFocus"));

var _useFocusByActivityKey = _interopRequireDefault(require("./providers/TranscriptFocus/useFocusByActivityKey"));

var _useFocusedActivityKey = _interopRequireDefault(require("./providers/TranscriptFocus/useFocusedActivityKey"));

var _useFocusedExplicitly3 = _interopRequireDefault(require("./providers/TranscriptFocus/useFocusedExplicitly"));

var _useFocusRelativeActivity = _interopRequireDefault(require("./providers/TranscriptFocus/useFocusRelativeActivity"));

var _useObserveFocusVisible = _interopRequireDefault(require("./hooks/internal/useObserveFocusVisible"));

var _usePrevious = _interopRequireDefault(require("./hooks/internal/usePrevious"));

var _useRegisterFocusTranscript = _interopRequireDefault(require("./hooks/internal/useRegisterFocusTranscript"));

var _useRegisterScrollRelative = _interopRequireDefault(require("./hooks/internal/useRegisterScrollRelative"));

var _useRegisterScrollTo = _interopRequireDefault(require("./hooks/internal/useRegisterScrollTo"));

var _useRegisterScrollToEnd = _interopRequireDefault(require("./hooks/internal/useRegisterScrollToEnd"));

var _useStyleSet5 = _interopRequireDefault(require("./hooks/useStyleSet"));

var _useStyleToEmotionObject = _interopRequireDefault(require("./hooks/internal/useStyleToEmotionObject"));

var _useUniqueId = _interopRequireDefault(require("./hooks/internal/useUniqueId"));

var _useValueRef = _interopRequireDefault(require("./hooks/internal/useValueRef"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useActivityKeys = _botframeworkWebchatApi.hooks.useActivityKeys,
    useActivityKeysByRead = _botframeworkWebchatApi.hooks.useActivityKeysByRead,
    useCreateActivityStatusRenderer = _botframeworkWebchatApi.hooks.useCreateActivityStatusRenderer,
    useCreateAvatarRenderer = _botframeworkWebchatApi.hooks.useCreateAvatarRenderer,
    useCreateScrollToEndButtonRenderer = _botframeworkWebchatApi.hooks.useCreateScrollToEndButtonRenderer,
    useDirection = _botframeworkWebchatApi.hooks.useDirection,
    useGetActivityByKey = _botframeworkWebchatApi.hooks.useGetActivityByKey,
    useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity,
    useGetKeyByActivityId = _botframeworkWebchatApi.hooks.useGetKeyByActivityId,
    useLastAcknowledgedActivityKey = _botframeworkWebchatApi.hooks.useLastAcknowledgedActivityKey,
    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,
    useMarkActivityKeyAsRead = _botframeworkWebchatApi.hooks.useMarkActivityKeyAsRead,
    useMarkAllAsAcknowledged = _botframeworkWebchatApi.hooks.useMarkAllAsAcknowledged,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var ROOT_STYLE = {
  '&.webchat__basic-transcript': {
    display: 'flex',
    flexDirection: 'column',
    overflow: 'hidden',
    // Make sure to set "position: relative" here to form another stacking context for the scroll-to-end button.
    // Stacking context help isolating elements that use "z-index" from global pollution.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
    position: 'relative',
    '& .webchat__basic-transcript__filler': {
      flex: 1
    },
    '& .webchat__basic-transcript__scrollable': {
      display: 'flex',
      flexDirection: 'column',
      overflowX: 'hidden',
      WebkitOverflowScrolling: 'touch'
    },
    '& .webchat__basic-transcript__transcript': {
      listStyleType: 'none'
    }
  }
};
// TODO: [P1] #4133 Add telemetry for computing how many re-render done so far.
var InternalTranscript = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var activityElementMapRef = _ref.activityElementMapRef,
      className = _ref.className;

  var _useStyleSet = (0, _useStyleSet5.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      basicTranscriptStyleSet = _useStyleSet2[0].basicTranscript;

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      bubbleFromUserNubOffset = _useStyleOptions2$.bubbleFromUserNubOffset,
      bubbleNubOffset = _useStyleOptions2$.bubbleNubOffset,
      groupTimestamp = _useStyleOptions2$.groupTimestamp,
      showAvatarInGroup = _useStyleOptions2$.showAvatarInGroup;

  var _useActiveDescendantI = (0, _useActiveDescendantId.default)(),
      _useActiveDescendantI2 = _slicedToArray(_useActiveDescendantI, 1),
      activeDescendantId = _useActiveDescendantI2[0];

  var _useActivityTreeWithR = (0, _useActivityTreeWithRenderer.default)(),
      _useActivityTreeWithR2 = _slicedToArray(_useActivityTreeWithR, 1),
      activityWithRendererTree = _useActivityTreeWithR2[0];

  var _useDirection = useDirection(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var _useFocusedActivityKe = (0, _useFocusedActivityKey.default)(),
      _useFocusedActivityKe2 = _slicedToArray(_useFocusedActivityKe, 1),
      focusedActivityKey = _useFocusedActivityKe2[0];

  var _useFocusedExplicitly = (0, _useFocusedExplicitly3.default)(),
      _useFocusedExplicitly2 = _slicedToArray(_useFocusedExplicitly, 1),
      focusedExplicitly = _useFocusedExplicitly2[0];

  var createActivityStatusRenderer = useCreateActivityStatusRenderer();
  var createAvatarRenderer = useCreateAvatarRenderer();
  var focus = (0, _useFocus.default)();
  var focusByActivityKey = (0, _useFocusByActivityKey.default)();
  var focusRelativeActivity = (0, _useFocusRelativeActivity.default)();
  var getActivityByKey = useGetActivityByKey();
  var getKeyByActivity = useGetKeyByActivity();
  var getKeyByActivityId = useGetKeyByActivityId();
  var localize = useLocalizer();
  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';
  var rootElementRef = (0, _react.useRef)();
  var terminatorLabelId = (0, _useUniqueId.default)('webchat__basic-transcript__terminator-label');
  var terminatorRef = (0, _react.useRef)();
  var focusedActivityKeyRef = (0, _useValueRef.default)(focusedActivityKey);
  var hideAllTimestamps = groupTimestamp === false;
  var terminatorText = localize('TRANSCRIPT_TERMINATOR_TEXT');
  var transcriptAriaLabel = localize('TRANSCRIPT_ARIA_LABEL_ALT');
  var callbackRef = (0, _react.useCallback)(function (element) {
    if (typeof ref === 'function') {
      ref(element);
    } else {
      ref.current = element;
    }

    rootElementRef.current = element;
  }, [ref, rootElementRef]); // Flatten the tree back into an array with information related to rendering.

  var renderingElements = (0, _react.useMemo)(function () {
    var renderingElements = [];
    var topSideBotNub = (0, _isZeroOrPositive.default)(bubbleNubOffset);
    var topSideUserNub = (0, _isZeroOrPositive.default)(bubbleFromUserNubOffset);
    activityWithRendererTree.forEach(function (entriesWithSameSender) {
      var _entriesWithSameSende = _slicedToArray(entriesWithSameSender, 1),
          _entriesWithSameSende2 = _slicedToArray(_entriesWithSameSende[0], 1),
          firstActivity = _entriesWithSameSende2[0].activity;

      var renderAvatar = createAvatarRenderer({
        activity: firstActivity
      });
      entriesWithSameSender.forEach(function (entriesWithSameSenderAndStatus, indexWithinSenderGroup) {
        var firstInSenderGroup = !indexWithinSenderGroup;
        var lastInSenderGroup = indexWithinSenderGroup === entriesWithSameSender.length - 1;
        entriesWithSameSenderAndStatus.forEach(function (_ref2, indexWithinSenderAndStatusGroup) {
          var _activity$from;

          var activity = _ref2.activity,
              renderActivity = _ref2.renderActivity;
          // We only show the timestamp at the end of the sender group. But we always show the "Send failed, retry" prompt.
          var firstInSenderAndStatusGroup = !indexWithinSenderAndStatusGroup;
          var key = getKeyByActivity(activity);
          var lastInSenderAndStatusGroup = indexWithinSenderAndStatusGroup === entriesWithSameSenderAndStatus.length - 1;
          var renderActivityStatus = createActivityStatusRenderer({
            activity: activity,
            nextVisibleActivity: undefined
          });
          var topSideNub = ((_activity$from = activity.from) === null || _activity$from === void 0 ? void 0 : _activity$from.role) === 'user' ? topSideUserNub : topSideBotNub;
          var showCallout; // Depending on the "showAvatarInGroup" setting, the avatar will render in different positions.

          if (showAvatarInGroup === 'sender') {
            if (topSideNub) {
              showCallout = firstInSenderGroup && firstInSenderAndStatusGroup;
            } else {
              showCallout = lastInSenderGroup && lastInSenderAndStatusGroup;
            }
          } else if (showAvatarInGroup === 'status') {
            if (topSideNub) {
              showCallout = firstInSenderAndStatusGroup;
            } else {
              showCallout = lastInSenderAndStatusGroup;
            }
          } else {
            showCallout = true;
          }

          renderingElements.push({
            activity: activity,
            // After the element is mounted, set it to activityElementsRef.
            callbackRef: function callbackRef(activityElement) {
              activityElement ? activityElementMapRef.current.set(key, activityElement) : activityElementMapRef.current.delete(key);
            },
            // "hideTimestamp" is a render-time parameter for renderActivityStatus().
            // If true, it will hide the timestamp, but it will continue to show the
            // retry prompt. And show the screen reader version of the timestamp.
            hideTimestamp: hideAllTimestamps || indexWithinSenderAndStatusGroup !== entriesWithSameSenderAndStatus.length - 1,
            key: key,
            renderActivity: renderActivity,
            renderActivityStatus: renderActivityStatus,
            renderAvatar: renderAvatar,
            showCallout: showCallout
          });
        });
      });
    });
    return renderingElements;
  }, [activityElementMapRef, activityWithRendererTree, bubbleFromUserNubOffset, bubbleNubOffset, createActivityStatusRenderer, createAvatarRenderer, getKeyByActivity, hideAllTimestamps, showAvatarInGroup]);
  var scrollToBottomScrollTo = (0, _reactScrollToBottom.useScrollTo)();
  var scrollToBottomScrollToEnd = (0, _reactScrollToBottom.useScrollToEnd)();
  var scrollTo = (0, _react.useCallback)(function (position) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref3$behavior = _ref3.behavior,
        behavior = _ref3$behavior === void 0 ? 'auto' : _ref3$behavior;

    if (!position) {
      throw new Error('botframework-webchat: First argument passed to "useScrollTo" must be a ScrollPosition object.');
    }

    var activityId = position.activityID,
        scrollTop = position.scrollTop;

    if (typeof scrollTop !== 'undefined') {
      scrollToBottomScrollTo(scrollTop, {
        behavior: behavior
      });
    } else if (typeof activityId !== 'undefined') {
      var _activityElementMapRe;

      var activityBoundingBoxElement = (_activityElementMapRe = activityElementMapRef.current.get(getKeyByActivityId(activityId))) === null || _activityElementMapRe === void 0 ? void 0 : _activityElementMapRe.querySelector('.webchat__basic-transcript__activity-active-descendant');
      var scrollableElement = rootElementRef.current.querySelector('.webchat__basic-transcript__scrollable');

      if (scrollableElement && activityBoundingBoxElement) {
        // ESLint conflict with TypeScript. The result of getClientRects() is not an Array but DOMRectList, and cannot be destructured.
        // eslint-disable-next-line prefer-destructuring
        var activityBoundingBoxElementClientRect = activityBoundingBoxElement.getClientRects()[0]; // ESLint conflict with TypeScript. The result of getClientRects() is not an Array but DOMRectList, and cannot be destructured.
        // eslint-disable-next-line prefer-destructuring

        var scrollableElementClientRect = scrollableElement.getClientRects()[0]; // If either the activity or the transcript scrollable is not on DOM, we will not scroll the view.

        if (activityBoundingBoxElementClientRect && scrollableElementClientRect) {
          var activityHeight = activityBoundingBoxElementClientRect.height,
              activityY = activityBoundingBoxElementClientRect.y;
          var scrollableHeight = scrollableElementClientRect.height;
          var activityOffsetTop = activityY + scrollableElement.scrollTop;

          var _scrollTop = Math.min(activityOffsetTop, activityOffsetTop - scrollableHeight + activityHeight);

          scrollToBottomScrollTo(_scrollTop, {
            behavior: behavior
          });
        }
      }
    }
  }, [activityElementMapRef, getKeyByActivityId, rootElementRef, scrollToBottomScrollTo]);
  var scrollToEnd = (0, _react.useCallback)(function () {
    return scrollToBottomScrollToEnd({
      behavior: 'smooth'
    });
  }, [scrollToBottomScrollToEnd]);
  var scrollRelative = (0, _react.useCallback)(function (direction) {
    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        displacement = _ref4.displacement;

    var rootElement = rootElementRef.current;

    if (!rootElement) {
      return;
    }

    var scrollable = rootElement.querySelector('.webchat__basic-transcript__scrollable');
    var nextScrollTop;

    if (typeof displacement === 'number') {
      // eslint-disable-next-line no-magic-numbers
      nextScrollTop = scrollable.scrollTop + (direction === 'down' ? 1 : -1) * displacement;
    } else {
      // eslint-disable-next-line no-magic-numbers
      nextScrollTop = scrollable.scrollTop + (direction === 'down' ? 1 : -1) * scrollable.offsetHeight;
    }

    scrollTo({
      scrollTop: Math.max(0, Math.min(scrollable.scrollHeight - scrollable.offsetHeight, nextScrollTop))
    }, {
      behavior: 'smooth'
    });
  }, [rootElementRef, scrollTo]); // Since there could be multiple instances of <BasicTranscript> inside the <Composer>, when the developer calls `scrollXXX`, we need to call it on all instances.
  // We call `useRegisterScrollXXX` to register a callback function, the `useScrollXXX` will multiplex the call into each instance of <BasicTranscript>.

  (0, _useRegisterScrollTo.default)(scrollTo);
  (0, _useRegisterScrollToEnd.default)(scrollToEnd);
  (0, _useRegisterScrollRelative.default)(scrollRelative);
  var markActivityKeyAsRead = useMarkActivityKeyAsRead();
  var dispatchScrollPositionWithActivityId = (0, _useDispatchScrollPosition.default)(); // TODO: [P2] We should use IntersectionObserver to track what activity is in the scrollable.
  //            However, IntersectionObserver is not available on IE11, we need to make a limited polyfill in React style.

  var handleScrollPosition = (0, _react.useCallback)(function (_ref5) {
    var _ref6;

    var scrollTop = _ref5.scrollTop;
    var rootElement = rootElementRef.current;

    if (!rootElement) {
      return;
    }

    var scrollableElement = rootElement.querySelector('.webchat__basic-transcript__scrollable'); // "getClientRects()" is not returning an array, thus, it is not destructurable.
    // eslint-disable-next-line prefer-destructuring

    var scrollableElementClientRect = scrollableElement.getClientRects()[0]; // If the scrollable is not mounted, we cannot measure which activity is in view. Thus, we will not fire any events.

    if (!scrollableElementClientRect) {
      return;
    }

    var scrollableClientBottom = scrollableElementClientRect.bottom; // Find the activity just above scroll view bottom.
    // If the scroll view is already on top, get the first activity.

    var activityElements = Array.from(activityElementMapRef.current.entries());
    var activityKeyJustAboveScrollBottom = (_ref6 = scrollableElement.scrollTop ? activityElements.reverse() // Add subpixel tolerance
    .find(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
          element = _ref8[1];

      // "getClientRects()" is not returning an array, thus, it is not destructurable.
      // eslint-disable-next-line prefer-destructuring
      var elementClientRect = element.getClientRects()[0]; // If the activity is not attached to DOM tree, we should not count it as "bottommost visible activity", as it is not visible.

      // If the activity is not attached to DOM tree, we should not count it as "bottommost visible activity", as it is not visible.
      return elementClientRect && elementClientRect.bottom < scrollableClientBottom + 1;
    }) : activityElements[0]) === null || _ref6 === void 0 ? void 0 : _ref6[0]; // When the end-user slowly scrolling the view down, we will mark activity as read when the message fully appear on the screen.

    activityKeyJustAboveScrollBottom && markActivityKeyAsRead(activityKeyJustAboveScrollBottom);

    if (dispatchScrollPositionWithActivityId) {
      var activity = getActivityByKey(activityKeyJustAboveScrollBottom);
      dispatchScrollPositionWithActivityId(_objectSpread(_objectSpread({}, activity ? {
        activityID: activity.id
      } : {}), {}, {
        scrollTop: scrollTop
      }));
    }
  }, [activityElementMapRef, dispatchScrollPositionWithActivityId, getActivityByKey, markActivityKeyAsRead, rootElementRef]);
  (0, _reactScrollToBottom.useObserveScrollPosition)(handleScrollPosition);
  var handleTranscriptKeyDown = (0, _react.useCallback)(function (event) {
    var target = event.target;
    var fromEndOfTranscriptIndicator = target === terminatorRef.current;
    var fromTranscript = target === event.currentTarget;

    if (!fromEndOfTranscriptIndicator && !fromTranscript) {
      return;
    }

    var handled = true;

    switch (event.key) {
      case 'ArrowDown':
        focusRelativeActivity(fromEndOfTranscriptIndicator ? 0 : 1);
        break;

      case 'ArrowUp':
        // eslint-disable-next-line no-magic-numbers
        focusRelativeActivity(fromEndOfTranscriptIndicator ? 0 : -1);
        break;

      case 'End':
        focusRelativeActivity(Infinity);
        break;

      case 'Enter':
        // This is capturing plain ENTER.
        // When screen reader is not running, or screen reader is running outside of scan mode, the ENTER key will be captured here.
        if (!fromEndOfTranscriptIndicator) {
          var _activityElementMapRe2, _tabbableElements$;

          var body = (_activityElementMapRe2 = activityElementMapRef.current.get(focusedActivityKeyRef.current)) === null || _activityElementMapRe2 === void 0 ? void 0 : _activityElementMapRe2.querySelector('.webchat__basic-transcript__activity-body');
          (_tabbableElements$ = (0, _tabbableElements.default)(body)[0]) === null || _tabbableElements$ === void 0 ? void 0 : _tabbableElements$.focus();
        }

        break;

      case 'Escape':
        focus('sendBoxWithoutKeyboard');
        break;

      case 'Home':
        focusRelativeActivity(-Infinity);
        break;

      default:
        handled = false;
        break;
    }

    if (handled) {
      event.preventDefault(); // If a custom HTML control wants to handle up/down arrow, we will prevent them from listening to this event to prevent bugs due to handling arrow keys twice.

      event.stopPropagation();
    }
  }, [activityElementMapRef, focus, focusedActivityKeyRef, focusRelativeActivity, terminatorRef]);
  var handleTranscriptKeyDownCapture = (0, _react.useCallback)(function (event) {
    var altKey = event.altKey,
        ctrlKey = event.ctrlKey,
        key = event.key,
        metaKey = event.metaKey,
        target = event.target;

    if (altKey || ctrlKey && key !== 'v' || metaKey || !(0, _inputtableKey.default)(key) && key !== 'Backspace') {
      // Ignore if one of the utility key (except SHIFT) is pressed
      // E.g. CTRL-C on a link in one of the message should not jump to chat box
      // E.g. "A" or "Backspace" should jump to chat box
      return;
    } // Send keystrokes to send box if we are focusing on the transcript or terminator.


    if (target === event.currentTarget || target === terminatorRef.current) {
      event.stopPropagation();
      focus('sendBox');
    }
  }, [focus]);
  (0, _useRegisterFocusTranscript.default)((0, _react.useCallback)(function () {
    return focusByActivityKey(undefined);
  }, [focusByActivityKey])); // When the focusing activity has changed, dispatch an event to observers of "useObserveTranscriptFocus".

  var dispatchTranscriptFocusByActivityKey = (0, _useDispatchTranscriptFocusByActivityKey.default)(); // Dispatch a "transcript focus" event based on user selection.
  // We should not dispatch "transcript focus" when a new activity come. Although the selection change, it is not initiated from the user.

  (0, _react.useMemo)(function () {
    return dispatchTranscriptFocusByActivityKey(focusedExplicitly ? focusedActivityKey : undefined);
  }, [dispatchTranscriptFocusByActivityKey, focusedActivityKey, focusedExplicitly]); // When the transcript is being focused on, we should dispatch a "transcriptfocus" event.

  var handleFocus = (0, _react.useCallback)( // We call "focusByActivityKey" with activity key of "true".
  // It means, tries to focus on anything.
  function (_ref9) {
    var currentTarget = _ref9.currentTarget,
        target = _ref9.target;
    return target === currentTarget && focusByActivityKey(true, false);
  }, [focusByActivityKey]); // This is required by IE11.
  // When the user clicks on and empty space (a.k.a. filler) in an empty transcript, IE11 says the focus is on the <div className="filler">,
  // despite the fact there are no "tabIndex" attributes set on the filler.
  // We need to artificially send the focus back to the transcript.

  var handleFocusFiller = (0, _react.useCallback)(function () {
    return focusByActivityKey(undefined);
  }, [focusByActivityKey]); // When focus into the transcript using TAB/SHIFT-TAB, scroll the focused activity into view.

  (0, _useObserveFocusVisible.default)(rootElementRef, (0, _react.useCallback)(function () {
    return focusByActivityKey(undefined);
  }, [focusByActivityKey]));
  return /*#__PURE__*/_react.default.createElement("div", {
    // Although Android TalkBack 12.1 does not support `aria-activedescendant`, when used, it become buggy and will narrate content twice.
    // We are disabling `aria-activedescendant` for Android. See <ActivityRow> for details.
    "aria-activedescendant": _detectBrowser.android ? undefined : activeDescendantId,
    "aria-label": transcriptAriaLabel,
    className: (0, _classnames.default)('webchat__basic-transcript', basicTranscriptStyleSet + '', rootClassName, (className || '') + ''),
    dir: direction,
    onFocus: handleFocus,
    onKeyDown: handleTranscriptKeyDown,
    onKeyDownCapture: handleTranscriptKeyDownCapture,
    ref: callbackRef // "aria-activedescendant" will only works with a number of roles and it must be explicitly set.
    // https://www.w3.org/TR/wai-aria/#aria-activedescendant
    ,
    role: "group" // For up/down arrow key navigation across activities, this component must be included in the tab sequence.
    // Otherwise, "aria-activedescendant" will not be narrated when the user press up/down arrow keys.
    // https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_focus_activedescendant
    ,
    tabIndex: 0
  }, /*#__PURE__*/_react.default.createElement(_LiveRegionTranscript.default, {
    activityElementMapRef: activityElementMapRef
  }), /*#__PURE__*/_react.default.createElement(InternalTranscriptScrollable, {
    onFocusFiller: handleFocusFiller,
    terminatorRef: terminatorRef
  }, renderingElements.map(function (_ref10) {
    var activity = _ref10.activity,
        callbackRef = _ref10.callbackRef,
        hideTimestamp = _ref10.hideTimestamp,
        key = _ref10.key,
        renderActivity = _ref10.renderActivity,
        renderActivityStatus = _ref10.renderActivityStatus,
        renderAvatar = _ref10.renderAvatar,
        showCallout = _ref10.showCallout;
    return /*#__PURE__*/_react.default.createElement(_ActivityRow.default, {
      activity: activity,
      key: key,
      ref: callbackRef
    }, renderActivity({
      hideTimestamp: hideTimestamp,
      renderActivityStatus: renderActivityStatus,
      renderAvatar: renderAvatar,
      showCallout: showCallout
    }));
  })), !!renderingElements.length && /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_FocusRedirector.default, {
    redirectRef: rootElementRef
  }), /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    "aria-labelledby": terminatorLabelId,
    className: "webchat__basic-transcript__terminator",
    ref: terminatorRef,
    role: "note",
    tabIndex: 0
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__basic-transcript__terminator-body"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__basic-transcript__terminator-text",
    id: terminatorLabelId
  }, terminatorText)))), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__basic-transcript__focus-indicator"
  }));
});
InternalTranscript.defaultProps = {
  className: ''
};
InternalTranscript.propTypes = {
  // PropTypes cannot validate precisely with its TypeScript counterpart.
  // @ts-ignore
  activityElementMapRef: _propTypes.default.shape({
    current: _propTypes.default.instanceOf(Map)
  }).isRequired,
  className: _propTypes.default.string
};

// Separating high-frequency hooks to improve performance.
var InternalTranscriptScrollable = function InternalTranscriptScrollable(_ref11) {
  var children = _ref11.children,
      onFocusFiller = _ref11.onFocusFiller,
      terminatorRef = _ref11.terminatorRef;

  var _useStyleSet3 = (0, _useStyleSet5.default)(),
      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),
      activitiesStyleSet = _useStyleSet4[0].activities;

  var _useAnimatingToEnd = (0, _reactScrollToBottom.useAnimatingToEnd)(),
      _useAnimatingToEnd2 = _slicedToArray(_useAnimatingToEnd, 1),
      animatingToEnd = _useAnimatingToEnd2[0];

  var _useAtEnd = (0, _reactScrollToBottom.useAtEnd)(),
      _useAtEnd2 = _slicedToArray(_useAtEnd, 1),
      atEnd = _useAtEnd2[0];

  var _useActivityKeysByRea = useActivityKeysByRead(),
      _useActivityKeysByRea2 = _slicedToArray(_useActivityKeysByRea, 2),
      unreadActivityKeys = _useActivityKeysByRea2[1];

  var _useSticky = (0, _reactScrollToBottom.useSticky)(),
      _useSticky2 = _slicedToArray(_useSticky, 1),
      sticky = _useSticky2[0];

  var _useStyleOptions3 = useStyleOptions(),
      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),
      styleOptions = _useStyleOptions4[0];

  var focusByActivityKey = (0, _useFocusByActivityKey.default)();
  var localize = useLocalizer();
  var markActivityKeyAsRead = useMarkActivityKeyAsRead();
  var markAllAsAcknowledged = useMarkAllAsAcknowledged();
  var scrollToEnd = (0, _reactScrollToBottom.useScrollToEnd)();
  var prevSticky = (0, _usePrevious.default)(sticky);
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');
  var stickyChangedToTrue = prevSticky !== sticky && sticky; // Acknowledged means either:
  // 1. The user sent a message
  //    - We don't need a condition here. When Web Chat sends the user's message, it will scroll to bottom, and it will trigger condition 2 below.
  // 2. The user scroll to the bottom of the transcript, from a non-bottom scroll position
  //    - If the transcript is already at the bottom, the user needs to scroll up and then go back down
  //    - What happens if we are relaxing "scrolled from a non-bottom scroll position":
  //      1. The condition will become solely "at the bottom of the transcript"
  //      2. Auto-scroll will always scroll the transcript to the bottom
  //      3. Web Chat will always acknowledge all activities as it is at the bottom
  //      4. Acknowledge flag become useless
  //      5. Therefore, even the developer set "pause after 3 activities", if activities are coming in at a slow pace (not batched in a single render)
  //         Web Chat will keep scrolling and not snapped/paused
  // Note: When Web Chat is loaded, there are no activities acknowledged. We need to assume all arriving activities are acknowledged until end-user sends their first activity.
  //       Activities loaded initially could be from conversation history. Without assuming acknowledgement, Web Chat will not scroll initially (as everything is not acknowledged).
  //       It would be better if the chat adapter should let Web Chat know if the activity is loaded from history or not.
  // TODO: [P2] #3670 Move the "conversation history acknowledgement" logic mentioned above to polyfill of chat adapters.
  //       1. Chat adapter should send "acknowledged" as part of "channelData"
  //       2. If "acknowledged" is "undefined", we set it to:
  //          a. true, if there are no egress activities yet
  //          b. Otherwise, false

  (0, _react.useMemo)(function () {
    return stickyChangedToTrue && // TODO: [P2] Both `markActivityKeyAsRead` and `markAllAsAcknowledged` hook are setters of useState.
    //       This means, in a render loop, we will be calling setter and will cause another re-render.
    //       This is not trivial but we should think if there is a way to avoid this.
    markAllAsAcknowledged();
  }, [markAllAsAcknowledged, stickyChangedToTrue]);

  var _useActivityTreeWithR3 = (0, _useActivityTreeWithRenderer.default)({
    flat: true
  }),
      _useActivityTreeWithR4 = _slicedToArray(_useActivityTreeWithR3, 1),
      flattenedActivityTreeWithRenderer = _useActivityTreeWithR4[0];

  var getKeyByActivity = useGetKeyByActivity();
  var renderingActivityKeys = (0, _react.useMemo)(function () {
    return flattenedActivityTreeWithRenderer.map(function (_ref12) {
      var activity = _ref12.activity;
      return getKeyByActivity(activity);
    });
  }, [flattenedActivityTreeWithRenderer, getKeyByActivity]);
  var renderingActivityKeysRef = (0, _useValueRef.default)(renderingActivityKeys); // To prevent flashy button, we are not waiting for another render loop to update the `[readActivityKeys, unreadActivityKeys]` state.
  // Instead, we are building the next one in this `useMemo` call.

  var nextUnreadActivityKeys = (0, _react.useMemo)(function () {
    // This code need to be careful reviewed as it will cause another render. The code should be converging.
    // After we call `markActivityKeyAsRead`, everything will be read and nothing will be unread.
    // That means, in next render, `unreadActivityKeys` will be emptied and the `markActivityKeyAsRead` will not get called again.
    if (sticky && unreadActivityKeys.length) {
      markActivityKeyAsRead(unreadActivityKeys[unreadActivityKeys.length - 1]);
      return [];
    }

    return unreadActivityKeys;
  }, [markActivityKeyAsRead, sticky, unreadActivityKeys]);
  var nextUnreadActivityKeysRef = (0, _useValueRef.default)(nextUnreadActivityKeys); // If we are rendering anything that is unread, we should show the "New messages" button.
  // Not everything in the `unreadActivityKeys` are rendered, say, bot typing indicator.
  // We should not show the "New messages" button for bot typing indicator as it will confuse the user.

  var unread = (0, _react.useMemo)(function () {
    return nextUnreadActivityKeys.some(function (key) {
      return renderingActivityKeys.includes(key);
    });
  }, [renderingActivityKeys, nextUnreadActivityKeys]);
  var handleScrollToEndButtonClick = (0, _react.useCallback)(function () {
    scrollToEnd({
      behavior: 'smooth'
    });
    var renderingActivityKeys = renderingActivityKeysRef.current; // After the "New message" button is clicked, focus on the first unread activity which will be rendered.

    var firstUnreadRenderingActivityKey = nextUnreadActivityKeysRef.current.find(function (key) {
      return renderingActivityKeys.includes(key);
    });

    if (firstUnreadRenderingActivityKey) {
      focusByActivityKey(firstUnreadRenderingActivityKey);
    } else {
      var _terminatorRef$curren;

      // If no unread activity, send the focus to the terminator block.
      (_terminatorRef$curren = terminatorRef.current) === null || _terminatorRef$curren === void 0 ? void 0 : _terminatorRef$curren.focus();
    }
  }, [focusByActivityKey, nextUnreadActivityKeysRef, renderingActivityKeysRef, scrollToEnd, terminatorRef]);
  var renderScrollToEndButton = useCreateScrollToEndButtonRenderer()({
    atEnd: animatingToEnd || atEnd || sticky,
    styleOptions: styleOptions,
    unread: unread
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderScrollToEndButton && renderScrollToEndButton({
    onClick: handleScrollToEndButtonClick
  }), !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(_FocusRedirector.default, {
    redirectRef: terminatorRef
  }), /*#__PURE__*/_react.default.createElement(_reactScrollToBottom.Panel, {
    className: "webchat__basic-transcript__scrollable"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__basic-transcript__filler",
    onFocus: onFocusFiller
  }), /*#__PURE__*/_react.default.createElement("section", {
    "aria-roledescription": transcriptRoleDescription,
    className: (0, _classnames.default)(activitiesStyleSet + '', 'webchat__basic-transcript__transcript'),
    role: "feed"
  }, children), /*#__PURE__*/_react.default.createElement(_BasicTypingIndicator.default, null)));
};

InternalTranscriptScrollable.propTypes = {
  children: _propTypes.default.any.isRequired,
  onFocusFiller: _propTypes.default.func.isRequired,
  terminatorRef: _propTypes.default.any.isRequired
};

// "scroller" is the auto-scroll limiter, a.k.a. auto scroll snap.
var useScroller = function useScroller(activityElementMapRef) {
  var _useActivityKeys = useActivityKeys(),
      _useActivityKeys2 = _slicedToArray(_useActivityKeys, 1),
      activityKeys = _useActivityKeys2[0];

  var _useLastAcknowledgedA = useLastAcknowledgedActivityKey(),
      _useLastAcknowledgedA2 = _slicedToArray(_useLastAcknowledgedA, 1),
      lastAcknowledgedActivityKey = _useLastAcknowledgedA2[0];

  var _useStyleOptions5 = useStyleOptions(),
      _useStyleOptions6 = _slicedToArray(_useStyleOptions5, 1),
      styleOptions = _useStyleOptions6[0];

  var activityKeysRef = (0, _useValueRef.default)(activityKeys);
  var lastAcknowledgedActivityKeyRef = (0, _useValueRef.default)(lastAcknowledgedActivityKey);
  var styleOptionsRef = (0, _useValueRef.default)(styleOptions);
  return (0, _react.useCallback)(function (_ref13) {
    var offsetHeight = _ref13.offsetHeight,
        scrollTop = _ref13.scrollTop;
    var _styleOptionsRef$curr = styleOptionsRef.current,
        autoScrollSnapOnActivity = _styleOptionsRef$curr.autoScrollSnapOnActivity,
        autoScrollSnapOnActivityOffset = _styleOptionsRef$curr.autoScrollSnapOnActivityOffset,
        autoScrollSnapOnPage = _styleOptionsRef$curr.autoScrollSnapOnPage,
        autoScrollSnapOnPageOffset = _styleOptionsRef$curr.autoScrollSnapOnPageOffset;
    var patchedAutoScrollSnapOnActivity = typeof autoScrollSnapOnActivity === 'number' ? Math.max(0, autoScrollSnapOnActivity) : autoScrollSnapOnActivity ? 1 : 0;
    var patchedAutoScrollSnapOnPage = typeof autoScrollSnapOnPage === 'number' ? Math.max(0, Math.min(1, autoScrollSnapOnPage)) : autoScrollSnapOnPage ? 1 : 0;
    var patchedAutoScrollSnapOnActivityOffset = typeof autoScrollSnapOnActivityOffset === 'number' ? autoScrollSnapOnActivityOffset : 0;
    var patchedAutoScrollSnapOnPageOffset = typeof autoScrollSnapOnPageOffset === 'number' ? autoScrollSnapOnPageOffset : 0;

    if (patchedAutoScrollSnapOnActivity || patchedAutoScrollSnapOnPage) {
      var activityElementMap = activityElementMapRef.current;
      var _activityKeys = activityKeysRef.current;
      var _lastAcknowledgedActivityKey = lastAcknowledgedActivityKeyRef.current;
      var values = [];

      var lastAcknowledgedActivityKeyIndex = _activityKeys.indexOf(_lastAcknowledgedActivityKey);

      if (~lastAcknowledgedActivityKeyIndex) {
        // The activity that we acknowledged could be not rendered, such as post back activity.
        // When calculating scroll snap, we can only base on the first unacknowledged-and-rendering activity.
        var renderingActivityKeys = Array.from(activityElementMap.keys());
        var firstUnacknowledgedActivityElementIndex = -1;

        var _iterator = _createForOfIteratorHelper(_activityKeys.slice(0, lastAcknowledgedActivityKeyIndex + 1).reverse()),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var acknowledgedActivityKey = _step.value;
            var index = renderingActivityKeys.indexOf(acknowledgedActivityKey);

            if (~index) {
              if (index !== renderingActivityKeys.length - 1) {
                firstUnacknowledgedActivityElementIndex = index + 1;
              }

              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (~firstUnacknowledgedActivityElementIndex) {
          var activityElements = Array.from(activityElementMap.values());

          if (patchedAutoScrollSnapOnActivity) {
            // Gets the activity element which we should snap to.
            var nthUnacknowledgedActivityElement = activityElements[firstUnacknowledgedActivityElementIndex + patchedAutoScrollSnapOnActivity - 1];

            if (nthUnacknowledgedActivityElement) {
              var nthUnacknowledgedActivityBoundingBoxElement = nthUnacknowledgedActivityElement === null || nthUnacknowledgedActivityElement === void 0 ? void 0 : nthUnacknowledgedActivityElement.querySelector('.webchat__basic-transcript__activity-active-descendant');
              var nthUnacknowledgedActivityOffsetTop = nthUnacknowledgedActivityElement.offsetTop + nthUnacknowledgedActivityBoundingBoxElement.offsetTop;
              values.push(nthUnacknowledgedActivityOffsetTop + nthUnacknowledgedActivityBoundingBoxElement.offsetHeight - offsetHeight - scrollTop + patchedAutoScrollSnapOnActivityOffset);
            }
          }

          if (patchedAutoScrollSnapOnPage) {
            var firstUnacknowledgedActivityElement = activityElements[+firstUnacknowledgedActivityElementIndex];
            var firstUnacknowledgedActivityBoundingBoxElement = firstUnacknowledgedActivityElement.querySelector('.webchat__basic-transcript__activity-active-descendant');
            var firstUnacknowledgedActivityOffsetTop = firstUnacknowledgedActivityElement.offsetTop + firstUnacknowledgedActivityBoundingBoxElement.offsetTop;
            values.push(firstUnacknowledgedActivityOffsetTop - scrollTop - offsetHeight * (1 - patchedAutoScrollSnapOnPage) + patchedAutoScrollSnapOnPageOffset);
          }
        }
      }

      return Math.min.apply(Math, values);
    }

    return Infinity;
  }, [activityElementMapRef, activityKeysRef, lastAcknowledgedActivityKeyRef, styleOptionsRef]);
};

var BasicTranscript = function BasicTranscript(_ref14) {
  var className = _ref14.className;
  var activityElementMapRef = (0, _react.useRef)(new Map());
  var containerRef = (0, _react.useRef)();
  var scroller = useScroller(activityElementMapRef);
  return /*#__PURE__*/_react.default.createElement(_TranscriptFocusComposer.default, {
    containerRef: containerRef
  }, /*#__PURE__*/_react.default.createElement(_reactScrollToBottom.Composer, {
    scroller: scroller
  }, /*#__PURE__*/_react.default.createElement(_KeyboardHelp.default, null), /*#__PURE__*/_react.default.createElement(InternalTranscript, {
    activityElementMapRef: activityElementMapRef,
    className: className,
    ref: containerRef
  })));
};

BasicTranscript.defaultProps = {
  className: ''
};
BasicTranscript.propTypes = {
  className: _propTypes.default.string
};
var _default = BasicTranscript;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CYXNpY1RyYW5zY3JpcHQudHN4Il0sIm5hbWVzIjpbInVzZUFjdGl2aXR5S2V5cyIsImhvb2tzIiwidXNlQWN0aXZpdHlLZXlzQnlSZWFkIiwidXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciIsInVzZUNyZWF0ZUF2YXRhclJlbmRlcmVyIiwidXNlQ3JlYXRlU2Nyb2xsVG9FbmRCdXR0b25SZW5kZXJlciIsInVzZURpcmVjdGlvbiIsInVzZUdldEFjdGl2aXR5QnlLZXkiLCJ1c2VHZXRLZXlCeUFjdGl2aXR5IiwidXNlR2V0S2V5QnlBY3Rpdml0eUlkIiwidXNlTGFzdEFja25vd2xlZGdlZEFjdGl2aXR5S2V5IiwidXNlTG9jYWxpemVyIiwidXNlTWFya0FjdGl2aXR5S2V5QXNSZWFkIiwidXNlTWFya0FsbEFzQWNrbm93bGVkZ2VkIiwidXNlU3R5bGVPcHRpb25zIiwiUk9PVF9TVFlMRSIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwib3ZlcmZsb3ciLCJwb3NpdGlvbiIsImZsZXgiLCJvdmVyZmxvd1giLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsImxpc3RTdHlsZVR5cGUiLCJJbnRlcm5hbFRyYW5zY3JpcHQiLCJyZWYiLCJhY3Rpdml0eUVsZW1lbnRNYXBSZWYiLCJjbGFzc05hbWUiLCJiYXNpY1RyYW5zY3JpcHRTdHlsZVNldCIsImJhc2ljVHJhbnNjcmlwdCIsImJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0IiwiYnViYmxlTnViT2Zmc2V0IiwiZ3JvdXBUaW1lc3RhbXAiLCJzaG93QXZhdGFySW5Hcm91cCIsImFjdGl2ZURlc2NlbmRhbnRJZCIsImFjdGl2aXR5V2l0aFJlbmRlcmVyVHJlZSIsImRpcmVjdGlvbiIsImZvY3VzZWRBY3Rpdml0eUtleSIsImZvY3VzZWRFeHBsaWNpdGx5IiwiY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciIsImNyZWF0ZUF2YXRhclJlbmRlcmVyIiwiZm9jdXMiLCJmb2N1c0J5QWN0aXZpdHlLZXkiLCJmb2N1c1JlbGF0aXZlQWN0aXZpdHkiLCJnZXRBY3Rpdml0eUJ5S2V5IiwiZ2V0S2V5QnlBY3Rpdml0eSIsImdldEtleUJ5QWN0aXZpdHlJZCIsImxvY2FsaXplIiwicm9vdENsYXNzTmFtZSIsInJvb3RFbGVtZW50UmVmIiwidGVybWluYXRvckxhYmVsSWQiLCJ0ZXJtaW5hdG9yUmVmIiwiZm9jdXNlZEFjdGl2aXR5S2V5UmVmIiwiaGlkZUFsbFRpbWVzdGFtcHMiLCJ0ZXJtaW5hdG9yVGV4dCIsInRyYW5zY3JpcHRBcmlhTGFiZWwiLCJjYWxsYmFja1JlZiIsImVsZW1lbnQiLCJjdXJyZW50IiwicmVuZGVyaW5nRWxlbWVudHMiLCJ0b3BTaWRlQm90TnViIiwidG9wU2lkZVVzZXJOdWIiLCJmb3JFYWNoIiwiZW50cmllc1dpdGhTYW1lU2VuZGVyIiwiZmlyc3RBY3Rpdml0eSIsImFjdGl2aXR5IiwicmVuZGVyQXZhdGFyIiwiZW50cmllc1dpdGhTYW1lU2VuZGVyQW5kU3RhdHVzIiwiaW5kZXhXaXRoaW5TZW5kZXJHcm91cCIsImZpcnN0SW5TZW5kZXJHcm91cCIsImxhc3RJblNlbmRlckdyb3VwIiwibGVuZ3RoIiwiaW5kZXhXaXRoaW5TZW5kZXJBbmRTdGF0dXNHcm91cCIsInJlbmRlckFjdGl2aXR5IiwiZmlyc3RJblNlbmRlckFuZFN0YXR1c0dyb3VwIiwia2V5IiwibGFzdEluU2VuZGVyQW5kU3RhdHVzR3JvdXAiLCJyZW5kZXJBY3Rpdml0eVN0YXR1cyIsIm5leHRWaXNpYmxlQWN0aXZpdHkiLCJ1bmRlZmluZWQiLCJ0b3BTaWRlTnViIiwiZnJvbSIsInJvbGUiLCJzaG93Q2FsbG91dCIsInB1c2giLCJhY3Rpdml0eUVsZW1lbnQiLCJzZXQiLCJkZWxldGUiLCJoaWRlVGltZXN0YW1wIiwic2Nyb2xsVG9Cb3R0b21TY3JvbGxUbyIsInNjcm9sbFRvQm90dG9tU2Nyb2xsVG9FbmQiLCJzY3JvbGxUbyIsImJlaGF2aW9yIiwiRXJyb3IiLCJhY3Rpdml0eUlkIiwiYWN0aXZpdHlJRCIsInNjcm9sbFRvcCIsImFjdGl2aXR5Qm91bmRpbmdCb3hFbGVtZW50IiwiZ2V0IiwicXVlcnlTZWxlY3RvciIsInNjcm9sbGFibGVFbGVtZW50IiwiYWN0aXZpdHlCb3VuZGluZ0JveEVsZW1lbnRDbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdHMiLCJzY3JvbGxhYmxlRWxlbWVudENsaWVudFJlY3QiLCJhY3Rpdml0eUhlaWdodCIsImhlaWdodCIsImFjdGl2aXR5WSIsInkiLCJzY3JvbGxhYmxlSGVpZ2h0IiwiYWN0aXZpdHlPZmZzZXRUb3AiLCJNYXRoIiwibWluIiwic2Nyb2xsVG9FbmQiLCJzY3JvbGxSZWxhdGl2ZSIsImRpc3BsYWNlbWVudCIsInJvb3RFbGVtZW50Iiwic2Nyb2xsYWJsZSIsIm5leHRTY3JvbGxUb3AiLCJvZmZzZXRIZWlnaHQiLCJtYXgiLCJzY3JvbGxIZWlnaHQiLCJtYXJrQWN0aXZpdHlLZXlBc1JlYWQiLCJkaXNwYXRjaFNjcm9sbFBvc2l0aW9uV2l0aEFjdGl2aXR5SWQiLCJoYW5kbGVTY3JvbGxQb3NpdGlvbiIsInNjcm9sbGFibGVDbGllbnRCb3R0b20iLCJib3R0b20iLCJhY3Rpdml0eUVsZW1lbnRzIiwiQXJyYXkiLCJlbnRyaWVzIiwiYWN0aXZpdHlLZXlKdXN0QWJvdmVTY3JvbGxCb3R0b20iLCJyZXZlcnNlIiwiZmluZCIsImVsZW1lbnRDbGllbnRSZWN0IiwiaWQiLCJoYW5kbGVUcmFuc2NyaXB0S2V5RG93biIsImV2ZW50IiwidGFyZ2V0IiwiZnJvbUVuZE9mVHJhbnNjcmlwdEluZGljYXRvciIsImZyb21UcmFuc2NyaXB0IiwiY3VycmVudFRhcmdldCIsImhhbmRsZWQiLCJJbmZpbml0eSIsImJvZHkiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImhhbmRsZVRyYW5zY3JpcHRLZXlEb3duQ2FwdHVyZSIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5IiwiZGlzcGF0Y2hUcmFuc2NyaXB0Rm9jdXNCeUFjdGl2aXR5S2V5IiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVGb2N1c0ZpbGxlciIsImFuZHJvaWQiLCJtYXAiLCJkZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsImluc3RhbmNlT2YiLCJNYXAiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwiSW50ZXJuYWxUcmFuc2NyaXB0U2Nyb2xsYWJsZSIsImNoaWxkcmVuIiwib25Gb2N1c0ZpbGxlciIsImFjdGl2aXRpZXNTdHlsZVNldCIsImFjdGl2aXRpZXMiLCJhbmltYXRpbmdUb0VuZCIsImF0RW5kIiwidW5yZWFkQWN0aXZpdHlLZXlzIiwic3RpY2t5Iiwic3R5bGVPcHRpb25zIiwibWFya0FsbEFzQWNrbm93bGVkZ2VkIiwicHJldlN0aWNreSIsInRyYW5zY3JpcHRSb2xlRGVzY3JpcHRpb24iLCJzdGlja3lDaGFuZ2VkVG9UcnVlIiwiZmxhdCIsImZsYXR0ZW5lZEFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlciIsInJlbmRlcmluZ0FjdGl2aXR5S2V5cyIsInJlbmRlcmluZ0FjdGl2aXR5S2V5c1JlZiIsIm5leHRVbnJlYWRBY3Rpdml0eUtleXMiLCJuZXh0VW5yZWFkQWN0aXZpdHlLZXlzUmVmIiwidW5yZWFkIiwic29tZSIsImluY2x1ZGVzIiwiaGFuZGxlU2Nyb2xsVG9FbmRCdXR0b25DbGljayIsImZpcnN0VW5yZWFkUmVuZGVyaW5nQWN0aXZpdHlLZXkiLCJyZW5kZXJTY3JvbGxUb0VuZEJ1dHRvbiIsIm9uQ2xpY2siLCJSZWFjdCIsIkNoaWxkcmVuIiwiY291bnQiLCJhbnkiLCJmdW5jIiwidXNlU2Nyb2xsZXIiLCJhY3Rpdml0eUtleXMiLCJsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXkiLCJhY3Rpdml0eUtleXNSZWYiLCJsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlSZWYiLCJzdHlsZU9wdGlvbnNSZWYiLCJhdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHkiLCJhdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHlPZmZzZXQiLCJhdXRvU2Nyb2xsU25hcE9uUGFnZSIsImF1dG9TY3JvbGxTbmFwT25QYWdlT2Zmc2V0IiwicGF0Y2hlZEF1dG9TY3JvbGxTbmFwT25BY3Rpdml0eSIsInBhdGNoZWRBdXRvU2Nyb2xsU25hcE9uUGFnZSIsInBhdGNoZWRBdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHlPZmZzZXQiLCJwYXRjaGVkQXV0b1Njcm9sbFNuYXBPblBhZ2VPZmZzZXQiLCJhY3Rpdml0eUVsZW1lbnRNYXAiLCJ2YWx1ZXMiLCJsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlJbmRleCIsImluZGV4T2YiLCJrZXlzIiwiZmlyc3RVbmFja25vd2xlZGdlZEFjdGl2aXR5RWxlbWVudEluZGV4Iiwic2xpY2UiLCJhY2tub3dsZWRnZWRBY3Rpdml0eUtleSIsImluZGV4IiwibnRoVW5hY2tub3dsZWRnZWRBY3Rpdml0eUVsZW1lbnQiLCJudGhVbmFja25vd2xlZGdlZEFjdGl2aXR5Qm91bmRpbmdCb3hFbGVtZW50IiwibnRoVW5hY2tub3dsZWRnZWRBY3Rpdml0eU9mZnNldFRvcCIsIm9mZnNldFRvcCIsImZpcnN0VW5hY2tub3dsZWRnZWRBY3Rpdml0eUVsZW1lbnQiLCJmaXJzdFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlCb3VuZGluZ0JveEVsZW1lbnQiLCJmaXJzdFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlPZmZzZXRUb3AiLCJCYXNpY1RyYW5zY3JpcHQiLCJjb250YWluZXJSZWYiLCJzY3JvbGxlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBVUE7O0FBQ0E7O0FBQ0E7O0FBT0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJ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LElBQU15QixlQUEwQyxHQUFHLFNBQTdDQSxlQUE2QyxTQUFtQjtBQUFBLE1BQWhCck0sU0FBZ0IsVUFBaEJBLFNBQWdCO0FBQ3BFLE1BQU1ELHFCQUFxQixHQUFHLG1CQUEyQixJQUFJcUksR0FBSixFQUEzQixDQUE5QjtBQUNBLE1BQU1rRSxZQUFZLEdBQUcsb0JBQXJCO0FBRUEsTUFBTUMsUUFBUSxHQUFHaEMsV0FBVyxDQUFDeEsscUJBQUQsQ0FBNUI7QUFFQSxzQkFDRSw2QkFBQyxnQ0FBRDtBQUF5QixJQUFBLFlBQVksRUFBRXVNO0FBQXZDLGtCQUNFLDZCQUFDLDZCQUFEO0FBQTZCLElBQUEsUUFBUSxFQUFFQztBQUF2QyxrQkFDRSw2QkFBQyxxQkFBRCxPQURGLGVBRUUsNkJBQUMsa0JBQUQ7QUFBb0IsSUFBQSxxQkFBcUIsRUFBRXhNLHFCQUEzQztBQUFrRSxJQUFBLFNBQVMsRUFBRUMsU0FBN0U7QUFBd0YsSUFBQSxHQUFHLEVBQUVzTTtBQUE3RixJQUZGLENBREYsQ0FERjtBQVFELENBZEQ7O0FBZ0JBRCxlQUFlLENBQUN0RSxZQUFoQixHQUErQjtBQUM3Qi9ILEVBQUFBLFNBQVMsRUFBRTtBQURrQixDQUEvQjtBQUlBcU0sZUFBZSxDQUFDckUsU0FBaEIsR0FBNEI7QUFDMUJoSSxFQUFBQSxTQUFTLEVBQUVpSSxtQkFBVUs7QUFESyxDQUE1QjtlQUllK0QsZSIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IHtcbiAgQ29tcG9zZXIgYXMgUmVhY3RTY3JvbGxUb0JvdHRvbUNvbXBvc2VyLFxuICBQYW5lbCBhcyBSZWFjdFNjcm9sbFRvQm90dG9tUGFuZWwsXG4gIHVzZUFuaW1hdGluZ1RvRW5kLFxuICB1c2VBdEVuZCxcbiAgdXNlT2JzZXJ2ZVNjcm9sbFBvc2l0aW9uLFxuICB1c2VTY3JvbGxUbyxcbiAgdXNlU2Nyb2xsVG9FbmQsXG4gIHVzZVN0aWNreVxufSBmcm9tICdyZWFjdC1zY3JvbGwtdG8tYm90dG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBmb3J3YXJkUmVmLCBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBBY3Rpdml0eUNvbXBvbmVudEZhY3RvcnksIEF2YXRhckNvbXBvbmVudEZhY3RvcnkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1hcGknO1xuaW1wb3J0IHR5cGUgeyBBY3Rpdml0eUVsZW1lbnRNYXAgfSBmcm9tICcuL1RyYW5zY3JpcHQvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBEaXJlY3RMaW5lQWN0aXZpdHkgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcbmltcG9ydCB0eXBlIHsgRkMsIEtleWJvYXJkRXZlbnRIYW5kbGVyLCBNdXRhYmxlUmVmT2JqZWN0LCBSZWFjdE5vZGUsIFZGQyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgYW5kcm9pZCB9IGZyb20gJy4vVXRpbHMvZGV0ZWN0QnJvd3Nlcic7XG5pbXBvcnQgQWN0aXZpdHlSb3cgZnJvbSAnLi9UcmFuc2NyaXB0L0FjdGl2aXR5Um93JztcbmltcG9ydCBCYXNpY1R5cGluZ0luZGljYXRvciBmcm9tICcuL0Jhc2ljVHlwaW5nSW5kaWNhdG9yJztcbmltcG9ydCBGb2N1c1JlZGlyZWN0b3IgZnJvbSAnLi9VdGlscy9Gb2N1c1JlZGlyZWN0b3InO1xuaW1wb3J0IGlucHV0dGFibGVLZXkgZnJvbSAnLi9VdGlscy9UeXBlRm9jdXNTaW5rL2lucHV0dGFibGVLZXknO1xuaW1wb3J0IGlzWmVyb09yUG9zaXRpdmUgZnJvbSAnLi9VdGlscy9pc1plcm9PclBvc2l0aXZlJztcbmltcG9ydCBLZXlib2FyZEhlbHAgZnJvbSAnLi9UcmFuc2NyaXB0L0tleWJvYXJkSGVscCc7XG5pbXBvcnQgTGl2ZVJlZ2lvblRyYW5zY3JpcHQgZnJvbSAnLi9UcmFuc2NyaXB0L0xpdmVSZWdpb25UcmFuc2NyaXB0Jztcbi8vIFRPRE86IFtQMl0gIzQxMzMgUmVuYW1lIHRvIFwiZ2V0VGFiYmFibGVFbGVtZW50c1wiLlxuaW1wb3J0IHRhYmJhYmxlRWxlbWVudHMgZnJvbSAnLi9VdGlscy90YWJiYWJsZUVsZW1lbnRzJztcbmltcG9ydCBUcmFuc2NyaXB0Rm9jdXNDb21wb3NlciBmcm9tICcuL3Byb3ZpZGVycy9UcmFuc2NyaXB0Rm9jdXMvVHJhbnNjcmlwdEZvY3VzQ29tcG9zZXInO1xuaW1wb3J0IHVzZUFjdGl2ZURlc2NlbmRhbnRJZCBmcm9tICcuL3Byb3ZpZGVycy9UcmFuc2NyaXB0Rm9jdXMvdXNlQWN0aXZlRGVzY2VuZGFudElkJztcbmltcG9ydCB1c2VBY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIgZnJvbSAnLi9wcm92aWRlcnMvQWN0aXZpdHlUcmVlL3VzZUFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlcic7XG5pbXBvcnQgdXNlRGlzcGF0Y2hTY3JvbGxQb3NpdGlvbiBmcm9tICcuL2hvb2tzL2ludGVybmFsL3VzZURpc3BhdGNoU2Nyb2xsUG9zaXRpb24nO1xuaW1wb3J0IHVzZURpc3BhdGNoVHJhbnNjcmlwdEZvY3VzQnlBY3Rpdml0eUtleSBmcm9tICcuL2hvb2tzL2ludGVybmFsL3VzZURpc3BhdGNoVHJhbnNjcmlwdEZvY3VzQnlBY3Rpdml0eUtleSc7XG5pbXBvcnQgdXNlRm9jdXMgZnJvbSAnLi9ob29rcy91c2VGb2N1cyc7XG5pbXBvcnQgdXNlRm9jdXNCeUFjdGl2aXR5S2V5IGZyb20gJy4vcHJvdmlkZXJzL1RyYW5zY3JpcHRGb2N1cy91c2VGb2N1c0J5QWN0aXZpdHlLZXknO1xuaW1wb3J0IHVzZUZvY3VzZWRBY3Rpdml0eUtleSBmcm9tICcuL3Byb3ZpZGVycy9UcmFuc2NyaXB0Rm9jdXMvdXNlRm9jdXNlZEFjdGl2aXR5S2V5JztcbmltcG9ydCB1c2VGb2N1c2VkRXhwbGljaXRseSBmcm9tICcuL3Byb3ZpZGVycy9UcmFuc2NyaXB0Rm9jdXMvdXNlRm9jdXNlZEV4cGxpY2l0bHknO1xuaW1wb3J0IHVzZUZvY3VzUmVsYXRpdmVBY3Rpdml0eSBmcm9tICcuL3Byb3ZpZGVycy9UcmFuc2NyaXB0Rm9jdXMvdXNlRm9jdXNSZWxhdGl2ZUFjdGl2aXR5JztcbmltcG9ydCB1c2VPYnNlcnZlRm9jdXNWaXNpYmxlIGZyb20gJy4vaG9va3MvaW50ZXJuYWwvdXNlT2JzZXJ2ZUZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgdXNlUHJldmlvdXMgZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VQcmV2aW91cyc7XG5pbXBvcnQgdXNlUmVnaXN0ZXJGb2N1c1RyYW5zY3JpcHQgZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VSZWdpc3RlckZvY3VzVHJhbnNjcmlwdCc7XG5pbXBvcnQgdXNlUmVnaXN0ZXJTY3JvbGxSZWxhdGl2ZSBmcm9tICcuL2hvb2tzL2ludGVybmFsL3VzZVJlZ2lzdGVyU2Nyb2xsUmVsYXRpdmUnO1xuaW1wb3J0IHVzZVJlZ2lzdGVyU2Nyb2xsVG8gZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VSZWdpc3RlclNjcm9sbFRvJztcbmltcG9ydCB1c2VSZWdpc3RlclNjcm9sbFRvRW5kIGZyb20gJy4vaG9va3MvaW50ZXJuYWwvdXNlUmVnaXN0ZXJTY3JvbGxUb0VuZCc7XG5pbXBvcnQgdXNlU3R5bGVTZXQgZnJvbSAnLi9ob29rcy91c2VTdHlsZVNldCc7XG5pbXBvcnQgdXNlU3R5bGVUb0Vtb3Rpb25PYmplY3QgZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VTdHlsZVRvRW1vdGlvbk9iamVjdCc7XG5pbXBvcnQgdXNlVW5pcXVlSWQgZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VVbmlxdWVJZCc7XG5pbXBvcnQgdXNlVmFsdWVSZWYgZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VWYWx1ZVJlZic7XG5cbmNvbnN0IHtcbiAgdXNlQWN0aXZpdHlLZXlzLFxuICB1c2VBY3Rpdml0eUtleXNCeVJlYWQsXG4gIHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIsXG4gIHVzZUNyZWF0ZUF2YXRhclJlbmRlcmVyLFxuICB1c2VDcmVhdGVTY3JvbGxUb0VuZEJ1dHRvblJlbmRlcmVyLFxuICB1c2VEaXJlY3Rpb24sXG4gIHVzZUdldEFjdGl2aXR5QnlLZXksXG4gIHVzZUdldEtleUJ5QWN0aXZpdHksXG4gIHVzZUdldEtleUJ5QWN0aXZpdHlJZCxcbiAgdXNlTGFzdEFja25vd2xlZGdlZEFjdGl2aXR5S2V5LFxuICB1c2VMb2NhbGl6ZXIsXG4gIHVzZU1hcmtBY3Rpdml0eUtleUFzUmVhZCxcbiAgdXNlTWFya0FsbEFzQWNrbm93bGVkZ2VkLFxuICB1c2VTdHlsZU9wdGlvbnNcbn0gPSBob29rcztcblxuY29uc3QgUk9PVF9TVFlMRSA9IHtcbiAgJyYud2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdCc6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIC8vIE1ha2Ugc3VyZSB0byBzZXQgXCJwb3NpdGlvbjogcmVsYXRpdmVcIiBoZXJlIHRvIGZvcm0gYW5vdGhlciBzdGFja2luZyBjb250ZXh0IGZvciB0aGUgc2Nyb2xsLXRvLWVuZCBidXR0b24uXG4gICAgLy8gU3RhY2tpbmcgY29udGV4dCBoZWxwIGlzb2xhdGluZyBlbGVtZW50cyB0aGF0IHVzZSBcInotaW5kZXhcIiBmcm9tIGdsb2JhbCBwb2xsdXRpb24uXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NTU19Qb3NpdGlvbmluZy9VbmRlcnN0YW5kaW5nX3pfaW5kZXgvVGhlX3N0YWNraW5nX2NvbnRleHRcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblxuICAgICcmIC53ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X19maWxsZXInOiB7XG4gICAgICBmbGV4OiAxXG4gICAgfSxcblxuICAgICcmIC53ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X19zY3JvbGxhYmxlJzoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbiAgICB9LFxuXG4gICAgJyYgLndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX3RyYW5zY3JpcHQnOiB7XG4gICAgICBsaXN0U3R5bGVUeXBlOiAnbm9uZSdcbiAgICB9XG4gIH1cbn07XG5cbnR5cGUgUmVuZGVyaW5nRWxlbWVudCA9IHtcbiAgYWN0aXZpdHk6IERpcmVjdExpbmVBY3Rpdml0eSAmIHtcbiAgICBjaGFubmVsRGF0YT86IHtcbiAgICAgIFsnd2ViY2hhdDpmYWxsYmFjay10ZXh0J106IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBjYWxsYmFja1JlZjogKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xuICBoaWRlVGltZXN0YW1wOiBib29sZWFuO1xuICBrZXk6IHN0cmluZztcbiAgcmVuZGVyQWN0aXZpdHk6IEV4Y2x1ZGU8UmV0dXJuVHlwZTxBY3Rpdml0eUNvbXBvbmVudEZhY3Rvcnk+LCBmYWxzZT47XG4gIHJlbmRlckFjdGl2aXR5U3RhdHVzOiAocHJvcHM6IHsgaGlkZVRpbWVzdGFtcD86IGJvb2xlYW4gfSkgPT4gUmVhY3ROb2RlO1xuICByZW5kZXJBdmF0YXI6IEF2YXRhckNvbXBvbmVudEZhY3Rvcnk7XG4gIHNob3dDYWxsb3V0OiBib29sZWFuO1xufTtcblxudHlwZSBTY3JvbGxCZWhhdmlvciA9ICdhdXRvJyB8ICdzbW9vdGgnO1xudHlwZSBTY3JvbGxUb09wdGlvbnMgPSB7IGJlaGF2aW9yPzogU2Nyb2xsQmVoYXZpb3IgfTtcbnR5cGUgU2Nyb2xsVG9Qb3NpdGlvbiA9IHsgYWN0aXZpdHlJRD86IHN0cmluZzsgc2Nyb2xsVG9wPzogbnVtYmVyIH07XG5cbnR5cGUgSW50ZXJuYWxUcmFuc2NyaXB0UHJvcHMgPSB7XG4gIGFjdGl2aXR5RWxlbWVudE1hcFJlZjogTXV0YWJsZVJlZk9iamVjdDxBY3Rpdml0eUVsZW1lbnRNYXA+O1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59O1xuXG4vLyBUT0RPOiBbUDFdICM0MTMzIEFkZCB0ZWxlbWV0cnkgZm9yIGNvbXB1dGluZyBob3cgbWFueSByZS1yZW5kZXIgZG9uZSBzbyBmYXIuXG5jb25zdCBJbnRlcm5hbFRyYW5zY3JpcHQgPSBmb3J3YXJkUmVmPEhUTUxEaXZFbGVtZW50LCBJbnRlcm5hbFRyYW5zY3JpcHRQcm9wcz4oXG4gICh7IGFjdGl2aXR5RWxlbWVudE1hcFJlZiwgY2xhc3NOYW1lIH0sIHJlZikgPT4ge1xuICAgIGNvbnN0IFt7IGJhc2ljVHJhbnNjcmlwdDogYmFzaWNUcmFuc2NyaXB0U3R5bGVTZXQgfV0gPSB1c2VTdHlsZVNldCgpO1xuICAgIGNvbnN0IFt7IGJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0LCBidWJibGVOdWJPZmZzZXQsIGdyb3VwVGltZXN0YW1wLCBzaG93QXZhdGFySW5Hcm91cCB9XSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuICAgIGNvbnN0IFthY3RpdmVEZXNjZW5kYW50SWRdID0gdXNlQWN0aXZlRGVzY2VuZGFudElkKCk7XG4gICAgY29uc3QgW2FjdGl2aXR5V2l0aFJlbmRlcmVyVHJlZV0gPSB1c2VBY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIoKTtcbiAgICBjb25zdCBbZGlyZWN0aW9uXSA9IHVzZURpcmVjdGlvbigpO1xuICAgIGNvbnN0IFtmb2N1c2VkQWN0aXZpdHlLZXldID0gdXNlRm9jdXNlZEFjdGl2aXR5S2V5KCk7XG4gICAgY29uc3QgW2ZvY3VzZWRFeHBsaWNpdGx5XSA9IHVzZUZvY3VzZWRFeHBsaWNpdGx5KCk7XG4gICAgY29uc3QgY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciA9IHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoKTtcbiAgICBjb25zdCBjcmVhdGVBdmF0YXJSZW5kZXJlciA9IHVzZUNyZWF0ZUF2YXRhclJlbmRlcmVyKCk7XG4gICAgY29uc3QgZm9jdXMgPSB1c2VGb2N1cygpO1xuICAgIGNvbnN0IGZvY3VzQnlBY3Rpdml0eUtleSA9IHVzZUZvY3VzQnlBY3Rpdml0eUtleSgpO1xuICAgIGNvbnN0IGZvY3VzUmVsYXRpdmVBY3Rpdml0eSA9IHVzZUZvY3VzUmVsYXRpdmVBY3Rpdml0eSgpO1xuICAgIGNvbnN0IGdldEFjdGl2aXR5QnlLZXkgPSB1c2VHZXRBY3Rpdml0eUJ5S2V5KCk7XG4gICAgY29uc3QgZ2V0S2V5QnlBY3Rpdml0eSA9IHVzZUdldEtleUJ5QWN0aXZpdHkoKTtcbiAgICBjb25zdCBnZXRLZXlCeUFjdGl2aXR5SWQgPSB1c2VHZXRLZXlCeUFjdGl2aXR5SWQoKTtcbiAgICBjb25zdCBsb2NhbGl6ZSA9IHVzZUxvY2FsaXplcigpO1xuICAgIGNvbnN0IHJvb3RDbGFzc05hbWUgPSB1c2VTdHlsZVRvRW1vdGlvbk9iamVjdCgpKFJPT1RfU1RZTEUpICsgJyc7XG4gICAgY29uc3Qgcm9vdEVsZW1lbnRSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gICAgY29uc3QgdGVybWluYXRvckxhYmVsSWQgPSB1c2VVbmlxdWVJZCgnd2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fdGVybWluYXRvci1sYWJlbCcpO1xuICAgIGNvbnN0IHRlcm1pbmF0b3JSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG5cbiAgICBjb25zdCBmb2N1c2VkQWN0aXZpdHlLZXlSZWYgPSB1c2VWYWx1ZVJlZihmb2N1c2VkQWN0aXZpdHlLZXkpO1xuICAgIGNvbnN0IGhpZGVBbGxUaW1lc3RhbXBzID0gZ3JvdXBUaW1lc3RhbXAgPT09IGZhbHNlO1xuICAgIGNvbnN0IHRlcm1pbmF0b3JUZXh0ID0gbG9jYWxpemUoJ1RSQU5TQ1JJUFRfVEVSTUlOQVRPUl9URVhUJyk7XG4gICAgY29uc3QgdHJhbnNjcmlwdEFyaWFMYWJlbCA9IGxvY2FsaXplKCdUUkFOU0NSSVBUX0FSSUFfTEFCRUxfQUxUJyk7XG5cbiAgICBjb25zdCBjYWxsYmFja1JlZiA9IHVzZUNhbGxiYWNrKFxuICAgICAgKGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmVmKGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZi5jdXJyZW50ID0gZWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3RFbGVtZW50UmVmLmN1cnJlbnQgPSBlbGVtZW50O1xuICAgICAgfSxcbiAgICAgIFtyZWYsIHJvb3RFbGVtZW50UmVmXVxuICAgICk7XG5cbiAgICAvLyBGbGF0dGVuIHRoZSB0cmVlIGJhY2sgaW50byBhbiBhcnJheSB3aXRoIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gcmVuZGVyaW5nLlxuICAgIGNvbnN0IHJlbmRlcmluZ0VsZW1lbnRzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICBjb25zdCByZW5kZXJpbmdFbGVtZW50czogUmVuZGVyaW5nRWxlbWVudFtdID0gW107XG4gICAgICBjb25zdCB0b3BTaWRlQm90TnViID0gaXNaZXJvT3JQb3NpdGl2ZShidWJibGVOdWJPZmZzZXQpO1xuICAgICAgY29uc3QgdG9wU2lkZVVzZXJOdWIgPSBpc1plcm9PclBvc2l0aXZlKGJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0KTtcblxuICAgICAgYWN0aXZpdHlXaXRoUmVuZGVyZXJUcmVlLmZvckVhY2goZW50cmllc1dpdGhTYW1lU2VuZGVyID0+IHtcbiAgICAgICAgY29uc3QgW1t7IGFjdGl2aXR5OiBmaXJzdEFjdGl2aXR5IH1dXSA9IGVudHJpZXNXaXRoU2FtZVNlbmRlcjtcbiAgICAgICAgY29uc3QgcmVuZGVyQXZhdGFyID0gY3JlYXRlQXZhdGFyUmVuZGVyZXIoeyBhY3Rpdml0eTogZmlyc3RBY3Rpdml0eSB9KTtcblxuICAgICAgICBlbnRyaWVzV2l0aFNhbWVTZW5kZXIuZm9yRWFjaCgoZW50cmllc1dpdGhTYW1lU2VuZGVyQW5kU3RhdHVzLCBpbmRleFdpdGhpblNlbmRlckdyb3VwKSA9PiB7XG4gICAgICAgICAgY29uc3QgZmlyc3RJblNlbmRlckdyb3VwID0gIWluZGV4V2l0aGluU2VuZGVyR3JvdXA7XG4gICAgICAgICAgY29uc3QgbGFzdEluU2VuZGVyR3JvdXAgPSBpbmRleFdpdGhpblNlbmRlckdyb3VwID09PSBlbnRyaWVzV2l0aFNhbWVTZW5kZXIubGVuZ3RoIC0gMTtcblxuICAgICAgICAgIGVudHJpZXNXaXRoU2FtZVNlbmRlckFuZFN0YXR1cy5mb3JFYWNoKCh7IGFjdGl2aXR5LCByZW5kZXJBY3Rpdml0eSB9LCBpbmRleFdpdGhpblNlbmRlckFuZFN0YXR1c0dyb3VwKSA9PiB7XG4gICAgICAgICAgICAvLyBXZSBvbmx5IHNob3cgdGhlIHRpbWVzdGFtcCBhdCB0aGUgZW5kIG9mIHRoZSBzZW5kZXIgZ3JvdXAuIEJ1dCB3ZSBhbHdheXMgc2hvdyB0aGUgXCJTZW5kIGZhaWxlZCwgcmV0cnlcIiBwcm9tcHQuXG4gICAgICAgICAgICBjb25zdCBmaXJzdEluU2VuZGVyQW5kU3RhdHVzR3JvdXAgPSAhaW5kZXhXaXRoaW5TZW5kZXJBbmRTdGF0dXNHcm91cDtcbiAgICAgICAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gZ2V0S2V5QnlBY3Rpdml0eShhY3Rpdml0eSk7XG4gICAgICAgICAgICBjb25zdCBsYXN0SW5TZW5kZXJBbmRTdGF0dXNHcm91cCA9XG4gICAgICAgICAgICAgIGluZGV4V2l0aGluU2VuZGVyQW5kU3RhdHVzR3JvdXAgPT09IGVudHJpZXNXaXRoU2FtZVNlbmRlckFuZFN0YXR1cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyQWN0aXZpdHlTdGF0dXMgPSBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKHtcbiAgICAgICAgICAgICAgYWN0aXZpdHksXG4gICAgICAgICAgICAgIG5leHRWaXNpYmxlQWN0aXZpdHk6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0b3BTaWRlTnViID0gYWN0aXZpdHkuZnJvbT8ucm9sZSA9PT0gJ3VzZXInID8gdG9wU2lkZVVzZXJOdWIgOiB0b3BTaWRlQm90TnViO1xuXG4gICAgICAgICAgICBsZXQgc2hvd0NhbGxvdXQ6IGJvb2xlYW47XG5cbiAgICAgICAgICAgIC8vIERlcGVuZGluZyBvbiB0aGUgXCJzaG93QXZhdGFySW5Hcm91cFwiIHNldHRpbmcsIHRoZSBhdmF0YXIgd2lsbCByZW5kZXIgaW4gZGlmZmVyZW50IHBvc2l0aW9ucy5cbiAgICAgICAgICAgIGlmIChzaG93QXZhdGFySW5Hcm91cCA9PT0gJ3NlbmRlcicpIHtcbiAgICAgICAgICAgICAgaWYgKHRvcFNpZGVOdWIpIHtcbiAgICAgICAgICAgICAgICBzaG93Q2FsbG91dCA9IGZpcnN0SW5TZW5kZXJHcm91cCAmJiBmaXJzdEluU2VuZGVyQW5kU3RhdHVzR3JvdXA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hvd0NhbGxvdXQgPSBsYXN0SW5TZW5kZXJHcm91cCAmJiBsYXN0SW5TZW5kZXJBbmRTdGF0dXNHcm91cDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzaG93QXZhdGFySW5Hcm91cCA9PT0gJ3N0YXR1cycpIHtcbiAgICAgICAgICAgICAgaWYgKHRvcFNpZGVOdWIpIHtcbiAgICAgICAgICAgICAgICBzaG93Q2FsbG91dCA9IGZpcnN0SW5TZW5kZXJBbmRTdGF0dXNHcm91cDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG93Q2FsbG91dCA9IGxhc3RJblNlbmRlckFuZFN0YXR1c0dyb3VwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzaG93Q2FsbG91dCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlcmluZ0VsZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICBhY3Rpdml0eSxcblxuICAgICAgICAgICAgICAvLyBBZnRlciB0aGUgZWxlbWVudCBpcyBtb3VudGVkLCBzZXQgaXQgdG8gYWN0aXZpdHlFbGVtZW50c1JlZi5cbiAgICAgICAgICAgICAgY2FsbGJhY2tSZWY6IGFjdGl2aXR5RWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgYWN0aXZpdHlFbGVtZW50XG4gICAgICAgICAgICAgICAgICA/IGFjdGl2aXR5RWxlbWVudE1hcFJlZi5jdXJyZW50LnNldChrZXksIGFjdGl2aXR5RWxlbWVudClcbiAgICAgICAgICAgICAgICAgIDogYWN0aXZpdHlFbGVtZW50TWFwUmVmLmN1cnJlbnQuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgLy8gXCJoaWRlVGltZXN0YW1wXCIgaXMgYSByZW5kZXItdGltZSBwYXJhbWV0ZXIgZm9yIHJlbmRlckFjdGl2aXR5U3RhdHVzKCkuXG4gICAgICAgICAgICAgIC8vIElmIHRydWUsIGl0IHdpbGwgaGlkZSB0aGUgdGltZXN0YW1wLCBidXQgaXQgd2lsbCBjb250aW51ZSB0byBzaG93IHRoZVxuICAgICAgICAgICAgICAvLyByZXRyeSBwcm9tcHQuIEFuZCBzaG93IHRoZSBzY3JlZW4gcmVhZGVyIHZlcnNpb24gb2YgdGhlIHRpbWVzdGFtcC5cbiAgICAgICAgICAgICAgaGlkZVRpbWVzdGFtcDpcbiAgICAgICAgICAgICAgICBoaWRlQWxsVGltZXN0YW1wcyB8fCBpbmRleFdpdGhpblNlbmRlckFuZFN0YXR1c0dyb3VwICE9PSBlbnRyaWVzV2l0aFNhbWVTZW5kZXJBbmRTdGF0dXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICByZW5kZXJBY3Rpdml0eSxcbiAgICAgICAgICAgICAgcmVuZGVyQWN0aXZpdHlTdGF0dXMsXG4gICAgICAgICAgICAgIHJlbmRlckF2YXRhcixcbiAgICAgICAgICAgICAgc2hvd0NhbGxvdXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVuZGVyaW5nRWxlbWVudHM7XG4gICAgfSwgW1xuICAgICAgYWN0aXZpdHlFbGVtZW50TWFwUmVmLFxuICAgICAgYWN0aXZpdHlXaXRoUmVuZGVyZXJUcmVlLFxuICAgICAgYnViYmxlRnJvbVVzZXJOdWJPZmZzZXQsXG4gICAgICBidWJibGVOdWJPZmZzZXQsXG4gICAgICBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyLFxuICAgICAgY3JlYXRlQXZhdGFyUmVuZGVyZXIsXG4gICAgICBnZXRLZXlCeUFjdGl2aXR5LFxuICAgICAgaGlkZUFsbFRpbWVzdGFtcHMsXG4gICAgICBzaG93QXZhdGFySW5Hcm91cFxuICAgIF0pO1xuXG4gICAgY29uc3Qgc2Nyb2xsVG9Cb3R0b21TY3JvbGxUbzogKHNjcm9sbFRvcDogbnVtYmVyLCBvcHRpb25zPzogU2Nyb2xsVG9PcHRpb25zKSA9PiB2b2lkID0gdXNlU2Nyb2xsVG8oKTtcbiAgICBjb25zdCBzY3JvbGxUb0JvdHRvbVNjcm9sbFRvRW5kOiAob3B0aW9ucz86IFNjcm9sbFRvT3B0aW9ucykgPT4gdm9pZCA9IHVzZVNjcm9sbFRvRW5kKCk7XG5cbiAgICBjb25zdCBzY3JvbGxUbyA9IHVzZUNhbGxiYWNrKFxuICAgICAgKHBvc2l0aW9uOiBTY3JvbGxUb1Bvc2l0aW9uLCB7IGJlaGF2aW9yID0gJ2F1dG8nIH06IFNjcm9sbFRvT3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IEZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBcInVzZVNjcm9sbFRvXCIgbXVzdCBiZSBhIFNjcm9sbFBvc2l0aW9uIG9iamVjdC4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgYWN0aXZpdHlJRDogYWN0aXZpdHlJZCwgc2Nyb2xsVG9wIH0gPSBwb3NpdGlvbjtcblxuICAgICAgICBpZiAodHlwZW9mIHNjcm9sbFRvcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzY3JvbGxUb0JvdHRvbVNjcm9sbFRvKHNjcm9sbFRvcCwgeyBiZWhhdmlvciB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aXZpdHlJZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBhY3Rpdml0eUJvdW5kaW5nQm94RWxlbWVudCA9IGFjdGl2aXR5RWxlbWVudE1hcFJlZi5jdXJyZW50XG4gICAgICAgICAgICAuZ2V0KGdldEtleUJ5QWN0aXZpdHlJZChhY3Rpdml0eUlkKSlcbiAgICAgICAgICAgID8ucXVlcnlTZWxlY3RvcignLndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX2FjdGl2aXR5LWFjdGl2ZS1kZXNjZW5kYW50Jyk7XG5cbiAgICAgICAgICBjb25zdCBzY3JvbGxhYmxlRWxlbWVudCA9IHJvb3RFbGVtZW50UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcignLndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX3Njcm9sbGFibGUnKTtcblxuICAgICAgICAgIGlmIChzY3JvbGxhYmxlRWxlbWVudCAmJiBhY3Rpdml0eUJvdW5kaW5nQm94RWxlbWVudCkge1xuICAgICAgICAgICAgLy8gRVNMaW50IGNvbmZsaWN0IHdpdGggVHlwZVNjcmlwdC4gVGhlIHJlc3VsdCBvZiBnZXRDbGllbnRSZWN0cygpIGlzIG5vdCBhbiBBcnJheSBidXQgRE9NUmVjdExpc3QsIGFuZCBjYW5ub3QgYmUgZGVzdHJ1Y3R1cmVkLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgICAgICBjb25zdCBhY3Rpdml0eUJvdW5kaW5nQm94RWxlbWVudENsaWVudFJlY3QgPSBhY3Rpdml0eUJvdW5kaW5nQm94RWxlbWVudC5nZXRDbGllbnRSZWN0cygpWzBdO1xuXG4gICAgICAgICAgICAvLyBFU0xpbnQgY29uZmxpY3Qgd2l0aCBUeXBlU2NyaXB0LiBUaGUgcmVzdWx0IG9mIGdldENsaWVudFJlY3RzKCkgaXMgbm90IGFuIEFycmF5IGJ1dCBET01SZWN0TGlzdCwgYW5kIGNhbm5vdCBiZSBkZXN0cnVjdHVyZWQuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbGFibGVFbGVtZW50Q2xpZW50UmVjdCA9IHNjcm9sbGFibGVFbGVtZW50LmdldENsaWVudFJlY3RzKClbMF07XG5cbiAgICAgICAgICAgIC8vIElmIGVpdGhlciB0aGUgYWN0aXZpdHkgb3IgdGhlIHRyYW5zY3JpcHQgc2Nyb2xsYWJsZSBpcyBub3Qgb24gRE9NLCB3ZSB3aWxsIG5vdCBzY3JvbGwgdGhlIHZpZXcuXG4gICAgICAgICAgICBpZiAoYWN0aXZpdHlCb3VuZGluZ0JveEVsZW1lbnRDbGllbnRSZWN0ICYmIHNjcm9sbGFibGVFbGVtZW50Q2xpZW50UmVjdCkge1xuICAgICAgICAgICAgICBjb25zdCB7IGhlaWdodDogYWN0aXZpdHlIZWlnaHQsIHk6IGFjdGl2aXR5WSB9ID0gYWN0aXZpdHlCb3VuZGluZ0JveEVsZW1lbnRDbGllbnRSZWN0O1xuICAgICAgICAgICAgICBjb25zdCB7IGhlaWdodDogc2Nyb2xsYWJsZUhlaWdodCB9ID0gc2Nyb2xsYWJsZUVsZW1lbnRDbGllbnRSZWN0O1xuICAgICAgICAgICAgICBjb25zdCBhY3Rpdml0eU9mZnNldFRvcCA9IGFjdGl2aXR5WSArIHNjcm9sbGFibGVFbGVtZW50LnNjcm9sbFRvcDtcblxuICAgICAgICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSBNYXRoLm1pbihhY3Rpdml0eU9mZnNldFRvcCwgYWN0aXZpdHlPZmZzZXRUb3AgLSBzY3JvbGxhYmxlSGVpZ2h0ICsgYWN0aXZpdHlIZWlnaHQpO1xuXG4gICAgICAgICAgICAgIHNjcm9sbFRvQm90dG9tU2Nyb2xsVG8oc2Nyb2xsVG9wLCB7IGJlaGF2aW9yIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFthY3Rpdml0eUVsZW1lbnRNYXBSZWYsIGdldEtleUJ5QWN0aXZpdHlJZCwgcm9vdEVsZW1lbnRSZWYsIHNjcm9sbFRvQm90dG9tU2Nyb2xsVG9dXG4gICAgKTtcblxuICAgIGNvbnN0IHNjcm9sbFRvRW5kID0gdXNlQ2FsbGJhY2soXG4gICAgICAoKSA9PiBzY3JvbGxUb0JvdHRvbVNjcm9sbFRvRW5kKHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pLFxuICAgICAgW3Njcm9sbFRvQm90dG9tU2Nyb2xsVG9FbmRdXG4gICAgKTtcblxuICAgIGNvbnN0IHNjcm9sbFJlbGF0aXZlID0gdXNlQ2FsbGJhY2soXG4gICAgICAoZGlyZWN0aW9uOiAnZG93bicgfCAndXAnLCB7IGRpc3BsYWNlbWVudCB9OiB7IGRpc3BsYWNlbWVudD86IG51bWJlciB9ID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50OiByb290RWxlbWVudCB9ID0gcm9vdEVsZW1lbnRSZWY7XG5cbiAgICAgICAgaWYgKCFyb290RWxlbWVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNjcm9sbGFibGU6IEhUTUxFbGVtZW50ID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcignLndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX3Njcm9sbGFibGUnKTtcbiAgICAgICAgbGV0IG5leHRTY3JvbGxUb3A6IG51bWJlcjtcblxuICAgICAgICBpZiAodHlwZW9mIGRpc3BsYWNlbWVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbWFnaWMtbnVtYmVyc1xuICAgICAgICAgIG5leHRTY3JvbGxUb3AgPSBzY3JvbGxhYmxlLnNjcm9sbFRvcCArIChkaXJlY3Rpb24gPT09ICdkb3duJyA/IDEgOiAtMSkgKiBkaXNwbGFjZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW1hZ2ljLW51bWJlcnNcbiAgICAgICAgICBuZXh0U2Nyb2xsVG9wID0gc2Nyb2xsYWJsZS5zY3JvbGxUb3AgKyAoZGlyZWN0aW9uID09PSAnZG93bicgPyAxIDogLTEpICogc2Nyb2xsYWJsZS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBzY3JvbGxUbyhcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY3JvbGxUb3A6IE1hdGgubWF4KDAsIE1hdGgubWluKHNjcm9sbGFibGUuc2Nyb2xsSGVpZ2h0IC0gc2Nyb2xsYWJsZS5vZmZzZXRIZWlnaHQsIG5leHRTY3JvbGxUb3ApKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBiZWhhdmlvcjogJ3Ntb290aCcgfVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIFtyb290RWxlbWVudFJlZiwgc2Nyb2xsVG9dXG4gICAgKTtcblxuICAgIC8vIFNpbmNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGluc3RhbmNlcyBvZiA8QmFzaWNUcmFuc2NyaXB0PiBpbnNpZGUgdGhlIDxDb21wb3Nlcj4sIHdoZW4gdGhlIGRldmVsb3BlciBjYWxscyBgc2Nyb2xsWFhYYCwgd2UgbmVlZCB0byBjYWxsIGl0IG9uIGFsbCBpbnN0YW5jZXMuXG4gICAgLy8gV2UgY2FsbCBgdXNlUmVnaXN0ZXJTY3JvbGxYWFhgIHRvIHJlZ2lzdGVyIGEgY2FsbGJhY2sgZnVuY3Rpb24sIHRoZSBgdXNlU2Nyb2xsWFhYYCB3aWxsIG11bHRpcGxleCB0aGUgY2FsbCBpbnRvIGVhY2ggaW5zdGFuY2Ugb2YgPEJhc2ljVHJhbnNjcmlwdD4uXG4gICAgdXNlUmVnaXN0ZXJTY3JvbGxUbyhzY3JvbGxUbyk7XG4gICAgdXNlUmVnaXN0ZXJTY3JvbGxUb0VuZChzY3JvbGxUb0VuZCk7XG4gICAgdXNlUmVnaXN0ZXJTY3JvbGxSZWxhdGl2ZShzY3JvbGxSZWxhdGl2ZSk7XG5cbiAgICBjb25zdCBtYXJrQWN0aXZpdHlLZXlBc1JlYWQgPSB1c2VNYXJrQWN0aXZpdHlLZXlBc1JlYWQoKTtcblxuICAgIGNvbnN0IGRpc3BhdGNoU2Nyb2xsUG9zaXRpb25XaXRoQWN0aXZpdHlJZDogKHNjcm9sbFBvc2l0aW9uOiBTY3JvbGxUb1Bvc2l0aW9uKSA9PiB2b2lkID1cbiAgICAgIHVzZURpc3BhdGNoU2Nyb2xsUG9zaXRpb24oKTtcblxuICAgIC8vIFRPRE86IFtQMl0gV2Ugc2hvdWxkIHVzZSBJbnRlcnNlY3Rpb25PYnNlcnZlciB0byB0cmFjayB3aGF0IGFjdGl2aXR5IGlzIGluIHRoZSBzY3JvbGxhYmxlLlxuICAgIC8vICAgICAgICAgICAgSG93ZXZlciwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaXMgbm90IGF2YWlsYWJsZSBvbiBJRTExLCB3ZSBuZWVkIHRvIG1ha2UgYSBsaW1pdGVkIHBvbHlmaWxsIGluIFJlYWN0IHN0eWxlLlxuICAgIGNvbnN0IGhhbmRsZVNjcm9sbFBvc2l0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgICAoeyBzY3JvbGxUb3AgfTogeyBzY3JvbGxUb3A6IG51bWJlciB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudDogcm9vdEVsZW1lbnQgfSA9IHJvb3RFbGVtZW50UmVmO1xuXG4gICAgICAgIGlmICghcm9vdEVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzY3JvbGxhYmxlRWxlbWVudCA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X19zY3JvbGxhYmxlJyk7XG5cbiAgICAgICAgLy8gXCJnZXRDbGllbnRSZWN0cygpXCIgaXMgbm90IHJldHVybmluZyBhbiBhcnJheSwgdGh1cywgaXQgaXMgbm90IGRlc3RydWN0dXJhYmxlLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgY29uc3Qgc2Nyb2xsYWJsZUVsZW1lbnRDbGllbnRSZWN0ID0gc2Nyb2xsYWJsZUVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKVswXTtcblxuICAgICAgICAvLyBJZiB0aGUgc2Nyb2xsYWJsZSBpcyBub3QgbW91bnRlZCwgd2UgY2Fubm90IG1lYXN1cmUgd2hpY2ggYWN0aXZpdHkgaXMgaW4gdmlldy4gVGh1cywgd2Ugd2lsbCBub3QgZmlyZSBhbnkgZXZlbnRzLlxuICAgICAgICBpZiAoIXNjcm9sbGFibGVFbGVtZW50Q2xpZW50UmVjdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgYm90dG9tOiBzY3JvbGxhYmxlQ2xpZW50Qm90dG9tIH0gPSBzY3JvbGxhYmxlRWxlbWVudENsaWVudFJlY3Q7XG5cbiAgICAgICAgLy8gRmluZCB0aGUgYWN0aXZpdHkganVzdCBhYm92ZSBzY3JvbGwgdmlldyBib3R0b20uXG4gICAgICAgIC8vIElmIHRoZSBzY3JvbGwgdmlldyBpcyBhbHJlYWR5IG9uIHRvcCwgZ2V0IHRoZSBmaXJzdCBhY3Rpdml0eS5cbiAgICAgICAgY29uc3QgYWN0aXZpdHlFbGVtZW50cyA9IEFycmF5LmZyb20oYWN0aXZpdHlFbGVtZW50TWFwUmVmLmN1cnJlbnQuZW50cmllcygpKTtcbiAgICAgICAgY29uc3QgYWN0aXZpdHlLZXlKdXN0QWJvdmVTY3JvbGxCb3R0b206IHN0cmluZyB8IHVuZGVmaW5lZCA9IChcbiAgICAgICAgICBzY3JvbGxhYmxlRWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgID8gYWN0aXZpdHlFbGVtZW50c1xuICAgICAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgICAgICAvLyBBZGQgc3VicGl4ZWwgdG9sZXJhbmNlXG4gICAgICAgICAgICAgICAgLmZpbmQoKFssIGVsZW1lbnRdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBcImdldENsaWVudFJlY3RzKClcIiBpcyBub3QgcmV0dXJuaW5nIGFuIGFycmF5LCB0aHVzLCBpdCBpcyBub3QgZGVzdHJ1Y3R1cmFibGUuXG4gICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRDbGllbnRSZWN0ID0gZWxlbWVudC5nZXRDbGllbnRSZWN0cygpWzBdO1xuXG4gICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYWN0aXZpdHkgaXMgbm90IGF0dGFjaGVkIHRvIERPTSB0cmVlLCB3ZSBzaG91bGQgbm90IGNvdW50IGl0IGFzIFwiYm90dG9tbW9zdCB2aXNpYmxlIGFjdGl2aXR5XCIsIGFzIGl0IGlzIG5vdCB2aXNpYmxlLlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRDbGllbnRSZWN0ICYmIGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSA8IHNjcm9sbGFibGVDbGllbnRCb3R0b20gKyAxO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IGFjdGl2aXR5RWxlbWVudHNbMF1cbiAgICAgICAgKT8uWzBdO1xuXG4gICAgICAgIC8vIFdoZW4gdGhlIGVuZC11c2VyIHNsb3dseSBzY3JvbGxpbmcgdGhlIHZpZXcgZG93biwgd2Ugd2lsbCBtYXJrIGFjdGl2aXR5IGFzIHJlYWQgd2hlbiB0aGUgbWVzc2FnZSBmdWxseSBhcHBlYXIgb24gdGhlIHNjcmVlbi5cbiAgICAgICAgYWN0aXZpdHlLZXlKdXN0QWJvdmVTY3JvbGxCb3R0b20gJiYgbWFya0FjdGl2aXR5S2V5QXNSZWFkKGFjdGl2aXR5S2V5SnVzdEFib3ZlU2Nyb2xsQm90dG9tKTtcblxuICAgICAgICBpZiAoZGlzcGF0Y2hTY3JvbGxQb3NpdGlvbldpdGhBY3Rpdml0eUlkKSB7XG4gICAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBnZXRBY3Rpdml0eUJ5S2V5KGFjdGl2aXR5S2V5SnVzdEFib3ZlU2Nyb2xsQm90dG9tKTtcblxuICAgICAgICAgIGRpc3BhdGNoU2Nyb2xsUG9zaXRpb25XaXRoQWN0aXZpdHlJZCh7IC4uLihhY3Rpdml0eSA/IHsgYWN0aXZpdHlJRDogYWN0aXZpdHkuaWQgfSA6IHt9KSwgc2Nyb2xsVG9wIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBhY3Rpdml0eUVsZW1lbnRNYXBSZWYsXG4gICAgICAgIGRpc3BhdGNoU2Nyb2xsUG9zaXRpb25XaXRoQWN0aXZpdHlJZCxcbiAgICAgICAgZ2V0QWN0aXZpdHlCeUtleSxcbiAgICAgICAgbWFya0FjdGl2aXR5S2V5QXNSZWFkLFxuICAgICAgICByb290RWxlbWVudFJlZlxuICAgICAgXVxuICAgICk7XG5cbiAgICB1c2VPYnNlcnZlU2Nyb2xsUG9zaXRpb24oaGFuZGxlU2Nyb2xsUG9zaXRpb24pO1xuXG4gICAgY29uc3QgaGFuZGxlVHJhbnNjcmlwdEtleURvd24gPSB1c2VDYWxsYmFjazxLZXlib2FyZEV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD4+KFxuICAgICAgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XG5cbiAgICAgICAgY29uc3QgZnJvbUVuZE9mVHJhbnNjcmlwdEluZGljYXRvciA9IHRhcmdldCA9PT0gdGVybWluYXRvclJlZi5jdXJyZW50O1xuICAgICAgICBjb25zdCBmcm9tVHJhbnNjcmlwdCA9IHRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldDtcblxuICAgICAgICBpZiAoIWZyb21FbmRPZlRyYW5zY3JpcHRJbmRpY2F0b3IgJiYgIWZyb21UcmFuc2NyaXB0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhhbmRsZWQgPSB0cnVlO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgIGZvY3VzUmVsYXRpdmVBY3Rpdml0eShmcm9tRW5kT2ZUcmFuc2NyaXB0SW5kaWNhdG9yID8gMCA6IDEpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1tYWdpYy1udW1iZXJzXG4gICAgICAgICAgICBmb2N1c1JlbGF0aXZlQWN0aXZpdHkoZnJvbUVuZE9mVHJhbnNjcmlwdEluZGljYXRvciA/IDAgOiAtMSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgICAgICBmb2N1c1JlbGF0aXZlQWN0aXZpdHkoSW5maW5pdHkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGNhcHR1cmluZyBwbGFpbiBFTlRFUi5cbiAgICAgICAgICAgIC8vIFdoZW4gc2NyZWVuIHJlYWRlciBpcyBub3QgcnVubmluZywgb3Igc2NyZWVuIHJlYWRlciBpcyBydW5uaW5nIG91dHNpZGUgb2Ygc2NhbiBtb2RlLCB0aGUgRU5URVIga2V5IHdpbGwgYmUgY2FwdHVyZWQgaGVyZS5cbiAgICAgICAgICAgIGlmICghZnJvbUVuZE9mVHJhbnNjcmlwdEluZGljYXRvcikge1xuICAgICAgICAgICAgICBjb25zdCBib2R5OiBIVE1MRWxlbWVudCA9IGFjdGl2aXR5RWxlbWVudE1hcFJlZi5jdXJyZW50XG4gICAgICAgICAgICAgICAgLmdldChmb2N1c2VkQWN0aXZpdHlLZXlSZWYuY3VycmVudClcbiAgICAgICAgICAgICAgICA/LnF1ZXJ5U2VsZWN0b3IoJy53ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X19hY3Rpdml0eS1ib2R5Jyk7XG5cbiAgICAgICAgICAgICAgdGFiYmFibGVFbGVtZW50cyhib2R5KVswXT8uZm9jdXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgZm9jdXMoJ3NlbmRCb3hXaXRob3V0S2V5Ym9hcmQnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgICAgICBmb2N1c1JlbGF0aXZlQWN0aXZpdHkoLUluZmluaXR5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGhhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgLy8gSWYgYSBjdXN0b20gSFRNTCBjb250cm9sIHdhbnRzIHRvIGhhbmRsZSB1cC9kb3duIGFycm93LCB3ZSB3aWxsIHByZXZlbnQgdGhlbSBmcm9tIGxpc3RlbmluZyB0byB0aGlzIGV2ZW50IHRvIHByZXZlbnQgYnVncyBkdWUgdG8gaGFuZGxpbmcgYXJyb3cga2V5cyB0d2ljZS5cbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFthY3Rpdml0eUVsZW1lbnRNYXBSZWYsIGZvY3VzLCBmb2N1c2VkQWN0aXZpdHlLZXlSZWYsIGZvY3VzUmVsYXRpdmVBY3Rpdml0eSwgdGVybWluYXRvclJlZl1cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlVHJhbnNjcmlwdEtleURvd25DYXB0dXJlID0gdXNlQ2FsbGJhY2s8S2V5Ym9hcmRFdmVudEhhbmRsZXI8SFRNTERpdkVsZW1lbnQ+PihcbiAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgeyBhbHRLZXksIGN0cmxLZXksIGtleSwgbWV0YUtleSwgdGFyZ2V0IH0gPSBldmVudDtcblxuICAgICAgICBpZiAoYWx0S2V5IHx8IChjdHJsS2V5ICYmIGtleSAhPT0gJ3YnKSB8fCBtZXRhS2V5IHx8ICghaW5wdXR0YWJsZUtleShrZXkpICYmIGtleSAhPT0gJ0JhY2tzcGFjZScpKSB7XG4gICAgICAgICAgLy8gSWdub3JlIGlmIG9uZSBvZiB0aGUgdXRpbGl0eSBrZXkgKGV4Y2VwdCBTSElGVCkgaXMgcHJlc3NlZFxuICAgICAgICAgIC8vIEUuZy4gQ1RSTC1DIG9uIGEgbGluayBpbiBvbmUgb2YgdGhlIG1lc3NhZ2Ugc2hvdWxkIG5vdCBqdW1wIHRvIGNoYXQgYm94XG4gICAgICAgICAgLy8gRS5nLiBcIkFcIiBvciBcIkJhY2tzcGFjZVwiIHNob3VsZCBqdW1wIHRvIGNoYXQgYm94XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VuZCBrZXlzdHJva2VzIHRvIHNlbmQgYm94IGlmIHdlIGFyZSBmb2N1c2luZyBvbiB0aGUgdHJhbnNjcmlwdCBvciB0ZXJtaW5hdG9yLlxuICAgICAgICBpZiAodGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0IHx8IHRhcmdldCA9PT0gdGVybWluYXRvclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICBmb2N1cygnc2VuZEJveCcpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2ZvY3VzXVxuICAgICk7XG5cbiAgICB1c2VSZWdpc3RlckZvY3VzVHJhbnNjcmlwdCh1c2VDYWxsYmFjaygoKSA9PiBmb2N1c0J5QWN0aXZpdHlLZXkodW5kZWZpbmVkKSwgW2ZvY3VzQnlBY3Rpdml0eUtleV0pKTtcblxuICAgIC8vIFdoZW4gdGhlIGZvY3VzaW5nIGFjdGl2aXR5IGhhcyBjaGFuZ2VkLCBkaXNwYXRjaCBhbiBldmVudCB0byBvYnNlcnZlcnMgb2YgXCJ1c2VPYnNlcnZlVHJhbnNjcmlwdEZvY3VzXCIuXG4gICAgY29uc3QgZGlzcGF0Y2hUcmFuc2NyaXB0Rm9jdXNCeUFjdGl2aXR5S2V5ID0gdXNlRGlzcGF0Y2hUcmFuc2NyaXB0Rm9jdXNCeUFjdGl2aXR5S2V5KCk7XG5cbiAgICAvLyBEaXNwYXRjaCBhIFwidHJhbnNjcmlwdCBmb2N1c1wiIGV2ZW50IGJhc2VkIG9uIHVzZXIgc2VsZWN0aW9uLlxuICAgIC8vIFdlIHNob3VsZCBub3QgZGlzcGF0Y2ggXCJ0cmFuc2NyaXB0IGZvY3VzXCIgd2hlbiBhIG5ldyBhY3Rpdml0eSBjb21lLiBBbHRob3VnaCB0aGUgc2VsZWN0aW9uIGNoYW5nZSwgaXQgaXMgbm90IGluaXRpYXRlZCBmcm9tIHRoZSB1c2VyLlxuICAgIHVzZU1lbW8oXG4gICAgICAoKSA9PiBkaXNwYXRjaFRyYW5zY3JpcHRGb2N1c0J5QWN0aXZpdHlLZXkoZm9jdXNlZEV4cGxpY2l0bHkgPyBmb2N1c2VkQWN0aXZpdHlLZXkgOiB1bmRlZmluZWQpLFxuICAgICAgW2Rpc3BhdGNoVHJhbnNjcmlwdEZvY3VzQnlBY3Rpdml0eUtleSwgZm9jdXNlZEFjdGl2aXR5S2V5LCBmb2N1c2VkRXhwbGljaXRseV1cbiAgICApO1xuXG4gICAgLy8gV2hlbiB0aGUgdHJhbnNjcmlwdCBpcyBiZWluZyBmb2N1c2VkIG9uLCB3ZSBzaG91bGQgZGlzcGF0Y2ggYSBcInRyYW5zY3JpcHRmb2N1c1wiIGV2ZW50LlxuICAgIGNvbnN0IGhhbmRsZUZvY3VzID0gdXNlQ2FsbGJhY2soXG4gICAgICAvLyBXZSBjYWxsIFwiZm9jdXNCeUFjdGl2aXR5S2V5XCIgd2l0aCBhY3Rpdml0eSBrZXkgb2YgXCJ0cnVlXCIuXG4gICAgICAvLyBJdCBtZWFucywgdHJpZXMgdG8gZm9jdXMgb24gYW55dGhpbmcuXG4gICAgICAoeyBjdXJyZW50VGFyZ2V0LCB0YXJnZXQgfSkgPT4gdGFyZ2V0ID09PSBjdXJyZW50VGFyZ2V0ICYmIGZvY3VzQnlBY3Rpdml0eUtleSh0cnVlLCBmYWxzZSksXG4gICAgICBbZm9jdXNCeUFjdGl2aXR5S2V5XVxuICAgICk7XG5cbiAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIGJ5IElFMTEuXG4gICAgLy8gV2hlbiB0aGUgdXNlciBjbGlja3Mgb24gYW5kIGVtcHR5IHNwYWNlIChhLmsuYS4gZmlsbGVyKSBpbiBhbiBlbXB0eSB0cmFuc2NyaXB0LCBJRTExIHNheXMgdGhlIGZvY3VzIGlzIG9uIHRoZSA8ZGl2IGNsYXNzTmFtZT1cImZpbGxlclwiPixcbiAgICAvLyBkZXNwaXRlIHRoZSBmYWN0IHRoZXJlIGFyZSBubyBcInRhYkluZGV4XCIgYXR0cmlidXRlcyBzZXQgb24gdGhlIGZpbGxlci5cbiAgICAvLyBXZSBuZWVkIHRvIGFydGlmaWNpYWxseSBzZW5kIHRoZSBmb2N1cyBiYWNrIHRvIHRoZSB0cmFuc2NyaXB0LlxuICAgIGNvbnN0IGhhbmRsZUZvY3VzRmlsbGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZm9jdXNCeUFjdGl2aXR5S2V5KHVuZGVmaW5lZCksIFtmb2N1c0J5QWN0aXZpdHlLZXldKTtcblxuICAgIC8vIFdoZW4gZm9jdXMgaW50byB0aGUgdHJhbnNjcmlwdCB1c2luZyBUQUIvU0hJRlQtVEFCLCBzY3JvbGwgdGhlIGZvY3VzZWQgYWN0aXZpdHkgaW50byB2aWV3LlxuICAgIHVzZU9ic2VydmVGb2N1c1Zpc2libGUoXG4gICAgICByb290RWxlbWVudFJlZixcbiAgICAgIHVzZUNhbGxiYWNrKCgpID0+IGZvY3VzQnlBY3Rpdml0eUtleSh1bmRlZmluZWQpLCBbZm9jdXNCeUFjdGl2aXR5S2V5XSlcbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgLy8gQWx0aG91Z2ggQW5kcm9pZCBUYWxrQmFjayAxMi4xIGRvZXMgbm90IHN1cHBvcnQgYGFyaWEtYWN0aXZlZGVzY2VuZGFudGAsIHdoZW4gdXNlZCwgaXQgYmVjb21lIGJ1Z2d5IGFuZCB3aWxsIG5hcnJhdGUgY29udGVudCB0d2ljZS5cbiAgICAgICAgLy8gV2UgYXJlIGRpc2FibGluZyBgYXJpYS1hY3RpdmVkZXNjZW5kYW50YCBmb3IgQW5kcm9pZC4gU2VlIDxBY3Rpdml0eVJvdz4gZm9yIGRldGFpbHMuXG4gICAgICAgIGFyaWEtYWN0aXZlZGVzY2VuZGFudD17YW5kcm9pZCA/IHVuZGVmaW5lZCA6IGFjdGl2ZURlc2NlbmRhbnRJZH1cbiAgICAgICAgYXJpYS1sYWJlbD17dHJhbnNjcmlwdEFyaWFMYWJlbH1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgICd3ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0JyxcbiAgICAgICAgICBiYXNpY1RyYW5zY3JpcHRTdHlsZVNldCArICcnLFxuICAgICAgICAgIHJvb3RDbGFzc05hbWUsXG4gICAgICAgICAgKGNsYXNzTmFtZSB8fCAnJykgKyAnJ1xuICAgICAgICApfVxuICAgICAgICBkaXI9e2RpcmVjdGlvbn1cbiAgICAgICAgb25Gb2N1cz17aGFuZGxlRm9jdXN9XG4gICAgICAgIG9uS2V5RG93bj17aGFuZGxlVHJhbnNjcmlwdEtleURvd259XG4gICAgICAgIG9uS2V5RG93bkNhcHR1cmU9e2hhbmRsZVRyYW5zY3JpcHRLZXlEb3duQ2FwdHVyZX1cbiAgICAgICAgcmVmPXtjYWxsYmFja1JlZn1cbiAgICAgICAgLy8gXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIiB3aWxsIG9ubHkgd29ya3Mgd2l0aCBhIG51bWJlciBvZiByb2xlcyBhbmQgaXQgbXVzdCBiZSBleHBsaWNpdGx5IHNldC5cbiAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLyNhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcbiAgICAgICAgcm9sZT1cImdyb3VwXCJcbiAgICAgICAgLy8gRm9yIHVwL2Rvd24gYXJyb3cga2V5IG5hdmlnYXRpb24gYWNyb3NzIGFjdGl2aXRpZXMsIHRoaXMgY29tcG9uZW50IG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIHRhYiBzZXF1ZW5jZS5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiIHdpbGwgbm90IGJlIG5hcnJhdGVkIHdoZW4gdGhlIHVzZXIgcHJlc3MgdXAvZG93biBhcnJvdyBrZXlzLlxuICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLTEuMS8ja2JkX2ZvY3VzX2FjdGl2ZWRlc2NlbmRhbnRcbiAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICA+XG4gICAgICAgIDxMaXZlUmVnaW9uVHJhbnNjcmlwdCBhY3Rpdml0eUVsZW1lbnRNYXBSZWY9e2FjdGl2aXR5RWxlbWVudE1hcFJlZn0gLz5cbiAgICAgICAgey8qIFRPRE86IFtQMl0gRml4IEVTTGludCBlcnJvciBgbm8tdXNlLWJlZm9yZS1kZWZpbmVgICovfVxuICAgICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZSAqL31cbiAgICAgICAgPEludGVybmFsVHJhbnNjcmlwdFNjcm9sbGFibGUgb25Gb2N1c0ZpbGxlcj17aGFuZGxlRm9jdXNGaWxsZXJ9IHRlcm1pbmF0b3JSZWY9e3Rlcm1pbmF0b3JSZWZ9PlxuICAgICAgICAgIHtyZW5kZXJpbmdFbGVtZW50cy5tYXAoXG4gICAgICAgICAgICAoe1xuICAgICAgICAgICAgICBhY3Rpdml0eSxcbiAgICAgICAgICAgICAgY2FsbGJhY2tSZWYsXG4gICAgICAgICAgICAgIGhpZGVUaW1lc3RhbXAsXG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgcmVuZGVyQWN0aXZpdHksXG4gICAgICAgICAgICAgIHJlbmRlckFjdGl2aXR5U3RhdHVzLFxuICAgICAgICAgICAgICByZW5kZXJBdmF0YXIsXG4gICAgICAgICAgICAgIHNob3dDYWxsb3V0XG4gICAgICAgICAgICB9KSA9PiAoXG4gICAgICAgICAgICAgIDxBY3Rpdml0eVJvdyBhY3Rpdml0eT17YWN0aXZpdHl9IGtleT17a2V5fSByZWY9e2NhbGxiYWNrUmVmfT5cbiAgICAgICAgICAgICAgICB7cmVuZGVyQWN0aXZpdHkoe1xuICAgICAgICAgICAgICAgICAgaGlkZVRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgIHJlbmRlckFjdGl2aXR5U3RhdHVzLFxuICAgICAgICAgICAgICAgICAgcmVuZGVyQXZhdGFyLFxuICAgICAgICAgICAgICAgICAgc2hvd0NhbGxvdXRcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9BY3Rpdml0eVJvdz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICApfVxuICAgICAgICA8L0ludGVybmFsVHJhbnNjcmlwdFNjcm9sbGFibGU+XG4gICAgICAgIHshIXJlbmRlcmluZ0VsZW1lbnRzLmxlbmd0aCAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPEZvY3VzUmVkaXJlY3RvciByZWRpcmVjdFJlZj17cm9vdEVsZW1lbnRSZWZ9IC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPXt0cnVlfVxuICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9e3Rlcm1pbmF0b3JMYWJlbElkfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X190ZXJtaW5hdG9yXCJcbiAgICAgICAgICAgICAgcmVmPXt0ZXJtaW5hdG9yUmVmfVxuICAgICAgICAgICAgICByb2xlPVwibm90ZVwiXG4gICAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX3Rlcm1pbmF0b3ItYm9keVwiPlxuICAgICAgICAgICAgICAgIHsvKiBgaWRgIGlzIHJlcXVpcmVkIGZvciBgYXJpYS1sYWJlbGxlZGJ5YCAqL31cbiAgICAgICAgICAgICAgICB7LyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2ZvcmJpZC1kb20tcHJvcHMgKi99XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X190ZXJtaW5hdG9yLXRleHRcIiBpZD17dGVybWluYXRvckxhYmVsSWR9PlxuICAgICAgICAgICAgICAgICAge3Rlcm1pbmF0b3JUZXh0fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICl9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fZm9jdXMtaW5kaWNhdG9yXCIgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbik7XG5cbkludGVybmFsVHJhbnNjcmlwdC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogJydcbn07XG5cbkludGVybmFsVHJhbnNjcmlwdC5wcm9wVHlwZXMgPSB7XG4gIC8vIFByb3BUeXBlcyBjYW5ub3QgdmFsaWRhdGUgcHJlY2lzZWx5IHdpdGggaXRzIFR5cGVTY3JpcHQgY291bnRlcnBhcnQuXG4gIC8vIEB0cy1pZ25vcmVcbiAgYWN0aXZpdHlFbGVtZW50TWFwUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1hcClcbiAgfSkuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG50eXBlIEludGVybmFsVHJhbnNjcmlwdFNjcm9sbGFibGVQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG4gIG9uRm9jdXNGaWxsZXI6ICgpID0+IHZvaWQ7XG4gIHRlcm1pbmF0b3JSZWY6IE11dGFibGVSZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xufTtcblxuLy8gU2VwYXJhdGluZyBoaWdoLWZyZXF1ZW5jeSBob29rcyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuY29uc3QgSW50ZXJuYWxUcmFuc2NyaXB0U2Nyb2xsYWJsZTogRkM8SW50ZXJuYWxUcmFuc2NyaXB0U2Nyb2xsYWJsZVByb3BzPiA9ICh7XG4gIGNoaWxkcmVuLFxuICBvbkZvY3VzRmlsbGVyLFxuICB0ZXJtaW5hdG9yUmVmXG59KSA9PiB7XG4gIGNvbnN0IFt7IGFjdGl2aXRpZXM6IGFjdGl2aXRpZXNTdHlsZVNldCB9XSA9IHVzZVN0eWxlU2V0KCk7XG4gIGNvbnN0IFthbmltYXRpbmdUb0VuZF06IFtib29sZWFuXSA9IHVzZUFuaW1hdGluZ1RvRW5kKCk7XG4gIGNvbnN0IFthdEVuZF06IFtib29sZWFuXSA9IHVzZUF0RW5kKCk7XG4gIGNvbnN0IFssIHVucmVhZEFjdGl2aXR5S2V5c10gPSB1c2VBY3Rpdml0eUtleXNCeVJlYWQoKTtcbiAgY29uc3QgW3N0aWNreV06IFtib29sZWFuXSA9IHVzZVN0aWNreSgpO1xuICBjb25zdCBbc3R5bGVPcHRpb25zXSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuICBjb25zdCBmb2N1c0J5QWN0aXZpdHlLZXkgPSB1c2VGb2N1c0J5QWN0aXZpdHlLZXkoKTtcbiAgY29uc3QgbG9jYWxpemUgPSB1c2VMb2NhbGl6ZXIoKTtcbiAgY29uc3QgbWFya0FjdGl2aXR5S2V5QXNSZWFkID0gdXNlTWFya0FjdGl2aXR5S2V5QXNSZWFkKCk7XG4gIGNvbnN0IG1hcmtBbGxBc0Fja25vd2xlZGdlZCA9IHVzZU1hcmtBbGxBc0Fja25vd2xlZGdlZCgpO1xuICBjb25zdCBzY3JvbGxUb0VuZDogKG9wdGlvbnM/OiBTY3JvbGxUb09wdGlvbnMpID0+IHZvaWQgPSB1c2VTY3JvbGxUb0VuZCgpO1xuXG4gIGNvbnN0IHByZXZTdGlja3kgPSB1c2VQcmV2aW91cyhzdGlja3kpO1xuICBjb25zdCB0cmFuc2NyaXB0Um9sZURlc2NyaXB0aW9uID0gbG9jYWxpemUoJ1RSQU5TQ1JJUFRfQVJJQV9ST0xFX0FMVCcpO1xuXG4gIGNvbnN0IHN0aWNreUNoYW5nZWRUb1RydWUgPSBwcmV2U3RpY2t5ICE9PSBzdGlja3kgJiYgc3RpY2t5O1xuXG4gIC8vIEFja25vd2xlZGdlZCBtZWFucyBlaXRoZXI6XG4gIC8vIDEuIFRoZSB1c2VyIHNlbnQgYSBtZXNzYWdlXG4gIC8vICAgIC0gV2UgZG9uJ3QgbmVlZCBhIGNvbmRpdGlvbiBoZXJlLiBXaGVuIFdlYiBDaGF0IHNlbmRzIHRoZSB1c2VyJ3MgbWVzc2FnZSwgaXQgd2lsbCBzY3JvbGwgdG8gYm90dG9tLCBhbmQgaXQgd2lsbCB0cmlnZ2VyIGNvbmRpdGlvbiAyIGJlbG93LlxuICAvLyAyLiBUaGUgdXNlciBzY3JvbGwgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdHJhbnNjcmlwdCwgZnJvbSBhIG5vbi1ib3R0b20gc2Nyb2xsIHBvc2l0aW9uXG4gIC8vICAgIC0gSWYgdGhlIHRyYW5zY3JpcHQgaXMgYWxyZWFkeSBhdCB0aGUgYm90dG9tLCB0aGUgdXNlciBuZWVkcyB0byBzY3JvbGwgdXAgYW5kIHRoZW4gZ28gYmFjayBkb3duXG4gIC8vICAgIC0gV2hhdCBoYXBwZW5zIGlmIHdlIGFyZSByZWxheGluZyBcInNjcm9sbGVkIGZyb20gYSBub24tYm90dG9tIHNjcm9sbCBwb3NpdGlvblwiOlxuICAvLyAgICAgIDEuIFRoZSBjb25kaXRpb24gd2lsbCBiZWNvbWUgc29sZWx5IFwiYXQgdGhlIGJvdHRvbSBvZiB0aGUgdHJhbnNjcmlwdFwiXG4gIC8vICAgICAgMi4gQXV0by1zY3JvbGwgd2lsbCBhbHdheXMgc2Nyb2xsIHRoZSB0cmFuc2NyaXB0IHRvIHRoZSBib3R0b21cbiAgLy8gICAgICAzLiBXZWIgQ2hhdCB3aWxsIGFsd2F5cyBhY2tub3dsZWRnZSBhbGwgYWN0aXZpdGllcyBhcyBpdCBpcyBhdCB0aGUgYm90dG9tXG4gIC8vICAgICAgNC4gQWNrbm93bGVkZ2UgZmxhZyBiZWNvbWUgdXNlbGVzc1xuICAvLyAgICAgIDUuIFRoZXJlZm9yZSwgZXZlbiB0aGUgZGV2ZWxvcGVyIHNldCBcInBhdXNlIGFmdGVyIDMgYWN0aXZpdGllc1wiLCBpZiBhY3Rpdml0aWVzIGFyZSBjb21pbmcgaW4gYXQgYSBzbG93IHBhY2UgKG5vdCBiYXRjaGVkIGluIGEgc2luZ2xlIHJlbmRlcilcbiAgLy8gICAgICAgICBXZWIgQ2hhdCB3aWxsIGtlZXAgc2Nyb2xsaW5nIGFuZCBub3Qgc25hcHBlZC9wYXVzZWRcblxuICAvLyBOb3RlOiBXaGVuIFdlYiBDaGF0IGlzIGxvYWRlZCwgdGhlcmUgYXJlIG5vIGFjdGl2aXRpZXMgYWNrbm93bGVkZ2VkLiBXZSBuZWVkIHRvIGFzc3VtZSBhbGwgYXJyaXZpbmcgYWN0aXZpdGllcyBhcmUgYWNrbm93bGVkZ2VkIHVudGlsIGVuZC11c2VyIHNlbmRzIHRoZWlyIGZpcnN0IGFjdGl2aXR5LlxuICAvLyAgICAgICBBY3Rpdml0aWVzIGxvYWRlZCBpbml0aWFsbHkgY291bGQgYmUgZnJvbSBjb252ZXJzYXRpb24gaGlzdG9yeS4gV2l0aG91dCBhc3N1bWluZyBhY2tub3dsZWRnZW1lbnQsIFdlYiBDaGF0IHdpbGwgbm90IHNjcm9sbCBpbml0aWFsbHkgKGFzIGV2ZXJ5dGhpbmcgaXMgbm90IGFja25vd2xlZGdlZCkuXG4gIC8vICAgICAgIEl0IHdvdWxkIGJlIGJldHRlciBpZiB0aGUgY2hhdCBhZGFwdGVyIHNob3VsZCBsZXQgV2ViIENoYXQga25vdyBpZiB0aGUgYWN0aXZpdHkgaXMgbG9hZGVkIGZyb20gaGlzdG9yeSBvciBub3QuXG5cbiAgLy8gVE9ETzogW1AyXSAjMzY3MCBNb3ZlIHRoZSBcImNvbnZlcnNhdGlvbiBoaXN0b3J5IGFja25vd2xlZGdlbWVudFwiIGxvZ2ljIG1lbnRpb25lZCBhYm92ZSB0byBwb2x5ZmlsbCBvZiBjaGF0IGFkYXB0ZXJzLlxuICAvLyAgICAgICAxLiBDaGF0IGFkYXB0ZXIgc2hvdWxkIHNlbmQgXCJhY2tub3dsZWRnZWRcIiBhcyBwYXJ0IG9mIFwiY2hhbm5lbERhdGFcIlxuICAvLyAgICAgICAyLiBJZiBcImFja25vd2xlZGdlZFwiIGlzIFwidW5kZWZpbmVkXCIsIHdlIHNldCBpdCB0bzpcbiAgLy8gICAgICAgICAgYS4gdHJ1ZSwgaWYgdGhlcmUgYXJlIG5vIGVncmVzcyBhY3Rpdml0aWVzIHlldFxuICAvLyAgICAgICAgICBiLiBPdGhlcndpc2UsIGZhbHNlXG5cbiAgdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgc3RpY2t5Q2hhbmdlZFRvVHJ1ZSAmJlxuICAgICAgLy8gVE9ETzogW1AyXSBCb3RoIGBtYXJrQWN0aXZpdHlLZXlBc1JlYWRgIGFuZCBgbWFya0FsbEFzQWNrbm93bGVkZ2VkYCBob29rIGFyZSBzZXR0ZXJzIG9mIHVzZVN0YXRlLlxuICAgICAgLy8gICAgICAgVGhpcyBtZWFucywgaW4gYSByZW5kZXIgbG9vcCwgd2Ugd2lsbCBiZSBjYWxsaW5nIHNldHRlciBhbmQgd2lsbCBjYXVzZSBhbm90aGVyIHJlLXJlbmRlci5cbiAgICAgIC8vICAgICAgIFRoaXMgaXMgbm90IHRyaXZpYWwgYnV0IHdlIHNob3VsZCB0aGluayBpZiB0aGVyZSBpcyBhIHdheSB0byBhdm9pZCB0aGlzLlxuICAgICAgbWFya0FsbEFzQWNrbm93bGVkZ2VkKCksXG4gICAgW21hcmtBbGxBc0Fja25vd2xlZGdlZCwgc3RpY2t5Q2hhbmdlZFRvVHJ1ZV1cbiAgKTtcblxuICBjb25zdCBbZmxhdHRlbmVkQWN0aXZpdHlUcmVlV2l0aFJlbmRlcmVyXSA9IHVzZUFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlcih7IGZsYXQ6IHRydWUgfSk7XG4gIGNvbnN0IGdldEtleUJ5QWN0aXZpdHkgPSB1c2VHZXRLZXlCeUFjdGl2aXR5KCk7XG5cbiAgY29uc3QgcmVuZGVyaW5nQWN0aXZpdHlLZXlzOiBzdHJpbmdbXSA9IHVzZU1lbW88c3RyaW5nW10+KFxuICAgICgpID0+IGZsYXR0ZW5lZEFjdGl2aXR5VHJlZVdpdGhSZW5kZXJlci5tYXAoKHsgYWN0aXZpdHkgfSkgPT4gZ2V0S2V5QnlBY3Rpdml0eShhY3Rpdml0eSkpLFxuICAgIFtmbGF0dGVuZWRBY3Rpdml0eVRyZWVXaXRoUmVuZGVyZXIsIGdldEtleUJ5QWN0aXZpdHldXG4gICk7XG5cbiAgY29uc3QgcmVuZGVyaW5nQWN0aXZpdHlLZXlzUmVmID0gdXNlVmFsdWVSZWYocmVuZGVyaW5nQWN0aXZpdHlLZXlzKTtcblxuICAvLyBUbyBwcmV2ZW50IGZsYXNoeSBidXR0b24sIHdlIGFyZSBub3Qgd2FpdGluZyBmb3IgYW5vdGhlciByZW5kZXIgbG9vcCB0byB1cGRhdGUgdGhlIGBbcmVhZEFjdGl2aXR5S2V5cywgdW5yZWFkQWN0aXZpdHlLZXlzXWAgc3RhdGUuXG4gIC8vIEluc3RlYWQsIHdlIGFyZSBidWlsZGluZyB0aGUgbmV4dCBvbmUgaW4gdGhpcyBgdXNlTWVtb2AgY2FsbC5cbiAgY29uc3QgbmV4dFVucmVhZEFjdGl2aXR5S2V5cyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIC8vIFRoaXMgY29kZSBuZWVkIHRvIGJlIGNhcmVmdWwgcmV2aWV3ZWQgYXMgaXQgd2lsbCBjYXVzZSBhbm90aGVyIHJlbmRlci4gVGhlIGNvZGUgc2hvdWxkIGJlIGNvbnZlcmdpbmcuXG4gICAgLy8gQWZ0ZXIgd2UgY2FsbCBgbWFya0FjdGl2aXR5S2V5QXNSZWFkYCwgZXZlcnl0aGluZyB3aWxsIGJlIHJlYWQgYW5kIG5vdGhpbmcgd2lsbCBiZSB1bnJlYWQuXG4gICAgLy8gVGhhdCBtZWFucywgaW4gbmV4dCByZW5kZXIsIGB1bnJlYWRBY3Rpdml0eUtleXNgIHdpbGwgYmUgZW1wdGllZCBhbmQgdGhlIGBtYXJrQWN0aXZpdHlLZXlBc1JlYWRgIHdpbGwgbm90IGdldCBjYWxsZWQgYWdhaW4uXG4gICAgaWYgKHN0aWNreSAmJiB1bnJlYWRBY3Rpdml0eUtleXMubGVuZ3RoKSB7XG4gICAgICBtYXJrQWN0aXZpdHlLZXlBc1JlYWQodW5yZWFkQWN0aXZpdHlLZXlzW3VucmVhZEFjdGl2aXR5S2V5cy5sZW5ndGggLSAxXSk7XG5cbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5yZWFkQWN0aXZpdHlLZXlzO1xuICB9LCBbbWFya0FjdGl2aXR5S2V5QXNSZWFkLCBzdGlja3ksIHVucmVhZEFjdGl2aXR5S2V5c10pO1xuXG4gIGNvbnN0IG5leHRVbnJlYWRBY3Rpdml0eUtleXNSZWYgPSB1c2VWYWx1ZVJlZihuZXh0VW5yZWFkQWN0aXZpdHlLZXlzKTtcblxuICAvLyBJZiB3ZSBhcmUgcmVuZGVyaW5nIGFueXRoaW5nIHRoYXQgaXMgdW5yZWFkLCB3ZSBzaG91bGQgc2hvdyB0aGUgXCJOZXcgbWVzc2FnZXNcIiBidXR0b24uXG4gIC8vIE5vdCBldmVyeXRoaW5nIGluIHRoZSBgdW5yZWFkQWN0aXZpdHlLZXlzYCBhcmUgcmVuZGVyZWQsIHNheSwgYm90IHR5cGluZyBpbmRpY2F0b3IuXG4gIC8vIFdlIHNob3VsZCBub3Qgc2hvdyB0aGUgXCJOZXcgbWVzc2FnZXNcIiBidXR0b24gZm9yIGJvdCB0eXBpbmcgaW5kaWNhdG9yIGFzIGl0IHdpbGwgY29uZnVzZSB0aGUgdXNlci5cbiAgY29uc3QgdW5yZWFkID0gdXNlTWVtbyhcbiAgICAoKSA9PiBuZXh0VW5yZWFkQWN0aXZpdHlLZXlzLnNvbWUoa2V5ID0+IHJlbmRlcmluZ0FjdGl2aXR5S2V5cy5pbmNsdWRlcyhrZXkpKSxcbiAgICBbcmVuZGVyaW5nQWN0aXZpdHlLZXlzLCBuZXh0VW5yZWFkQWN0aXZpdHlLZXlzXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVNjcm9sbFRvRW5kQnV0dG9uQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2Nyb2xsVG9FbmQoeyBiZWhhdmlvcjogJ3Ntb290aCcgfSk7XG5cbiAgICBjb25zdCB7IGN1cnJlbnQ6IHJlbmRlcmluZ0FjdGl2aXR5S2V5cyB9ID0gcmVuZGVyaW5nQWN0aXZpdHlLZXlzUmVmO1xuXG4gICAgLy8gQWZ0ZXIgdGhlIFwiTmV3IG1lc3NhZ2VcIiBidXR0b24gaXMgY2xpY2tlZCwgZm9jdXMgb24gdGhlIGZpcnN0IHVucmVhZCBhY3Rpdml0eSB3aGljaCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgIGNvbnN0IGZpcnN0VW5yZWFkUmVuZGVyaW5nQWN0aXZpdHlLZXkgPSBuZXh0VW5yZWFkQWN0aXZpdHlLZXlzUmVmLmN1cnJlbnQuZmluZChrZXkgPT5cbiAgICAgIHJlbmRlcmluZ0FjdGl2aXR5S2V5cy5pbmNsdWRlcyhrZXkpXG4gICAgKTtcblxuICAgIGlmIChmaXJzdFVucmVhZFJlbmRlcmluZ0FjdGl2aXR5S2V5KSB7XG4gICAgICBmb2N1c0J5QWN0aXZpdHlLZXkoZmlyc3RVbnJlYWRSZW5kZXJpbmdBY3Rpdml0eUtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHVucmVhZCBhY3Rpdml0eSwgc2VuZCB0aGUgZm9jdXMgdG8gdGhlIHRlcm1pbmF0b3IgYmxvY2suXG4gICAgICB0ZXJtaW5hdG9yUmVmLmN1cnJlbnQ/LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbZm9jdXNCeUFjdGl2aXR5S2V5LCBuZXh0VW5yZWFkQWN0aXZpdHlLZXlzUmVmLCByZW5kZXJpbmdBY3Rpdml0eUtleXNSZWYsIHNjcm9sbFRvRW5kLCB0ZXJtaW5hdG9yUmVmXSk7XG5cbiAgY29uc3QgcmVuZGVyU2Nyb2xsVG9FbmRCdXR0b24gPSB1c2VDcmVhdGVTY3JvbGxUb0VuZEJ1dHRvblJlbmRlcmVyKCkoe1xuICAgIGF0RW5kOiBhbmltYXRpbmdUb0VuZCB8fCBhdEVuZCB8fCBzdGlja3ksXG4gICAgc3R5bGVPcHRpb25zLFxuICAgIHVucmVhZFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIHtyZW5kZXJTY3JvbGxUb0VuZEJ1dHRvbiAmJiByZW5kZXJTY3JvbGxUb0VuZEJ1dHRvbih7IG9uQ2xpY2s6IGhhbmRsZVNjcm9sbFRvRW5kQnV0dG9uQ2xpY2sgfSl9XG4gICAgICB7ISFSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgJiYgPEZvY3VzUmVkaXJlY3RvciByZWRpcmVjdFJlZj17dGVybWluYXRvclJlZn0gLz59XG4gICAgICA8UmVhY3RTY3JvbGxUb0JvdHRvbVBhbmVsIGNsYXNzTmFtZT1cIndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX3Njcm9sbGFibGVcIj5cbiAgICAgICAgPGRpdiBhcmlhLWhpZGRlbj17dHJ1ZX0gY2xhc3NOYW1lPVwid2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fZmlsbGVyXCIgb25Gb2N1cz17b25Gb2N1c0ZpbGxlcn0gLz5cbiAgICAgICAgPHNlY3Rpb25cbiAgICAgICAgICBhcmlhLXJvbGVkZXNjcmlwdGlvbj17dHJhbnNjcmlwdFJvbGVEZXNjcmlwdGlvbn1cbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoYWN0aXZpdGllc1N0eWxlU2V0ICsgJycsICd3ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X190cmFuc2NyaXB0Jyl9XG4gICAgICAgICAgcm9sZT1cImZlZWRcIlxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDxCYXNpY1R5cGluZ0luZGljYXRvciAvPlxuICAgICAgPC9SZWFjdFNjcm9sbFRvQm90dG9tUGFuZWw+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKTtcbn07XG5cbkludGVybmFsVHJhbnNjcmlwdFNjcm9sbGFibGUucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBvbkZvY3VzRmlsbGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0ZXJtaW5hdG9yUmVmOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWRcbn07XG5cbnR5cGUgU2Nyb2xsZXIgPSAoeyBvZmZzZXRIZWlnaHQsIHNjcm9sbFRvcCB9OiB7IG9mZnNldEhlaWdodDogbnVtYmVyOyBzY3JvbGxUb3A6IG51bWJlciB9KSA9PiBudW1iZXI7XG5cbi8vIFwic2Nyb2xsZXJcIiBpcyB0aGUgYXV0by1zY3JvbGwgbGltaXRlciwgYS5rLmEuIGF1dG8gc2Nyb2xsIHNuYXAuXG5jb25zdCB1c2VTY3JvbGxlciA9IChhY3Rpdml0eUVsZW1lbnRNYXBSZWY6IE11dGFibGVSZWZPYmplY3Q8QWN0aXZpdHlFbGVtZW50TWFwPik6IFNjcm9sbGVyID0+IHtcbiAgY29uc3QgW2FjdGl2aXR5S2V5c10gPSB1c2VBY3Rpdml0eUtleXMoKTtcbiAgY29uc3QgW2xhc3RBY2tub3dsZWRnZWRBY3Rpdml0eUtleV0gPSB1c2VMYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXkoKTtcbiAgY29uc3QgW3N0eWxlT3B0aW9uc10gPSB1c2VTdHlsZU9wdGlvbnMoKTtcblxuICBjb25zdCBhY3Rpdml0eUtleXNSZWYgPSB1c2VWYWx1ZVJlZihhY3Rpdml0eUtleXMpO1xuICBjb25zdCBsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlSZWYgPSB1c2VWYWx1ZVJlZihsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXkpO1xuICBjb25zdCBzdHlsZU9wdGlvbnNSZWYgPSB1c2VWYWx1ZVJlZihzdHlsZU9wdGlvbnMpO1xuXG4gIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAoeyBvZmZzZXRIZWlnaHQsIHNjcm9sbFRvcCB9KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgICBhdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHksXG4gICAgICAgICAgYXV0b1Njcm9sbFNuYXBPbkFjdGl2aXR5T2Zmc2V0LFxuICAgICAgICAgIGF1dG9TY3JvbGxTbmFwT25QYWdlLFxuICAgICAgICAgIGF1dG9TY3JvbGxTbmFwT25QYWdlT2Zmc2V0XG4gICAgICAgIH1cbiAgICAgIH0gPSBzdHlsZU9wdGlvbnNSZWY7XG5cbiAgICAgIGNvbnN0IHBhdGNoZWRBdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHkgPVxuICAgICAgICB0eXBlb2YgYXV0b1Njcm9sbFNuYXBPbkFjdGl2aXR5ID09PSAnbnVtYmVyJ1xuICAgICAgICAgID8gTWF0aC5tYXgoMCwgYXV0b1Njcm9sbFNuYXBPbkFjdGl2aXR5KVxuICAgICAgICAgIDogYXV0b1Njcm9sbFNuYXBPbkFjdGl2aXR5XG4gICAgICAgICAgPyAxXG4gICAgICAgICAgOiAwO1xuICAgICAgY29uc3QgcGF0Y2hlZEF1dG9TY3JvbGxTbmFwT25QYWdlID1cbiAgICAgICAgdHlwZW9mIGF1dG9TY3JvbGxTbmFwT25QYWdlID09PSAnbnVtYmVyJ1xuICAgICAgICAgID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYXV0b1Njcm9sbFNuYXBPblBhZ2UpKVxuICAgICAgICAgIDogYXV0b1Njcm9sbFNuYXBPblBhZ2VcbiAgICAgICAgICA/IDFcbiAgICAgICAgICA6IDA7XG4gICAgICBjb25zdCBwYXRjaGVkQXV0b1Njcm9sbFNuYXBPbkFjdGl2aXR5T2Zmc2V0ID1cbiAgICAgICAgdHlwZW9mIGF1dG9TY3JvbGxTbmFwT25BY3Rpdml0eU9mZnNldCA9PT0gJ251bWJlcicgPyBhdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHlPZmZzZXQgOiAwO1xuICAgICAgY29uc3QgcGF0Y2hlZEF1dG9TY3JvbGxTbmFwT25QYWdlT2Zmc2V0ID1cbiAgICAgICAgdHlwZW9mIGF1dG9TY3JvbGxTbmFwT25QYWdlT2Zmc2V0ID09PSAnbnVtYmVyJyA/IGF1dG9TY3JvbGxTbmFwT25QYWdlT2Zmc2V0IDogMDtcblxuICAgICAgaWYgKHBhdGNoZWRBdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHkgfHwgcGF0Y2hlZEF1dG9TY3JvbGxTbmFwT25QYWdlKSB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudDogYWN0aXZpdHlFbGVtZW50TWFwIH0gPSBhY3Rpdml0eUVsZW1lbnRNYXBSZWY7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudDogYWN0aXZpdHlLZXlzIH0gPSBhY3Rpdml0eUtleXNSZWY7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudDogbGFzdEFja25vd2xlZGdlZEFjdGl2aXR5S2V5IH0gPSBsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlSZWY7XG4gICAgICAgIGNvbnN0IHZhbHVlczogbnVtYmVyW10gPSBbXTtcblxuICAgICAgICBjb25zdCBsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlJbmRleCA9IGFjdGl2aXR5S2V5cy5pbmRleE9mKGxhc3RBY2tub3dsZWRnZWRBY3Rpdml0eUtleSk7XG5cbiAgICAgICAgaWYgKH5sYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlJbmRleCkge1xuICAgICAgICAgIC8vIFRoZSBhY3Rpdml0eSB0aGF0IHdlIGFja25vd2xlZGdlZCBjb3VsZCBiZSBub3QgcmVuZGVyZWQsIHN1Y2ggYXMgcG9zdCBiYWNrIGFjdGl2aXR5LlxuICAgICAgICAgIC8vIFdoZW4gY2FsY3VsYXRpbmcgc2Nyb2xsIHNuYXAsIHdlIGNhbiBvbmx5IGJhc2Ugb24gdGhlIGZpcnN0IHVuYWNrbm93bGVkZ2VkLWFuZC1yZW5kZXJpbmcgYWN0aXZpdHkuXG4gICAgICAgICAgY29uc3QgcmVuZGVyaW5nQWN0aXZpdHlLZXlzID0gQXJyYXkuZnJvbShhY3Rpdml0eUVsZW1lbnRNYXAua2V5cygpKTtcbiAgICAgICAgICBsZXQgZmlyc3RVbmFja25vd2xlZGdlZEFjdGl2aXR5RWxlbWVudEluZGV4ID0gLTE7XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGFja25vd2xlZGdlZEFjdGl2aXR5S2V5IG9mIGFjdGl2aXR5S2V5cy5zbGljZSgwLCBsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlJbmRleCArIDEpLnJldmVyc2UoKSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSByZW5kZXJpbmdBY3Rpdml0eUtleXMuaW5kZXhPZihhY2tub3dsZWRnZWRBY3Rpdml0eUtleSk7XG5cbiAgICAgICAgICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSByZW5kZXJpbmdBY3Rpdml0eUtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGZpcnN0VW5hY2tub3dsZWRnZWRBY3Rpdml0eUVsZW1lbnRJbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh+Zmlyc3RVbmFja25vd2xlZGdlZEFjdGl2aXR5RWxlbWVudEluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBhY3Rpdml0eUVsZW1lbnRzID0gQXJyYXkuZnJvbShhY3Rpdml0eUVsZW1lbnRNYXAudmFsdWVzKCkpO1xuXG4gICAgICAgICAgICBpZiAocGF0Y2hlZEF1dG9TY3JvbGxTbmFwT25BY3Rpdml0eSkge1xuICAgICAgICAgICAgICAvLyBHZXRzIHRoZSBhY3Rpdml0eSBlbGVtZW50IHdoaWNoIHdlIHNob3VsZCBzbmFwIHRvLlxuICAgICAgICAgICAgICBjb25zdCBudGhVbmFja25vd2xlZGdlZEFjdGl2aXR5RWxlbWVudCA9XG4gICAgICAgICAgICAgICAgYWN0aXZpdHlFbGVtZW50c1tmaXJzdFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlFbGVtZW50SW5kZXggKyBwYXRjaGVkQXV0b1Njcm9sbFNuYXBPbkFjdGl2aXR5IC0gMV07XG5cbiAgICAgICAgICAgICAgaWYgKG50aFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbnRoVW5hY2tub3dsZWRnZWRBY3Rpdml0eUJvdW5kaW5nQm94RWxlbWVudCA9IG50aFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlFbGVtZW50Py5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgJy53ZWJjaGF0X19iYXNpYy10cmFuc2NyaXB0X19hY3Rpdml0eS1hY3RpdmUtZGVzY2VuZGFudCdcbiAgICAgICAgICAgICAgICApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IG50aFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlPZmZzZXRUb3AgPVxuICAgICAgICAgICAgICAgICAgbnRoVW5hY2tub3dsZWRnZWRBY3Rpdml0eUVsZW1lbnQub2Zmc2V0VG9wICsgbnRoVW5hY2tub3dsZWRnZWRBY3Rpdml0eUJvdW5kaW5nQm94RWxlbWVudC5vZmZzZXRUb3A7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChcbiAgICAgICAgICAgICAgICAgIG50aFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlPZmZzZXRUb3AgK1xuICAgICAgICAgICAgICAgICAgICBudGhVbmFja25vd2xlZGdlZEFjdGl2aXR5Qm91bmRpbmdCb3hFbGVtZW50Lm9mZnNldEhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldEhlaWdodCAtXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcCArXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoZWRBdXRvU2Nyb2xsU25hcE9uQWN0aXZpdHlPZmZzZXRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwYXRjaGVkQXV0b1Njcm9sbFNuYXBPblBhZ2UpIHtcbiAgICAgICAgICAgICAgY29uc3QgZmlyc3RVbmFja25vd2xlZGdlZEFjdGl2aXR5RWxlbWVudCA9IGFjdGl2aXR5RWxlbWVudHNbK2ZpcnN0VW5hY2tub3dsZWRnZWRBY3Rpdml0eUVsZW1lbnRJbmRleF07XG4gICAgICAgICAgICAgIGNvbnN0IGZpcnN0VW5hY2tub3dsZWRnZWRBY3Rpdml0eUJvdW5kaW5nQm94RWxlbWVudCA9IGZpcnN0VW5hY2tub3dsZWRnZWRBY3Rpdml0eUVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAnLndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX2FjdGl2aXR5LWFjdGl2ZS1kZXNjZW5kYW50J1xuICAgICAgICAgICAgICApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICBjb25zdCBmaXJzdFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlPZmZzZXRUb3AgPVxuICAgICAgICAgICAgICAgIGZpcnN0VW5hY2tub3dsZWRnZWRBY3Rpdml0eUVsZW1lbnQub2Zmc2V0VG9wICsgZmlyc3RVbmFja25vd2xlZGdlZEFjdGl2aXR5Qm91bmRpbmdCb3hFbGVtZW50Lm9mZnNldFRvcDtcblxuICAgICAgICAgICAgICB2YWx1ZXMucHVzaChcbiAgICAgICAgICAgICAgICBmaXJzdFVuYWNrbm93bGVkZ2VkQWN0aXZpdHlPZmZzZXRUb3AgLVxuICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wIC1cbiAgICAgICAgICAgICAgICAgIG9mZnNldEhlaWdodCAqICgxIC0gcGF0Y2hlZEF1dG9TY3JvbGxTbmFwT25QYWdlKSArXG4gICAgICAgICAgICAgICAgICBwYXRjaGVkQXV0b1Njcm9sbFNuYXBPblBhZ2VPZmZzZXRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTWF0aC5taW4oLi4udmFsdWVzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIH0sXG4gICAgW2FjdGl2aXR5RWxlbWVudE1hcFJlZiwgYWN0aXZpdHlLZXlzUmVmLCBsYXN0QWNrbm93bGVkZ2VkQWN0aXZpdHlLZXlSZWYsIHN0eWxlT3B0aW9uc1JlZl1cbiAgKTtcbn07XG5cbnR5cGUgQmFzaWNUcmFuc2NyaXB0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn07XG5cbmNvbnN0IEJhc2ljVHJhbnNjcmlwdDogVkZDPEJhc2ljVHJhbnNjcmlwdFByb3BzPiA9ICh7IGNsYXNzTmFtZSB9KSA9PiB7XG4gIGNvbnN0IGFjdGl2aXR5RWxlbWVudE1hcFJlZiA9IHVzZVJlZjxBY3Rpdml0eUVsZW1lbnRNYXA+KG5ldyBNYXAoKSk7XG4gIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4oKTtcblxuICBjb25zdCBzY3JvbGxlciA9IHVzZVNjcm9sbGVyKGFjdGl2aXR5RWxlbWVudE1hcFJlZik7XG5cbiAgcmV0dXJuIChcbiAgICA8VHJhbnNjcmlwdEZvY3VzQ29tcG9zZXIgY29udGFpbmVyUmVmPXtjb250YWluZXJSZWZ9PlxuICAgICAgPFJlYWN0U2Nyb2xsVG9Cb3R0b21Db21wb3NlciBzY3JvbGxlcj17c2Nyb2xsZXJ9PlxuICAgICAgICA8S2V5Ym9hcmRIZWxwIC8+XG4gICAgICAgIDxJbnRlcm5hbFRyYW5zY3JpcHQgYWN0aXZpdHlFbGVtZW50TWFwUmVmPXthY3Rpdml0eUVsZW1lbnRNYXBSZWZ9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSByZWY9e2NvbnRhaW5lclJlZn0gLz5cbiAgICAgIDwvUmVhY3RTY3JvbGxUb0JvdHRvbUNvbXBvc2VyPlxuICAgIDwvVHJhbnNjcmlwdEZvY3VzQ29tcG9zZXI+XG4gICk7XG59O1xuXG5CYXNpY1RyYW5zY3JpcHQuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnXG59O1xuXG5CYXNpY1RyYW5zY3JpcHQucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2ljVHJhbnNjcmlwdDtcbiJdfQ==