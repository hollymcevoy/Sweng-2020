"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatApi = require("botframework-webchat-api");

var _reactSay = require("react-say");

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _createInstance = _interopRequireDefault(require("@emotion/css/create-instance"));

var _createStyleSet = _interopRequireDefault(require("./Styles/createStyleSet"));

var _markdownIt = _interopRequireDefault(require("markdown-it"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _BypassSpeechSynthesisPonyfill = require("./hooks/internal/BypassSpeechSynthesisPonyfill");

var _ActivityTreeComposer = _interopRequireDefault(require("./providers/ActivityTree/ActivityTreeComposer"));

var _addTargetBlankToHyperlinksMarkdown = _interopRequireDefault(require("./Utils/addTargetBlankToHyperlinksMarkdown"));

var _createCSSKey = _interopRequireDefault(require("./Utils/createCSSKey"));

var _createCoreMiddleware = _interopRequireDefault(require("./Middleware/Activity/createCoreMiddleware"));

var _createCoreMiddleware2 = _interopRequireDefault(require("./Middleware/ActivityStatus/createCoreMiddleware"));

var _createCoreMiddleware3 = _interopRequireDefault(require("./Middleware/AttachmentForScreenReader/createCoreMiddleware"));

var _createCoreMiddleware4 = _interopRequireDefault(require("./Middleware/Attachment/createCoreMiddleware"));

var _createCoreMiddleware5 = _interopRequireDefault(require("./Middleware/Avatar/createCoreMiddleware"));

var _createCoreMiddleware6 = _interopRequireDefault(require("./Middleware/CardAction/createCoreMiddleware"));

var _createScrollToEndButtonMiddleware = _interopRequireDefault(require("./Middleware/ScrollToEndButton/createScrollToEndButtonMiddleware"));

var _createCoreMiddleware7 = _interopRequireDefault(require("./Middleware/Toast/createCoreMiddleware"));

var _createCoreMiddleware8 = _interopRequireDefault(require("./Middleware/TypingIndicator/createCoreMiddleware"));

var _Dictation = _interopRequireDefault(require("./Dictation"));

var _downscaleImageToDataURL = _interopRequireDefault(require("./Utils/downscaleImageToDataURL"));

var _ErrorBox = _interopRequireDefault(require("./ErrorBox"));

var _mapMap = _interopRequireDefault(require("./Utils/mapMap"));

var _UITracker = _interopRequireDefault(require("./hooks/internal/UITracker"));

var _WebChatUIContext = _interopRequireDefault(require("./hooks/internal/WebChatUIContext"));

var _excluded = ["activityMiddleware", "activityStatusMiddleware", "attachmentForScreenReaderMiddleware", "attachmentMiddleware", "avatarMiddleware", "cardActionMiddleware", "children", "extraStyleSet", "renderMarkdown", "scrollToEndButtonMiddleware", "styleSet", "suggestedActionsAccessKey", "toastMiddleware", "typingIndicatorMiddleware", "webSpeechPonyfillFactory"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useGetActivityByKey = _botframeworkWebchatApi.hooks.useGetActivityByKey,
    useReferenceGrammarID = _botframeworkWebchatApi.hooks.useReferenceGrammarID,
    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;
var node_env = undefined || "production";
var emotionPool = {};

function styleSetToEmotionObjects(styleToEmotionObject, styleSet) {
  return (0, _mapMap.default)(styleSet, function (style, key) {
    return key === 'options' ? style : styleToEmotionObject(style);
  });
}

var ComposerCore = function ComposerCore(_ref) {
  var children = _ref.children,
      extraStyleSet = _ref.extraStyleSet,
      nonce = _ref.nonce,
      renderMarkdown = _ref.renderMarkdown,
      styleSet = _ref.styleSet,
      suggestedActionsAccessKey = _ref.suggestedActionsAccessKey,
      webSpeechPonyfillFactory = _ref.webSpeechPonyfillFactory;

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      dictateAbortable = _useState2[0],
      setDictateAbortable = _useState2[1];

  var _useReferenceGrammarI = useReferenceGrammarID(),
      _useReferenceGrammarI2 = _slicedToArray(_useReferenceGrammarI, 1),
      referenceGrammarID = _useReferenceGrammarI2[0];

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      styleOptions = _useStyleOptions2[0];

  var focusSendBoxCallbacksRef = (0, _react.useRef)([]);
  var focusTranscriptCallbacksRef = (0, _react.useRef)([]);
  var internalMarkdownIt = (0, _react.useMemo)(function () {
    return new _markdownIt.default();
  }, []);
  var scrollToCallbacksRef = (0, _react.useRef)([]);
  var scrollToEndCallbacksRef = (0, _react.useRef)([]); // Instead of having a `scrollUpCallbacksRef` and `scrollDownCallbacksRef`, they are combined into a single `scrollRelativeCallbacksRef`.
  // The first argument tells whether it should go "up" or "down".

  var scrollRelativeCallbacksRef = (0, _react.useRef)([]);
  var dictationOnError = (0, _react.useCallback)(function (err) {
    console.error(err);
  }, []);
  var internalRenderMarkdownInline = (0, _react.useMemo)(function () {
    return function (markdown) {
      var tree = internalMarkdownIt.parseInline(markdown); // We should add rel="noopener noreferrer" and target="_blank"

      var patchedTree = (0, _addTargetBlankToHyperlinksMarkdown.default)(tree);
      return internalMarkdownIt.renderer.render(patchedTree);
    };
  }, [internalMarkdownIt]);
  var styleToEmotionObject = (0, _react.useMemo)(function () {
    // Emotion doesn't hash with nonce. We need to provide the pooling mechanism.
    // 1. If 2 instances use different nonce, they should result in different hash;
    // 2. If 2 instances are being mounted, pooling will make sure we render only 1 set of <style> tags, instead of 2.
    var emotion = // Prefix "id-" to prevent object injection attack.
    emotionPool["id-".concat(nonce)] || (emotionPool["id-".concat(nonce)] = (0, _createInstance.default)({
      key: "webchat--css-".concat((0, _createCSSKey.default)()),
      nonce: nonce
    }));
    return function (style) {
      return emotion.css(style);
    };
  }, [nonce]);
  var patchedStyleSet = (0, _react.useMemo)(function () {
    return styleSetToEmotionObjects(styleToEmotionObject, _objectSpread(_objectSpread({}, styleSet || (0, _createStyleSet.default)(styleOptions)), extraStyleSet));
  }, [extraStyleSet, styleOptions, styleSet, styleToEmotionObject]);
  var webSpeechPonyfill = (0, _react.useMemo)(function () {
    var ponyfill = webSpeechPonyfillFactory && webSpeechPonyfillFactory({
      referenceGrammarID: referenceGrammarID
    });

    var _ref2 = ponyfill || {},
        speechSynthesis = _ref2.speechSynthesis,
        SpeechSynthesisUtterance = _ref2.SpeechSynthesisUtterance;

    return _objectSpread(_objectSpread({}, ponyfill), {}, {
      speechSynthesis: speechSynthesis || _BypassSpeechSynthesisPonyfill.speechSynthesis,
      SpeechSynthesisUtterance: SpeechSynthesisUtterance || _BypassSpeechSynthesisPonyfill.SpeechSynthesisUtterance
    });
  }, [referenceGrammarID, webSpeechPonyfillFactory]);
  var scrollPositionObserversRef = (0, _react.useRef)([]);
  var dispatchScrollPosition = (0, _react.useCallback)(function (event) {
    return scrollPositionObserversRef.current.forEach(function (observer) {
      return observer(event);
    });
  }, [scrollPositionObserversRef]);
  var observeScrollPosition = (0, _react.useCallback)(function (observer) {
    scrollPositionObserversRef.current = [].concat(_toConsumableArray(scrollPositionObserversRef.current), [observer]);
    return function () {
      scrollPositionObserversRef.current = scrollPositionObserversRef.current.filter(function (target) {
        return target !== observer;
      });
    };
  }, [scrollPositionObserversRef]);
  var transcriptFocusObserversRef = (0, _react.useRef)([]);

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      numTranscriptFocusObservers = _useState4[0],
      setNumTranscriptFocusObservers = _useState4[1];

  var getActivityByKey = useGetActivityByKey();
  var dispatchTranscriptFocusByActivityKey = (0, _react.useMemo)(function () {
    var prevActivityKey = Symbol();
    return function (activityKey) {
      if (activityKey !== prevActivityKey) {
        prevActivityKey = activityKey;
        var event = {
          activity: getActivityByKey(activityKey)
        };
        transcriptFocusObserversRef.current.forEach(function (observer) {
          return observer(event);
        });
      }
    };
  }, [getActivityByKey, transcriptFocusObserversRef]);
  var observeTranscriptFocus = (0, _react.useCallback)(function (observer) {
    transcriptFocusObserversRef.current = [].concat(_toConsumableArray(transcriptFocusObserversRef.current), [observer]);
    setNumTranscriptFocusObservers(transcriptFocusObserversRef.current.length);
    return function () {
      transcriptFocusObserversRef.current = transcriptFocusObserversRef.current.filter(function (target) {
        return target !== observer;
      });
      setNumTranscriptFocusObservers(transcriptFocusObserversRef.current.length);
    };
  }, [transcriptFocusObserversRef, setNumTranscriptFocusObservers]);
  var context = (0, _react.useMemo)(function () {
    return {
      dictateAbortable: dictateAbortable,
      dispatchScrollPosition: dispatchScrollPosition,
      dispatchTranscriptFocusByActivityKey: dispatchTranscriptFocusByActivityKey,
      focusSendBoxCallbacksRef: focusSendBoxCallbacksRef,
      focusTranscriptCallbacksRef: focusTranscriptCallbacksRef,
      internalMarkdownItState: [internalMarkdownIt],
      internalRenderMarkdownInline: internalRenderMarkdownInline,
      nonce: nonce,
      numTranscriptFocusObservers: numTranscriptFocusObservers,
      observeScrollPosition: observeScrollPosition,
      observeTranscriptFocus: observeTranscriptFocus,
      renderMarkdown: renderMarkdown,
      scrollRelativeCallbacksRef: scrollRelativeCallbacksRef,
      scrollToCallbacksRef: scrollToCallbacksRef,
      scrollToEndCallbacksRef: scrollToEndCallbacksRef,
      setDictateAbortable: setDictateAbortable,
      styleSet: patchedStyleSet,
      styleToEmotionObject: styleToEmotionObject,
      suggestedActionsAccessKey: suggestedActionsAccessKey,
      webSpeechPonyfill: webSpeechPonyfill
    };
  }, [dictateAbortable, dispatchScrollPosition, dispatchTranscriptFocusByActivityKey, focusSendBoxCallbacksRef, focusTranscriptCallbacksRef, internalMarkdownIt, internalRenderMarkdownInline, nonce, numTranscriptFocusObservers, observeScrollPosition, observeTranscriptFocus, patchedStyleSet, renderMarkdown, scrollRelativeCallbacksRef, scrollToCallbacksRef, scrollToEndCallbacksRef, setDictateAbortable, styleToEmotionObject, suggestedActionsAccessKey, webSpeechPonyfill]);
  return /*#__PURE__*/_react.default.createElement(_reactSay.Composer, {
    ponyfill: webSpeechPonyfill
  }, /*#__PURE__*/_react.default.createElement(_WebChatUIContext.default.Provider, {
    value: context
  }, children, /*#__PURE__*/_react.default.createElement(_Dictation.default, {
    onError: dictationOnError
  })));
};

ComposerCore.defaultProps = {
  children: undefined,
  extraStyleSet: undefined,
  nonce: undefined,
  renderMarkdown: undefined,
  styleSet: undefined,
  suggestedActionsAccessKey: 'A a Å å',
  webSpeechPonyfillFactory: undefined
};
ComposerCore.propTypes = {
  extraStyleSet: _propTypes.default.any,
  nonce: _propTypes.default.string,
  renderMarkdown: _propTypes.default.func,
  styleSet: _propTypes.default.any,
  suggestedActionsAccessKey: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.string]),
  webSpeechPonyfillFactory: _propTypes.default.func
};

var Composer = function Composer(_ref3) {
  var activityMiddleware = _ref3.activityMiddleware,
      activityStatusMiddleware = _ref3.activityStatusMiddleware,
      attachmentForScreenReaderMiddleware = _ref3.attachmentForScreenReaderMiddleware,
      attachmentMiddleware = _ref3.attachmentMiddleware,
      avatarMiddleware = _ref3.avatarMiddleware,
      cardActionMiddleware = _ref3.cardActionMiddleware,
      children = _ref3.children,
      extraStyleSet = _ref3.extraStyleSet,
      renderMarkdown = _ref3.renderMarkdown,
      scrollToEndButtonMiddleware = _ref3.scrollToEndButtonMiddleware,
      styleSet = _ref3.styleSet,
      suggestedActionsAccessKey = _ref3.suggestedActionsAccessKey,
      toastMiddleware = _ref3.toastMiddleware,
      typingIndicatorMiddleware = _ref3.typingIndicatorMiddleware,
      webSpeechPonyfillFactory = _ref3.webSpeechPonyfillFactory,
      composerProps = _objectWithoutProperties(_ref3, _excluded);

  var nonce = composerProps.nonce,
      onTelemetry = composerProps.onTelemetry;
  var patchedActivityMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(activityMiddleware)), _toConsumableArray((0, _createCoreMiddleware.default)()));
  }, [activityMiddleware]);
  var patchedActivityStatusMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(activityStatusMiddleware)), _toConsumableArray((0, _createCoreMiddleware2.default)()));
  }, [activityStatusMiddleware]);
  var patchedAttachmentForScreenReaderMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(attachmentForScreenReaderMiddleware)), _toConsumableArray((0, _createCoreMiddleware3.default)()));
  }, [attachmentForScreenReaderMiddleware]);
  var patchedAttachmentMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(attachmentMiddleware)), _toConsumableArray((0, _createCoreMiddleware4.default)()));
  }, [attachmentMiddleware]);
  var patchedAvatarMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(avatarMiddleware)), _toConsumableArray((0, _createCoreMiddleware5.default)()));
  }, [avatarMiddleware]);
  var patchedCardActionMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(cardActionMiddleware)), _toConsumableArray((0, _createCoreMiddleware6.default)()));
  }, [cardActionMiddleware]);
  var patchedToastMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(toastMiddleware)), _toConsumableArray((0, _createCoreMiddleware7.default)()));
  }, [toastMiddleware]);
  var patchedTypingIndicatorMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(typingIndicatorMiddleware)), _toConsumableArray((0, _createCoreMiddleware8.default)()));
  }, [typingIndicatorMiddleware]);
  var defaultScrollToEndButtonMiddleware = (0, _react.useMemo)(function () {
    return (0, _createScrollToEndButtonMiddleware.default)();
  }, []);
  var patchedScrollToEndButtonMiddleware = (0, _react.useMemo)(function () {
    return [].concat(_toConsumableArray((0, _botframeworkWebchatCore.singleToArray)(scrollToEndButtonMiddleware)), _toConsumableArray(defaultScrollToEndButtonMiddleware));
  }, [defaultScrollToEndButtonMiddleware, scrollToEndButtonMiddleware]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_botframeworkWebchatApi.Composer, _extends({
    activityMiddleware: patchedActivityMiddleware,
    activityStatusMiddleware: patchedActivityStatusMiddleware,
    attachmentForScreenReaderMiddleware: patchedAttachmentForScreenReaderMiddleware,
    attachmentMiddleware: patchedAttachmentMiddleware,
    avatarMiddleware: patchedAvatarMiddleware,
    cardActionMiddleware: patchedCardActionMiddleware,
    downscaleImageToDataURL: _downscaleImageToDataURL.default // Under dev server of create-react-app, "NODE_ENV" will be set to "development".
    ,
    internalErrorBoxClass: node_env === 'development' ? _ErrorBox.default : undefined,
    nonce: nonce,
    scrollToEndButtonMiddleware: patchedScrollToEndButtonMiddleware,
    toastMiddleware: patchedToastMiddleware,
    typingIndicatorMiddleware: patchedTypingIndicatorMiddleware
  }, composerProps), /*#__PURE__*/_react.default.createElement(_ActivityTreeComposer.default, null, /*#__PURE__*/_react.default.createElement(ComposerCore, {
    extraStyleSet: extraStyleSet,
    nonce: nonce,
    renderMarkdown: renderMarkdown,
    styleSet: styleSet,
    suggestedActionsAccessKey: suggestedActionsAccessKey,
    webSpeechPonyfillFactory: webSpeechPonyfillFactory
  }, children, onTelemetry && /*#__PURE__*/_react.default.createElement(_UITracker.default, null)))));
};

Composer.defaultProps = _objectSpread(_objectSpread(_objectSpread({}, _botframeworkWebchatApi.Composer.defaultProps), ComposerCore.defaultProps), {}, {
  children: undefined
});
Composer.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _botframeworkWebchatApi.Composer.propTypes), ComposerCore.propTypes), {}, {
  children: _propTypes.default.any
});
var _default = Composer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,