{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _HTMLVideoContent = _interopRequireDefault(require(\"./HTMLVideoContent\"));\n\nvar _VimeoContent = _interopRequireDefault(require(\"./VimeoContent\"));\n\nvar _YouTubeContent = _interopRequireDefault(require(\"./YouTubeContent\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar YOUTUBE_DOMAIN = 'youtube.com';\nvar YOUTUBE_WWW_DOMAIN = 'www.youtube.com';\nvar YOUTUBE_SHORT_DOMAIN = 'youtu.be';\nvar YOUTUBE_WWW_SHORT_DOMAIN = 'www.youtu.be';\nvar VIMEO_DOMAIN = 'vimeo.com';\nvar VIMEO_WWW_DOMAIN = 'www.vimeo.com'; // This is a workaround\n// - Today, there is no good URL polyfill for older browser\n// - Instead of writing a URL parser, for older browser, we will use this <a href> trick to parse the URL\n\nfunction parseURL(url) {\n  var urlLike;\n\n  if (typeof URL === 'function') {\n    urlLike = new URL(url);\n  } else {\n    urlLike = document.createElement('a');\n    urlLike.setAttribute('href', url);\n  }\n\n  var _urlLike = urlLike,\n      hostname = _urlLike.hostname,\n      pathname = _urlLike.pathname,\n      search = _urlLike.search;\n  return {\n    hostname: hostname,\n    pathname: pathname,\n    search: search\n  };\n}\n\nvar VideoContent = function VideoContent(_ref) {\n  var alt = _ref.alt,\n      autoPlay = _ref.autoPlay,\n      loop = _ref.loop,\n      poster = _ref.poster,\n      src = _ref.src;\n\n  var _parseURL = parseURL(src),\n      hostname = _parseURL.hostname,\n      pathname = _parseURL.pathname,\n      search = _parseURL.search;\n\n  var lastSegment = pathname.split('/').pop();\n  var searchParams = new URLSearchParams(search);\n\n  switch (hostname) {\n    case VIMEO_DOMAIN:\n    case VIMEO_WWW_DOMAIN:\n      return /*#__PURE__*/_react.default.createElement(_VimeoContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: lastSegment,\n        loop: loop\n      });\n\n    case YOUTUBE_DOMAIN:\n    case YOUTUBE_WWW_DOMAIN:\n      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: searchParams.get('v'),\n        loop: loop\n      });\n\n    case YOUTUBE_SHORT_DOMAIN:\n    case YOUTUBE_WWW_SHORT_DOMAIN:\n      return /*#__PURE__*/_react.default.createElement(_YouTubeContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        embedID: lastSegment,\n        loop: loop\n      });\n\n    default:\n      return /*#__PURE__*/_react.default.createElement(_HTMLVideoContent.default, {\n        alt: alt,\n        autoPlay: autoPlay,\n        loop: loop,\n        poster: poster,\n        src: src\n      });\n  }\n};\n\nVideoContent.defaultProps = {\n  alt: '',\n  autoPlay: false,\n  loop: false,\n  poster: ''\n};\nVideoContent.propTypes = {\n  alt: _propTypes.default.string,\n  autoPlay: _propTypes.default.bool,\n  loop: _propTypes.default.bool,\n  poster: _propTypes.default.string,\n  src: _propTypes.default.string.isRequired\n};\nvar _default = VideoContent;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["YOUTUBE_DOMAIN","YOUTUBE_WWW_DOMAIN","YOUTUBE_SHORT_DOMAIN","YOUTUBE_WWW_SHORT_DOMAIN","VIMEO_DOMAIN","VIMEO_WWW_DOMAIN","parseURL","url","urlLike","URL","document","createElement","setAttribute","hostname","pathname","search","VideoContent","alt","autoPlay","loop","poster","src","lastSegment","split","pop","searchParams","URLSearchParams","_react","_VimeoContent","embedID","_YouTubeContent","get","_HTMLVideoContent","defaultProps","propTypes","PropTypes","string","bool","isRequired"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Attachment/VideoContent.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { FC } from 'react';\n\nimport HTMLVideoContent from './HTMLVideoContent';\nimport VimeoContent from './VimeoContent';\nimport YouTubeContent from './YouTubeContent';\n\nconst YOUTUBE_DOMAIN = 'youtube.com';\nconst YOUTUBE_WWW_DOMAIN = 'www.youtube.com';\nconst YOUTUBE_SHORT_DOMAIN = 'youtu.be';\nconst YOUTUBE_WWW_SHORT_DOMAIN = 'www.youtu.be';\nconst VIMEO_DOMAIN = 'vimeo.com';\nconst VIMEO_WWW_DOMAIN = 'www.vimeo.com';\n\n// This is a workaround\n// - Today, there is no good URL polyfill for older browser\n// - Instead of writing a URL parser, for older browser, we will use this <a href> trick to parse the URL\nfunction parseURL(url) {\n  let urlLike;\n\n  if (typeof URL === 'function') {\n    urlLike = new URL(url);\n  } else {\n    urlLike = document.createElement('a');\n    urlLike.setAttribute('href', url);\n  }\n\n  const { hostname, pathname, search } = urlLike;\n\n  return { hostname, pathname, search };\n}\n\ntype VideoContentProps = {\n  alt?: string;\n  autoPlay?: boolean;\n  loop?: boolean;\n  poster?: string;\n  src: string;\n};\n\nconst VideoContent: FC<VideoContentProps> = ({ alt, autoPlay, loop, poster, src }) => {\n  const { hostname, pathname, search } = parseURL(src);\n  const lastSegment = pathname.split('/').pop();\n  const searchParams = new URLSearchParams(search);\n\n  switch (hostname) {\n    case VIMEO_DOMAIN:\n    case VIMEO_WWW_DOMAIN:\n      return <VimeoContent alt={alt} autoPlay={autoPlay} embedID={lastSegment} loop={loop} />;\n\n    case YOUTUBE_DOMAIN:\n    case YOUTUBE_WWW_DOMAIN:\n      return <YouTubeContent alt={alt} autoPlay={autoPlay} embedID={searchParams.get('v')} loop={loop} />;\n\n    case YOUTUBE_SHORT_DOMAIN:\n    case YOUTUBE_WWW_SHORT_DOMAIN:\n      return <YouTubeContent alt={alt} autoPlay={autoPlay} embedID={lastSegment} loop={loop} />;\n\n    default:\n      return <HTMLVideoContent alt={alt} autoPlay={autoPlay} loop={loop} poster={poster} src={src} />;\n  }\n};\n\nVideoContent.defaultProps = {\n  alt: '',\n  autoPlay: false,\n  loop: false,\n  poster: ''\n};\n\nVideoContent.propTypes = {\n  alt: PropTypes.string,\n  autoPlay: PropTypes.bool,\n  loop: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string.isRequired\n};\n\nexport default VideoContent;\n"]},"metadata":{},"sourceType":"script"}