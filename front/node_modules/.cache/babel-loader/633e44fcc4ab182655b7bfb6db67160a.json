{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechTranslationConfigImpl = exports.SpeechTranslationConfig = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Speech translation configuration.\n * @class SpeechTranslationConfig\n */\n\n\nvar SpeechTranslationConfig =\n/** @class */\nfunction (_super) {\n  __extends(SpeechTranslationConfig, _super);\n  /**\n   * Creates an instance of recognizer config.\n   */\n\n\n  function SpeechTranslationConfig() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\n   * @member SpeechTranslationConfig.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - The subscription key.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechTranslationConfig} The speech translation config.\n   */\n\n\n  SpeechTranslationConfig.fromSubscription = function (subscriptionKey, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  };\n  /**\n   * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\n   *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\n   *       will encounter errors during recognition.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply\n   * to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member SpeechTranslationConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param {string} authorizationToken - The authorization token.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechTranslationConfig} The speech translation config.\n   */\n\n\n  SpeechTranslationConfig.fromAuthorizationToken = function (authorizationToken, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  };\n  /**\n   * Creates an instance of the speech config with specified host and subscription key.\n   * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n   * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n   * Note: To use an authorization token with fromHost, use fromHost(URL),\n   * and then set the AuthorizationToken property on the created SpeechConfig instance.\n   * Note: Added in version 1.9.0.\n   * @member SpeechConfig.fromHost\n   * @function\n   * @public\n   * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n\n\n  SpeechTranslationConfig.fromHost = function (hostName, subscriptionKey) {\n    Contracts_1.Contracts.throwIfNull(hostName, \"hostName\");\n    var speechImpl = new SpeechTranslationConfigImpl();\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return speechImpl;\n  };\n  /**\n   * Creates an instance of the speech translation config with specified endpoint and subscription key.\n   * This method is intended only for users who use a non-standard service endpoint or paramters.\n   * Note: The query properties specified in the endpoint URL are not changed, even if they are\n   *       set by any other APIs. For example, if language is defined in the uri as query parameter\n   *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\n   *       setting in uri takes precedence, and the effective language is \"de-DE\".\n   * Only the properties that are not specified in the endpoint URL can be set by other APIs.\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n   *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n   *       use the authorization token.\n   * @member SpeechTranslationConfig.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} endpoint - The service endpoint to connect to.\n   * @param {string} subscriptionKey - The subscription key.\n   * @returns {SpeechTranslationConfig} A speech config instance.\n   */\n\n\n  SpeechTranslationConfig.fromEndpoint = function (endpoint, subscriptionKey) {\n    Contracts_1.Contracts.throwIfNull(endpoint, \"endpoint\");\n    Contracts_1.Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\n    var ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n    ret.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    return ret;\n  };\n\n  return SpeechTranslationConfig;\n}(Exports_2.SpeechConfig);\n\nexports.SpeechTranslationConfig = SpeechTranslationConfig;\n/**\n * @private\n * @class SpeechTranslationConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar SpeechTranslationConfigImpl =\n/** @class */\nfunction (_super) {\n  __extends(SpeechTranslationConfigImpl, _super);\n\n  function SpeechTranslationConfigImpl() {\n    var _this = _super.call(this) || this;\n\n    _this.privSpeechProperties = new Exports_2.PropertyCollection();\n    _this.outputFormat = Exports_2.OutputFormat.Simple;\n    return _this;\n  }\n\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"authorizationToken\", {\n    /**\n     * Gets/Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    set: function (value) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Gets the speech recognition language.\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @return {string} The speechRecognitionLanguage.\n     */\n    get: function () {\n      return this.privSpeechProperties.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage]);\n    },\n\n    /**\n     * Sets the speech recognition language.\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    set: function (value) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"subscriptionKey\", {\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\n     * @function\n     * @public\n     */\n    get: function () {\n      return this.privSpeechProperties.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_Key]);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"outputFormat\", {\n    /**\n     * Gets the output format\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    get: function () {\n      return Exports_2.OutputFormat[this.privSpeechProperties.getProperty(Exports_1.OutputFormatPropertyName, undefined)];\n    },\n\n    /**\n     * Gets/Sets the output format\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    set: function (value) {\n      this.privSpeechProperties.setProperty(Exports_1.OutputFormatPropertyName, Exports_2.OutputFormat[value]);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"endpointId\", {\n    /**\n     * Gets the endpoint id.\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    get: function () {\n      return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId);\n    },\n\n    /**\n     * Gets/Sets the endpoint id.\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    set: function (value) {\n      this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Add a (text) target language to translate into.\n   * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\n   * @function\n   * @public\n   * @param {string} value - The language such as de-DE\n   */\n\n  SpeechTranslationConfigImpl.prototype.addTargetLanguage = function (value) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n    var languages = this.targetLanguages;\n    languages.push(value);\n    this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n  };\n\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"targetLanguages\", {\n    /**\n     * Gets the (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    get: function () {\n      if (this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n        return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n      } else {\n        return [];\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"voiceName\", {\n    /**\n     * Gets the voice name.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     */\n    get: function () {\n      return this.getProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice]);\n    },\n\n    /**\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    set: function (value) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"region\", {\n    /**\n     * Provides the region.\n     * @member SpeechTranslationConfigImpl.prototype.region\n     * @function\n     * @public\n     * @returns {string} The region.\n     */\n    get: function () {\n      return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SpeechTranslationConfigImpl.prototype.setProxy = function (proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n  };\n  /**\n   * Gets an arbitrary property value.\n   * @member SpeechTranslationConfigImpl.prototype.getProperty\n   * @function\n   * @public\n   * @param {string} name - The name of the property.\n   * @param {string} def - The default value of the property in case it is not set.\n   * @returns {string} The value of the property.\n   */\n\n\n  SpeechTranslationConfigImpl.prototype.getProperty = function (name, def) {\n    return this.privSpeechProperties.getProperty(name, def);\n  };\n  /**\n   * Gets/Sets an arbitrary property value.\n   * @member SpeechTranslationConfigImpl.prototype.setProperty\n   * @function\n   * @public\n   * @param {string} name - The name of the property.\n   * @param {string} value - The value of the property.\n   */\n\n\n  SpeechTranslationConfigImpl.prototype.setProperty = function (name, value) {\n    this.privSpeechProperties.setProperty(name, value);\n  };\n\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"properties\", {\n    /**\n     * Provides access to custom properties.\n     * @member SpeechTranslationConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n    get: function () {\n      return this.privSpeechProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Dispose of associated resources.\n   * @member SpeechTranslationConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n\n  SpeechTranslationConfigImpl.prototype.close = function () {\n    return;\n  };\n\n  SpeechTranslationConfigImpl.prototype.setServiceProperty = function (name, value, channel) {\n    var currentProperties = JSON.parse(this.privSpeechProperties.getProperty(Exports_1.ServicePropertiesPropertyName, \"{}\"));\n    currentProperties[name] = value;\n    this.privSpeechProperties.setProperty(Exports_1.ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n  };\n\n  SpeechTranslationConfigImpl.prototype.setProfanity = function (profanity) {\n    this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceResponse_ProfanityOption, Exports_2.ProfanityOption[profanity]);\n  };\n\n  SpeechTranslationConfigImpl.prototype.enableAudioLogging = function () {\n    this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n  };\n\n  SpeechTranslationConfigImpl.prototype.requestWordLevelTimestamps = function () {\n    this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n  };\n\n  SpeechTranslationConfigImpl.prototype.enableDictation = function () {\n    this.privSpeechProperties.setProperty(Exports_1.ForceDictationPropertyName, \"true\");\n  };\n\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"speechSynthesisLanguage\", {\n    get: function () {\n      return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthLanguage);\n    },\n    set: function (language) {\n      this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthLanguage, language);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"speechSynthesisVoiceName\", {\n    get: function () {\n      return this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthVoice);\n    },\n    set: function (voice) {\n      this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthVoice, voice);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechTranslationConfigImpl.prototype, \"speechSynthesisOutputFormat\", {\n    get: function () {\n      return Exports_2.SpeechSynthesisOutputFormat[this.privSpeechProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n    },\n    set: function (format) {\n      this.privSpeechProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthOutputFormat, Exports_2.SpeechSynthesisOutputFormat[format]);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SpeechTranslationConfigImpl;\n}(SpeechTranslationConfig);\n\nexports.SpeechTranslationConfigImpl = SpeechTranslationConfigImpl;","map":{"version":3,"mappings":"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","names":["__extends","_super","SpeechTranslationConfig","subscriptionKey","region","Contracts_1","throwIfNullOrWhitespace","ret","SpeechTranslationConfigImpl","properties","setProperty","Exports_2","SpeechServiceConnection_Key","SpeechServiceConnection_Region","authorizationToken","SpeechServiceAuthorization_Token","hostName","throwIfNull","speechImpl","SpeechServiceConnection_Host","protocol","hostname","port","undefined","endpoint","SpeechServiceConnection_Endpoint","href","exports","_this","privSpeechProperties","outputFormat","Simple","Object","value","getProperty","SpeechServiceConnection_RecoLanguage","Exports_1","SpeechServiceConnection_EndpointId","languages","targetLanguages","push","SpeechServiceConnection_TranslationToLanguages","join","split","SpeechServiceConnection_TranslationVoice","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","name","def","channel","currentProperties","JSON","parse","stringify","profanity","SpeechServiceResponse_ProfanityOption","SpeechServiceConnection_EnableAudioLogging","SpeechServiceResponse_RequestWordLevelTimestamps","SpeechServiceConnection_SynthLanguage","language","SpeechServiceConnection_SynthVoice","voice","SpeechServiceConnection_SynthOutputFormat","format"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport { IStringDictionary } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechConfig, SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     *       will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        languages.push(value);\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}