{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationConnectionFactory = void 0;\n\nvar Exports_1 = require(\"../../common.browser/Exports\");\n\nvar Exports_2 = require(\"../../common/Exports\");\n\nvar Contracts_1 = require(\"../../sdk/Contracts\");\n\nvar Exports_3 = require(\"../../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"../ConnectionFactoryBase\");\n\nvar ConversationConnectionConfig_1 = require(\"./ConversationConnectionConfig\");\n\nvar ConversationWebsocketMessageFormatter_1 = require(\"./ConversationWebsocketMessageFormatter\");\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\n\n\nvar ConversationConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(ConversationConnectionFactory, _super);\n\n  function ConversationConnectionFactory() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ConversationConnectionFactory.prototype.create = function (config, authInfo, connectionId) {\n    var endpointHost = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_Host, ConversationConnectionConfig_1.ConversationConnectionConfig.host);\n    var correlationId = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_CorrelationId, Exports_2.createGuid());\n    var endpoint = \"wss://\" + endpointHost + ConversationConnectionConfig_1.ConversationConnectionConfig.webSocketPath;\n    var token = config.parameters.getProperty(Exports_3.PropertyId.ConversationTranslator_Token, undefined);\n    Contracts_1.Contracts.throwIfNullOrUndefined(token, \"token\");\n    var queryParams = {};\n    queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig_1.ConversationConnectionConfig.apiVersion;\n    queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.token] = token;\n    queryParams[ConversationConnectionConfig_1.ConversationConnectionConfig.configParams.correlationId] = correlationId;\n    var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new Exports_1.WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter_1.ConversationWebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  };\n\n  return ConversationConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.ConversationConnectionFactory = ConversationConnectionFactory;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;AAEA;;;;;;AAIA;AAAA;AAAA;AAAmDA;;AAAnD;;AAmBC;;AAjBUC,mDAAP,UAAcC,MAAd,EAAwCC,QAAxC,EAA4DC,YAA5D,EAAiF;AAE7E,QAAMC,YAAY,GAAWH,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWC,2BAAzC,EAAsEC,4DAA6BC,IAAnG,CAA7B;AACA,QAAMC,aAAa,GAAWV,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWK,oCAAzC,EAA+EC,sBAA/E,CAA9B;AAEA,QAAMC,QAAQ,GAAW,WAASV,YAAT,GAAwBK,4DAA6BM,aAA9E;AACA,QAAMC,KAAK,GAAWf,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWU,4BAAzC,EAAuEC,SAAvE,CAAtB;AACAC,0BAAUC,sBAAV,CAAiCJ,KAAjC,EAAwC,OAAxC;AAEA,QAAMK,WAAW,GAA8B,EAA/C;AACAA,eAAW,CAACZ,4DAA6Ba,YAA7B,CAA0CC,UAA3C,CAAX,GAAoEd,4DAA6Bc,UAAjG;AACAF,eAAW,CAACZ,4DAA6Ba,YAA7B,CAA0CN,KAA3C,CAAX,GAA+DA,KAA/D;AACAK,eAAW,CAACZ,4DAA6Ba,YAA7B,CAA0CX,aAA3C,CAAX,GAAuEA,aAAvE;AACA,QAAMa,iBAAiB,GAAYvB,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8B,mCAA9B,EAAmE,OAAnE,MAAgF,MAAnH;AACA,WAAO,IAAImB,6BAAJ,CAAwBX,QAAxB,EAAkCO,WAAlC,EAA+C,EAA/C,EAAmD,IAAIK,6EAAJ,EAAnD,EAAgGD,oBAAUE,oBAAV,CAA+B1B,MAA/B,CAAhG,EAAwIuB,iBAAxI,EAA2JrB,YAA3J,CAAP;AACH,GAfM;;AAiBX;AAAC,CAnBD,CAAmDyB,6CAAnD;;AAAaC","names":["__extends","ConversationConnectionFactory","config","authInfo","connectionId","endpointHost","parameters","getProperty","Exports_3","ConversationTranslator_Host","ConversationConnectionConfig_1","host","correlationId","ConversationTranslator_CorrelationId","Exports_2","endpoint","webSocketPath","token","ConversationTranslator_Token","undefined","Contracts_1","throwIfNullOrUndefined","queryParams","configParams","apiVersion","enableCompression","Exports_1","ConversationWebsocketMessageFormatter_1","fromRecognizerConfig","ConnectionFactoryBase_1","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}