{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationImpl = exports.Conversation = void 0;\n\nvar Exports_1 = require(\"../../common.speech/Exports\");\n\nvar Exports_2 = require(\"../../common/Exports\");\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar Exports_3 = require(\"../Exports\");\n\nvar Conversation =\n/** @class */\nfunction () {\n  function Conversation() {}\n  /**\n   * Create a conversation\n   * @param speechConfig\n   * @param cb\n   * @param err\n   */\n\n\n  Conversation.createConversationAsync = function (speechConfig, arg2, arg3, arg4) {\n    var _this = this;\n\n    Contracts_1.Contracts.throwIfNullOrUndefined(speechConfig, Exports_1.ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n    Contracts_1.Contracts.throwIfNullOrUndefined(speechConfig.region, Exports_1.ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\n\n    if (!speechConfig.subscriptionKey && !speechConfig.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceAuthorization_Token])) {\n      Contracts_1.Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, Exports_1.ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\n    }\n\n    if (typeof arg2 === \"string\") {\n      var conversationImpl = new ConversationImpl(speechConfig, arg2);\n      Exports_2.marshalPromiseToCallbacks(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      }(), arg3, arg4);\n      return conversationImpl;\n    } else {\n      var conversationImpl = new ConversationImpl(speechConfig);\n      var cb_1 = arg2;\n      var err_1 = arg3;\n      conversationImpl.createConversationAsync(function () {\n        if (!!cb_1) {\n          cb_1();\n        }\n      }, function (error) {\n        if (!!err_1) {\n          err_1(error);\n        }\n      });\n      return conversationImpl;\n    }\n  };\n\n  return Conversation;\n}();\n\nexports.Conversation = Conversation; // tslint:disable-next-line:max-classes-per-file\n\nvar ConversationImpl =\n/** @class */\nfunction (_super) {\n  __extends(ConversationImpl, _super);\n  /**\n   * Create a conversation impl\n   * @param speechConfig\n   * @param {string} id - optional conversationId\n   */\n\n\n  function ConversationImpl(speechConfig, id) {\n    var _this = _super.call(this) || this;\n\n    _this.privIsDisposed = false;\n    _this.privIsConnected = false;\n    _this.privErrors = Exports_1.ConversationConnectionConfig.restErrors;\n    _this.privConversationId = \"\";\n    /** websocket callbacks */\n\n    _this.onConnected = function (e) {\n      _this.privIsConnected = true;\n\n      try {\n        if (!!_this.privConversationTranslator.sessionStarted) {\n          _this.privConversationTranslator.sessionStarted(_this.privConversationTranslator, e);\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.onDisconnected = function (e) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.close(false)];\n\n            case 1:\n              _a.sent();\n\n              try {\n                if (!!this.privConversationTranslator.sessionStopped) {\n                  this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\n                }\n              } catch (e) {//\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.onCanceled = function (r, e) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.close(false)];\n\n            case 1:\n              _a.sent(); // ?\n\n\n              try {\n                if (!!this.privConversationTranslator.canceled) {\n                  this.privConversationTranslator.canceled(this.privConversationTranslator, e);\n                }\n              } catch (e) {//\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.onParticipantUpdateCommandReceived = function (r, e) {\n      var _a, _b;\n\n      try {\n        var updatedParticipant = _this.privParticipants.getParticipant(e.id);\n\n        if (updatedParticipant !== undefined) {\n          switch (e.key) {\n            case Exports_1.ConversationTranslatorCommandTypes.changeNickname:\n              updatedParticipant.displayName = e.value;\n              break;\n\n            case Exports_1.ConversationTranslatorCommandTypes.setUseTTS:\n              updatedParticipant.useTts = e.value;\n              break;\n\n            case Exports_1.ConversationTranslatorCommandTypes.setProfanityFiltering:\n              updatedParticipant.profanity = e.value;\n              break;\n\n            case Exports_1.ConversationTranslatorCommandTypes.setMute:\n              updatedParticipant.isMuted = e.value;\n              break;\n\n            case Exports_1.ConversationTranslatorCommandTypes.setTranslateToLanguages:\n              updatedParticipant.translateToLanguages = e.value;\n              break;\n          }\n\n          _this.privParticipants.addOrUpdateParticipant(updatedParticipant);\n\n          if (!!((_a = _this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n            (_b = _this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(_this.privConversationTranslator, new Exports_3.ConversationParticipantsChangedEventArgs(Exports_3.ParticipantChangedReason.Updated, [_this.toParticipant(updatedParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.onLockRoomCommandReceived = function (r, e) {// TODO\n    };\n\n    _this.onMuteAllCommandReceived = function (r, e) {\n      var _a, _b;\n\n      try {\n        _this.privParticipants.participants.forEach(function (p) {\n          return p.isMuted = p.isHost ? false : e.isMuted;\n        });\n\n        if (!!((_a = _this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n          (_b = _this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(_this.privConversationTranslator, new Exports_3.ConversationParticipantsChangedEventArgs(Exports_3.ParticipantChangedReason.Updated, _this.toParticipants(false), e.sessionId));\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.onParticipantJoinCommandReceived = function (r, e) {\n      var _a, _b;\n\n      try {\n        var newParticipant = _this.privParticipants.addOrUpdateParticipant(e.participant);\n\n        if (newParticipant !== undefined) {\n          if (!!((_a = _this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n            (_b = _this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(_this.privConversationTranslator, new Exports_3.ConversationParticipantsChangedEventArgs(Exports_3.ParticipantChangedReason.JoinedConversation, [_this.toParticipant(newParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.onParticipantLeaveCommandReceived = function (r, e) {\n      var _a, _b;\n\n      try {\n        var ejectedParticipant = _this.privParticipants.getParticipant(e.participant.id);\n\n        if (ejectedParticipant !== undefined) {\n          // remove the participant from the internal participants list\n          _this.privParticipants.deleteParticipant(e.participant.id);\n\n          if (!!((_a = _this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n            // notify subscribers that the participant has left the conversation\n            (_b = _this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(_this.privConversationTranslator, new Exports_3.ConversationParticipantsChangedEventArgs(Exports_3.ParticipantChangedReason.LeftConversation, [_this.toParticipant(ejectedParticipant)], e.sessionId));\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.onTranslationReceived = function (r, e) {\n      var _a, _b, _c, _d, _e, _f;\n\n      try {\n        switch (e.command) {\n          case Exports_1.ConversationTranslatorMessageTypes.final:\n            if (!!((_a = _this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.transcribed)) {\n              (_b = _this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.transcribed(_this.privConversationTranslator, new Exports_3.ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n\n            break;\n\n          case Exports_1.ConversationTranslatorMessageTypes.partial:\n            if (!!((_c = _this.privConversationTranslator) === null || _c === void 0 ? void 0 : _c.transcribing)) {\n              (_d = _this.privConversationTranslator) === null || _d === void 0 ? void 0 : _d.transcribing(_this.privConversationTranslator, new Exports_3.ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n\n            break;\n\n          case Exports_1.ConversationTranslatorMessageTypes.instantMessage:\n            if (!!((_e = _this.privConversationTranslator) === null || _e === void 0 ? void 0 : _e.textMessageReceived)) {\n              (_f = _this.privConversationTranslator) === null || _f === void 0 ? void 0 : _f.textMessageReceived(_this.privConversationTranslator, new Exports_3.ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n            }\n\n            break;\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.onParticipantsListReceived = function (r, e) {\n      var _a, _b, _c;\n\n      try {\n        // check if the session token needs to be updated\n        if (e.sessionToken !== undefined && e.sessionToken !== null) {\n          _this.privRoom.token = e.sessionToken;\n        } // save the participants\n\n\n        _this.privParticipants.participants = __spreadArrays(e.participants); // enable the conversation\n\n        if (_this.privParticipants.me !== undefined) {\n          _this.privIsReady = true;\n        }\n\n        if (!!((_a = _this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.participantsChanged)) {\n          (_b = _this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.participantsChanged(_this.privConversationTranslator, new Exports_3.ConversationParticipantsChangedEventArgs(Exports_3.ParticipantChangedReason.JoinedConversation, _this.toParticipants(true), e.sessionId));\n        } // if this is the host, update the nickname if needed\n\n\n        if (_this.me.isHost) {\n          var nickname = (_c = _this.privConversationTranslator) === null || _c === void 0 ? void 0 : _c.properties.getProperty(Exports_3.PropertyId.ConversationTranslator_Name);\n\n          if (nickname !== undefined && nickname.length > 0 && nickname !== _this.me.displayName) {\n            // issue a change nickname request\n            _this.changeNicknameAsync(nickname);\n          }\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.onConversationExpiration = function (r, e) {\n      var _a, _b;\n\n      try {\n        if (!!((_a = _this.privConversationTranslator) === null || _a === void 0 ? void 0 : _a.conversationExpiration)) {\n          (_b = _this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.conversationExpiration(_this.privConversationTranslator, e);\n        }\n      } catch (e) {//\n      }\n    };\n\n    _this.privProperties = new Exports_3.PropertyCollection();\n    _this.privManager = new Exports_1.ConversationManager(); // check the speech language\n\n    var language = speechConfig.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n    if (!language) {\n      speechConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage], Exports_1.ConversationConnectionConfig.defaultLanguageCode);\n    }\n\n    _this.privLanguage = speechConfig.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n    if (!id) {\n      // check the target language(s)\n      if (speechConfig.targetLanguages.length === 0) {\n        speechConfig.addTargetLanguage(_this.privLanguage);\n      } // check the profanity setting: speech and conversationTranslator should be in sync\n\n\n      var profanity = speechConfig.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceResponse_ProfanityOption]);\n\n      if (!profanity) {\n        speechConfig.setProfanity(Exports_3.ProfanityOption.Masked);\n      } // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\n      // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\n      // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\n\n\n      var hostNickname = speechConfig.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.ConversationTranslator_Name]);\n\n      if (hostNickname === undefined || hostNickname === null || hostNickname.length <= 1 || hostNickname.length > 50) {\n        hostNickname = \"Host\";\n      }\n\n      speechConfig.setProperty(Exports_3.PropertyId[Exports_3.PropertyId.ConversationTranslator_Name], hostNickname);\n    } else {\n      _this.privConversationId = id;\n    } // save the speech config for future usage\n\n\n    _this.privConfig = speechConfig; // save the config properties\n\n    var configImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(configImpl, \"speechConfig\");\n    _this.privProperties = configImpl.properties.clone();\n    _this.privIsConnected = false;\n    _this.privParticipants = new Exports_1.InternalParticipants();\n    _this.privIsReady = false;\n    _this.privTextMessageMaxLength = 1000;\n    return _this;\n  }\n\n  Object.defineProperty(ConversationImpl.prototype, \"conversationTranslator\", {\n    set: function (value) {\n      this.privConversationTranslator = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"room\", {\n    // get the internal data about a conversation\n    get: function () {\n      return this.privRoom;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"connection\", {\n    // get the wrapper for connecting to the websockets\n    get: function () {\n      return this.privConversationRecognizer; // this.privConnection;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"authorizationToken\", {\n    // get / set the speech auth token\n    get: function () {\n      return this.privToken;\n    },\n    set: function (value) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\n      this.privToken = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"config\", {\n    // get the config\n    get: function () {\n      return this.privConfig;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"conversationId\", {\n    // get the conversation Id\n    get: function () {\n      return this.privRoom ? this.privRoom.roomId : this.privConversationId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"properties\", {\n    // get the properties\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"speechRecognitionLanguage\", {\n    // get the speech language\n    get: function () {\n      return this.privLanguage;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"isMutedByHost\", {\n    get: function () {\n      var _a, _b;\n\n      return ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost) ? false : (_b = this.privParticipants.me) === null || _b === void 0 ? void 0 : _b.isMuted;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"isConnected\", {\n    get: function () {\n      return this.privIsConnected && this.privIsReady;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"participants\", {\n    get: function () {\n      return this.toParticipants(true);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"me\", {\n    get: function () {\n      return this.toParticipant(this.privParticipants.me);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"host\", {\n    get: function () {\n      return this.toParticipant(this.privParticipants.host);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new conversation as Host\n   * @param cb\n   * @param err\n   */\n\n  ConversationImpl.prototype.createConversationAsync = function (cb, err) {\n    var _this = this;\n\n    try {\n      if (!!this.privConversationRecognizer) {\n        this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n      }\n\n      this.privManager.createOrJoin(this.privProperties, undefined, function (room) {\n        if (!room) {\n          _this.handleError(new Error(_this.privErrors.permissionDeniedConnect), err);\n        }\n\n        _this.privRoom = room;\n\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Starts a new conversation as host.\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.startConversationAsync = function (cb, err) {\n    var _this = this;\n\n    try {\n      // check if there is already a recognizer\n      if (!!this.privConversationRecognizer) {\n        this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n      } // check if there is conversation data available\n\n\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect); // connect to the conversation websocket\n\n      this.privParticipants.meId = this.privRoom.participantId;\n      this.privConversationRecognizer = Exports_1.ConversationRecognizerFactory.fromConfig(this.privConfig); // Because ConversationTranslator manually sets up and manages the connection, Conversation\n      // has to forward serviceRecognizer connection events that usually get passed automatically\n\n      this.privConversationRecognizer.connected = this.onConnected;\n      this.privConversationRecognizer.disconnected = this.onDisconnected;\n      this.privConversationRecognizer.canceled = this.onCanceled;\n      this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\n      this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\n      this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\n      this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\n      this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\n      this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\n      this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\n      this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\n      this.privConversationRecognizer.connect(this.privRoom.token, function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Join a conversation as a participant.\n   * @param { IParticipant } participant - participant to add\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.addParticipantAsync = function (participant, cb, err) {\n    Contracts_1.Contracts.throwIfNullOrUndefined(participant, \"Participant\");\n    Exports_2.marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\n  };\n  /**\n   * Join a conversation as a participant.\n   * @param conversation\n   * @param nickname\n   * @param lang\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.joinConversationAsync = function (conversationId, nickname, lang, cb, err) {\n    var _this = this;\n\n    try {\n      // TODO\n      // if (!!this.privConversationRecognizer) {\n      //     throw new Error(this.privErrors.permissionDeniedStart);\n      // }\n      Contracts_1.Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\n      Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n      Contracts_1.Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\")); // join the conversation\n\n      this.privManager.createOrJoin(this.privProperties, conversationId, function (room) {\n        Contracts_1.Contracts.throwIfNullOrUndefined(room, _this.privErrors.permissionDeniedConnect);\n        _this.privRoom = room;\n        _this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken; // join callback\n\n        if (!!cb) {\n          cb(room.cognitiveSpeechAuthToken);\n        }\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Deletes a conversation\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.deleteConversationAsync = function (cb, err) {\n    Exports_2.marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\n  };\n\n  ConversationImpl.prototype.deleteConversationImplAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Contracts_1.Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\n            Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\n            return [4\n            /*yield*/\n            , this.privManager.leave(this.privProperties, this.privRoom.token)];\n\n          case 1:\n            _a.sent();\n\n            this.dispose();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Issues a request to close the client websockets\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.endConversationAsync = function (cb, err) {\n    Exports_2.marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\n  };\n\n  ConversationImpl.prototype.endConversationImplAsync = function () {\n    return this.close(true);\n  };\n  /**\n   * Issues a request to lock the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.lockConversationAsync = function (cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getLockCommand(true), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Issues a request to mute the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.muteAllParticipantsAsync = function (cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend); // check the user's permissions\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteAllCommand(true), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Issues a request to mute a participant in the conversation\n   * @param userId\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.muteParticipantAsync = function (userId, cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend); // check the connection is open (host + participant can perform the mute command)\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      } // if not host, check the participant is not muting another participant\n\n\n      if (!this.me.isHost && this.me.id !== userId) {\n        this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n      } // check the user exists\n\n\n      var exists = this.privParticipants.getParticipantIndex(userId);\n\n      if (exists === -1) {\n        this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteCommand(userId, true), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Issues a request to remove a participant from the conversation\n   * @param userId\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.removeParticipantAsync = function (userId, cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n\n      if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\n        // Assume this is a transcription participant\n        Exports_2.marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId), cb, err);\n      } else {\n        Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n        Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n        if (!this.canSendAsHost) {\n          this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\n        }\n\n        var participantId_1 = \"\";\n\n        if (typeof userId === \"string\") {\n          participantId_1 = userId;\n        } else if (userId.hasOwnProperty(\"id\")) {\n          var participant = userId;\n          participantId_1 = participant.id;\n        } else if (userId.hasOwnProperty(\"userId\")) {\n          var user = userId;\n          participantId_1 = user.userId;\n        }\n\n        Contracts_1.Contracts.throwIfNullOrWhitespace(participantId_1, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\")); // check the participant exists\n\n        var index = this.participants.findIndex(function (p) {\n          return p.id === participantId_1;\n        });\n\n        if (index === -1) {\n          this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n        }\n\n        (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getEjectCommand(participantId_1), function () {\n          _this.handleCallback(cb, err);\n        }, function (error) {\n          _this.handleError(error, err);\n        });\n      }\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Issues a request to unlock the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.unlockConversationAsync = function (cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getLockCommand(false), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Issues a request to unmute all participants in the conversation\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.unmuteAllParticipantsAsync = function (cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSendAsHost) {\n        this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteAllCommand(false), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Issues a request to unmute a participant in the conversation\n   * @param userId\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.unmuteParticipantAsync = function (userId, cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend); // check the connection is open (host + participant can perform the mute command)\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      } // if not host, check the participant is not muting another participant\n\n\n      if (!this.me.isHost && this.me.id !== userId) {\n        this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n      } // check the user exists\n\n\n      var exists = this.privParticipants.getParticipantIndex(userId);\n\n      if (exists === -1) {\n        this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMuteCommand(userId, false), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Send a text message\n   * @param message\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.sendTextMessageAsync = function (message, cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      } // TODO: is a max length check required?\n\n\n      if (message.length > this.privTextMessageMaxLength) {\n        this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getMessageCommand(message), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n  /**\n   * Change nickname\n   * @param message\n   * @param cb\n   * @param err\n   */\n\n\n  ConversationImpl.prototype.changeNicknameAsync = function (nickname, cb, err) {\n    var _this = this;\n\n    var _a;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts_1.Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n      Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n      Contracts_1.Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n\n      if (!this.canSend) {\n        this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n      }\n\n      (_a = this.privConversationRecognizer) === null || _a === void 0 ? void 0 : _a.sendRequest(this.getChangeNicknameCommand(nickname), function () {\n        _this.handleCallback(cb, err);\n      }, function (error) {\n        _this.handleError(error, err);\n      });\n    } catch (error) {\n      this.handleError(error, err);\n    }\n  };\n\n  ConversationImpl.prototype.isDisposed = function () {\n    return this.privIsDisposed;\n  };\n\n  ConversationImpl.prototype.dispose = function (reason) {\n    var _a;\n\n    if (this.isDisposed) {\n      return;\n    }\n\n    this.privIsDisposed = true;\n    (_a = this.config) === null || _a === void 0 ? void 0 : _a.close();\n    this.privConfig = undefined;\n    this.privLanguage = undefined;\n    this.privProperties = undefined;\n    this.privRoom = undefined;\n    this.privToken = undefined;\n    this.privManager = undefined;\n    this.privConversationRecognizer = undefined;\n    this.privIsConnected = false;\n    this.privIsReady = false;\n    this.privParticipants = undefined;\n  };\n\n  Object.defineProperty(ConversationImpl.prototype, \"transcriberRecognizer\", {\n    get: function () {\n      return this.privTranscriberRecognizer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ConversationImpl.prototype.connectTranscriberRecognizer = function (recognizer) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!!this.privTranscriberRecognizer) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.privTranscriberRecognizer.close()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.privTranscriberRecognizer = recognizer;\n            this.privTranscriberRecognizer.conversation = this;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(ConversationImpl.prototype, \"conversationInfo\", {\n    get: function () {\n      var convId = this.conversationId;\n      var p = this.participants.map(function (part) {\n        return {\n          id: part.id,\n          preferredLanguage: part.preferredLanguage,\n          voice: part.voice\n        };\n      });\n      var props = {};\n\n      for (var _i = 0, _a = Exports_1.ConversationConnectionConfig.transcriptionEventKeys; _i < _a.length; _i++) {\n        var key = _a[_i];\n        var val = this.properties.getProperty(key, \"\");\n\n        if (val !== \"\") {\n          props[key] = val;\n        }\n      }\n\n      var info = {\n        id: convId,\n        participants: p,\n        conversationProperties: props\n      };\n      return info;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ConversationImpl.prototype.addParticipantImplAsync = function (participant) {\n    var newParticipant = this.privParticipants.addOrUpdateParticipant(participant);\n\n    if (newParticipant !== undefined) {\n      if (!!this.privTranscriberRecognizer) {\n        var conversationInfo = this.conversationInfo;\n        conversationInfo.participants = [participant];\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\n      }\n    }\n  };\n\n  ConversationImpl.prototype.removeParticipantImplAsync = function (participant) {\n    this.privParticipants.deleteParticipant(participant.id);\n    var conversationInfo = this.conversationInfo;\n    conversationInfo.participants = [participant];\n    return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\n  };\n\n  ConversationImpl.prototype.close = function (dispose) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 3,, 4]);\n\n            this.privIsConnected = false;\n            return [4\n            /*yield*/\n            , this.privConversationRecognizer.close()];\n\n          case 1:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , (_a = this.privTranscriberRecognizer) === null || _a === void 0 ? void 0 : _a.close()];\n\n          case 2:\n            _c.sent();\n\n            this.privConversationRecognizer = undefined;\n            (_b = this.privConversationTranslator) === null || _b === void 0 ? void 0 : _b.dispose();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            if (dispose) {\n              this.dispose();\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(ConversationImpl.prototype, \"canSend\", {\n    /** Helpers */\n    get: function () {\n      var _a;\n\n      return this.privIsConnected && !((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isMuted);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationImpl.prototype, \"canSendAsHost\", {\n    get: function () {\n      var _a;\n\n      return this.privIsConnected && ((_a = this.privParticipants.me) === null || _a === void 0 ? void 0 : _a.isHost);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ConversationImpl.prototype.handleCallback = function (cb, err) {\n    if (!!cb) {\n      try {\n        cb();\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n\n      cb = undefined;\n    }\n  };\n\n  ConversationImpl.prototype.handleError = function (error, err) {\n    if (!!err) {\n      if (error instanceof Error) {\n        var typedError = error;\n        err(typedError.name + \": \" + typedError.message);\n      } else {\n        err(error);\n      }\n    }\n  };\n  /** Participant Helpers */\n\n\n  ConversationImpl.prototype.toParticipants = function (includeHost) {\n    var _this = this;\n\n    var participants = this.privParticipants.participants.map(function (p) {\n      return _this.toParticipant(p);\n    });\n\n    if (!includeHost) {\n      return participants.filter(function (p) {\n        return p.isHost === false;\n      });\n    } else {\n      return participants;\n    }\n  };\n\n  ConversationImpl.prototype.toParticipant = function (p) {\n    return new Exports_3.Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\n  };\n\n  ConversationImpl.prototype.getMuteAllCommand = function (isMuted) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: Exports_1.ConversationTranslatorCommandTypes.setMuteAll,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: Exports_1.ConversationTranslatorMessageTypes.participantCommand,\n      value: isMuted\n    });\n  };\n\n  ConversationImpl.prototype.getMuteCommand = function (participantId, isMuted) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n    return JSON.stringify({\n      command: Exports_1.ConversationTranslatorCommandTypes.setMute,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: participantId,\n      roomid: this.privRoom.roomId,\n      type: Exports_1.ConversationTranslatorMessageTypes.participantCommand,\n      value: isMuted\n    });\n  };\n\n  ConversationImpl.prototype.getLockCommand = function (isLocked) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: Exports_1.ConversationTranslatorCommandTypes.setLockState,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: Exports_1.ConversationTranslatorMessageTypes.participantCommand,\n      value: isLocked\n    });\n  };\n\n  ConversationImpl.prototype.getEjectCommand = function (participantId) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n    return JSON.stringify({\n      command: Exports_1.ConversationTranslatorCommandTypes.ejectParticipant,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: participantId,\n      roomid: this.privRoom.roomId,\n      type: Exports_1.ConversationTranslatorMessageTypes.participantCommand\n    });\n  };\n\n  ConversationImpl.prototype.getChangeNicknameCommand = function (nickname) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    return JSON.stringify({\n      command: Exports_1.ConversationTranslatorCommandTypes.changeNickname,\n      nickname: nickname,\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomid: this.privRoom.roomId,\n      type: Exports_1.ConversationTranslatorMessageTypes.participantCommand,\n      value: nickname\n    });\n  };\n\n  ConversationImpl.prototype.getMessageCommand = function (message) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(message, \"message\");\n    return JSON.stringify({\n      // tslint:disable-next-line: object-literal-shorthand\n      participantId: this.privRoom.participantId,\n      roomId: this.privRoom.roomId,\n      text: message,\n      type: Exports_1.ConversationTranslatorMessageTypes.instantMessage\n    });\n  };\n\n  return ConversationImpl;\n}(Conversation);\n\nexports.ConversationImpl = ConversationImpl;","map":{"version":3,"mappings":"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","names":["Conversation","speechConfig","arg2","arg3","arg4","Contracts_1","throwIfNullOrUndefined","Exports_1","restErrors","invalidArgs","replace","region","subscriptionKey","getProperty","Exports_3","SpeechServiceAuthorization_Token","conversationImpl","ConversationImpl","Exports_2","cb_1","err_1","createConversationAsync","error","exports","__extends","id","_super","_this","e","privIsConnected","privConversationTranslator","sessionStarted","close","_a","sessionStopped","r","canceled","updatedParticipant","privParticipants","getParticipant","undefined","key","changeNickname","displayName","value","setUseTTS","useTts","setProfanityFiltering","profanity","setMute","isMuted","setTranslateToLanguages","translateToLanguages","addOrUpdateParticipant","participantsChanged","_b","Updated","toParticipant","sessionId","participants","forEach","p","isHost","toParticipants","newParticipant","participant","JoinedConversation","ejectedParticipant","deleteParticipant","LeftConversation","command","final","transcribed","payload","partial","_c","transcribing","_d","instantMessage","_e","textMessageReceived","_f","sessionToken","privRoom","token","__spreadArrays","me","privIsReady","nickname","properties","ConversationTranslator_Name","length","changeNicknameAsync","conversationExpiration","privProperties","privManager","language","SpeechServiceConnection_RecoLanguage","setProperty","defaultLanguageCode","privLanguage","targetLanguages","addTargetLanguage","SpeechServiceResponse_ProfanityOption","setProfanity","Masked","hostNickname","privConversationId","privConfig","configImpl","throwIfNull","clone","privTextMessageMaxLength","Object","privConversationRecognizer","privToken","throwIfNullOrWhitespace","roomId","host","cb","err","handleError","Error","privErrors","permissionDeniedStart","createOrJoin","room","permissionDeniedConnect","handleCallback","meId","participantId","fromConfig","connected","onConnected","disconnected","onDisconnected","onCanceled","participantUpdateCommandReceived","onParticipantUpdateCommandReceived","lockRoomCommandReceived","onLockRoomCommandReceived","muteAllCommandReceived","onMuteAllCommandReceived","participantJoinCommandReceived","onParticipantJoinCommandReceived","participantLeaveCommandReceived","onParticipantLeaveCommandReceived","translationReceived","onTranslationReceived","participantsListReceived","onParticipantsListReceived","onConversationExpiration","connect","addParticipantImplAsync","conversationId","lang","authorizationToken","cognitiveSpeechAuthToken","deleteConversationImplAsync","leave","dispose","endConversationImplAsync","throwIfDisposed","privIsDisposed","isDisposed","permissionDeniedSend","canSendAsHost","permissionDeniedConversation","sendRequest","getLockCommand","getMuteAllCommand","userId","canSend","permissionDeniedParticipant","exists","getParticipantIndex","invalidParticipantRequest","getMuteCommand","privTranscriberRecognizer","hasOwnProperty","removeParticipantImplAsync","participantId_1","user","index","findIndex","getEjectCommand","message","getMessageCommand","getChangeNicknameCommand","reason","config","recognizer","conversation","convId","map","part","preferredLanguage","voice","props","transcriptionEventKeys","_i","val","info","conversationProperties","conversationInfo","pushConversationEvent","typedError","name","includeHost","filter","avatar","isUsingTts","JSON","stringify","setMuteAll","roomid","type","participantCommand","isLocked","setLockState","ejectParticipant","text"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\r\nimport { Callback, ConversationInfo, IConversation } from \"./IConversation\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    public abstract get authorizationToken(): string;\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        if (typeof arg2 === \"string\") {\r\n            const conversationImpl: ConversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), arg3, arg4);\r\n            return conversationImpl;\r\n        } else {\r\n            const conversationImpl: ConversationImpl = new ConversationImpl(speechConfig);\r\n            const cb: Callback = arg2;\r\n            const err: Callback = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                (() => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any) => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            return conversationImpl;\r\n        }\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean = false;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean = false;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string = \"\";\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    public set conversationTranslator(value: ConversationTranslator) {\r\n        this.privConversationTranslator = value;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null || hostNickname.length <= 1 || hostNickname.length > 50) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation) => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation) => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(true),\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(true),\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, true), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId: string = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId as string;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant) => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                this.privConversationRecognizer?.sendRequest(this.getEjectCommand(participantId), (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMessageCommand(message), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getChangeNicknameCommand(nickname), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        this.config?.close();\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privConversationRecognizer = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant) => {\r\n            return {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            };\r\n        });\r\n        const props: { [id: string]: string } = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onDisconnected = async (e: ConnectionEventArgs): Promise<void> => {\r\n        await this.close(false);\r\n        try {\r\n            if (!!this.privConversationTranslator.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onCanceled = async (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): Promise<void> => {\r\n        await this.close(false); // ?\r\n        try {\r\n            if (!!this.privConversationTranslator.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: any = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.useTts = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value;\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onLockRoomCommandReceived = (r: ConversationRecognizer, e: LockRoomEventArgs): void => {\r\n        // TODO\r\n    }\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant) => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator?.participantsChanged) {\r\n                this.privConversationTranslator?.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator?.transcribed) {\r\n                        this.privConversationTranslator?.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator?.transcribing) {\r\n                        this.privConversationTranslator?.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator?.textMessageReceived) {\r\n                        this.privConversationTranslator?.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator?.participantsChanged) {\r\n                this.privConversationTranslator?.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.conversationExpiration) {\r\n                this.privConversationTranslator?.conversationExpiration(\r\n                    this.privConversationTranslator,\r\n                    e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer.close();\r\n            await this.privTranscriberRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            this.privConversationTranslator?.dispose();\r\n        } catch (e) {\r\n            // ignore error\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    private handleCallback(cb: any, err: any): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: any): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant) => {\r\n            return this.toParticipant(p);\r\n        });\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant) => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}