{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _useEnterKeyHint = _interopRequireDefault(require(\"../hooks/internal/useEnterKeyHint\"));\n\nvar _excluded = [\"className\", \"disabled\", \"enterKeyHint\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onKeyDownCapture\", \"onKeyPress\", \"onSelect\", \"placeholder\", \"readOnly\", \"tabIndex\", \"value\"];\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar AccessibleInputText = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, forwardedRef) {\n  var className = _ref.className,\n      disabled = _ref.disabled,\n      enterKeyHint = _ref.enterKeyHint,\n      onChange = _ref.onChange,\n      onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onKeyDownCapture = _ref.onKeyDownCapture,\n      onKeyPress = _ref.onKeyPress,\n      onSelect = _ref.onSelect,\n      placeholder = _ref.placeholder,\n      readOnly = _ref.readOnly,\n      tabIndex = _ref.tabIndex,\n      value = _ref.value,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var targetRef = (0, _react.useRef)();\n  var ref = forwardedRef || targetRef;\n  (0, _useEnterKeyHint.default)(ref, enterKeyHint);\n  return /*#__PURE__*/_react.default.createElement(\"input\", _extends({\n    \"aria-disabled\": disabled || undefined,\n    className: className,\n    onChange: disabled ? undefined : onChange,\n    onFocus: disabled ? undefined : onFocus,\n    onKeyDown: disabled ? undefined : onKeyDown,\n    onKeyDownCapture: disabled ? undefined : onKeyDownCapture,\n    onKeyPress: disabled ? undefined : onKeyPress,\n    onSelect: disabled ? undefined : onSelect,\n    placeholder: placeholder,\n    readOnly: readOnly || disabled,\n    ref: ref,\n    tabIndex: disabled ? -1 : tabIndex,\n    value: value\n  }, props, {\n    type: \"text\"\n  }));\n});\nAccessibleInputText.defaultProps = {\n  className: undefined,\n  disabled: undefined,\n  enterKeyHint: undefined,\n  inputMode: undefined,\n  onChange: undefined,\n  onFocus: undefined,\n  onKeyDown: undefined,\n  onKeyDownCapture: undefined,\n  onKeyPress: undefined,\n  onSelect: undefined,\n  placeholder: undefined,\n  readOnly: undefined,\n  tabIndex: undefined,\n  value: undefined\n};\nAccessibleInputText.displayName = 'AccessibleInputText';\nAccessibleInputText.propTypes = {\n  className: _propTypes.default.string,\n  disabled: _propTypes.default.bool,\n  enterKeyHint: _propTypes.default.string,\n  inputMode: _propTypes.default.oneOf(['text', 'none', 'tel', 'url', 'email', 'numeric', 'decimal', 'search']),\n  onChange: _propTypes.default.func,\n  onFocus: _propTypes.default.func,\n  onKeyDown: _propTypes.default.func,\n  onKeyDownCapture: _propTypes.default.func,\n  onKeyPress: _propTypes.default.func,\n  onSelect: _propTypes.default.func,\n  placeholder: _propTypes.default.string,\n  readOnly: _propTypes.default.bool,\n  tabIndex: _propTypes.default.number,\n  // @ts-ignore PropTypes and TypeScript type do not well understood each other.\n  type: _propTypes.default.oneOf(['text']).isRequired,\n  value: _propTypes.default.string\n};\nvar _default = AccessibleInputText;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["AccessibleInputText","forwardedRef","className","disabled","enterKeyHint","onChange","onFocus","onKeyDown","onKeyDownCapture","onKeyPress","onSelect","placeholder","readOnly","tabIndex","value","props","targetRef","ref","_react","undefined","type","defaultProps","inputMode","displayName","propTypes","PropTypes","string","bool","oneOf","func","number","isRequired"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Utils/AccessibleInputText.tsx"],"sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [-1] }] */\n\nimport PropTypes from 'prop-types';\nimport React, {\n  ChangeEventHandler,\n  FocusEventHandler,\n  forwardRef,\n  KeyboardEventHandler,\n  ReactEventHandler,\n  useRef\n} from 'react';\n\nimport useEnterKeyHint from '../hooks/internal/useEnterKeyHint';\n\n// Differences between <input type=\"text\"> and <AccessibleInputText>:\n// - Disable behavior\n//   - When the widget is disabled\n//     - Set \"aria-disabled\" attribute to \"true\"\n//     - Set \"readonly\" attribute\n//     - Set \"tabIndex\" to -1\n//     - Remove \"onChange\" handler\n//   - Why this is needed\n//     - Browser compatibility: when the widget is disabled, different browser send focus to different places\n//     - When the widget is disabled, it's reasonable to keep the focus on the same widget for an extended period of time\n//       - When the user presses TAB after the current widget is disabled, it should jump to the next non-disabled widget\n\n// Developers using this accessible widget will need to:\n// - Style the disabled widget themselves, using CSS query `:disabled, [aria-disabled=\"true\"] {}`\n// - Modify all the code that checks disabled through the \"disabled\" attribute to use aria-disabled=\"true\" instead\n//   - aria-disabled=\"true\" is the source of truth\n// - If the widget is contained by a <form>, the developer need to filter out some `onSubmit` event caused by this widget\n\ntype AccessibleInputTextProps = {\n  className?: string;\n  disabled?: boolean;\n  enterKeyHint?: string;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  onFocus?: FocusEventHandler<HTMLInputElement>;\n  onKeyDown?: KeyboardEventHandler<HTMLInputElement>;\n  onKeyDownCapture?: KeyboardEventHandler<HTMLInputElement>;\n  onKeyPress?: KeyboardEventHandler<HTMLInputElement>;\n  onSelect?: ReactEventHandler<HTMLInputElement>;\n  placeholder?: string;\n  readOnly?: boolean;\n  tabIndex?: number;\n  type: 'text';\n  value?: string;\n};\n\nconst AccessibleInputText = forwardRef<HTMLInputElement, AccessibleInputTextProps>(\n  (\n    {\n      className,\n      disabled,\n      enterKeyHint,\n      onChange,\n      onFocus,\n      onKeyDown,\n      onKeyDownCapture,\n      onKeyPress,\n      onSelect,\n      placeholder,\n      readOnly,\n      tabIndex,\n      value,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    const targetRef = useRef();\n\n    const ref = forwardedRef || targetRef;\n\n    useEnterKeyHint(ref, enterKeyHint);\n\n    return (\n      <input\n        aria-disabled={disabled || undefined}\n        className={className}\n        onChange={disabled ? undefined : onChange}\n        onFocus={disabled ? undefined : onFocus}\n        onKeyDown={disabled ? undefined : onKeyDown}\n        onKeyDownCapture={disabled ? undefined : onKeyDownCapture}\n        onKeyPress={disabled ? undefined : onKeyPress}\n        onSelect={disabled ? undefined : onSelect}\n        placeholder={placeholder}\n        readOnly={readOnly || disabled}\n        ref={ref}\n        tabIndex={disabled ? -1 : tabIndex}\n        value={value}\n        {...props}\n        type=\"text\"\n      />\n    );\n  }\n);\n\nAccessibleInputText.defaultProps = {\n  className: undefined,\n  disabled: undefined,\n  enterKeyHint: undefined,\n  inputMode: undefined,\n  onChange: undefined,\n  onFocus: undefined,\n  onKeyDown: undefined,\n  onKeyDownCapture: undefined,\n  onKeyPress: undefined,\n  onSelect: undefined,\n  placeholder: undefined,\n  readOnly: undefined,\n  tabIndex: undefined,\n  value: undefined\n};\n\nAccessibleInputText.displayName = 'AccessibleInputText';\n\nAccessibleInputText.propTypes = {\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  enterKeyHint: PropTypes.string,\n  inputMode: PropTypes.oneOf(['text', 'none', 'tel', 'url', 'email', 'numeric', 'decimal', 'search']),\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyDownCapture: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onSelect: PropTypes.func,\n  placeholder: PropTypes.string,\n  readOnly: PropTypes.bool,\n  tabIndex: PropTypes.number,\n  // @ts-ignore PropTypes and TypeScript type do not well understood each other.\n  type: PropTypes.oneOf(['text']).isRequired,\n  value: PropTypes.string\n};\n\nexport default AccessibleInputText;\n"]},"metadata":{},"sourceType":"script"}