{"ast":null,"code":"\"use strict\";\n\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\n\n\nfunction multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\n\nexports.multicast = multicast;\n\nvar MulticastOperator = function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n\n  return MulticastOperator;\n}();\n\nexports.MulticastOperator = MulticastOperator;","map":{"version":3,"mappings":";;AAIA,sCAAuE,qCAAvE;AAOA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,mBAAgCA,uBAAhC,EACgCC,QADhC,EACmF;AACjF,SAAO,mCAAmCC,MAAnC,EAAwD;AAC7D,QAAIC,cAAJ;;AACA,QAAI,OAAOH,uBAAP,KAAmC,UAAvC,EAAmD;AACjDG,oBAAc,GAAqBH,uBAAnC;AACD,KAFD,MAEO;AACLG,oBAAc,GAAG;AACf,eAAmBH,uBAAnB;AACD,OAFD;AAGD;;AAED,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClC,aAAOC,MAAM,CAACE,IAAP,CAAY,IAAIC,iBAAJ,CAAsBF,cAAtB,EAAsCF,QAAtC,CAAZ,CAAP;AACD;;AAED,QAAMK,WAAW,GAAQC,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBO,uDAAtB,CAAzB;AACAH,eAAW,CAACJ,MAAZ,GAAqBA,MAArB;AACAI,eAAW,CAACH,cAAZ,GAA6BA,cAA7B;AAEA,WAAkCG,WAAlC;AACD,GAnBD;AAoBD;;AAtBeI,oBAASC,SAAT;;AAwBhB;AACE,6BAAoBR,cAApB,EACoBF,QADpB,EACsE;AADlD;AACA;AACnB;;AACDI,+CAAKO,UAAL,EAAgCV,MAAhC,EAA2C;AACjC;AACR,QAAMW,OAAO,GAAG,KAAKV,cAAL,EAAhB;AACA,QAAMW,YAAY,GAAGb,QAAQ,CAACY,OAAD,CAAR,CAAkBE,SAAlB,CAA4BH,UAA5B,CAArB;AACAE,gBAAY,CAACE,GAAb,CAAiBd,MAAM,CAACa,SAAP,CAAiBF,OAAjB,CAAjB;AACA,WAAOC,YAAP;AACD,GAND;;AAOF;AAAC,CAXD;;AAAaJ,4BAAiBL,iBAAjB","names":["subjectOrSubjectFactory","selector","source","subjectFactory","lift","MulticastOperator","connectable","Object","create","ConnectableObservable_1","exports","multicast","subscriber","subject","subscription","subscribe","add"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/multicast.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}