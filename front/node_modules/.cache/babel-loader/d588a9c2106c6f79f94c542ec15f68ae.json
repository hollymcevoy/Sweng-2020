{"ast":null,"code":"\"use strict\";\n\nvar multicast_1 = require('./multicast');\n\nvar refCount_1 = require('./refCount');\n\nvar Subject_1 = require('../Subject');\n\nfunction shareSubjectFactory() {\n  return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\n\n\nfunction share() {\n  return function (source) {\n    return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source));\n  };\n}\n\nexports.share = share;\n;","map":{"version":3,"mappings":";;AACA,0BAA0B,aAA1B;;AACA,yBAAyB,YAAzB;;AACA,wBAAwB,YAAxB;;AAIA;AACE,SAAO,IAAIA,iBAAJ,EAAP;AACD;AAED;;;;;;;;;;;;;;AAYA;AACE,SAAO,UAACC,MAAD,EAAsB;AAAK,iCAAWC,sBAAUC,mBAAV,EAA+BF,MAA/B,CAAX;AAAmE,GAArG;AACD;;AAFeG,gBAAKC,KAAL;AAEf","names":["Subject_1","source","multicast_1","shareSubjectFactory","exports","share"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/share.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n"]},"metadata":{},"sourceType":"script"}