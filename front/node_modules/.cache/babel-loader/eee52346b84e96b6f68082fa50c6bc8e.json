{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Recognizer = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../common/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_3 = require(\"./Exports\");\n/**\n * Defines the base class Recognizer which mainly contains common event handlers.\n * @class Recognizer\n */\n\n\nvar Recognizer =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes an instance of a Recognizer\n   * @constructor\n   * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\n   */\n  function Recognizer(audioConfig, properties, connectionFactory) {\n    this.audioConfig = audioConfig !== undefined ? audioConfig : Exports_3.AudioConfig.fromDefaultMicrophoneInput();\n    this.privDisposed = false;\n    this.privProperties = properties.clone();\n    this.privConnectionFactory = connectionFactory;\n    this.implCommonRecognizerSetup();\n  }\n  /**\n   * Dispose of associated resources.\n   * @member Recognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  Recognizer.prototype.close = function (cb, errorCb) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposed);\n    Exports_2.marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  };\n\n  Object.defineProperty(Recognizer.prototype, \"internalData\", {\n    /**\n     * @Internal\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\n     * Do not use externally, object returned will change without warning or notice.\n     */\n    get: function () {\n      return this.privReco;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * This method performs cleanup of resources.\n   * The Boolean parameter disposing indicates whether the method is called\n   * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n   * Derived classes should override this method to dispose resource if needed.\n   * @member Recognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - Flag to request disposal.\n   */\n\n  Recognizer.prototype.dispose = function (disposing) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privDisposed) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.privDisposed = true;\n            if (!disposing) return [3\n            /*break*/\n            , 3];\n            if (!this.privReco) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.privReco.audioSource.turnOff()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.privReco.dispose()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(Recognizer, \"telemetryEnabled\", {\n    /**\n     * This method returns the current state of the telemetry setting.\n     * @member Recognizer.prototype.telemetryEnabled\n     * @function\n     * @public\n     * @returns true if the telemetry is enabled, false otherwise.\n     */\n    get: function () {\n      return Exports_1.ServiceRecognizerBase.telemetryDataEnabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * This method globally enables or disables telemetry.\n   * @member Recognizer.prototype.enableTelemetry\n   * @function\n   * @public\n   * @param enabled - Global setting for telemetry collection.\n   * If set to true, telemetry information like microphone errors,\n   * recognition errors are collected and sent to Microsoft.\n   * If set to false, no telemetry is sent to Microsoft.\n   */\n\n  /* tslint:disable:member-ordering */\n\n  Recognizer.enableTelemetry = function (enabled) {\n    Exports_1.ServiceRecognizerBase.telemetryDataEnabled = enabled;\n  }; // Does the generic recognizer setup that is common across all recognizer types.\n\n\n  Recognizer.prototype.implCommonRecognizerSetup = function () {\n    var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    var osName = \"unknown\";\n    var osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    var recognizerConfig = this.createRecognizerConfig(new Exports_1.SpeechServiceConfig(new Exports_1.Context(new Exports_1.OS(osPlatform, osName, osVersion))));\n    this.privReco = this.createServiceRecognizer(Recognizer.getAuthFromProperties(this.privProperties), this.privConnectionFactory, this.audioConfig, recognizerConfig);\n  };\n\n  Recognizer.prototype.recognizeOnceAsyncImpl = function (recognitionMode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ret, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Contracts_1.Contracts.throwIfDisposed(this.privDisposed);\n            ret = new Exports_2.Deferred();\n            return [4\n            /*yield*/\n            , this.implRecognizerStop()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.privReco.recognize(recognitionMode, ret.resolve, ret.reject)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , ret.promise];\n\n          case 3:\n            result = _a.sent();\n            return [4\n            /*yield*/\n            , this.implRecognizerStop()];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  Recognizer.prototype.startContinuousRecognitionAsyncImpl = function (recognitionMode) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Contracts_1.Contracts.throwIfDisposed(this.privDisposed);\n            return [4\n            /*yield*/\n            , this.implRecognizerStop()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.privReco.recognize(recognitionMode, undefined, undefined)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Recognizer.prototype.stopContinuousRecognitionAsyncImpl = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Contracts_1.Contracts.throwIfDisposed(this.privDisposed);\n            return [4\n            /*yield*/\n            , this.implRecognizerStop()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Recognizer.prototype.implRecognizerStop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.privReco) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.privReco.stopRecognizing()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Recognizer.getAuthFromProperties = function (properties) {\n    var subscriptionKey = properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Key, undefined);\n    var authentication = subscriptionKey && subscriptionKey !== \"\" ? new Exports_1.CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new Exports_1.CognitiveTokenAuthentication(function (authFetchEventId) {\n      var authorizationToken = properties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    }, function (authFetchEventId) {\n      var authorizationToken = properties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    });\n    return authentication;\n  };\n\n  return Recognizer;\n}();\n\nexports.Recognizer = Recognizer;","map":{"version":3,"mappings":"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","names":["audioConfig","properties","connectionFactory","undefined","Exports_3","fromDefaultMicrophoneInput","privDisposed","privProperties","clone","privConnectionFactory","implCommonRecognizerSetup","Recognizer","cb","errorCb","Contracts_1","throwIfDisposed","Exports_2","dispose","Object","privReco","disposing","audioSource","turnOff","_a","Exports_1","telemetryDataEnabled","enabled","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","createRecognizerConfig","createServiceRecognizer","getAuthFromProperties","recognitionMode","ret","implRecognizerStop","recognize","resolve","reject","promise","result","stopRecognizing","subscriptionKey","getProperty","SpeechServiceConnection_Key","authentication","authFetchEventId","authorizationToken","SpeechServiceAuthorization_Token","Promise","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    /* tslint:disable:member-ordering */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}