{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendFilesToPostActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _sendFiles = require(\"../actions/sendFiles\");\n\nvar _mimeWrapper = _interopRequireDefault(require(\"../utils/mime-wrapper\"));\n\nvar _postActivity = _interopRequireDefault(require(\"../actions/postActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(postActivityWithFiles),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(sendFilesToPostActivity),\n    _marked3 = /*#__PURE__*/_regenerator[\"default\"].mark(sendFilesToPostActivitySaga);\n\nvar getType = _mimeWrapper[\"default\"].getType.bind(_mimeWrapper[\"default\"]);\n\nfunction postActivityWithFiles(_ref) {\n  var files;\n  return _regenerator[\"default\"].wrap(function postActivityWithFiles$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          files = _ref.payload.files;\n          _context.next = 3;\n          return (0, _effects.put)((0, _postActivity[\"default\"])({\n            attachments: [].map.call(files, function (_ref2) {\n              var name = _ref2.name,\n                  thumbnail = _ref2.thumbnail,\n                  url = _ref2.url;\n              return {\n                contentType: getType(name) || 'application/octet-stream',\n                contentUrl: url,\n                name: name,\n                thumbnailUrl: thumbnail\n              };\n            }),\n            channelData: {\n              attachmentSizes: [].map.call(files, function (_ref3) {\n                var size = _ref3.size;\n                return size;\n              })\n            },\n            type: 'message'\n          }));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendFilesToPostActivity() {\n  return _regenerator[\"default\"].wrap(function sendFilesToPostActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref4) {\n            var payload = _ref4.payload,\n                type = _ref4.type;\n            return type === _sendFiles.SEND_FILES && payload.files.length;\n          }, postActivityWithFiles);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction sendFilesToPostActivitySaga() {\n  return _regenerator[\"default\"].wrap(function sendFilesToPostActivitySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(sendFilesToPostActivity);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;wDAIUA;yDAiBAC;yDAIeC;;AAvBzB,IAAMC,OAAO,GAAGC,wBAAKD,OAALC,CAAaC,IAAbD,CAAkBA,uBAAlBA,CAAhB;;AAEA,SAAUJ,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6CM,eAA7C,QAAkCC,OAAlC,CAA6CD;AAA7CE;AACE,iBAAM,kBACJ,8BAAa;AACXC,uBAAW,EAAE,GAAGC,GAAH,CAAOC,IAAP,CAAYL,KAAZ,EAAmB;AAAA,kBAAGM,IAAH,SAAGA,IAAH;AAAA,kBAASC,SAAT,SAASA,SAAT;AAAA,kBAAoBC,GAApB,SAAoBA,GAApB;AAAA,qBAA+B;AAC7DC,2BAAW,EAAEZ,OAAO,CAACS,IAAD,CAAPT,IAAiB,0BAD+B;AAE7Da,0BAAU,EAAEF,GAFiD;AAG7DF,oBAAI,EAAJA,IAH6D;AAI7DK,4BAAY,EAAEJ;AAJ+C,eAA/B;AAAnB,cADF;AAOXK,uBAAW,EAAE;AACXC,6BAAe,EAAE,GAAGT,GAAH,CAAOC,IAAP,CAAYL,KAAZ,EAAmB;AAAA,oBAAGc,IAAH,SAAGA,IAAH;AAAA,uBAAcA,IAAd;AAAnB;AADN,aAPF;AAUXC,gBAAI,EAAE;AAVK,WAAb,CADI,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUpB,uBAAV;AAAA;AAAA;AAAA;AAAA;AAAAqB;AACE,iBAAM,wBAAU;AAAA,gBAAGf,OAAH,SAAGA,OAAH;AAAA,gBAAYc,IAAZ,SAAYA,IAAZ;AAAA,mBAAuBA,IAAI,KAAKE,qBAATF,IAAuBd,OAAO,CAACD,KAARC,CAAciB,MAA5D;AAAV,aAA8ExB,qBAA9E,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIe,SAAUE,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAAuB;AACb,iBAAM,gCAAexB,uBAAf,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["postActivityWithFiles","sendFilesToPostActivity","sendFilesToPostActivitySaga","getType","mime","bind","files","payload","_context","attachments","map","call","name","thumbnail","url","contentType","contentUrl","thumbnailUrl","channelData","attachmentSizes","size","type","_context2","SEND_FILES","length","_context3"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/sendFilesToPostActivitySaga.js"],"sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { SEND_FILES } from '../actions/sendFiles';\nimport mime from '../utils/mime-wrapper';\nimport postActivity from '../actions/postActivity';\nimport whileConnected from './effects/whileConnected';\n\nconst getType = mime.getType.bind(mime);\n\nfunction* postActivityWithFiles({ payload: { files } }) {\n  yield put(\n    postActivity({\n      attachments: [].map.call(files, ({ name, thumbnail, url }) => ({\n        contentType: getType(name) || 'application/octet-stream',\n        contentUrl: url,\n        name,\n        thumbnailUrl: thumbnail\n      })),\n      channelData: {\n        attachmentSizes: [].map.call(files, ({ size }) => size)\n      },\n      type: 'message'\n    })\n  );\n}\n\nfunction* sendFilesToPostActivity() {\n  yield takeEvery(({ payload, type }) => type === SEND_FILES && payload.files.length, postActivityWithFiles);\n}\n\nexport default function* sendFilesToPostActivitySaga() {\n  yield whileConnected(sendFilesToPostActivity);\n}\n"]},"metadata":{},"sourceType":"script"}