{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useActivityAccessibleName;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _react = require(\"react\");\n\nvar _activityAltText = _interopRequireDefault(require(\"../Utils/activityAltText\"));\n\nvar _tabbableElements = _interopRequireDefault(require(\"../Utils/tabbableElements\"));\n\nvar _useRenderMarkdownAsHTML = _interopRequireDefault(require(\"../hooks/useRenderMarkdownAsHTML\"));\n\nvar _useValueRef = _interopRequireDefault(require(\"../hooks/internal/useValueRef\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar InteractiveType;\n\n(function (InteractiveType) {\n  InteractiveType[InteractiveType[\"LINK\"] = 0] = \"LINK\";\n  InteractiveType[InteractiveType[\"WIDGET\"] = 1] = \"WIDGET\";\n})(InteractiveType || (InteractiveType = {}));\n\nvar useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\nvar ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {\n  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',\n  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',\n  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',\n  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',\n  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'\n};\n\nfunction useActivityAccessibleName(activity, bodyRef) {\n  var _activity$from, _activity$attachments;\n\n  var _useAvatarForBot = useAvatarForBot(),\n      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),\n      botInitials = _useAvatarForBot2[0].initials;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      interactiveType = _useState2[0],\n      setInteractiveType = _useState2[1];\n\n  var fromSelf = ((_activity$from = activity.from) === null || _activity$from === void 0 ? void 0 : _activity$from.role) === 'user';\n  var localize = useLocalizer();\n  var localizeWithPlural = useLocalizer({\n    plural: true\n  });\n  var numAttachments = ((_activity$attachments = activity.attachments) === null || _activity$attachments === void 0 ? void 0 : _activity$attachments.length) || 0;\n  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();\n  var activityInteractiveAlt = localize('ACTIVITY_INTERACTIVE_LABEL_ALT'); // \"Click to interact.\"\n\n  var activityInteractiveWithLinkAlt = localize('ACTIVITY_INTERACTIVE_WITH_LINKS_LABEL_ALT'); // \"Click to interact.\"\n\n  var greetingAlt = (0, _react.useMemo)(function () {\n    return (fromSelf ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]{2,}/g, ' ');\n  }, [botInitials, fromSelf, localize]);\n  var interactiveTypeRef = (0, _useValueRef.default)(interactiveType);\n  var messageTextAlt = (0, _react.useMemo)(function () {\n    return (0, _activityAltText.default)(activity, renderMarkdownAsHTML);\n  }, [activity, renderMarkdownAsHTML]);\n  var numAttachmentsAlt = (0, _react.useMemo)(function () {\n    return numAttachments ? localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numAttachments) : '';\n  }, [localizeWithPlural, numAttachments]);\n  var accessibleName = (0, _react.useMemo)( // We are concatenating in a single string for Safari. If we split it up, Safari will only narrate the first section.\n  function () {\n    return \"\".concat(greetingAlt, \" \").concat(messageTextAlt, \" \").concat(numAttachmentsAlt, \" \").concat(interactiveType === InteractiveType.LINK ? activityInteractiveWithLinkAlt : interactiveType === InteractiveType.WIDGET ? activityInteractiveAlt : '');\n  }, [activityInteractiveAlt, activityInteractiveWithLinkAlt, greetingAlt, interactiveType, messageTextAlt, numAttachmentsAlt]);\n  (0, _react.useEffect)(function () {\n    var _bodyRef$current;\n\n    var hasLinks = !!((_bodyRef$current = bodyRef.current) !== null && _bodyRef$current !== void 0 && _bodyRef$current.querySelector('a'));\n    var hasWidgets = !!(0, _tabbableElements.default)(bodyRef.current).length;\n    interactiveTypeRef.current !== hasWidgets && setInteractiveType(hasLinks ? InteractiveType.LINK : hasWidgets ? InteractiveType.WIDGET : false);\n  }, [bodyRef, interactiveTypeRef, setInteractiveType]);\n  return [accessibleName];\n}","map":{"version":3,"mappings":"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","names":["InteractiveType","useAvatarForBot","hooks","useLocalizer","ACTIVITY_NUM_ATTACHMENTS_ALT_IDS","few","many","one","other","two","useActivityAccessibleName","activity","bodyRef","botInitials","initials","interactiveType","setInteractiveType","fromSelf","from","role","localize","localizeWithPlural","plural","numAttachments","attachments","length","renderMarkdownAsHTML","activityInteractiveAlt","activityInteractiveWithLinkAlt","greetingAlt","replace","interactiveTypeRef","messageTextAlt","numAttachmentsAlt","accessibleName","LINK","WIDGET","hasLinks","current","_bodyRef$current","querySelector","hasWidgets"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Transcript/useActivityAccessibleName.ts"],"sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport type { DirectLineActivity } from 'botframework-webchat-core';\nimport type { RefObject } from 'react';\n\nimport activityAltText from '../Utils/activityAltText';\nimport tabbableElements from '../Utils/tabbableElements';\nimport useRenderMarkdownAsHTML from '../hooks/useRenderMarkdownAsHTML';\nimport useValueRef from '../hooks/internal/useValueRef';\n\nenum InteractiveType {\n  LINK,\n  WIDGET\n}\n\nconst { useAvatarForBot, useLocalizer } = hooks;\n\nconst ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {\n  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',\n  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',\n  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',\n  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',\n  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'\n};\n\nexport default function useActivityAccessibleName(activity: DirectLineActivity, bodyRef: RefObject<HTMLElement>) {\n  const [{ initials: botInitials }] = useAvatarForBot();\n  const [interactiveType, setInteractiveType] = useState<InteractiveType | false>(false);\n  const fromSelf = activity.from?.role === 'user';\n  const localize = useLocalizer();\n  const localizeWithPlural = useLocalizer({ plural: true });\n  const numAttachments = activity.attachments?.length || 0;\n  const renderMarkdownAsHTML = useRenderMarkdownAsHTML();\n\n  const activityInteractiveAlt = localize('ACTIVITY_INTERACTIVE_LABEL_ALT'); // \"Click to interact.\"\n  const activityInteractiveWithLinkAlt = localize('ACTIVITY_INTERACTIVE_WITH_LINKS_LABEL_ALT'); // \"Click to interact.\"\n  const greetingAlt = useMemo(\n    () =>\n      (fromSelf ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(\n        /\\s{2,}/gu,\n        ' '\n      ),\n    [botInitials, fromSelf, localize]\n  );\n  const interactiveTypeRef = useValueRef(interactiveType);\n  const messageTextAlt = useMemo(\n    () => activityAltText(activity, renderMarkdownAsHTML),\n    [activity, renderMarkdownAsHTML]\n  );\n  const numAttachmentsAlt = useMemo(\n    () => (numAttachments ? localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numAttachments) : ''),\n    [localizeWithPlural, numAttachments]\n  );\n\n  const accessibleName = useMemo(\n    // We are concatenating in a single string for Safari. If we split it up, Safari will only narrate the first section.\n    () =>\n      `${greetingAlt} ${messageTextAlt} ${numAttachmentsAlt} ${\n        interactiveType === InteractiveType.LINK\n          ? activityInteractiveWithLinkAlt\n          : interactiveType === InteractiveType.WIDGET\n          ? activityInteractiveAlt\n          : ''\n      }`,\n    [\n      activityInteractiveAlt,\n      activityInteractiveWithLinkAlt,\n      greetingAlt,\n      interactiveType,\n      messageTextAlt,\n      numAttachmentsAlt\n    ]\n  );\n\n  useEffect(() => {\n    const hasLinks = !!bodyRef.current?.querySelector('a');\n    const hasWidgets = !!tabbableElements(bodyRef.current).length;\n\n    interactiveTypeRef.current !== hasWidgets &&\n      setInteractiveType(hasLinks ? InteractiveType.LINK : hasWidgets ? InteractiveType.WIDGET : false);\n  }, [bodyRef, interactiveTypeRef, setInteractiveType]);\n\n  return [accessibleName];\n}\n"]},"metadata":{},"sourceType":"script"}