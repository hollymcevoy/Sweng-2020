{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AudioOutputFormatImpl = void 0;\n\nvar SpeechSynthesisOutputFormat_1 = require(\"../SpeechSynthesisOutputFormat\");\n\nvar AudioStreamFormat_1 = require(\"./AudioStreamFormat\");\n/**\n * @private\n * @class AudioOutputFormatImpl\n * Updated in version 1.17.0\n */\n// tslint:disable-next-line:max-classes-per-file\n\n\nvar AudioOutputFormatImpl =\n/** @class */\nfunction (_super) {\n  __extends(AudioOutputFormatImpl, _super);\n  /**\n   * Creates an instance with the given values.\n   * @constructor\n   * @param formatTag\n   * @param {number} channels - Number of channels.\n   * @param {number} samplesPerSec - Samples per second.\n   * @param {number} avgBytesPerSec - Average bytes per second.\n   * @param {number} blockAlign - Block alignment.\n   * @param {number} bitsPerSample - Bits per sample.\n   * @param {string} audioFormatString - Audio format string\n   * @param {string} requestAudioFormatString - Audio format string sent to service.\n   * @param {boolean} hasHeader - If the format has header or not.\n   */\n\n\n  function AudioOutputFormatImpl(formatTag, channels, samplesPerSec, avgBytesPerSec, blockAlign, bitsPerSample, audioFormatString, requestAudioFormatString, hasHeader) {\n    var _this = _super.call(this, samplesPerSec, bitsPerSample, channels, formatTag) || this;\n\n    _this.formatTag = formatTag;\n    _this.avgBytesPerSec = avgBytesPerSec;\n    _this.blockAlign = blockAlign;\n    _this.priAudioFormatString = audioFormatString;\n    _this.priRequestAudioFormatString = requestAudioFormatString;\n    _this.priHasHeader = hasHeader;\n    return _this;\n  }\n\n  AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat = function (speechSynthesisOutputFormat) {\n    if (speechSynthesisOutputFormat === undefined) {\n      return AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\n  };\n\n  AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString = function (speechSynthesisOutputFormatString) {\n    switch (speechSynthesisOutputFormatString) {\n      case \"raw-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, \"audio-16khz-16kbps-mono-siren\", true);\n\n      case \"audio-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-32kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 16000, 32 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-128kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 16000, 128 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-64kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 16000, 64 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-48kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 24000, 48 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 24000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-160kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 24000, 160 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-16khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.SILKSkype, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", true);\n\n      case \"riff-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", true);\n\n      case \"riff-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-mulaw\", true);\n\n      case \"raw-16khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, \"raw-16khz-16bit-mono-pcm\", false);\n\n      case \"raw-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", false);\n\n      case \"raw-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", false);\n\n      case \"ogg-16khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.OGG_OPUS, 1, 16000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"ogg-24khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.OGG_OPUS, 1, 24000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-48khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", false);\n\n      case \"riff-48khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", true);\n\n      case \"audio-48khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 48000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-48khz-192kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.MP3, 1, 48000, 192 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"ogg-48khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.OGG_OPUS, 1, 48000, 12000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"webm-16khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.WEBM_OPUS, 1, 16000, 8000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"webm-24khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.WEBM_OPUS, 1, 24000, 8000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-24khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.SILKSkype, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-8khz-8bit-mono-alaw\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-8khz-8bit-mono-alaw\":\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-alaw\", true);\n\n      case \"riff-16khz-16bit-mono-pcm\":\n      default:\n        return new AudioOutputFormatImpl(AudioStreamFormat_1.AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, \"riff-16khz-16bit-mono-pcm\", \"raw-16khz-16bit-mono-pcm\", true);\n    }\n  };\n\n  AudioOutputFormatImpl.getDefaultOutputFormat = function () {\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(typeof window !== \"undefined\" ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\n  };\n\n  Object.defineProperty(AudioOutputFormatImpl.prototype, \"hasHeader\", {\n    /**\n     * Specifies if this audio output format has a header\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\n     * @function\n     * @public\n     */\n    get: function () {\n      return this.priHasHeader;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AudioOutputFormatImpl.prototype, \"header\", {\n    /**\n     * Specifies the header of this format\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\n     * @function\n     * @public\n     */\n    get: function () {\n      if (this.hasHeader) {\n        return this.privHeader;\n      }\n\n      return undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Updates the header based on the audio length\n   * @member AudioOutputFormatImpl.updateHeader\n   * @function\n   * @public\n   * @param {number} audioLength - the audio length\n   */\n\n  AudioOutputFormatImpl.prototype.updateHeader = function (audioLength) {\n    if (this.priHasHeader) {\n      var view = new DataView(this.privHeader);\n      view.setUint32(40, audioLength, true);\n    }\n  };\n\n  Object.defineProperty(AudioOutputFormatImpl.prototype, \"requestAudioFormatString\", {\n    /**\n     * Specifies the audio format string to be sent to the service\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\n     * @function\n     * @public\n     */\n    get: function () {\n      return this.priRequestAudioFormatString;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString = (_a = {}, _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw] = \"raw-8khz-8bit-mono-mulaw\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren] = \"riff-16khz-16kbps-mono-siren\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren] = \"audio-16khz-16kbps-mono-siren\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3] = \"audio-16khz-32kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3] = \"audio-16khz-128kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3] = \"audio-16khz-64kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3] = \"audio-24khz-48kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3] = \"audio-24khz-96kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3] = \"audio-24khz-160kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk] = \"raw-16khz-16bit-mono-truesilk\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm] = \"riff-16khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm] = \"riff-8khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm] = \"riff-24khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw] = \"riff-8khz-8bit-mono-mulaw\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm] = \"raw-16khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm] = \"raw-24khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm] = \"raw-8khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus] = \"ogg-16khz-16bit-mono-opus\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus] = \"ogg-24khz-16bit-mono-opus\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm] = \"raw-48khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm] = \"riff-48khz-16bit-mono-pcm\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3] = \"audio-48khz-96kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3] = \"audio-48khz-192kbitrate-mono-mp3\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus] = \"ogg-48khz-16bit-mono-opus\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus] = \"webm-16khz-16bit-mono-opus\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus] = \"webm-24khz-16bit-mono-opus\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk] = \"raw-24khz-16bit-mono-truesilk\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw] = \"raw-8khz-8bit-mono-alaw\", _a[SpeechSynthesisOutputFormat_1.SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw] = \"riff-8khz-8bit-mono-alaw\", _a);\n  return AudioOutputFormatImpl;\n}(AudioStreamFormat_1.AudioStreamFormatImpl);\n\nexports.AudioOutputFormatImpl = AudioOutputFormatImpl;","map":{"version":3,"mappings":"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","names":["__extends","formatTag","channels","samplesPerSec","avgBytesPerSec","blockAlign","bitsPerSample","audioFormatString","requestAudioFormatString","hasHeader","_super","_this","priAudioFormatString","priRequestAudioFormatString","priHasHeader","AudioOutputFormatImpl","speechSynthesisOutputFormat","undefined","getDefaultOutputFormat","fromSpeechSynthesisOutputFormatString","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","AudioStreamFormat_1","MuLaw","Siren","MP3","SILKSkype","PCM","OGG_OPUS","WEBM_OPUS","ALaw","window","Object","privHeader","audioLength","view","DataView","setUint32","_a","SpeechSynthesisOutputFormat_1","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}