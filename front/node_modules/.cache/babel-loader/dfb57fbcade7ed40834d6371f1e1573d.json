{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/dylanmurray/Sweng-2022/front/node_modules/@babel/runtime/regenerator/index.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDefaultCardActionMiddleware;\n\nvar _detectBrowser = require(\"../../Utils/detectBrowser\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n} // This code is adopted from sanitize-html/naughtyScheme.\n// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.\n// https://github.com/apostrophecms/sanitize-html/\n\n\nfunction getScheme(href) {\n  // Browsers ignore character codes of 32 (space) and below in a surprising\n  // number of situations. Start reading here:\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab\n\n  /* eslint-disable-next-line no-control-regex */\n  href = href.replace(/[\\0- ]+/g, ''); // Clobber any comments in URLs, which the browser might\n  // interpret inside an XML data island, allowing\n  // a javascript: URL to be snuck through\n\n  href = href.replace(/<!\\x2D\\x2D(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?\\x2D\\x2D>/g, ''); // Case insensitive so we don't get faked out by JAVASCRIPT #1\n\n  var matches = href.match(/^([A-Za-z]+):/);\n\n  if (!matches) {\n    // Protocol-relative URL or no scheme\n    return;\n  }\n\n  return matches[1].toLowerCase();\n}\n\nvar ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];\n\nfunction createDefaultCardActionMiddleware() {\n  return [function () {\n    return function (next) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var _args$ = args[0],\n            _args$$cardAction = _args$.cardAction,\n            type = _args$$cardAction.type,\n            value = _args$$cardAction.value,\n            getSignInUrl = _args$.getSignInUrl;\n\n        switch (type) {\n          case 'call':\n          case 'downloadFile':\n          case 'openUrl':\n          case 'playAudio':\n          case 'playVideo':\n          case 'showImage':\n            if (ALLOWED_SCHEMES.includes(getScheme(value))) {\n              if (_detectBrowser.ie11) {\n                var newWindow = window.open();\n                newWindow.opener = null;\n                newWindow.location = value;\n              } else {\n                // False alarm: this is \"window.open\", and not \"fs.open\".\n                // eslint-disable-next-line security/detect-non-literal-fs-filename\n                window.open(value, '_blank', 'noopener noreferrer');\n              }\n            } else {\n              console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);\n            }\n\n            break;\n\n          case 'signin':\n            {\n              /**\n               * @todo TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand\n               *       This is to eliminate the delay between window.open() and location.href call\n               */\n              _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var popup, url;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        popup = window.open();\n                        _context.next = 3;\n                        return getSignInUrl();\n\n                      case 3:\n                        url = _context.sent;\n\n                        if (['http', 'https'].includes(getScheme(url))) {\n                          popup.location.href = url;\n                        } else {\n                          console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', url);\n                          popup.close();\n                        }\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }))();\n\n              break;\n            }\n\n          default:\n            return next.apply(void 0, args);\n        }\n      };\n    };\n  }];\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;AACA;AACA;;;AACA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB;AACA;AACA;;AAEA;AACAA,MAAI,GAAGA,IAAI,CAACC,OAALD,CAAa,UAAbA,EAA+B,EAA/BA,CAAPA,CANuB,CAQvB;AACA;AACA;;AACAA,MAAI,GAAGA,IAAI,CAACC,OAALD,CAAa,sLAAbA,EAA6B,EAA7BA,CAAPA,CAXuB,CAavB;;AACA,MAAME,OAAO,GAAGF,IAAI,CAACG,KAALH,CAAW,eAAXA,CAAhB;;AAEA,MAAI,CAACE,OAAL,EAAc;AACZ;AACA;AACD;;AAED,SAAOA,OAAO,CAAC,CAAD,CAAPA,CAAWE,WAAXF,EAAP;AACD;;AAED,IAAMG,eAAe,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAjC,EAA2C,KAA3C,EAAkD,KAAlD,CAAxB;;AAEe,SAASC,iCAAT,GAA6C;AAC1D,SAAO,CACL;AAAA,WACE,gBAAI;AAAA,aACJ,YAAa;AAAA,0CAATC,IAAS;AAATA,cAAS,MAATA,GAASC,eAATD;AAAS;;AACX,qBAKIA,IALJ;AAAA,uCAEIE,UAFJ;AAAA,YAEkBC,IAFlB,qBAEkBA,IAFlB;AAAA,YAEwBC,KAFxB,qBAEwBA,KAFxB;AAAA,YAGIC,YAHJ,UAGIA,YAHJ;;AAOA,gBAAQF,IAAR;AACE,eAAK,MAAL;AACA,eAAK,cAAL;AACA,eAAK,SAAL;AACA,eAAK,WAAL;AACA,eAAK,WAAL;AACA,eAAK,WAAL;AACE,gBAAIL,eAAe,CAACQ,QAAhBR,CAAyBN,SAAS,CAACY,KAAD,CAAlCN,CAAJ,EAAgD;AAC9C,kBAAIS,mBAAJ,EAAU;AACR,oBAAMC,SAAS,GAAGC,MAAM,CAACC,IAAPD,EAAlB;AACAD,yBAAS,CAACG,MAAVH,GAAmB,IAAnBA;AACAA,yBAAS,CAACI,QAAVJ,GAAqBJ,KAArBI;AAHF,qBAIO;AACL;AACA;AACAC,sBAAM,CAACC,IAAPD,CAAYL,KAAZK,EAAmB,QAAnBA,EAA6B,qBAA7BA;AACD;AATH,mBAUO;AACLI,qBAAO,CAACC,IAARD,CAAa,gEAAbA,EAA+ET,KAA/ES;AACD;;AAED;;AAEF,eAAK,QAAL;AAAe;AACb;AACZ;AACA;AACA;AAEYE,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACOC,6BADP,GACeP,MAAM,CAACC,IAAPD,EAARO;AADPC;AAAA,+BAEmBZ,YAAY,EAF/B;;AAAA;AAEOa,2BAFP,gBAEOA;;AAEN,4BAAI,CAAC,MAAD,EAAS,OAAT,EAAkBZ,QAAlB,CAA2Bd,SAAS,CAAC0B,GAAD,CAApC,CAAJ,EAAgD;AAC9CF,+BAAK,CAACJ,QAANI,CAAevB,IAAfuB,GAAsBE,GAAtBF;AADF,+BAEO;AACLH,iCAAO,CAACC,IAARD,CAAa,gEAAbA,EAA+EK,GAA/EL;AAEAG,+BAAK,CAACG,KAANH;AACD;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAD;;AAaA;AACD;;AAED;AACE,mBAAOI,IAAI,MAAJA,SAAQpB,IAARoB,CAAP;AA9CJ;AATE;AADN;AADK,IAAP;AA6DD","names":["getScheme","href","replace","matches","match","toLowerCase","ALLOWED_SCHEMES","createDefaultCardActionMiddleware","args","arguments","cardAction","type","value","getSignInUrl","includes","ie11","newWindow","window","open","opener","location","console","warn","_asyncToGenerator","popup","_context","url","close","next"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Middleware/CardAction/createCoreMiddleware.js"],"sourcesContent":["import { ie11 } from '../../Utils/detectBrowser';\n\n// This code is adopted from sanitize-html/naughtyScheme.\n// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.\n// https://github.com/apostrophecms/sanitize-html/\nfunction getScheme(href) {\n  // Browsers ignore character codes of 32 (space) and below in a surprising\n  // number of situations. Start reading here:\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab\n\n  /* eslint-disable-next-line no-control-regex */\n  href = href.replace(/[\\x00-\\x20]+/gu, '');\n\n  // Clobber any comments in URLs, which the browser might\n  // interpret inside an XML data island, allowing\n  // a javascript: URL to be snuck through\n  href = href.replace(/<!--.*?-->/gu, '');\n\n  // Case insensitive so we don't get faked out by JAVASCRIPT #1\n  const matches = href.match(/^([a-zA-Z]+):/u);\n\n  if (!matches) {\n    // Protocol-relative URL or no scheme\n    return;\n  }\n\n  return matches[1].toLowerCase();\n}\n\nconst ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];\n\nexport default function createDefaultCardActionMiddleware() {\n  return [\n    () =>\n      next =>\n      (...args) => {\n        const [\n          {\n            cardAction: { type, value },\n            getSignInUrl\n          }\n        ] = args;\n\n        switch (type) {\n          case 'call':\n          case 'downloadFile':\n          case 'openUrl':\n          case 'playAudio':\n          case 'playVideo':\n          case 'showImage':\n            if (ALLOWED_SCHEMES.includes(getScheme(value))) {\n              if (ie11) {\n                const newWindow = window.open();\n                newWindow.opener = null;\n                newWindow.location = value;\n              } else {\n                // False alarm: this is \"window.open\", and not \"fs.open\".\n                // eslint-disable-next-line security/detect-non-literal-fs-filename\n                window.open(value, '_blank', 'noopener noreferrer');\n              }\n            } else {\n              console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);\n            }\n\n            break;\n\n          case 'signin': {\n            /**\n             * @todo TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand\n             *       This is to eliminate the delay between window.open() and location.href call\n             */\n\n            (async function () {\n              const popup = window.open();\n              const url = await getSignInUrl();\n\n              if (['http', 'https'].includes(getScheme(url))) {\n                popup.location.href = url;\n              } else {\n                console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', url);\n\n                popup.close();\n              }\n            })();\n\n            break;\n          }\n\n          default:\n            return next(...args);\n        }\n      }\n  ];\n}\n"]},"metadata":{},"sourceType":"script"}