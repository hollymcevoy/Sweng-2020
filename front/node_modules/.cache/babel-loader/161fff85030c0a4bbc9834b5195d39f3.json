{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeakerAudioDestination = void 0;\n\nvar Exports_1 = require(\"../../common.speech/Exports\");\n\nvar Exports_2 = require(\"../../common/Exports\");\n\nvar AudioOutputStream_1 = require(\"./AudioOutputStream\");\n\nvar AudioStreamFormat_1 = require(\"./AudioStreamFormat\");\n\nvar MediaDurationPlaceholderSeconds = 60 * 30;\nvar AudioFormatToMimeType = (_a = {}, _a[AudioStreamFormat_1.AudioFormatTag.PCM] = \"audio/wav\", _a[AudioStreamFormat_1.AudioFormatTag.MuLaw] = \"audio/x-wav\", _a[AudioStreamFormat_1.AudioFormatTag.MP3] = \"audio/mpeg\", _a[AudioStreamFormat_1.AudioFormatTag.OGG_OPUS] = \"audio/ogg\", _a[AudioStreamFormat_1.AudioFormatTag.WEBM_OPUS] = \"audio/webm; codecs=opus\", _a[AudioStreamFormat_1.AudioFormatTag.ALaw] = \"audio/x-wav\", _a);\n/**\n * Represents the speaker playback audio destination, which only works in browser.\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\n * @class SpeakerAudioDestination\n * Updated in version 1.17.0\n */\n\nvar SpeakerAudioDestination =\n/** @class */\nfunction () {\n  function SpeakerAudioDestination(audioDestinationId) {\n    this.privPlaybackStarted = false;\n    this.privAppendingToBuffer = false;\n    this.privMediaSourceOpened = false;\n    this.privBytesReceived = 0;\n    this.privId = audioDestinationId ? audioDestinationId : Exports_2.createNoDashGuid();\n    this.privIsPaused = false;\n    this.privIsClosed = false;\n  }\n\n  SpeakerAudioDestination.prototype.id = function () {\n    return this.privId;\n  };\n\n  SpeakerAudioDestination.prototype.write = function (buffer, cb, err) {\n    if (this.privAudioBuffer !== undefined) {\n      this.privAudioBuffer.push(buffer);\n      this.updateSourceBuffer().then(function () {\n        if (!!cb) {\n          cb();\n        }\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } else if (this.privAudioOutputStream !== undefined) {\n      this.privAudioOutputStream.write(buffer);\n      this.privBytesReceived += buffer.byteLength;\n    }\n  };\n\n  SpeakerAudioDestination.prototype.close = function (cb, err) {\n    var _this = this;\n\n    this.privIsClosed = true;\n\n    if (this.privSourceBuffer !== undefined) {\n      this.handleSourceBufferUpdateEnd().then(function () {\n        if (!!cb) {\n          cb();\n        }\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } else if (this.privAudioOutputStream !== undefined) {\n      if ((this.privFormat.formatTag === AudioStreamFormat_1.AudioFormatTag.PCM || this.privFormat.formatTag === AudioStreamFormat_1.AudioFormatTag.MuLaw || this.privFormat.formatTag === AudioStreamFormat_1.AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\n        // tslint:disable-next-line:no-console\n        console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\n\n        if (!!this.onAudioEnd) {\n          this.onAudioEnd(this);\n        }\n      } else {\n        var receivedAudio_1 = new ArrayBuffer(this.privBytesReceived);\n        this.privAudioOutputStream.read(receivedAudio_1).then(function (_) {\n          receivedAudio_1 = Exports_1.SynthesisAdapterBase.addHeader(receivedAudio_1, _this.privFormat);\n          var audioBlob = new Blob([receivedAudio_1], {\n            type: AudioFormatToMimeType[_this.privFormat.formatTag]\n          });\n          _this.privAudio.src = window.URL.createObjectURL(audioBlob);\n\n          _this.notifyPlayback().then(function () {\n            if (!!cb) {\n              cb();\n            }\n          }, function (error) {\n            if (!!err) {\n              err(error);\n            }\n          });\n        }, function (error) {\n          if (!!err) {\n            err(error);\n          }\n        });\n      }\n    } else {\n      // unsupported format, call onAudioEnd directly.\n      if (!!this.onAudioEnd) {\n        this.onAudioEnd(this);\n      }\n    }\n  };\n\n  Object.defineProperty(SpeakerAudioDestination.prototype, \"format\", {\n    set: function (format) {\n      var _this = this;\n\n      if (typeof AudioContext !== \"undefined\" || typeof window.webkitAudioContext !== \"undefined\") {\n        this.privFormat = format;\n        var mimeType_1 = AudioFormatToMimeType[this.privFormat.formatTag];\n\n        if (mimeType_1 === undefined) {\n          // tslint:disable-next-line:no-console\n          console.warn(\"Unknown mimeType for format \" + AudioStreamFormat_1.AudioFormatTag[this.privFormat.formatTag] + \"; playback is not supported.\");\n        } else if (typeof MediaSource !== \"undefined\" && MediaSource.isTypeSupported(mimeType_1)) {\n          this.privAudio = new Audio();\n          this.privAudioBuffer = [];\n          this.privMediaSource = new MediaSource();\n          this.privAudio.src = URL.createObjectURL(this.privMediaSource);\n          this.privAudio.load();\n\n          this.privMediaSource.onsourceopen = function (event) {\n            _this.privMediaSourceOpened = true;\n            _this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\n            _this.privSourceBuffer = _this.privMediaSource.addSourceBuffer(mimeType_1);\n\n            _this.privSourceBuffer.onupdate = function (_) {\n              _this.updateSourceBuffer().catch(function (reason) {\n                Exports_2.Events.instance.onEvent(new Exports_2.BackgroundEvent(reason));\n              });\n            };\n\n            _this.privSourceBuffer.onupdateend = function (_) {\n              _this.handleSourceBufferUpdateEnd().catch(function (reason) {\n                Exports_2.Events.instance.onEvent(new Exports_2.BackgroundEvent(reason));\n              });\n            };\n\n            _this.privSourceBuffer.onupdatestart = function (_) {\n              _this.privAppendingToBuffer = false;\n            };\n          };\n\n          this.updateSourceBuffer().catch(function (reason) {\n            Exports_2.Events.instance.onEvent(new Exports_2.BackgroundEvent(reason));\n          });\n        } else {\n          // tslint:disable-next-line:no-console\n          console.warn(\"Format \" + AudioStreamFormat_1.AudioFormatTag[this.privFormat.formatTag] + \" could not be played by MSE, streaming playback is not enabled.\");\n          this.privAudioOutputStream = new AudioOutputStream_1.PullAudioOutputStreamImpl();\n          this.privAudioOutputStream.format = this.privFormat;\n          this.privAudio = new Audio();\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeakerAudioDestination.prototype, \"isClosed\", {\n    get: function () {\n      return this.privIsClosed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeakerAudioDestination.prototype, \"currentTime\", {\n    get: function () {\n      if (this.privAudio !== undefined) {\n        return this.privAudio.currentTime;\n      }\n\n      return -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SpeakerAudioDestination.prototype.pause = function () {\n    if (!this.privIsPaused && this.privAudio !== undefined) {\n      this.privAudio.pause();\n      this.privIsPaused = true;\n    }\n  };\n\n  SpeakerAudioDestination.prototype.resume = function (cb, err) {\n    if (this.privIsPaused && this.privAudio !== undefined) {\n      this.privAudio.play().then(function () {\n        if (!!cb) {\n          cb();\n        }\n      }, function (error) {\n        if (!!err) {\n          err(error);\n        }\n      });\n      this.privIsPaused = false;\n    }\n  };\n\n  Object.defineProperty(SpeakerAudioDestination.prototype, \"internalAudio\", {\n    get: function () {\n      return this.privAudio;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SpeakerAudioDestination.prototype.updateSourceBuffer = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var binary;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.privAudioBuffer !== undefined && this.privAudioBuffer.length > 0 && this.sourceBufferAvailable())) return [3\n            /*break*/\n            , 2];\n            this.privAppendingToBuffer = true;\n            binary = this.privAudioBuffer.shift();\n\n            try {\n              this.privSourceBuffer.appendBuffer(binary);\n            } catch (error) {\n              this.privAudioBuffer.unshift(binary); // tslint:disable-next-line:no-console\n\n              console.log(\"buffer filled, pausing addition of binaries until space is made\");\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.notifyPlayback()];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            if (!this.canEndStream()) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.handleSourceBufferUpdateEnd()];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SpeakerAudioDestination.prototype.handleSourceBufferUpdateEnd = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.canEndStream() && this.sourceBufferAvailable())) return [3\n            /*break*/\n            , 2];\n            this.privMediaSource.endOfStream();\n            return [4\n            /*yield*/\n            , this.notifyPlayback()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SpeakerAudioDestination.prototype.notifyPlayback = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!this.privPlaybackStarted && this.privAudio !== undefined)) return [3\n            /*break*/\n            , 2];\n            this.privPlaybackStarted = true;\n\n            if (!!this.onAudioStart) {\n              this.onAudioStart(this);\n            }\n\n            this.privAudio.onended = function () {\n              if (!!_this.onAudioEnd) {\n                _this.onAudioEnd(_this);\n              }\n            };\n\n            if (!!this.privIsPaused) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.privAudio.play()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SpeakerAudioDestination.prototype.canEndStream = function () {\n    return this.isClosed && this.privSourceBuffer !== undefined && this.privAudioBuffer.length === 0 && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\";\n  };\n\n  SpeakerAudioDestination.prototype.sourceBufferAvailable = function () {\n    return this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating;\n  };\n\n  return SpeakerAudioDestination;\n}();\n\nexports.SpeakerAudioDestination = SpeakerAudioDestination;","map":{"version":3,"mappings":"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","names":["MediaDurationPlaceholderSeconds","AudioFormatToMimeType","_a","AudioStreamFormat_1","PCM","MuLaw","MP3","OGG_OPUS","WEBM_OPUS","ALaw","audioDestinationId","privId","Exports_2","privIsPaused","privIsClosed","SpeakerAudioDestination","buffer","cb","err","privAudioBuffer","undefined","push","updateSourceBuffer","then","error","privAudioOutputStream","write","privBytesReceived","byteLength","privSourceBuffer","handleSourceBufferUpdateEnd","privFormat","formatTag","hasHeader","console","warn","onAudioEnd","receivedAudio_1","ArrayBuffer","read","_","Exports_1","addHeader","_this","audioBlob","Blob","type","privAudio","src","window","URL","createObjectURL","notifyPlayback","Object","format","AudioContext","webkitAudioContext","mimeType_1","MediaSource","isTypeSupported","Audio","privMediaSource","load","onsourceopen","event","privMediaSourceOpened","duration","addSourceBuffer","onupdate","catch","reason","instance","onEvent","onupdateend","onupdatestart","privAppendingToBuffer","AudioOutputStream_1","currentTime","pause","play","length","sourceBufferAvailable","binary","shift","appendBuffer","unshift","log","canEndStream","endOfStream","privPlaybackStarted","onAudioStart","onended","isClosed","readyState","updating","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(`Play back is not supported for raw PCM, mulaw or alaw format without header.`);\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((_: number): void => {\r\n                    receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then(() => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    set format(format: AudioStreamFormat) {\r\n        if (typeof (AudioContext) !== \"undefined\" || typeof ((window as any).webkitAudioContext) !== \"undefined\") {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (event: Event): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (_: Event) => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (_: Event) => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (_: Event) => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // tslint:disable-next-line:no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}