{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServiceRecognizerBase = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../common/Exports\");\n\nvar Exports_3 = require(\"../sdk/Exports\");\n\nvar Exports_4 = require(\"./Exports\");\n\nvar SpeechConnectionMessage_Internal_1 = require(\"./SpeechConnectionMessage.Internal\");\n\nvar ServiceRecognizerBase =\n/** @class */\nfunction () {\n  function ServiceRecognizerBase(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    var _this = this;\n\n    this.privSetTimeout = setTimeout;\n    this.privIsLiveAudio = false;\n    this.recognizeOverride = undefined;\n    this.disconnectOverride = undefined;\n    this.receiveMessageOverride = undefined;\n\n    this.sendSpeechContext = function (connection) {\n      var speechContextJson = _this.speechContext.toJSON();\n\n      if (speechContextJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, \"speech.context\", _this.privRequestSession.requestId, \"application/json\", speechContextJson));\n      }\n\n      return;\n    };\n\n    this.sendPrePayloadJSONOverride = undefined;\n    this.postConnectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n\n    this.sendSpeechServiceConfig = function (connection, requestSession, SpeechServiceConfigJson) {\n      // filter out anything that is not required for the service to work.\n      if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n        var withTelemetry = JSON.parse(SpeechServiceConfigJson);\n        var replacement = {\n          context: {\n            system: withTelemetry.context.system\n          }\n        };\n        SpeechServiceConfigJson = JSON.stringify(replacement);\n      }\n\n      if (_this.privRecognizerConfig.parameters.getProperty(\"TranscriptionService_SingleChannel\", \"false\").toLowerCase() === \"true\") {\n        var json = JSON.parse(SpeechServiceConfigJson);\n        json.context.DisableReferenceChannel = \"True\";\n        json.context.MicSpec = \"1_0_0\";\n        SpeechServiceConfigJson = JSON.stringify(json);\n      }\n\n      if (SpeechServiceConfigJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, \"speech.config\", requestSession.requestId, \"application/json\", SpeechServiceConfigJson));\n      }\n\n      return;\n    };\n\n    if (!authentication) {\n      throw new Exports_2.ArgumentNullError(\"authentication\");\n    }\n\n    if (!connectionFactory) {\n      throw new Exports_2.ArgumentNullError(\"connectionFactory\");\n    }\n\n    if (!audioSource) {\n      throw new Exports_2.ArgumentNullError(\"audioSource\");\n    }\n\n    if (!recognizerConfig) {\n      throw new Exports_2.ArgumentNullError(\"recognizerConfig\");\n    }\n\n    this.privMustReportEndOfStream = false;\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privAudioSource = audioSource;\n    this.privRecognizerConfig = recognizerConfig;\n    this.privIsDisposed = false;\n    this.privRecognizer = recognizer;\n    this.privRequestSession = new Exports_4.RequestSession(this.privAudioSource.id());\n    this.privConnectionEvents = new Exports_2.EventSource();\n    this.privServiceEvents = new Exports_2.EventSource();\n    this.privDynamicGrammar = new Exports_4.DynamicGrammarBuilder();\n    this.privSpeechContext = new Exports_4.SpeechContext(this.privDynamicGrammar);\n    this.privAgentConfig = new Exports_4.AgentConfig();\n\n    if (typeof Blob !== \"undefined\" && typeof Worker !== \"undefined\") {\n      this.privSetTimeout = Exports_2.Timeout.setTimeout;\n    }\n\n    this.connectionEvents.attach(function (connectionEvent) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var connectionClosedEvent;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(connectionEvent.name === \"ConnectionClosedEvent\")) return [3\n              /*break*/\n              , 2];\n              connectionClosedEvent = connectionEvent;\n              if (!(connectionClosedEvent.statusCode === 1003 || connectionClosedEvent.statusCode === 1007 || connectionClosedEvent.statusCode === 1002 || connectionClosedEvent.statusCode === 4000 || this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount)) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? Exports_3.CancellationErrorCode.BadRequestParameters : Exports_3.CancellationErrorCode.ConnectionFailure, connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode)];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"audioSource\", {\n    get: function () {\n      return this.privAudioSource;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"speechContext\", {\n    get: function () {\n      return this.privSpeechContext;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"dynamicGrammar\", {\n    get: function () {\n      return this.privDynamicGrammar;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"agentConfig\", {\n    get: function () {\n      return this.privAgentConfig;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"conversationTranslatorToken\", {\n    set: function (token) {\n      this.privRecognizerConfig.parameters.setProperty(Exports_3.PropertyId.ConversationTranslator_Token, token);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"authentication\", {\n    set: function (auth) {\n      this.privAuthentication = this.authentication;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ServiceRecognizerBase.prototype.isDisposed = function () {\n    return this.privIsDisposed;\n  };\n\n  ServiceRecognizerBase.prototype.dispose = function (reason) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.privIsDisposed = true;\n            if (!this.privConnectionConfigurationPromise) return [3\n            /*break*/\n            , 5];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.privConnectionConfigurationPromise];\n\n          case 2:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , connection.dispose(reason)];\n\n          case 3:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent(); // The connection is in a bad state. But we're trying to kill it, so...\n\n            return [2\n            /*return*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"connectionEvents\", {\n    get: function () {\n      return this.privConnectionEvents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"serviceEvents\", {\n    get: function () {\n      return this.privServiceEvents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"recognitionMode\", {\n    get: function () {\n      return this.privRecognizerConfig.recognitionMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ServiceRecognizerBase.prototype.recognize = function (recoMode, successCallback, errorCallBack) {\n    return __awaiter(this, void 0, void 0, function () {\n      var conPromise, audioNode, audioStreamNode, format, deviceInfo, error_2, error_3, sessionStartEventArgs, messageRetrievalPromise, audioSendPromise;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.recognizeOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.recognizeOverride(recoMode, successCallback, errorCallBack)];\n            } // Clear the existing configuration promise to force a re-transmission of config and context.\n\n\n            this.privConnectionConfigurationPromise = null;\n            this.privRecognizerConfig.recognitionMode = recoMode;\n            this.privSuccessCallback = successCallback;\n            this.privErrorCallback = errorCallBack;\n            this.privRequestSession.startNewRecognition();\n            this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\n            conPromise = this.connectImpl();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 8]);\n\n            return [4\n            /*yield*/\n            , this.audioSource.attach(this.privRequestSession.audioNodeId)];\n\n          case 2:\n            audioStreamNode = _a.sent();\n            return [4\n            /*yield*/\n            , this.audioSource.format];\n\n          case 3:\n            format = _a.sent();\n            return [4\n            /*yield*/\n            , this.audioSource.deviceInfo];\n\n          case 4:\n            deviceInfo = _a.sent();\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === Exports_4.type.Microphones;\n            audioNode = new Exports_1.ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\n            return [4\n            /*yield*/\n            , this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false)];\n\n          case 5:\n            _a.sent();\n\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = {\n              source: deviceInfo\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            error_2 = _a.sent();\n            return [4\n            /*yield*/\n            , this.privRequestSession.onStopRecognizing()];\n\n          case 7:\n            _a.sent();\n\n            throw error_2;\n\n          case 8:\n            _a.trys.push([8, 10,, 12]);\n\n            return [4\n            /*yield*/\n            , conPromise];\n\n          case 9:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            error_3 = _a.sent();\n            return [4\n            /*yield*/\n            , this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.ConnectionFailure, error_3)];\n\n          case 11:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 12:\n            sessionStartEventArgs = new Exports_3.SessionEventArgs(this.privRequestSession.sessionId);\n\n            if (!!this.privRecognizer.sessionStarted) {\n              this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n            }\n\n            messageRetrievalPromise = this.receiveMessage();\n            audioSendPromise = this.sendAudio(audioNode);\n            audioSendPromise.catch(function (error) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.RuntimeError, error)];\n\n                    case 1:\n                      _a.sent();\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.stopRecognizing = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.privRequestSession.isRecognizing) return [3\n            /*break*/\n            , 8];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 6, 8]);\n\n            return [4\n            /*yield*/\n            , this.audioSource.turnOff()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.sendFinalAudio()];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.privRequestSession.onStopRecognizing()];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.privRequestSession.turnCompletionPromise];\n\n          case 5:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            return [4\n            /*yield*/\n            , this.privRequestSession.dispose()];\n\n          case 7:\n            _a.sent();\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.connectAsync = function (cb, err) {\n    this.connectImpl().then(function (connection) {\n      try {\n        if (!!cb) {\n          cb();\n        }\n      } catch (e) {\n        if (!!err) {\n          err(e);\n        }\n      }\n    }, function (reason) {\n      try {\n        if (!!err) {\n          err(reason);\n        }\n        /* tslint:disable:no-empty */\n\n      } catch (error) {}\n    });\n  };\n\n  ServiceRecognizerBase.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cancelRecognitionLocal(Exports_3.CancellationReason.Error, Exports_3.CancellationErrorCode.NoError, \"Disconnecting\")];\n\n          case 1:\n            _a.sent();\n\n            if (!(this.disconnectOverride !== undefined)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.disconnectOverride()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.privConnectionPromise];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _a.sent().dispose()];\n\n          case 5:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            error_4 = _a.sent();\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            this.privConnectionPromise = null;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.sendMessage = function (message) {};\n\n  ServiceRecognizerBase.prototype.sendNetworkMessage = function (path, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var type, contentType, connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            type = typeof payload === \"string\" ? Exports_2.MessageType.Text : Exports_2.MessageType.Binary;\n            contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _a.sent();\n            return [2\n            /*return*/\n            , connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload))];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(ServiceRecognizerBase.prototype, \"activityTemplate\", {\n    get: function () {\n      return this.privActivityTemplate;\n    },\n    set: function (messagePayload) {\n      this.privActivityTemplate = messagePayload;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ServiceRecognizerBase.prototype.sendTelemetryData = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var telemetryData, connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            telemetryData = this.privRequestSession.getTelemetry();\n\n            if (ServiceRecognizerBase.telemetryDataEnabled !== true || this.privIsDisposed || null === telemetryData) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!!ServiceRecognizerBase.telemetryData) {\n              try {\n                ServiceRecognizerBase.telemetryData(telemetryData);\n                /* tslint:disable:no-empty */\n              } catch (_b) {}\n            }\n\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Text, \"telemetry\", this.privRequestSession.requestId, \"application/json\", telemetryData))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Cancels recognition.\n\n\n  ServiceRecognizerBase.prototype.cancelRecognitionLocal = function (cancellationReason, errorCode, error) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!!this.privRequestSession.isRecognizing) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.privRequestSession.onStopRecognizing()];\n\n          case 1:\n            _a.sent();\n\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, cancellationReason, errorCode, error);\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.receiveMessage = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection, message, connectionMessage, _a, speechStartDetected, speechStartEventArgs, json, speechStopDetected, speechStopEventArgs, sessionStopEventArgs, error_5;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 18,, 19]);\n\n            if (this.privIsDisposed) {\n              // We're done.\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _b.sent();\n            return [4\n            /*yield*/\n            , connection.read()];\n\n          case 2:\n            message = _b.sent();\n\n            if (this.receiveMessageOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.receiveMessageOverride()];\n            } // indicates we are draining the queue and it came with no message;\n\n\n            if (!message) {\n              if (!this.privRequestSession.isRecognizing) {\n                return [2\n                /*return*/\n                ];\n              } else {\n                return [2\n                /*return*/\n                , this.receiveMessage()];\n              }\n            }\n\n            this.privServiceHasSentMessage = true;\n            connectionMessage = SpeechConnectionMessage_Internal_1.SpeechConnectionMessage.fromConnectionMessage(message);\n            if (!(connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase())) return [3\n            /*break*/\n            , 17];\n            _a = connectionMessage.path.toLowerCase();\n\n            switch (_a) {\n              case \"turn.start\":\n                return [3\n                /*break*/\n                , 3];\n\n              case \"speech.startdetected\":\n                return [3\n                /*break*/\n                , 4];\n\n              case \"speech.enddetected\":\n                return [3\n                /*break*/\n                , 5];\n\n              case \"turn.end\":\n                return [3\n                /*break*/\n                , 6];\n            }\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 3:\n            this.privMustReportEndOfStream = true;\n            this.privRequestSession.onServiceTurnStartResponse();\n            return [3\n            /*break*/\n            , 17];\n\n          case 4:\n            speechStartDetected = Exports_4.SpeechDetected.fromJSON(connectionMessage.textBody);\n            speechStartEventArgs = new Exports_3.RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n\n            if (!!this.privRecognizer.speechStartDetected) {\n              this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n            }\n\n            return [3\n            /*break*/\n            , 17];\n\n          case 5:\n            json = void 0;\n\n            if (connectionMessage.textBody.length > 0) {\n              json = connectionMessage.textBody;\n            } else {\n              // If the request was empty, the JSON returned is empty.\n              json = \"{ Offset: 0 }\";\n            }\n\n            speechStopDetected = Exports_4.SpeechDetected.fromJSON(json); // Only shrink the buffers for continuous recognition.\n            // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\n\n            if (this.privRecognizerConfig.isContinuousRecognition) {\n              this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n            }\n\n            speechStopEventArgs = new Exports_3.RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n            if (!!this.privRecognizer.speechEndDetected) {\n              this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n            }\n\n            return [3\n            /*break*/\n            , 17];\n\n          case 6:\n            return [4\n            /*yield*/\n            , this.sendTelemetryData()];\n\n          case 7:\n            _b.sent();\n\n            if (!(this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream)) return [3\n            /*break*/\n            , 9];\n            this.privMustReportEndOfStream = false;\n            return [4\n            /*yield*/\n            , this.cancelRecognitionLocal(Exports_3.CancellationReason.EndOfStream, Exports_3.CancellationErrorCode.NoError, undefined)];\n\n          case 8:\n            _b.sent();\n\n            _b.label = 9;\n\n          case 9:\n            sessionStopEventArgs = new Exports_3.SessionEventArgs(this.privRequestSession.sessionId);\n            return [4\n            /*yield*/\n            , this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition)];\n\n          case 10:\n            _b.sent();\n\n            if (!(!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing)) return [3\n            /*break*/\n            , 11];\n\n            if (!!this.privRecognizer.sessionStopped) {\n              this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n            }\n\n            return [2\n            /*return*/\n            ];\n\n          case 11:\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 12:\n            connection = _b.sent();\n            return [4\n            /*yield*/\n            , this.sendPrePayloadJSON(connection)];\n\n          case 13:\n            _b.sent();\n\n            _b.label = 14;\n\n          case 14:\n            return [3\n            /*break*/\n            , 17];\n\n          case 15:\n            return [4\n            /*yield*/\n            , this.processTypeSpecificMessages(connectionMessage)];\n\n          case 16:\n            if (!_b.sent()) {\n              // here are some messages that the derived class has not processed, dispatch them to connect class\n              if (!!this.privServiceEvents) {\n                this.serviceEvents.onEvent(new Exports_2.ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n              }\n            }\n\n            _b.label = 17;\n\n          case 17:\n            return [2\n            /*return*/\n            , this.receiveMessage()];\n\n          case 18:\n            error_5 = _b.sent();\n            return [2\n            /*return*/\n            , null];\n\n          case 19:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Encapsulated for derived service recognizers that need to send additional JSON\n\n\n  ServiceRecognizerBase.prototype.sendPrePayloadJSON = function (connection) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.sendPrePayloadJSONOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.sendPrePayloadJSONOverride(connection)];\n            }\n\n            return [4\n            /*yield*/\n            , this.sendSpeechContext(connection)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.sendWaveHeader(connection)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.sendWaveHeader = function (connection) {\n    return __awaiter(this, void 0, void 0, function () {\n      var format;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.audioSource.format];\n\n          case 1:\n            format = _a.sent(); // this.writeBufferToConsole(format.header);\n\n            return [2\n            /*return*/\n            , connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, \"audio\", this.privRequestSession.requestId, \"audio/x-wav\", format.header))];\n        }\n      });\n    });\n  }; // Establishes a websocket connection to the end point.\n\n\n  ServiceRecognizerBase.prototype.connectImpl = function () {\n    var _this = this;\n\n    if (this.privConnectionPromise) {\n      return this.privConnectionPromise.then(function (connection) {\n        if (connection.state() === Exports_2.ConnectionState.Disconnected) {\n          _this.privConnectionId = null;\n          _this.privConnectionPromise = null;\n          _this.privServiceHasSentMessage = false;\n          return _this.connectImpl();\n        }\n\n        return _this.privConnectionPromise;\n      }, function (error) {\n        _this.privConnectionId = null;\n        _this.privConnectionPromise = null;\n        _this.privServiceHasSentMessage = false;\n        return _this.connectImpl();\n      });\n    }\n\n    this.privConnectionPromise = this.retryableConnect(); // Attach an empty handler to allow the promise to run in the background while\n    // other startup events happen. It'll eventually be awaited on.\n\n    this.privConnectionPromise.catch(function () {});\n\n    if (this.postConnectImplOverride !== undefined) {\n      return this.postConnectImplOverride(this.privConnectionPromise);\n    }\n\n    return this.privConnectionPromise;\n  };\n\n  ServiceRecognizerBase.prototype.fetchConnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privConnectionConfigurationPromise) {\n              return [2\n              /*return*/\n              , this.privConnectionConfigurationPromise.then(function (connection) {\n                if (connection.state() === Exports_2.ConnectionState.Disconnected) {\n                  _this.privConnectionId = null;\n                  _this.privConnectionConfigurationPromise = null;\n                  _this.privServiceHasSentMessage = false;\n                  return _this.fetchConnection();\n                }\n\n                return _this.privConnectionConfigurationPromise;\n              }, function (error) {\n                _this.privConnectionId = null;\n                _this.privConnectionConfigurationPromise = null;\n                _this.privServiceHasSentMessage = false;\n                return _this.fetchConnection();\n              })];\n            }\n\n            this.privConnectionConfigurationPromise = this.configureConnection();\n            return [4\n            /*yield*/\n            , this.privConnectionConfigurationPromise];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.sendAudio = function (audioStreamNode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var audioFormat, nextSendTime, fastLaneSizeMs, maxSendUnthrottledBytes, startRecogNumber, readAndUploadCycle;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.audioSource.format];\n\n          case 1:\n            audioFormat = _a.sent();\n            nextSendTime = Date.now();\n            fastLaneSizeMs = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n            maxSendUnthrottledBytes = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n            startRecogNumber = this.privRequestSession.recogNumber;\n\n            readAndUploadCycle = function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var connection, audioStreamChunk, payload, sendDelay;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber)) return [3\n                      /*break*/\n                      , 5];\n                      return [4\n                      /*yield*/\n                      , this.fetchConnection()];\n\n                    case 1:\n                      connection = _a.sent();\n                      return [4\n                      /*yield*/\n                      , audioStreamNode.read()];\n\n                    case 2:\n                      audioStreamChunk = _a.sent(); // we have a new audio chunk to upload.\n\n                      if (this.privRequestSession.isSpeechEnded) {\n                        // If service already recognized audio end then don't send any more audio\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      payload = void 0;\n                      sendDelay = void 0;\n\n                      if (!audioStreamChunk || audioStreamChunk.isEnd) {\n                        payload = null;\n                        sendDelay = 0;\n                      } else {\n                        payload = audioStreamChunk.buffer;\n                        this.privRequestSession.onAudioSent(payload.byteLength);\n\n                        if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\n                          sendDelay = 0;\n                        } else {\n                          sendDelay = Math.max(0, nextSendTime - Date.now());\n                        }\n                      }\n\n                      if (!(0 !== sendDelay)) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.delay(sendDelay)];\n\n                    case 3:\n                      _a.sent();\n\n                      _a.label = 4;\n\n                    case 4:\n                      if (payload !== null) {\n                        nextSendTime = Date.now() + payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2);\n                      } // Are we still alive?\n\n\n                      if (!this.privIsDisposed && !this.privRequestSession.isSpeechEnded && this.privRequestSession.isRecognizing && this.privRequestSession.recogNumber === startRecogNumber) {\n                        connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)).catch(function () {\n                          _this.privRequestSession.onServiceTurnEndResponse(_this.privRecognizerConfig.isContinuousRecognition).catch(function () {});\n                        });\n\n                        if (!(audioStreamChunk === null || audioStreamChunk === void 0 ? void 0 : audioStreamChunk.isEnd)) {\n                          // this.writeBufferToConsole(payload);\n                          // Regardless of success or failure, schedule the next upload.\n                          // If the underlying connection was broken, the next cycle will\n                          // get a new connection and re-transmit missing audio automatically.\n                          return [2\n                          /*return*/\n                          , readAndUploadCycle()];\n                        } else {\n                          // the audio stream has been closed, no need to schedule next\n                          // read-upload cycle.\n                          if (!this.privIsLiveAudio) {\n                            this.privRequestSession.onSpeechEnded();\n                          }\n                        }\n                      }\n\n                      _a.label = 5;\n\n                    case 5:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            return [2\n            /*return*/\n            , readAndUploadCycle()];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.retryableConnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isUnAuthorized, sessionId, lastStatusCode, lastReason, authPromise, auth, connection, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            isUnAuthorized = false;\n            this.privAuthFetchEventId = Exports_2.createNoDashGuid();\n            sessionId = this.privRequestSession.sessionId;\n            this.privConnectionId = sessionId !== undefined ? sessionId : Exports_2.createNoDashGuid();\n            this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n            lastStatusCode = 0;\n            lastReason = \"\";\n            _a.label = 1;\n\n          case 1:\n            if (!(this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount)) return [3\n            /*break*/\n            , 8];\n            authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n            return [4\n            /*yield*/\n            , authPromise];\n\n          case 2:\n            auth = _a.sent();\n            return [4\n            /*yield*/\n            , this.privRequestSession.onAuthCompleted(false)];\n\n          case 3:\n            _a.sent();\n\n            connection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId); // Attach the telemetry handlers.\n\n            this.privRequestSession.listenForServiceTelemetry(connection.events); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n            // it'll stop sending events.\n\n            connection.events.attach(function (event) {\n              _this.connectionEvents.onEvent(event);\n            });\n            return [4\n            /*yield*/\n            , connection.open()];\n\n          case 4:\n            response = _a.sent();\n            if (!(response.statusCode === 200)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.privRequestSession.onConnectionEstablishCompleted(response.statusCode)];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , Promise.resolve(connection)];\n\n          case 6:\n            if (response.statusCode === 1006) {\n              isUnAuthorized = true;\n            }\n\n            _a.label = 7;\n\n          case 7:\n            lastStatusCode = response.statusCode;\n            lastReason = response.reason;\n            this.privRequestSession.onRetryConnection();\n            return [3\n            /*break*/\n            , 1];\n\n          case 8:\n            return [4\n            /*yield*/\n            , this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason)];\n\n          case 9:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , Promise.reject(\"Unable to contact server. StatusCode: \" + lastStatusCode + \", \" + this.privRecognizerConfig.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Endpoint) + \" Reason: \" + lastReason)];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.prototype.delay = function (delayMs) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.privSetTimeout(resolve, delayMs);\n    });\n  };\n\n  ServiceRecognizerBase.prototype.writeBufferToConsole = function (buffer) {\n    var out = \"Buffer Size: \";\n\n    if (null === buffer) {\n      out += \"null\";\n    } else {\n      var readView = new Uint8Array(buffer);\n      out += buffer.byteLength + \"\\r\\n\";\n\n      for (var i = 0; i < buffer.byteLength; i++) {\n        out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n      }\n    } // tslint:disable-next-line:no-console\n\n\n    console.info(out);\n  };\n\n  ServiceRecognizerBase.prototype.sendFinalAudio = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_2.MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n\n  ServiceRecognizerBase.prototype.configureConnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 1:\n            connection = _a.sent();\n\n            if (this.configConnectionOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.configConnectionOverride(connection)];\n            }\n\n            return [4\n            /*yield*/\n            , this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.sendPrePayloadJSON(connection)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , connection];\n        }\n      });\n    });\n  };\n\n  ServiceRecognizerBase.telemetryDataEnabled = true;\n  return ServiceRecognizerBase;\n}();\n\nexports.ServiceRecognizerBase = ServiceRecognizerBase;","map":{"version":3,"mappings":"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","names":["authentication","connectionFactory","audioSource","recognizerConfig","recognizer","setTimeout","undefined","connection","speechContextJson","_this","speechContext","toJSON","send","SpeechConnectionMessage_Internal_1","Exports_2","Text","privRequestSession","requestId","requestSession","SpeechServiceConfigJson","ServiceRecognizerBase","telemetryDataEnabled","withTelemetry","JSON","parse","replacement","context","system","stringify","privRecognizerConfig","parameters","getProperty","toLowerCase","json","DisableReferenceChannel","MicSpec","privMustReportEndOfStream","privAuthentication","privConnectionFactory","privAudioSource","privIsDisposed","privRecognizer","Exports_4","id","privConnectionEvents","privServiceEvents","privDynamicGrammar","privSpeechContext","privAgentConfig","Blob","Worker","privSetTimeout","connectionEvents","attach","connectionEvent","name","connectionClosedEvent","statusCode","numConnectionAttempts","maxRetryCount","cancelRecognitionLocal","Exports_3","Error","BadRequestParameters","ConnectionFailure","reason","_a","Object","token","setProperty","ConversationTranslator_Token","auth","privConnectionConfigurationPromise","dispose","recognitionMode","recoMode","successCallback","errorCallBack","recognizeOverride","privSuccessCallback","privErrorCallback","startNewRecognition","listenForServiceTelemetry","events","conPromise","connectImpl","audioNodeId","audioStreamNode","format","deviceInfo","privIsLiveAudio","type","Microphones","audioNode","Exports_1","avgBytesPerSec","onAudioSourceAttachCompleted","SpeechServiceConfig","Context","audio","source","onStopRecognizing","error_2","error_3","sessionStartEventArgs","sessionId","sessionStarted","messageRetrievalPromise","receiveMessage","audioSendPromise","sendAudio","catch","error","RuntimeError","isRecognizing","turnOff","sendFinalAudio","turnCompletionPromise","Promise","resolve","cb","err","then","e","NoError","disconnectOverride","privConnectionPromise","message","path","payload","Binary","contentType","fetchConnection","privActivityTemplate","messagePayload","telemetryData","getTelemetry","cancellationReason","errorCode","cancelRecognition","_b","read","receiveMessageOverride","privServiceHasSentMessage","connectionMessage","fromConnectionMessage","onServiceTurnStartResponse","speechStartDetected","fromJSON","textBody","speechStartEventArgs","Offset","length","speechStopDetected","isContinuousRecognition","onServiceRecognized","currentTurnAudioOffset","speechStopEventArgs","speechEndDetected","sendTelemetryData","isSpeechEnded","EndOfStream","sessionStopEventArgs","onServiceTurnEndResponse","sessionStopped","sendPrePayloadJSON","processTypeSpecificMessages","serviceEvents","onEvent","sendPrePayloadJSONOverride","sendSpeechContext","sendWaveHeader","header","state","Disconnected","privConnectionId","retryableConnect","postConnectImplOverride","configureConnection","audioFormat","nextSendTime","Date","now","fastLaneSizeMs","maxSendUnthrottledBytes","parseInt","startRecogNumber","recogNumber","readAndUploadCycle","audioStreamChunk","sendDelay","isEnd","buffer","onAudioSent","byteLength","bytesSent","Math","max","delay","onSpeechEnded","isUnAuthorized","privAuthFetchEventId","onPreConnectionStart","lastStatusCode","lastReason","authPromise","fetchOnExpiry","fetch","onAuthCompleted","create","event","open","response","onConnectionEstablishCompleted","onRetryConnection","reject","SpeechServiceConnection_Endpoint","delayMs","out","readView","Uint8Array","i","toString","padStart","console","info","configConnectionOverride","sendSpeechServiceConfig","serialize","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n\r\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    await this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = this.authentication;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            return this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = null;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const messageRetrievalPromise = this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string) => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((connection: IConnection): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        try {\r\n            await (await this.privConnectionPromise).dispose();\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n        this.privConnectionPromise = null;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public sendMessage(message: string): void { }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        // Only shrink the buffers for continuous recognition.\r\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                        }\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected sendSpeechContext = (connection: IConnection): Promise<void> => {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        this.privConnectionPromise.catch(() => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> => {\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"TranscriptionService_SingleChannel\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: any } = JSON.parse(SpeechServiceConfigJson);\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch(() => {\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void) => {\r\n            this.privSetTimeout(resolve, delayMs);\r\n        });\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += buffer.byteLength + \"\\r\\n\";\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n            }\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection);\r\n        return connection;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}