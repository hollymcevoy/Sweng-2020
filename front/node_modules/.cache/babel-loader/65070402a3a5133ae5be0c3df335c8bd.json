{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RecognizerConfig } from \"../../common.speech/Exports\";\nimport { BackgroundEvent, Events } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { Connection, Recognizer } from \"../../sdk/Exports\";\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\nimport { PromiseToEmptyCallback } from \"./ConversationUtils\";\nexport class ConversationRecognizerFactory {\n  static fromConfig(speechConfig, audioConfig) {\n    return new ConversationTranslatorRecognizer(speechConfig, audioConfig);\n  }\n\n}\n/**\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\n * Based off the recognizers in the SDK folder.\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class ConversationTranslatorRecognizer extends Recognizer {\n  constructor(speechConfig, audioConfig) {\n    const serviceConfigImpl = speechConfig;\n    Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\n    super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\n    this.privIsDisposed = false;\n    this.privProperties = serviceConfigImpl.properties.clone();\n    this.privConnection = Connection.fromRecognizer(this);\n  }\n\n  set connected(cb) {\n    this.privConnection.connected = cb;\n  }\n\n  set disconnected(cb) {\n    this.privConnection.disconnected = cb;\n  }\n  /**\n   * Return the speech language used by the recognizer\n   */\n\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechRecognitionLanguage;\n  }\n  /**\n   * Return the properties for the recognizer\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  isDisposed() {\n    return this.privIsDisposed;\n  }\n  /**\n   * Connect to the recognizer\n   * @param token\n   */\n\n\n  connect(token, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.privReco.conversationTranslatorToken = token;\n      this.privReco.connectAsync(cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Disconnect from the recognizer\n   */\n\n\n  disconnect(cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      this.privReco.disconnect().then(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true).catch(reason => {\n        Events.instance.onEvent(new BackgroundEvent(reason));\n      });\n    }\n  }\n  /**\n   * Send the mute all participants command to the websocket\n   * @param conversationId\n   * @param participantId\n   * @param isMuted\n   */\n\n\n  sendRequest(command, cb, err) {\n    try {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      this.sendMessage(command, cb, err);\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the recognizer.\n\n\n      this.dispose(true).catch(reason => {\n        Events.instance.onEvent(new BackgroundEvent(reason));\n      });\n    }\n  }\n  /**\n   * Close and dispose the recognizer\n   */\n\n\n  close() {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n      (_a = this.privConnection) === null || _a === void 0 ? void 0 : _a.closeConnection();\n      (_b = this.privConnection) === null || _b === void 0 ? void 0 : _b.close();\n      this.privConnection = undefined;\n      yield this.dispose(true);\n    });\n  }\n  /**\n   * Dispose the recognizer\n   * @param disposing\n   */\n\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privIsDisposed) {\n        return;\n      }\n\n      if (disposing) {\n        this.privIsDisposed = true;\n\n        if (!!this.privConnection) {\n          this.privConnection.closeConnection();\n          this.privConnection.close();\n          this.privConnection = undefined;\n        }\n\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  /**\n   * Create the config for the recognizer\n   * @param speechConfig\n   */\n\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n  /**\n   * Create the service recognizer.\n   * The audio source is redundnant here but is required by the implementation.\n   * @param authentication\n   * @param connectionFactory\n   * @param audioConfig\n   * @param recognizerConfig\n   */\n\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n\n  sendMessage(msg, cb, err) {\n    const withAsync = this.privReco;\n    PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RecognizerConfig","BackgroundEvent","Events","Contracts","Connection","Recognizer","ConversationConnectionFactory","ConversationServiceAdapter","PromiseToEmptyCallback","ConversationRecognizerFactory","fromConfig","speechConfig","audioConfig","ConversationTranslatorRecognizer","constructor","serviceConfigImpl","throwIfNull","properties","privIsDisposed","privProperties","clone","privConnection","fromRecognizer","connected","cb","disconnected","speechRecognitionLanguage","privSpeechRecognitionLanguage","isDisposed","connect","token","err","throwIfDisposed","throwIfNullOrWhitespace","privReco","conversationTranslatorToken","connectAsync","error","Error","typedError","name","message","disconnect","then","dispose","catch","reason","instance","onEvent","sendRequest","command","sendMessage","close","_a","closeConnection","_b","undefined","disposing","_super","call","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioSource","msg","withAsync","sendMessageAsync"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events\r\n} from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces\";\r\nimport { PromiseToEmptyCallback } from \"./ConversationUtils\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.privReco.disconnect().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n        this.privConnection?.closeConnection();\r\n        this.privConnection?.close();\r\n        this.privConnection = undefined;\r\n        await this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}