{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RawWebsocketMessage = void 0;\n\nvar ConnectionMessage_1 = require(\"./ConnectionMessage\");\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar RawWebsocketMessage =\n/** @class */\nfunction () {\n  function RawWebsocketMessage(messageType, payload, id) {\n    this.privPayload = null;\n\n    if (!payload) {\n      throw new Error_1.ArgumentNullError(\"payload\");\n    }\n\n    if (messageType === ConnectionMessage_1.MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\n      throw new Error_1.InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n\n    if (messageType === ConnectionMessage_1.MessageType.Text && !(typeof payload === \"string\")) {\n      throw new Error_1.InvalidOperationError(\"Payload must be a string\");\n    }\n\n    this.privMessageType = messageType;\n    this.privPayload = payload;\n    this.privId = id ? id : Guid_1.createNoDashGuid();\n  }\n\n  Object.defineProperty(RawWebsocketMessage.prototype, \"messageType\", {\n    get: function () {\n      return this.privMessageType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"payload\", {\n    get: function () {\n      return this.privPayload;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"textContent\", {\n    get: function () {\n      if (this.privMessageType === ConnectionMessage_1.MessageType.Binary) {\n        throw new Error_1.InvalidOperationError(\"Not supported for binary message\");\n      }\n\n      return this.privPayload;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"binaryContent\", {\n    get: function () {\n      if (this.privMessageType === ConnectionMessage_1.MessageType.Text) {\n        throw new Error_1.InvalidOperationError(\"Not supported for text message\");\n      }\n\n      return this.privPayload;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RawWebsocketMessage.prototype, \"id\", {\n    get: function () {\n      return this.privId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return RawWebsocketMessage;\n}();\n\nexports.RawWebsocketMessage = RawWebsocketMessage;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AACA;;AACA;;AAEA;AAAA;AAAA;AAKI,+BAAmBA,WAAnB,EAA6CC,OAA7C,EAA2DC,EAA3D,EAAsE;AAH9D,uBAAmB,IAAnB;;AAIJ,QAAI,CAACD,OAAL,EAAc;AACV,YAAM,IAAIE,yBAAJ,CAAsB,SAAtB,CAAN;AACH;;AAED,QAAIH,WAAW,KAAKI,gCAAYC,MAA5B,IAAsCJ,OAAO,CAACK,SAAR,CAAkBC,WAAlB,CAA8BC,IAA9B,KAAuC,aAAjF,EAAgG;AAC5F,YAAM,IAAIL,6BAAJ,CAA0B,6BAA1B,CAAN;AACH;;AAED,QAAIH,WAAW,KAAKI,gCAAYK,IAA5B,IAAoC,EAAE,OAAQR,OAAR,KAAqB,QAAvB,CAAxC,EAA0E;AACtE,YAAM,IAAIE,6BAAJ,CAA0B,0BAA1B,CAAN;AACH;;AAED,SAAKO,eAAL,GAAuBV,WAAvB;AACA,SAAKW,WAAL,GAAmBV,OAAnB;AACA,SAAKW,MAAL,GAAcV,EAAE,GAAGA,EAAH,GAAQW,yBAAxB;AACH;;AAEDC,wBAAWC,6BAAX,EAAW,aAAX,EAAsB;SAAtB;AACI,aAAO,KAAKL,eAAZ;AACH,KAFqB;qBAAA;;AAAA,GAAtB;AAIAI,wBAAWC,6BAAX,EAAW,SAAX,EAAkB;SAAlB;AACI,aAAO,KAAKJ,WAAZ;AACH,KAFiB;qBAAA;;AAAA,GAAlB;AAIAG,wBAAWC,6BAAX,EAAW,aAAX,EAAsB;SAAtB;AACI,UAAI,KAAKL,eAAL,KAAyBN,gCAAYC,MAAzC,EAAiD;AAC7C,cAAM,IAAIF,6BAAJ,CAA0B,kCAA1B,CAAN;AACH;;AAED,aAAO,KAAKQ,WAAZ;AACH,KANqB;qBAAA;;AAAA,GAAtB;AAQAG,wBAAWC,6BAAX,EAAW,eAAX,EAAwB;SAAxB;AACI,UAAI,KAAKL,eAAL,KAAyBN,gCAAYK,IAAzC,EAA+C;AAC3C,cAAM,IAAIN,6BAAJ,CAA0B,gCAA1B,CAAN;AACH;;AAED,aAAO,KAAKQ,WAAZ;AACH,KANuB;qBAAA;;AAAA,GAAxB;AAQAG,wBAAWC,6BAAX,EAAW,IAAX,EAAa;SAAb;AACI,aAAO,KAAKH,MAAZ;AACH,KAFY;qBAAA;;AAAA,GAAb;AAGJ;AAlDA;;AAAaI","names":["messageType","payload","id","Error_1","ConnectionMessage_1","Binary","__proto__","constructor","name","Text","privMessageType","privPayload","privId","Guid_1","Object","RawWebsocketMessage","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}