{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServiceTelemetryListener = void 0; // tslint:disable:max-classes-per-file\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar RecognitionEvents_1 = require(\"./RecognitionEvents\");\n\nvar ServiceTelemetryListener =\n/** @class */\nfunction () {\n  function ServiceTelemetryListener(requestId, audioSourceId, audioNodeId) {\n    var _this = this;\n\n    this.privIsDisposed = false;\n    this.privListeningTriggerMetric = null;\n    this.privMicMetric = null;\n    this.privConnectionEstablishMetric = null;\n\n    this.onEvent = function (e) {\n      if (_this.privIsDisposed) {\n        return;\n      }\n\n      if (e instanceof RecognitionEvents_1.RecognitionTriggeredEvent && e.requestId === _this.privRequestId) {\n        _this.privListeningTriggerMetric = {\n          End: e.eventTime,\n          Name: \"ListeningTrigger\",\n          Start: e.eventTime\n        };\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeAttachingEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {\n        _this.privMicStartTime = e.eventTime;\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeAttachedEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {\n        _this.privMicStartTime = e.eventTime;\n      }\n\n      if (e instanceof Exports_1.AudioSourceErrorEvent && e.audioSourceId === _this.privAudioSourceId) {\n        if (!_this.privMicMetric) {\n          _this.privMicMetric = {\n            End: e.eventTime,\n            Error: e.error,\n            Name: \"Microphone\",\n            Start: _this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeErrorEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {\n        if (!_this.privMicMetric) {\n          _this.privMicMetric = {\n            End: e.eventTime,\n            Error: e.error,\n            Name: \"Microphone\",\n            Start: _this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.AudioStreamNodeDetachedEvent && e.audioSourceId === _this.privAudioSourceId && e.audioNodeId === _this.privAudioNodeId) {\n        if (!_this.privMicMetric) {\n          _this.privMicMetric = {\n            End: e.eventTime,\n            Name: \"Microphone\",\n            Start: _this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof RecognitionEvents_1.ConnectingToServiceEvent && e.requestId === _this.privRequestId) {\n        _this.privConnectionId = e.sessionId;\n      }\n\n      if (e instanceof Exports_1.ConnectionStartEvent && e.connectionId === _this.privConnectionId) {\n        _this.privConnectionStartTime = e.eventTime;\n      }\n\n      if (e instanceof Exports_1.ConnectionEstablishedEvent && e.connectionId === _this.privConnectionId) {\n        if (!_this.privConnectionEstablishMetric) {\n          _this.privConnectionEstablishMetric = {\n            End: e.eventTime,\n            Id: _this.privConnectionId,\n            Name: \"Connection\",\n            Start: _this.privConnectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.ConnectionEstablishErrorEvent && e.connectionId === _this.privConnectionId) {\n        if (!_this.privConnectionEstablishMetric) {\n          _this.privConnectionEstablishMetric = {\n            End: e.eventTime,\n            Error: _this.getConnectionError(e.statusCode),\n            Id: _this.privConnectionId,\n            Name: \"Connection\",\n            Start: _this.privConnectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof Exports_1.ConnectionMessageReceivedEvent && e.connectionId === _this.privConnectionId) {\n        if (e.message && e.message.headers && e.message.headers.path) {\n          if (!_this.privReceivedMessages[e.message.headers.path]) {\n            _this.privReceivedMessages[e.message.headers.path] = new Array();\n          }\n\n          _this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\n        }\n      }\n    };\n\n    this.getTelemetry = function () {\n      var metrics = new Array();\n\n      if (_this.privListeningTriggerMetric) {\n        metrics.push(_this.privListeningTriggerMetric);\n      }\n\n      if (_this.privMicMetric) {\n        metrics.push(_this.privMicMetric);\n      }\n\n      if (_this.privConnectionEstablishMetric) {\n        metrics.push(_this.privConnectionEstablishMetric);\n      }\n\n      if (_this.privPhraseLatencies.length > 0) {\n        metrics.push({\n          PhraseLatencyMs: _this.privPhraseLatencies\n        });\n      }\n\n      if (_this.privHypothesisLatencies.length > 0) {\n        metrics.push({\n          FirstHypothesisLatencyMs: _this.privHypothesisLatencies\n        });\n      }\n\n      var telemetry = {\n        Metrics: metrics,\n        ReceivedMessages: _this.privReceivedMessages\n      };\n      var json = JSON.stringify(telemetry); // We dont want to send the same telemetry again. So clean those out.\n\n      _this.privReceivedMessages = {};\n      _this.privListeningTriggerMetric = null;\n      _this.privMicMetric = null;\n      _this.privConnectionEstablishMetric = null;\n      _this.privPhraseLatencies = [];\n      _this.privHypothesisLatencies = [];\n      return json;\n    };\n\n    this.dispose = function () {\n      _this.privIsDisposed = true;\n    };\n\n    this.getConnectionError = function (statusCode) {\n      /*\n      -- Websocket status codes --\n      NormalClosure = 1000,\n      EndpointUnavailable = 1001,\n      ProtocolError = 1002,\n      InvalidMessageType = 1003,\n      Empty = 1005,\n      InvalidPayloadData = 1007,\n      PolicyViolation = 1008,\n      MessageTooBig = 1009,\n      MandatoryExtension = 1010,\n      InternalServerError = 1011\n      */\n      switch (statusCode) {\n        case 400:\n        case 1002:\n        case 1003:\n        case 1005:\n        case 1007:\n        case 1008:\n        case 1009:\n          return \"BadRequest\";\n\n        case 401:\n          return \"Unauthorized\";\n\n        case 403:\n          return \"Forbidden\";\n\n        case 503:\n        case 1001:\n          return \"ServerUnavailable\";\n\n        case 500:\n        case 1011:\n          return \"ServerError\";\n\n        case 408:\n        case 504:\n          return \"Timeout\";\n\n        default:\n          return \"statuscode:\" + statusCode.toString();\n      }\n    };\n\n    this.privRequestId = requestId;\n    this.privAudioSourceId = audioSourceId;\n    this.privAudioNodeId = audioNodeId;\n    this.privReceivedMessages = {};\n    this.privPhraseLatencies = [];\n    this.privHypothesisLatencies = [];\n  }\n\n  ServiceTelemetryListener.prototype.phraseReceived = function (audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\n    }\n  };\n\n  ServiceTelemetryListener.prototype.hypothesisReceived = function (audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\n    }\n  };\n\n  Object.defineProperty(ServiceTelemetryListener.prototype, \"hasTelemetry\", {\n    // Determines if there are any telemetry events to send to the service.\n    get: function () {\n      return Object.keys(this.privReceivedMessages).length !== 0 || this.privListeningTriggerMetric !== null || this.privMicMetric !== null || this.privConnectionEstablishMetric !== null || this.privPhraseLatencies.length !== 0 || this.privHypothesisLatencies.length !== 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ServiceTelemetryListener;\n}();\n\nexports.ServiceTelemetryListener = ServiceTelemetryListener;","map":{"version":3,"mappings":"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","names":["requestId","audioSourceId","audioNodeId","e","_this","privIsDisposed","RecognitionEvents_1","privRequestId","privListeningTriggerMetric","End","eventTime","Name","Start","Exports_1","privAudioSourceId","privAudioNodeId","privMicStartTime","privMicMetric","Error","error","privConnectionId","sessionId","connectionId","privConnectionStartTime","privConnectionEstablishMetric","Id","getConnectionError","statusCode","message","headers","path","privReceivedMessages","Array","push","networkReceivedTime","metrics","privPhraseLatencies","length","PhraseLatencyMs","privHypothesisLatencies","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","json","JSON","stringify","toString","ServiceTelemetryListener","audioReceivedTime","Date","now","Object","keys","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent = (e: PlatformEvent): void => {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n\r\n                this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}