{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _useRenderMarkdownAsHTML = _interopRequireDefault(require(\"../hooks/useRenderMarkdownAsHTML\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar TextContent = function TextContent(_ref) {\n  var contentType = _ref.contentType,\n      text = _ref.text;\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      textContentStyleSet = _useStyleSet2[0].textContent;\n\n  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();\n  var contentTypeMarkdown = contentType === 'text/markdown';\n  return contentTypeMarkdown && renderMarkdownAsHTML ? /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: (0, _classnames.default)('markdown', textContentStyleSet + ''),\n    dangerouslySetInnerHTML: {\n      __html: renderMarkdownAsHTML(text || '')\n    }\n  }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (text || '').split('\\n').map(function (line, index) {\n    return /*#__PURE__*/_react.default.createElement(\"p\", {\n      className: (0, _classnames.default)('plain', textContentStyleSet + ''),\n      key: index\n    }, line.trim());\n  }));\n};\n\nTextContent.defaultProps = {\n  contentType: 'text/markdown'\n};\nTextContent.propTypes = {\n  contentType: _propTypes.default.string,\n  text: _propTypes.default.string.isRequired\n};\nvar _default = TextContent;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAKA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAMA,WAAiC,GAAG,SAApCA,WAAoC,OAA2B;AAAA,MAAxBC,WAAwB,QAAxBA,WAAwB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AACnE,qBAA+C,4BAA/C;AAAA;AAAA,MAAsBC,mBAAtB,oBAASC,WAAT;;AACA,MAAMC,oBAAoB,GAAG,uCAA7B;AACA,MAAMC,mBAAmB,GAAGL,WAAW,KAAK,eAA5C;AAEA,SAAOK,mBAAmB,IAAID,oBAAvBC,gBACLC;AACEC,aAAS,EAAE,yBAAW,UAAX,EAAuBL,mBAAmB,GAAG,EAA7C,CADb;AAEEM,2BAAuB,EAAE;AAAEC,YAAM,EAAEL,oBAAoB,CAACH,IAAI,IAAI,EAAT;AAA9B;AAF3B,IADKI,gBAMLC,6BAACA,eAAMI,QAAP,QACG,CAACT,IAAI,IAAI,EAAT,EAAaU,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,CAA6B,UAACC,IAAD,EAAOC,KAAP;AAAA,wBAC5BR;AAAGC,eAAS,EAAE,yBAAW,OAAX,EAAoBL,mBAAmB,GAAG,EAA1C,CAAd;AAA6Da,SAAG,EAAED;AAAlE,OACGD,IAAI,CAACG,IAALH,EADH,CAD4B;AAA7B,IADH,CANF;AALF;;AAqBAd,WAAW,CAACkB,YAAZlB,GAA2B;AACzBC,aAAW,EAAE;AADY,CAA3BD;AAIAA,WAAW,CAACmB,SAAZnB,GAAwB;AACtBC,aAAW,EAAEmB,mBAAUC,MADD;AAEtBnB,MAAI,EAAEkB,mBAAUC,MAAVD,CAAiBE;AAFD,CAAxBtB;eAKeA","names":["TextContent","contentType","text","textContentStyleSet","textContent","renderMarkdownAsHTML","contentTypeMarkdown","_react","className","dangerouslySetInnerHTML","__html","Fragment","split","map","line","index","key","trim","defaultProps","propTypes","PropTypes","string","isRequired"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Attachment/TextContent.tsx"],"sourcesContent":["/* eslint react/no-danger: \"off\" */\n/* eslint react/no-array-index-key: \"off\" */\n\n// The content rendered here is sanitized.\n\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\n\nimport useRenderMarkdownAsHTML from '../hooks/useRenderMarkdownAsHTML';\nimport useStyleSet from '../hooks/useStyleSet';\n\ntype TextContentProps = {\n  contentType?: string;\n  text: string;\n};\n\nconst TextContent: FC<TextContentProps> = ({ contentType, text }) => {\n  const [{ textContent: textContentStyleSet }] = useStyleSet();\n  const renderMarkdownAsHTML = useRenderMarkdownAsHTML();\n  const contentTypeMarkdown = contentType === 'text/markdown';\n\n  return contentTypeMarkdown && renderMarkdownAsHTML ? (\n    <div\n      className={classNames('markdown', textContentStyleSet + '')}\n      dangerouslySetInnerHTML={{ __html: renderMarkdownAsHTML(text || '') }}\n    />\n  ) : (\n    <React.Fragment>\n      {(text || '').split('\\n').map((line, index) => (\n        <p className={classNames('plain', textContentStyleSet + '')} key={index}>\n          {line.trim()}\n        </p>\n      ))}\n    </React.Fragment>\n  );\n};\n\nTextContent.defaultProps = {\n  contentType: 'text/markdown'\n};\n\nTextContent.propTypes = {\n  contentType: PropTypes.string,\n  text: PropTypes.string.isRequired\n};\n\nexport default TextContent;\n"]},"metadata":{},"sourceType":"script"}