{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.connectDictationInterims = void 0;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar _Constants$DictateSta = _botframeworkWebchatCore.Constants.DictateState,\n    DICTATING = _Constants$DictateSta.DICTATING,\n    STARTING = _Constants$DictateSta.STARTING,\n    STOPPING = _Constants$DictateSta.STOPPING;\nvar useDictateInterims = _botframeworkWebchatApi.hooks.useDictateInterims,\n    useDictateState = _botframeworkWebchatApi.hooks.useDictateState,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\nvar ROOT_STYLE = {\n  alignItems: 'center',\n  display: 'flex'\n};\n\nvar connectDictationInterims = function connectDictationInterims() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref) {\n    var dictateInterims = _ref.dictateInterims,\n        dictateState = _ref.dictateState,\n        language = _ref.language;\n    return {\n      dictateInterims: dictateInterims,\n      dictateState: dictateState,\n      language: language\n    };\n  }].concat(selectors));\n};\n\nexports.connectDictationInterims = connectDictationInterims;\n\nvar DictationInterims = function DictationInterims(_ref2) {\n  var className = _ref2.className;\n\n  var _useDictateInterims = useDictateInterims(),\n      _useDictateInterims2 = _slicedToArray(_useDictateInterims, 1),\n      dictateInterims = _useDictateInterims2[0];\n\n  var _useDictateState = useDictateState(),\n      _useDictateState2 = _slicedToArray(_useDictateState, 1),\n      dictateState = _useDictateState2[0];\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      dictationInterimsStyleSet = _useStyleSet2[0].dictationInterims;\n\n  var localize = useLocalizer();\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  return dictateState === STARTING || dictateState === STOPPING ? /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: (0, _classnames.default)(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')\n  }, dictateState === STARTING && localize('SPEECH_INPUT_STARTING')) : dictateState === DICTATING && (dictateInterims.length ? /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: (0, _classnames.default)(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'dictating')\n  }, dictateInterims.map(function (interim, index) {\n    return /*#__PURE__*/_react.default.createElement(\"span\", {\n      key: index\n    }, interim, \"\\xA0\");\n  })) : /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: (0, _classnames.default)(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')\n  }, localize('SPEECH_INPUT_LISTENING')));\n};\n\nDictationInterims.defaultProps = {\n  className: ''\n};\nDictationInterims.propTypes = {\n  className: _propTypes.default.string\n}; // TODO: [P3] After speech started, when clicking on the transcript, it should\n//       stop the dictation and allow the user to type-correct the transcript\n\nvar _default = DictationInterims;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,4BAEIA,mCADFC,YADF;AAAA,IACkBC,SADlB,yBACkBA,SADlB;AAAA,IAC6BC,QAD7B,yBAC6BA,QAD7B;AAAA,IACuCC,QADvC,yBACuCA,QADvC;AAIA,IAAQC,kBAAR,GAA8DC,8BAAtDD,kBAAR;AAAA,IAA4BE,eAA5B,GAA8DD,8BAAlCC,eAA5B;AAAA,IAA6CC,YAA7C,GAA8DF,8BAAjBE,YAA7C;AAEA,IAAMC,UAAU,GAAG;AACjBC,YAAU,EAAE,QADK;AAEjBC,SAAO,EAAE;AAFQ,CAAnB;;AAKA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,oCAAIC,SAAJ;AAAIA,aAAJ,MAAIA,GAAJC,eAAID;AAAJ;;AAAA,SAC/BE,yCACE;AAAA,QAAGC,eAAH,QAAGA,eAAH;AAAA,QAAoBC,YAApB,QAAoBA,YAApB;AAAA,QAAkCC,QAAlC,QAAkCA,QAAlC;AAAA,WAAkD;AAChDF,qBAAe,EAAfA,eADgD;AAEhDC,kBAAY,EAAZA,YAFgD;AAGhDC,cAAQ,EAARA;AAHgD,KAAlD;AADF,YAMKL,SANLE,EAD+B;AAAjC;;;;AAcA,IAAMI,iBAA6C,GAAG,SAAhDA,iBAAgD,QAAmB;AAAA,MAAhBC,SAAgB,SAAhBA,SAAgB;;AACvE,4BAA0Bf,kBAAkB,EAA5C;AAAA;AAAA,MAAOW,eAAP;;AACA,yBAAuBT,eAAe,EAAtC;AAAA;AAAA,MAAOU,YAAP;;AACA,qBAA2D,4BAA3D;AAAA;AAAA,MAA4BI,yBAA5B,oBAASC,iBAAT;;AACA,MAAMC,QAAQ,GAAGf,YAAY,EAA7B;AACA,MAAMgB,aAAa,GAAG,wCAA0Bf,UAA1B,IAAwC,EAA9D;AAEA,SAAOQ,YAAY,KAAKd,QAAjBc,IAA6BA,YAAY,KAAKb,QAA9Ca,gBACLQ;AAAGL,aAAS,EAAE,yBAAWC,yBAAyB,GAAG,EAAvC,EAA2CG,aAA3C,EAA0D,CAACJ,SAAS,IAAI,EAAd,IAAoB,EAA9E,EAAkF,QAAlF;AAAd,KACGH,YAAY,KAAKd,QAAjBc,IAA6BM,QAAQ,CAAC,uBAAD,CADxC,CADKN,GAKLA,YAAY,KAAKf,SAAjBe,KACGD,eAAe,CAACU,MAAhBV,gBACCS;AAAGL,aAAS,EAAE,yBAAWC,yBAAyB,GAAG,EAAvC,EAA2CG,aAA3C,EAA0D,CAACJ,SAAS,IAAI,EAAd,IAAoB,EAA9E,EAAkF,WAAlF;AAAd,KACGJ,eAAe,CAACW,GAAhBX,CAAoB,UAACY,OAAD,EAAUC,KAAV;AAAA,wBACnBJ;AAAMK,SAAG,EAAED;AAAX,OACGD,OADH,SADmB;AAApB,IADH,CADDZ,gBAUCS;AAAGL,aAAS,EAAE,yBAAWC,yBAAyB,GAAG,EAAvC,EAA2CG,aAA3C,EAA0D,CAACJ,SAAS,IAAI,EAAd,IAAoB,EAA9E,EAAkF,QAAlF;AAAd,KACGG,QAAQ,CAAC,wBAAD,CADX,CAXJN,CALF;AAPF;;AA8BAE,iBAAiB,CAACY,YAAlBZ,GAAiC;AAC/BC,WAAS,EAAE;AADoB,CAAjCD;AAIAA,iBAAiB,CAACa,SAAlBb,GAA8B;AAC5BC,WAAS,EAAEa,mBAAUC;AADO,CAA9Bf,C,CAIA;AACA;;eAEeA","names":["Constants","DictateState","DICTATING","STARTING","STOPPING","useDictateInterims","hooks","useDictateState","useLocalizer","ROOT_STYLE","alignItems","display","connectDictationInterims","selectors","arguments","connectToWebChat","dictateInterims","dictateState","language","DictationInterims","className","dictationInterimsStyleSet","dictationInterims","localize","rootClassName","_react","length","map","interim","index","key","defaultProps","propTypes","PropTypes","string"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/SendBox/DictationInterims.tsx"],"sourcesContent":["/* eslint react/no-array-index-key: \"off\" */\n\nimport { Constants } from 'botframework-webchat-core';\nimport { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\n\nimport connectToWebChat from '../connectToWebChat';\nimport useStyleSet from '../hooks/useStyleSet';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\n\nconst {\n  DictateState: { DICTATING, STARTING, STOPPING }\n} = Constants;\n\nconst { useDictateInterims, useDictateState, useLocalizer } = hooks;\n\nconst ROOT_STYLE = {\n  alignItems: 'center',\n  display: 'flex'\n};\n\nconst connectDictationInterims = (...selectors) =>\n  connectToWebChat(\n    ({ dictateInterims, dictateState, language }) => ({\n      dictateInterims,\n      dictateState,\n      language\n    }),\n    ...selectors\n  );\n\ntype DictationInterimsProps = {\n  className?: string;\n};\n\nconst DictationInterims: FC<DictationInterimsProps> = ({ className }) => {\n  const [dictateInterims] = useDictateInterims();\n  const [dictateState] = useDictateState();\n  const [{ dictationInterims: dictationInterimsStyleSet }] = useStyleSet();\n  const localize = useLocalizer();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  return dictateState === STARTING || dictateState === STOPPING ? (\n    <p className={classNames(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')}>\n      {dictateState === STARTING && localize('SPEECH_INPUT_STARTING')}\n    </p>\n  ) : (\n    dictateState === DICTATING &&\n      (dictateInterims.length ? (\n        <p className={classNames(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'dictating')}>\n          {dictateInterims.map((interim, index) => (\n            <span key={index}>\n              {interim}\n              &nbsp;\n            </span>\n          ))}\n        </p>\n      ) : (\n        <p className={classNames(dictationInterimsStyleSet + '', rootClassName, (className || '') + '', 'status')}>\n          {localize('SPEECH_INPUT_LISTENING')}\n        </p>\n      ))\n  );\n};\n\nDictationInterims.defaultProps = {\n  className: ''\n};\n\nDictationInterims.propTypes = {\n  className: PropTypes.string\n};\n\n// TODO: [P3] After speech started, when clicking on the transcript, it should\n//       stop the dictation and allow the user to type-correct the transcript\n\nexport default DictationInterims;\n\nexport { connectDictationInterims };\n"]},"metadata":{},"sourceType":"script"}