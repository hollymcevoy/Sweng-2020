{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar async_1 = require('../scheduler/async');\n\nvar isDate_1 = require('../util/isDate');\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\n\n\nfunction delay(delay, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n\n  var absoluteDelay = isDate_1.isDate(delay);\n  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return function (source) {\n    return source.lift(new DelayOperator(delayFor, scheduler));\n  };\n}\n\nexports.delay = delay;\n\nvar DelayOperator = function () {\n  function DelayOperator(delay, scheduler) {\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n\n  DelayOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  };\n\n  return DelayOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DelaySubscriber = function (_super) {\n  __extends(DelaySubscriber, _super);\n\n  function DelaySubscriber(destination, delay, scheduler) {\n    _super.call(this, destination);\n\n    this.delay = delay;\n    this.scheduler = scheduler;\n    this.queue = [];\n    this.active = false;\n    this.errored = false;\n  }\n\n  DelaySubscriber.dispatch = function (state) {\n    var source = state.source;\n    var queue = source.queue;\n    var scheduler = state.scheduler;\n    var destination = state.destination;\n\n    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay_1);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  };\n\n  DelaySubscriber.prototype._schedule = function (scheduler) {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this,\n      destination: this.destination,\n      scheduler: scheduler\n    }));\n  };\n\n  DelaySubscriber.prototype.scheduleNotification = function (notification) {\n    if (this.errored === true) {\n      return;\n    }\n\n    var scheduler = this.scheduler;\n    var message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  };\n\n  DelaySubscriber.prototype._next = function (value) {\n    this.scheduleNotification(Notification_1.Notification.createNext(value));\n  };\n\n  DelaySubscriber.prototype._error = function (err) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  };\n\n  DelaySubscriber.prototype._complete = function () {\n    this.scheduleNotification(Notification_1.Notification.createComplete());\n  };\n\n  return DelaySubscriber;\n}(Subscriber_1.Subscriber);\n\nvar DelayMessage = function () {\n  function DelayMessage(time, notification) {\n    this.time = time;\n    this.notification = notification;\n  }\n\n  return DelayMessage;\n}();","map":{"version":3,"mappings":"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","names":["delay","scheduler","absoluteDelay","isDate_1","delayFor","now","Math","abs","source","lift","DelayOperator","exports","subscriber","subscribe","DelaySubscriber","__extends","destination","_super","state","queue","length","time","shift","notification","observe","delay_1","max","schedule","unsubscribe","active","add","dispatch","errored","message","DelayMessage","push","_schedule","value","scheduleNotification","Notification_1","createNext","err","error","createComplete","Subscriber_1"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/delay.ts"],"sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n"]},"metadata":{},"sourceType":"script"}