{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { extractHeaderValue, request } from \"./ConversationUtils\";\nexport class ConversationManager {\n  constructor() {\n    //\n    this.privRequestParams = ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig.restPath;\n  }\n  /**\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n   * @param args\n   * @param conversationCode\n   * @param callback\n   * @param errorCallback\n   */\n\n\n  createOrJoin(args, conversationCode, cb, err) {\n    try {\n      Contracts.throwIfNullOrUndefined(args, \"args\");\n      const languageCode = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\n      const nickname = args.getProperty(PropertyId.ConversationTranslator_Name);\n      const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n      const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n      const subscriptionKey = args.getProperty(PropertyId.SpeechServiceConnection_Key);\n      const subscriptionRegion = args.getProperty(PropertyId.SpeechServiceConnection_Region);\n      const authToken = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n      Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n      Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n      const queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.languageCode] = languageCode;\n      queryParams[this.privRequestParams.nickname] = nickname;\n      const headers = {};\n\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n\n      headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\n\n      if (conversationCode !== undefined) {\n        queryParams[this.privRequestParams.roomId] = conversationCode;\n      } else {\n        Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n        headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n\n        if (subscriptionKey) {\n          headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n        } else if (authToken) {\n          headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\n        } else {\n          Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n        }\n      }\n\n      const config = {};\n      config.headers = headers;\n      const endpoint = `https://${endpointHost}${this.privRestPath}`; // TODO: support a proxy and certificate validation\n\n      request(\"post\", endpoint, queryParams, null, config, response => {\n        const requestId = extractHeaderValue(this.privRequestParams.requestId, response.headers);\n\n        if (!response.ok) {\n          if (!!err) {\n            // get the error\n            let errorMessage = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n            let errMessageRaw;\n\n            try {\n              errMessageRaw = JSON.parse(response.data);\n              errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\n            } catch (e) {\n              errorMessage += ` [${response.data}]`;\n            }\n\n            if (requestId) {\n              errorMessage += ` ${requestId}`;\n            }\n\n            err(errorMessage);\n          }\n\n          return;\n        }\n\n        const conversation = JSON.parse(response.data);\n\n        if (conversation) {\n          conversation.requestId = requestId;\n        }\n\n        if (!!cb) {\n          try {\n            cb(conversation);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n\n          cb = undefined;\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n   * @param args\n   * @param sessionToken\n   * @param callback\n   */\n\n\n  leave(args, sessionToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n        const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n        const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n        const queryParams = {};\n        queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n        queryParams[this.privRequestParams.sessionToken] = sessionToken;\n        const headers = {};\n\n        if (correlationId) {\n          headers[this.privRequestParams.correlationId] = correlationId;\n        }\n\n        const config = {};\n        config.headers = headers;\n        const endpoint = `https://${endpointHost}${this.privRestPath}`; // TODO: support a proxy and certificate validation\n\n        request(\"delete\", endpoint, queryParams, null, config, response => {\n          if (!response.ok) {// ignore errors on delete\n          }\n\n          resolve();\n        });\n      } catch (error) {\n        if (error instanceof Error) {\n          const typedError = error;\n          reject(typedError.name + \": \" + typedError.message);\n        } else {\n          reject(error);\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Contracts","PropertyId","ConversationConnectionConfig","extractHeaderValue","request","ConversationManager","constructor","privRequestParams","configParams","privErrors","restErrors","privHost","host","privApiVersion","apiVersion","privRestPath","restPath","createOrJoin","args","conversationCode","cb","err","throwIfNullOrUndefined","languageCode","getProperty","SpeechServiceConnection_RecoLanguage","defaultLanguageCode","nickname","ConversationTranslator_Name","endpointHost","ConversationTranslator_Host","correlationId","ConversationTranslator_CorrelationId","subscriptionKey","SpeechServiceConnection_Key","subscriptionRegion","SpeechServiceConnection_Region","authToken","SpeechServiceAuthorization_Token","throwIfNullOrWhitespace","queryParams","headers","clientAppId","undefined","roomId","authInvalidSubscriptionRegion","authorization","authInvalidSubscriptionKey","config","endpoint","response","requestId","ok","errorMessage","invalidCreateJoinConversationResponse","replace","status","toString","errMessageRaw","JSON","parse","data","error","code","message","e","conversation","Error","typedError","name","leave","sessionToken","Promise","resolve","reject","invalidArgs"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n} from \"../../common.browser/RestConfigBase\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation, IResponse } from \"./ConversationTranslatorInterfaces\";\r\nimport { extractHeaderValue, request } from \"./ConversationUtils\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name);\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            request(\"post\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                const requestId: string = extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                request(\"delete\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                });\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}