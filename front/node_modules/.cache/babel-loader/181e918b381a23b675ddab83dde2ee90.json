{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionMessage = exports.MessageType = void 0;\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[MessageType[\"Text\"] = 0] = \"Text\";\n  MessageType[MessageType[\"Binary\"] = 1] = \"Binary\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n\nvar ConnectionMessage =\n/** @class */\nfunction () {\n  function ConnectionMessage(messageType, body, headers, id) {\n    this.privBody = null;\n\n    if (messageType === MessageType.Text && body && !(typeof body === \"string\")) {\n      throw new Error_1.InvalidOperationError(\"Payload must be a string\");\n    }\n\n    if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n      throw new Error_1.InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n\n    this.privMessageType = messageType;\n    this.privBody = body;\n    this.privHeaders = headers ? headers : {};\n    this.privId = id ? id : Guid_1.createNoDashGuid();\n\n    switch (this.messageType) {\n      case MessageType.Binary:\n        this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\n        break;\n\n      case MessageType.Text:\n        this.privSize = this.textBody.length;\n    }\n  }\n\n  Object.defineProperty(ConnectionMessage.prototype, \"messageType\", {\n    get: function () {\n      return this.privMessageType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"headers\", {\n    get: function () {\n      return this.privHeaders;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"body\", {\n    get: function () {\n      return this.privBody;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"textBody\", {\n    get: function () {\n      if (this.privMessageType === MessageType.Binary) {\n        throw new Error_1.InvalidOperationError(\"Not supported for binary message\");\n      }\n\n      return this.privBody;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"binaryBody\", {\n    get: function () {\n      if (this.privMessageType === MessageType.Text) {\n        throw new Error_1.InvalidOperationError(\"Not supported for text message\");\n      }\n\n      return this.privBody;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConnectionMessage.prototype, \"id\", {\n    get: function () {\n      return this.privId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ConnectionMessage;\n}();\n\nexports.ConnectionMessage = ConnectionMessage;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AACA;;AAGA,IAAYA,WAAZ;;AAAA,WAAYA,WAAZ,EAAuB;AACnBA;AACAA;AACH,CAHD,EAAYA,WAAW,GAAXC,8CAAW,EAAX,CAAZ;;AAKA;AAAA;AAAA;AASI,6BACIC,WADJ,EAEIC,IAFJ,EAGIC,OAHJ,EAIIC,EAJJ,EAIe;AATP,oBAAgB,IAAhB;;AAWJ,QAAIH,WAAW,KAAKF,WAAW,CAACM,IAA5B,IAAoCH,IAApC,IAA4C,EAAE,OAAQA,IAAR,KAAkB,QAApB,CAAhD,EAA+E;AAC3E,YAAM,IAAII,6BAAJ,CAA0B,0BAA1B,CAAN;AACH;;AAED,QAAIL,WAAW,KAAKF,WAAW,CAACQ,MAA5B,IAAsCL,IAAtC,IAA8C,EAAEA,IAAI,YAAYM,WAAlB,CAAlD,EAAkF;AAC9E,YAAM,IAAIF,6BAAJ,CAA0B,6BAA1B,CAAN;AACH;;AAED,SAAKG,eAAL,GAAuBR,WAAvB;AACA,SAAKS,QAAL,GAAgBR,IAAhB;AACA,SAAKS,WAAL,GAAmBR,OAAO,GAAGA,OAAH,GAAa,EAAvC;AACA,SAAKS,MAAL,GAAcR,EAAE,GAAGA,EAAH,GAAQS,yBAAxB;;AACA,YAAQ,KAAKZ,WAAb;AACI,WAAKF,WAAW,CAACQ,MAAjB;AACI,aAAKO,QAAL,GAAgB,KAAKC,UAAL,KAAoB,IAApB,GAA2B,KAAKA,UAAL,CAAgBC,UAA3C,GAAwD,CAAxE;AACA;;AACJ,WAAKjB,WAAW,CAACM,IAAjB;AACI,aAAKS,QAAL,GAAgB,KAAKG,QAAL,CAAcC,MAA9B;AALR;AAOH;;AAEDC,wBAAWC,2BAAX,EAAW,aAAX,EAAsB;SAAtB;AACI,aAAO,KAAKX,eAAZ;AACH,KAFqB;qBAAA;;AAAA,GAAtB;AAIAU,wBAAWC,2BAAX,EAAW,SAAX,EAAkB;SAAlB;AACI,aAAO,KAAKT,WAAZ;AACH,KAFiB;qBAAA;;AAAA,GAAlB;AAIAQ,wBAAWC,2BAAX,EAAW,MAAX,EAAe;SAAf;AACI,aAAO,KAAKV,QAAZ;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIAS,wBAAWC,2BAAX,EAAW,UAAX,EAAmB;SAAnB;AACI,UAAI,KAAKX,eAAL,KAAyBV,WAAW,CAACQ,MAAzC,EAAiD;AAC7C,cAAM,IAAID,6BAAJ,CAA0B,kCAA1B,CAAN;AACH;;AAED,aAAO,KAAKI,QAAZ;AACH,KANkB;qBAAA;;AAAA,GAAnB;AAQAS,wBAAWC,2BAAX,EAAW,YAAX,EAAqB;SAArB;AACI,UAAI,KAAKX,eAAL,KAAyBV,WAAW,CAACM,IAAzC,EAA+C;AAC3C,cAAM,IAAIC,6BAAJ,CAA0B,gCAA1B,CAAN;AACH;;AAED,aAAO,KAAKI,QAAZ;AACH,KANoB;qBAAA;;AAAA,GAArB;AAQAS,wBAAWC,2BAAX,EAAW,IAAX,EAAa;SAAb;AACI,aAAO,KAAKR,MAAZ;AACH,KAFY;qBAAA;;AAAA,GAAb;AAGJ;AAnEA;;AAAaZ","names":["MessageType","exports","messageType","body","headers","id","Text","Error_1","Binary","ArrayBuffer","privMessageType","privBody","privHeaders","privId","Guid_1","privSize","binaryBody","byteLength","textBody","length","Object","ConnectionMessage"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}