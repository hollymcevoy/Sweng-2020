{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoiceProfileClient = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../common/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_3 = require(\"./Exports\");\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\n\n\nvar VoiceProfileClient =\n/** @class */\nfunction () {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  function VoiceProfileClient(speechConfig) {\n    var speechConfigImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n\n  Object.defineProperty(VoiceProfileClient.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function () {\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function (token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VoiceProfileClient.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this VoiceProfileClient.\n     * @member VoiceProfileClient.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   *        specifies the keyword to be recognized.\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @param cb - Callback invoked once Voice Profile has been created.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  VoiceProfileClient.prototype.createProfileAsync = function (profileType, lang, cb, err) {\n    var _this = this;\n\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var result, response, profile;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privAdapter.createProfile(profileType, lang)];\n\n            case 1:\n              result = _a.sent();\n              response = result.json();\n              profile = new Exports_3.VoiceProfile(response.profileId, profileType);\n              return [2\n              /*return*/\n              , profile];\n          }\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * Get current information of a voice profile\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\n   * @param cb - Callback invoked once Voice Profile has been created.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.retrieveEnrollmentResultAsync = function (profile, cb, err) {\n    var _this = this;\n\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privAdapter.getProfileStatus(profile)];\n\n            case 1:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , new Exports_3.VoiceProfileEnrollmentResult(result.ok ? Exports_3.ResultReason.EnrolledVoiceProfile : Exports_3.ResultReason.Canceled, result.data, result.statusText)];\n          }\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * Get all voice profiles on account with given voice profile type\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\n   * @function\n   * @public\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n   * @param cb - Callback invoked once Profile list has been returned.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.getAllProfilesAsync = function (profileType, cb, err) {\n    var _this = this;\n\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privAdapter.getProfiles(profileType)];\n\n            case 1:\n              result = _a.sent();\n\n              if (profileType === Exports_3.VoiceProfileType.TextIndependentIdentification) {\n                return [2\n                /*return*/\n                , Exports_3.VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json())];\n              }\n\n              return [2\n              /*return*/\n              , Exports_3.VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json())];\n          }\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * Get valid authorization phrases for voice profile enrollment\n   * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\n   * @function\n   * @public\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @param cb - Callback invoked once phrases have been returned.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.getAuthorizationPhrasesAsync = function (lang, cb, err) {\n    var _this = this;\n\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privAdapter.getAuthorizationPhrases(lang)];\n\n            case 1:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , new Exports_3.VoiceProfileAuthorizationPhraseResult(result.ok ? Exports_3.ResultReason.EnrollingVoiceProfile : Exports_3.ResultReason.Canceled, result.statusText, result.json())];\n          }\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @param cb - Callback invoked once Enrollment request has been submitted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.enrollProfileAsync = function (profile, audioConfig, cb, err) {\n    var _this = this;\n\n    var configImpl = audioConfig;\n    Contracts_1.Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privAdapter.createEnrollment(profile, configImpl)];\n\n            case 1:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , new Exports_3.VoiceProfileEnrollmentResult(result.ok ? Exports_3.ResultReason.EnrolledVoiceProfile : Exports_3.ResultReason.Canceled, result.data, result.statusText)];\n          }\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @param cb - Callback invoked once Voice Profile has been deleted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.deleteProfileAsync = function (profile, cb, err) {\n    var _this = this;\n\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privAdapter.deleteProfile(profile)];\n\n            case 1:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , this.getResult(result, Exports_3.ResultReason.DeletedVoiceProfile)];\n          }\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @param cb - Callback invoked once Voice Profile has been reset.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  VoiceProfileClient.prototype.resetProfileAsync = function (profile, cb, err) {\n    var _this = this;\n\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privAdapter.resetProfile(profile)];\n\n            case 1:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , this.getResult(result, Exports_3.ResultReason.ResetVoiceProfile)];\n          }\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * Included for compatibility\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @public\n   */\n\n\n  VoiceProfileClient.prototype.close = function () {\n    return;\n  }; // Does class setup, swiped from Recognizer.\n\n\n  VoiceProfileClient.prototype.implClientSetup = function () {\n    var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    var osName = \"unknown\";\n    var osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    var recognizerConfig = new Exports_1.SpeakerRecognitionConfig(new Exports_1.Context(new Exports_1.OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new Exports_1.SpeakerIdMessageAdapter(recognizerConfig);\n  };\n\n  VoiceProfileClient.prototype.getResult = function (result, successReason, cb) {\n    var response = new Exports_3.VoiceProfileResult(result.ok ? successReason : Exports_3.ResultReason.Canceled, result.statusText);\n    return response;\n  };\n\n  return VoiceProfileClient;\n}();\n\nexports.VoiceProfileClient = VoiceProfileClient;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAMA;;AAEA;;AACA;AAYA;;;;;;;AAKA;AAAA;AAAA;AAsCI;;;;;AAKA,8BAAmBA,YAAnB,EAA6C;AACzC,QAAMC,gBAAgB,GAAqBD,YAA3C;AACAE,0BAAUC,WAAV,CAAsBF,gBAAtB,EAAwC,cAAxC;AAEA,SAAKG,cAAL,GAAsBH,gBAAgB,CAACI,UAAjB,CAA4BC,KAA5B,EAAtB;AACA,SAAKC,eAAL;AACH;;AAtCDC,wBAAWC,4BAAX,EAAW,oBAAX,EAA6B;AAP7B;;;;;;;SAOA;AACI,aAAO,KAAKJ,UAAL,CAAgBK,WAAhB,CAA4BC,qBAAWC,gCAAvC,CAAP;AACH,KAF4B;;AAI7B;;;;;;;SAOA,UAA8BC,KAA9B,EAA2C;AACvCX,4BAAUY,uBAAV,CAAkCD,KAAlC,EAAyC,OAAzC;AACA,WAAKR,UAAL,CAAgBU,WAAhB,CAA4BJ,qBAAWC,gCAAvC,EAAyEC,KAAzE;AACH,KAd4B;qBAAA;;AAAA,GAA7B;AAuBAL,wBAAWC,4BAAX,EAAW,YAAX,EAAqB;AAPrB;;;;;;;SAOA;AACI,aAAO,KAAKL,cAAZ;AACH,KAFoB;qBAAA;;AAAA,GAArB;AAiBA;;;;;;;;;;;;AAWOK,oDAAP,UAA0BO,WAA1B,EAAyDC,IAAzD,EAAuEC,EAAvE,EAAuGC,GAAvG,EAAgI;AAAhI;;AAEIC,wCAA2B;AAAA;;;;;AACO;AAAA;AAAA,gBAAM,KAAKC,WAAL,CAAiBC,aAAjB,CAA+BN,WAA/B,EAA4CC,IAA5C,CAAN;;;AAAxBM,oBAAM,GAAkBC,SAAxB;AACAC,sBAAQ,GAA0BF,MAAM,CAACG,IAAP,EAAlC;AACAC,qBAAO,GAAG,IAAIhB,sBAAJ,CAAiBc,QAAQ,CAACG,SAA1B,EAAqCZ,WAArC,CAAV;AACN;AAAA;AAAA,gBAAOW,OAAP;;;OAJuB;AAK1B,KALyB,EAA1B,EAKMT,EALN,EAKUC,GALV;AAMH,GARM;AASN;;;;;;;;;;;AASMV,+DAAP,UAAqCkB,OAArC,EAA4DT,EAA5D,EAA4GC,GAA5G,EAAqI;AAArI;;AACYC,wCAA2B;AAAA;;;;;AACD;AAAA;AAAA,gBAAM,KAAKC,WAAL,CAAiBQ,gBAAjB,CAAkCF,OAAlC,CAAN;;;AAAxBJ,oBAAM,GAAkBC,SAAxB;AACN;AAAA;AAAA,gBAAO,IAAIb,sCAAJ,CACHY,MAAM,CAACO,EAAP,GAAYnB,uBAAaoB,oBAAzB,GAAgDpB,uBAAaqB,QAD1D,EAEHT,MAAM,CAACU,IAFJ,EAGHV,MAAM,CAACW,UAHJ,CAAP;;;OAF+B;AAOlC,KAPiC,EAA1B,EAOFhB,EAPE,EAOEC,GAPF;AAQX,GATM;AAWP;;;;;;;;;;;AASOV,qDAAP,UAA2BO,WAA3B,EAA0DE,EAA1D,EAA4GC,GAA5G,EAAqI;AAArI;;AACIC,wCAA2B;AAAA;;;;;AACO;AAAA;AAAA,gBAAM,KAAKC,WAAL,CAAiBc,WAAjB,CAA6BnB,WAA7B,CAAN;;;AAAxBO,oBAAM,GAAkBC,SAAxB;;AACN,kBAAIR,WAAW,KAAKL,2BAAiByB,6BAArC,EAAoE;AAChE;AAAA;AAAA,kBAAOzB,uCAA6B0B,6BAA7B,CAA2Dd,MAAM,CAACG,IAAP,EAA3D,CAAP;AACH;;AACD;AAAA;AAAA,gBAAOf,uCAA6B2B,2BAA7B,CAAyDf,MAAM,CAACG,IAAP,EAAzD,CAAP;;;OALuB;AAM1B,KANyB,EAA1B,EAMMR,EANN,EAMUC,GANV;AAOH,GARM;AAUP;;;;;;;;;;;AASOV,8DAAP,UAAoCQ,IAApC,EAAkDC,EAAlD,EAA2GC,GAA3G,EAAoI;AAApI;;AACIC,wCAA2B;AAAA;;;;;AACO;AAAA;AAAA,gBAAM,KAAKC,WAAL,CAAiBkB,uBAAjB,CAAyCtB,IAAzC,CAAN;;;AAAxBM,oBAAM,GAAkBC,SAAxB;AACN;AAAA;AAAA,gBAAO,IAAIb,+CAAJ,CACHY,MAAM,CAACO,EAAP,GAAYnB,uBAAa6B,qBAAzB,GAAiD7B,uBAAaqB,QAD3D,EAEHT,MAAM,CAACW,UAFJ,EAGHX,MAAM,CAACG,IAAP,EAHG,CAAP;;;OAFuB;AAO1B,KAPyB,EAA1B,EAOMR,EAPN,EAOUC,GAPV;AAQH,GATM;AAWP;;;;;;;;;;;;AAUOV,oDAAP,UAA0BkB,OAA1B,EAAiDc,WAAjD,EAA2EvB,EAA3E,EAA2HC,GAA3H,EAAoJ;AAApJ;;AACI,QAAMuB,UAAU,GAAoBD,WAApC;AACAvC,0BAAUyC,sBAAV,CAAiCD,UAAjC,EAA6C,aAA7C;AACAtB,wCAA2B;AAAA;;;;;AACO;AAAA;AAAA,gBAAM,KAAKC,WAAL,CAAiBuB,gBAAjB,CAAkCjB,OAAlC,EAA2Ce,UAA3C,CAAN;;;AAAxBnB,oBAAM,GAAkBC,SAAxB;AACN;AAAA;AAAA,gBAAO,IAAIb,sCAAJ,CACHY,MAAM,CAACO,EAAP,GAAYnB,uBAAaoB,oBAAzB,GAAgDpB,uBAAaqB,QAD1D,EAEHT,MAAM,CAACU,IAFJ,EAGHV,MAAM,CAACW,UAHJ,CAAP;;;OAFuB;AAO1B,KAPyB,EAA1B,EAOMhB,EAPN,EAOUC,GAPV;AAQH,GAXM;AAaP;;;;;;;;;;;AASOV,oDAAP,UAA0BkB,OAA1B,EAAiDT,EAAjD,EAA8FC,GAA9F,EAAuH;AAAvH;;AACIC,wCAA2B;AAAA;;;;;AACO;AAAA;AAAA,gBAAM,KAAKC,WAAL,CAAiBwB,aAAjB,CAA+BlB,OAA/B,CAAN;;;AAAxBJ,oBAAM,GAAkBC,SAAxB;AACN;AAAA;AAAA,gBAAO,KAAKsB,SAAL,CAAevB,MAAf,EAAuBZ,uBAAaoC,mBAApC,CAAP;;;OAFuB;AAG1B,KAHyB,EAA1B,EAGM7B,EAHN,EAGUC,GAHV;AAIH,GALM;AAOP;;;;;;;;;;;AASOV,mDAAP,UAAyBkB,OAAzB,EAAgDT,EAAhD,EAA6FC,GAA7F,EAAsH;AAAtH;;AACIC,wCAA2B;AAAA;;;;;AACO;AAAA;AAAA,gBAAM,KAAKC,WAAL,CAAiB2B,YAAjB,CAA8BrB,OAA9B,CAAN;;;AAAxBJ,oBAAM,GAAkBC,SAAxB;AACN;AAAA;AAAA,gBAAO,KAAKsB,SAAL,CAAevB,MAAf,EAAuBZ,uBAAasC,iBAApC,CAAP;;;OAFuB;AAG1B,KAHyB,EAA1B,EAGM/B,EAHN,EAGUC,GAHV;AAIH,GALM;AAOP;;;;;;;;AAMOV,uCAAP;AACI;AACH,GAFM,CA/LX,CAmMI;;;AACUA,iDAAV;AAEI,QAAIyC,UAAU,GAAI,OAAOC,MAAP,KAAkB,WAAnB,GAAkC,SAAlC,GAA8C,MAA/D;AACA,QAAIC,MAAM,GAAG,SAAb;AACA,QAAIC,SAAS,GAAG,SAAhB;;AAEA,QAAI,OAAOC,SAAP,KAAqB,WAAzB,EAAsC;AAClCJ,gBAAU,GAAGA,UAAU,GAAG,GAAb,GAAmBI,SAAS,CAACC,QAA1C;AACAH,YAAM,GAAGE,SAAS,CAACE,SAAnB;AACAH,eAAS,GAAGC,SAAS,CAACG,UAAtB;AACH;;AAED,QAAMC,gBAAgB,GAClB,IAAIC,kCAAJ,CACI,IAAIA,iBAAJ,CAAY,IAAIA,YAAJ,CAAOT,UAAP,EAAmBE,MAAnB,EAA2BC,SAA3B,CAAZ,CADJ,EAEI,KAAKjD,cAFT,CADJ;AAKA,SAAKiB,WAAL,GAAmB,IAAIsC,iCAAJ,CAA4BD,gBAA5B,CAAnB;AACH,GAlBS;;AAoBFjD,2CAAR,UAAkBc,MAAlB,EAAyCqC,aAAzC,EAAsE1C,EAAtE,EAAiH;AAC7G,QAAMO,QAAQ,GACV,IAAId,4BAAJ,CACIY,MAAM,CAACO,EAAP,GAAY8B,aAAZ,GAA4BjD,uBAAaqB,QAD7C,EAEIT,MAAM,CAACW,UAFX,CADJ;AAKA,WAAQT,QAAR;AACH,GAPO;;AAQZ;AAhOA;;AAAaoC","names":["speechConfig","speechConfigImpl","Contracts_1","throwIfNull","privProperties","properties","clone","implClientSetup","Object","VoiceProfileClient","getProperty","Exports_3","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","profileType","lang","cb","err","Exports_2","privAdapter","createProfile","result","_a","response","json","profile","profileId","getProfileStatus","ok","EnrolledVoiceProfile","Canceled","data","statusText","getProfiles","TextIndependentIdentification","FromIdentificationProfileList","FromVerificationProfileList","getAuthorizationPhrases","EnrollingVoiceProfile","audioConfig","configImpl","throwIfNullOrUndefined","createEnrollment","deleteProfile","getResult","DeletedVoiceProfile","resetProfile","ResetVoiceProfile","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","Exports_1","successReason","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileAuthorizationPhraseResult,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once Voice Profile has been created.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public createProfileAsync(profileType: VoiceProfileType, lang: string, cb?: (e: VoiceProfile) => void, err?: (e: string) => void): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfile> => {\r\n            const result: IRestResponse = await this.privAdapter.createProfile(profileType, lang);\r\n            const response: { profileId: string } = result.json();\r\n            const profile = new VoiceProfile(response.profileId, profileType);\r\n            return profile;\r\n        })(), cb, err);\r\n    }\r\n     /**\r\n      * Get current information of a voice profile\r\n      * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n      * @function\r\n      * @public\r\n      * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n      * @param cb - Callback invoked once Voice Profile has been created.\r\n      * @param err - Callback invoked in case of an error.\r\n      */\r\n    public retrieveEnrollmentResultAsync(profile: VoiceProfile, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n                marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult> => {\r\n            const result: IRestResponse = await this.privAdapter.getProfileStatus(profile);\r\n            return new VoiceProfileEnrollmentResult(\r\n                result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                result.data,\r\n                result.statusText,\r\n            );\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @param cb - Callback invoked once Profile list has been returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public getAllProfilesAsync(profileType: VoiceProfileType, cb?: (e: VoiceProfileEnrollmentResult[]) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult[]> => {\r\n            const result: IRestResponse = await this.privAdapter.getProfiles(profileType);\r\n            if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n                return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json());\r\n            }\r\n            return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json());\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once phrases have been returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public getAuthorizationPhrasesAsync(lang: string, cb?: (e: VoiceProfileAuthorizationPhraseResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileAuthorizationPhraseResult> => {\r\n            const result: IRestResponse = await this.privAdapter.getAuthorizationPhrases(lang);\r\n            return new VoiceProfileAuthorizationPhraseResult(\r\n                result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled,\r\n                result.statusText,\r\n                result.json()\r\n            );\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @param cb - Callback invoked once Enrollment request has been submitted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult> => {\r\n            const result: IRestResponse = await this.privAdapter.createEnrollment(profile, configImpl);\r\n            return new VoiceProfileEnrollmentResult(\r\n                result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                result.data,\r\n                result.statusText,\r\n            );\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @param cb - Callback invoked once Voice Profile has been deleted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public deleteProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\r\n            const result: IRestResponse = await this.privAdapter.deleteProfile(profile);\r\n            return this.getResult(result, ResultReason.DeletedVoiceProfile);\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @param cb - Callback invoked once Voice Profile has been reset.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public resetProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\r\n            const result: IRestResponse = await this.privAdapter.resetProfile(profile);\r\n            return this.getResult(result, ResultReason.ResetVoiceProfile);\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}