{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime2 = require(\"@babel/runtime/regenerator\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = stopSpeakingActivityOnInputSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _setSendBox = require(\"../actions/setSendBox\");\n\nvar _stopSpeakingActivity = _interopRequireDefault(require(\"../actions/stopSpeakingActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime2.mark(stopSpeakingActivityOnInput),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(stopSpeakingActivityOnInputSaga);\n\nfunction stopSpeakingActivityOnInput() {\n  return _regenerator[\"default\"].wrap(function stopSpeakingActivityOnInput$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref) {\n            var meta = _ref.meta,\n                payload = _ref.payload,\n                type = _ref.type;\n            return type === _setSendBox.SET_SEND_BOX && payload.text || // We want to stop speaking activity when the user click on a card action\n            // But currently there are no actions generated out of a card action\n            // So, right now, we are using best-effort by listening to POST_ACTIVITY_PENDING with a \"message\" event\n            // We filter out speech because we will call startSpeakingActivity() for POST_ACTIVITY_PENDING dispatched by speech\n            type === _postActivity.POST_ACTIVITY_PENDING && meta.method !== 'speech' && payload.activity.type === 'message';\n          }, /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n            return _regenerator[\"default\"].wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _effects.put)((0, _stopSpeakingActivity[\"default\"])());\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction stopSpeakingActivityOnInputSaga() {\n  return _regenerator[\"default\"].wrap(function stopSpeakingActivityOnInputSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(stopSpeakingActivityOnInput);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;qDAEUA;sDAeeC;;AAfzB,SAAUD,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAAE;AACE,iBAAM,wBACJ;AAAA,gBAAGC,IAAH,QAAGA,IAAH;AAAA,gBAASC,OAAT,QAASA,OAAT;AAAA,gBAAkBC,IAAlB,QAAkBA,IAAlB;AAAA,mBACGA,IAAI,KAAKC,wBAATD,IAAyBD,OAAO,CAACG,IAAjCF,IACD;AACA;AACA;AACA;AACCA,gBAAI,KAAKG,mCAATH,IAAkCF,IAAI,CAACM,MAALN,KAAgB,QAAlDE,IAA8DD,OAAO,CAACM,QAARN,CAAiBC,IAAjBD,KAA0B,SAN3F;AADI,uDAQJ;AAAA;AAAA;AAAA;AAAA;AAAAO;AACE,2BAAM,kBAAI,uCAAJ,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AARI,aAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAee,SAAUV,+BAAV;AAAA;AAAA;AAAA;AAAA;AAAAW;AACb,iBAAM,gCAAeZ,2BAAf,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["stopSpeakingActivityOnInput","stopSpeakingActivityOnInputSaga","_context2","meta","payload","type","SET_SEND_BOX","text","POST_ACTIVITY_PENDING","method","activity","_context","_context3"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/stopSpeakingActivityOnInputSaga.js"],"sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { POST_ACTIVITY_PENDING } from '../actions/postActivity';\nimport { SET_SEND_BOX } from '../actions/setSendBox';\nimport stopSpeakingActivity from '../actions/stopSpeakingActivity';\nimport whileConnected from './effects/whileConnected';\n\nfunction* stopSpeakingActivityOnInput() {\n  yield takeEvery(\n    ({ meta, payload, type }) =>\n      (type === SET_SEND_BOX && payload.text) ||\n      // We want to stop speaking activity when the user click on a card action\n      // But currently there are no actions generated out of a card action\n      // So, right now, we are using best-effort by listening to POST_ACTIVITY_PENDING with a \"message\" event\n      // We filter out speech because we will call startSpeakingActivity() for POST_ACTIVITY_PENDING dispatched by speech\n      (type === POST_ACTIVITY_PENDING && meta.method !== 'speech' && payload.activity.type === 'message'),\n    function* () {\n      yield put(stopSpeakingActivity());\n    }\n  );\n}\n\nexport default function* stopSpeakingActivityOnInputSaga() {\n  yield whileConnected(stopSpeakingActivityOnInput);\n}\n"]},"metadata":{},"sourceType":"script"}