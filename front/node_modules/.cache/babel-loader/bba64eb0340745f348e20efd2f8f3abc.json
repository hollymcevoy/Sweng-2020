{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = shareObservable;\n/* global Observable */\n\nfunction shareObservable(observable) {\n  var observers = [];\n  var subscription;\n  return new Observable(function (observer) {\n    if (!subscription) {\n      subscription = observable.subscribe({\n        complete: function complete() {\n          observers.forEach(function (observer) {\n            return observer.complete();\n          });\n        },\n        error: function error(err) {\n          observers.forEach(function (observer) {\n            return observer.error(err);\n          });\n        },\n        next: function next(value) {\n          observers.forEach(function (observer) {\n            return observer.next(value);\n          });\n        }\n      });\n    }\n\n    observers.push(observer);\n    return function () {\n      observers = observers.filter(function (o) {\n        return o !== observer;\n      });\n\n      if (!observers.length) {\n        subscription.unsubscribe();\n        subscription = null;\n      }\n    };\n  });\n}","map":{"version":3,"mappings":";;;;;;AAAA;;AAEe,SAASA,eAAT,CAAyBC,UAAzB,EAAqC;AAClD,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,YAAJ;AAEA,SAAO,IAAIC,UAAJ,CAAe,oBAAY;AAChC,QAAI,CAACD,YAAL,EAAmB;AACjBA,kBAAY,GAAGF,UAAU,CAACI,SAAXJ,CAAqB;AAClCK,gBADkC,sBACvB;AACTJ,mBAAS,CAACK,OAAVL,CAAkB,oBAAQ;AAAA,mBAAIM,QAAQ,CAACF,QAATE,EAAJ;AAA1B;AAFgC;AAKlCC,aALkC,iBAK5BC,GAL4B,EAKvB;AACTR,mBAAS,CAACK,OAAVL,CAAkB,oBAAQ;AAAA,mBAAIM,QAAQ,CAACC,KAATD,CAAeE,GAAfF,CAAJ;AAA1B;AANgC;AASlCG,YATkC,gBAS7BC,KAT6B,EAStB;AACVV,mBAAS,CAACK,OAAVL,CAAkB,oBAAQ;AAAA,mBAAIM,QAAQ,CAACG,IAATH,CAAcI,KAAdJ,CAAJ;AAA1B;AACD;AAXiC,OAArBP,CAAfE;AAaD;;AAEDD,aAAS,CAACW,IAAVX,CAAeM,QAAfN;AAEA,WAAO,YAAM;AACXA,eAAS,GAAGA,SAAS,CAACY,MAAVZ,CAAiB,aAAC;AAAA,eAAIa,CAAC,KAAKP,QAAV;AAAlB,QAAZN;;AAEA,UAAI,CAACA,SAAS,CAACc,MAAf,EAAuB;AACrBb,oBAAY,CAACc,WAAbd;AACAA,oBAAY,GAAG,IAAfA;AACD;AANH;AAnBK,IAAP;AA4BD","names":["shareObservable","observable","observers","subscription","Observable","subscribe","complete","forEach","observer","error","err","next","value","push","filter","o","length","unsubscribe"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-directlinespeech-sdk/lib/src/shareObservable.js"],"sourcesContent":["/* global Observable */\n\nexport default function shareObservable(observable) {\n  let observers = [];\n  let subscription;\n\n  return new Observable(observer => {\n    if (!subscription) {\n      subscription = observable.subscribe({\n        complete() {\n          observers.forEach(observer => observer.complete());\n        },\n\n        error(err) {\n          observers.forEach(observer => observer.error(err));\n        },\n\n        next(value) {\n          observers.forEach(observer => observer.next(value));\n        }\n      });\n    }\n\n    observers.push(observer);\n\n    return () => {\n      observers = observers.filter(o => o !== observer);\n\n      if (!observers.length) {\n        subscription.unsubscribe();\n        subscription = null;\n      }\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"script"}