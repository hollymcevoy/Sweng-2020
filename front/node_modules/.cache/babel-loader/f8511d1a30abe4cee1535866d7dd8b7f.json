{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\n\n\nfunction take(count) {\n  return function (source) {\n    if (count === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nexports.take = take;\n\nvar TakeOperator = function () {\n  function TakeOperator(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();\n    }\n  }\n\n  TakeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  };\n\n  return TakeOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar TakeSubscriber = function (_super) {\n  __extends(TakeSubscriber, _super);\n\n  function TakeSubscriber(destination, total) {\n    _super.call(this, destination);\n\n    this.total = total;\n    this.count = 0;\n  }\n\n  TakeSubscriber.prototype._next = function (value) {\n    var total = this.total;\n    var count = ++this.count;\n\n    if (count <= total) {\n      this.destination.next(value);\n\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  };\n\n  return TakeSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"mappings":";;;;;;;;;;;;AACA,2BAA2B,eAA3B;;AACA,wCAAwC,iCAAxC;;AACA,gCAAgC,+BAAhC;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,cAAwBA,KAAxB,EAAqC;AACnC,SAAO,UAACC,MAAD,EAAsB;AAC3B,QAAID,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO,IAAIE,iCAAJ,EAAP;AACD,KAFD,MAEO;AACL,aAAOD,MAAM,CAACE,IAAP,CAAY,IAAIC,YAAJ,CAAiBJ,KAAjB,CAAZ,CAAP;AACD;AACF,GAND;AAOD;;AAReK,eAAIC,IAAJ;;AAUhB;AACE,wBAAoBC,KAApB,EAAiC;AAAb;;AAClB,QAAI,KAAKA,KAAL,GAAa,CAAjB,EAAoB;AAClB,YAAM,IAAIC,iDAAJ,EAAN;AACD;AACF;;AAEDJ,0CAAKK,UAAL,EAAgCR,MAAhC,EAA2C;AACzC,WAAOA,MAAM,CAACS,SAAP,CAAiB,IAAIC,cAAJ,CAAmBF,UAAnB,EAA+B,KAAKF,KAApC,CAAjB,CAAP;AACD,GAFD;;AAGF;AAAC,CAVD;AAYA;;;;;;;AAKA;AAAgCK;;AAG9B,0BAAYC,WAAZ,EAAgDN,KAAhD,EAA6D;AAC3DO,sBAAMD,WAAN;;AAD8C;AAFxC,iBAAgB,CAAhB;AAIP;;AAESF,mCAAV,UAAgBI,KAAhB,EAAwB;AACtB,QAAMR,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAMP,KAAK,GAAG,EAAE,KAAKA,KAArB;;AACA,QAAIA,KAAK,IAAIO,KAAb,EAAoB;AAClB,WAAKM,WAAL,CAAiBG,IAAjB,CAAsBD,KAAtB;;AACA,UAAIf,KAAK,KAAKO,KAAd,EAAqB;AACnB,aAAKM,WAAL,CAAiBI,QAAjB;AACA,aAAKC,WAAL;AACD;AACF;AACF,GAVS;;AAWZ;AAlBA,EAAgCC,uBAAhC","names":["count","source","EmptyObservable_1","lift","TakeOperator","exports","take","total","ArgumentOutOfRangeError_1","subscriber","subscribe","TakeSubscriber","__extends","destination","_super","value","next","complete","unsubscribe","Subscriber_1"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/take.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}