{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechRecognitionResult = void 0;\n\nvar Exports_1 = require(\"./Exports\");\n/**\n * Defines result of speech recognition.\n * @class SpeechRecognitionResult\n */\n\n\nvar SpeechRecognitionResult =\n/** @class */\nfunction (_super) {\n  __extends(SpeechRecognitionResult, _super);\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @public\n   * @param {string} resultId - The result id.\n   * @param {ResultReason} reason - The reason.\n   * @param {string} text - The recognized text.\n   * @param {number} duration - The duration.\n   * @param {number} offset - The offset into the stream.\n   * @param {string} language - Primary Language detected, if provided.\n   * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\n   * @param {string} speakerId - speaker id for conversation transcription, if provided.\n   * @param {string} errorDetails - Error details, if provided.\n   * @param {string} json - Additional Json, if provided.\n   * @param {PropertyCollection} properties - Additional properties, if provided.\n   */\n\n\n  function SpeechRecognitionResult(resultId, reason, text, duration, offset, language, languageDetectionConfidence, speakerId, errorDetails, json, properties) {\n    var _this = _super.call(this, resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties) || this;\n\n    _this.privSpeakerId = speakerId;\n    return _this;\n  }\n\n  Object.defineProperty(SpeechRecognitionResult.prototype, \"speakerId\", {\n    /**\n     * speaker id from conversation transcription/id scenarios\n     * @member SpeechRecognitionResult.prototype.speakerId\n     * @function\n     * @public\n     * @returns {string} id of speaker in given result\n     */\n    get: function () {\n      return this.privSpeakerId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SpeechRecognitionResult;\n}(Exports_1.RecognitionResult);\n\nexports.SpeechRecognitionResult = SpeechRecognitionResult;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAEA;;;;;;AAIA;AAAA;AAAA;AAA6CA;AAEzC;;;;;;;;;;;;;;;;;;AAgBA,mCAAmBC,QAAnB,EAAsCC,MAAtC,EAA6DC,IAA7D,EACmBC,QADnB,EACsCC,MADtC,EACuDC,QADvD,EAEmBC,2BAFnB,EAEyDC,SAFzD,EAE6EC,YAF7E,EAGmBC,IAHnB,EAGkCC,UAHlC,EAGiE;AAHjE,gBAIIC,kBAAMX,QAAN,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgDC,QAAhD,EAA0DC,2BAA1D,EAAuFE,YAAvF,EAAqGC,IAArG,EAA2GC,UAA3G,KAAsH,IAJ1H;;AAKIE,SAAI,CAACC,aAAL,GAAqBN,SAArB;;AACH;;AASDO,wBAAWC,iCAAX,EAAW,WAAX,EAAoB;AAPpB;;;;;;;SAOA;AACI,aAAO,KAAKF,aAAZ;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAIJ;AAAC,CArCD,CAA6CG,2BAA7C;;AAAaC","names":["__extends","resultId","reason","text","duration","offset","language","languageDetectionConfidence","speakerId","errorDetails","json","properties","_super","_this","privSpeakerId","Object","SpeechRecognitionResult","Exports_1","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}