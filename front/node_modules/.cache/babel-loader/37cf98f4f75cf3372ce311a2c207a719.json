{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = scrollIntoViewWithBlockNearest;\n\nvar _computeScrollIntoView = _interopRequireDefault(require(\"compute-scroll-into-view\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Calls `targetElement.scrollIntoView({ block: 'nearest' })`.\n *\n * If browser do not support options for `scrollIntoView`, fallback to polyfill.\n */\n\n\nfunction scrollIntoViewWithBlockNearest(targetElement) {\n  // Checks if `scrollIntoView` support options or not.\n  // - https://github.com/Modernizr/Modernizr/issues/1568#issuecomment-419457972\n  // - https://stackoverflow.com/questions/46919627/is-it-possible-to-test-for-scrollintoview-browser-compatibility\n  if ('scrollBehavior' in document.documentElement.style) {\n    return targetElement.scrollIntoView({\n      block: 'nearest'\n    });\n  } // We should only move transcript scrollable, and not other scrollable, such as document.body which is from the hosting page.\n\n\n  var _computeScrollIntoVie = (0, _computeScrollIntoView.default)(targetElement, {\n    block: 'nearest'\n  }),\n      _computeScrollIntoVie2 = _slicedToArray(_computeScrollIntoVie, 1),\n      action = _computeScrollIntoVie2[0];\n\n  action.el.scrollTop = action.top;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;;;AACe,SAASA,8BAAT,CAAwCC,aAAxC,EAA0E;AACvF;AACA;AACA;AACA,MAAI,oBAAoBC,QAAQ,CAACC,eAATD,CAAyBE,KAAjD,EAAwD;AACtD,WAAOH,aAAa,CAACI,cAAdJ,CAA6B;AAAEK,WAAK,EAAE;AAAT,KAA7BL,CAAP;AALqF,IAQvF;;;AACA,8BAAiB,oCAAsBA,aAAtB,EAAqC;AAAEK,SAAK,EAAE;AAAT,GAArC,CAAjB;AAAA;AAAA,MAAOC,MAAP;;AAEAA,QAAM,CAACC,EAAPD,CAAUE,SAAVF,GAAsBA,MAAM,CAACG,GAA7BH;AACD","names":["scrollIntoViewWithBlockNearest","targetElement","document","documentElement","style","scrollIntoView","block","action","el","scrollTop","top"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Utils/scrollIntoViewWithBlockNearest.ts"],"sourcesContent":["import computeScrollIntoView from 'compute-scroll-into-view';\n\n/**\n * Calls `targetElement.scrollIntoView({ block: 'nearest' })`.\n *\n * If browser do not support options for `scrollIntoView`, fallback to polyfill.\n */\nexport default function scrollIntoViewWithBlockNearest(targetElement: HTMLElement): void {\n  // Checks if `scrollIntoView` support options or not.\n  // - https://github.com/Modernizr/Modernizr/issues/1568#issuecomment-419457972\n  // - https://stackoverflow.com/questions/46919627/is-it-possible-to-test-for-scrollintoview-browser-compatibility\n  if ('scrollBehavior' in document.documentElement.style) {\n    return targetElement.scrollIntoView({ block: 'nearest' });\n  }\n\n  // We should only move transcript scrollable, and not other scrollable, such as document.body which is from the hosting page.\n  const [action] = computeScrollIntoView(targetElement, { block: 'nearest' });\n\n  action.el.scrollTop = action.top;\n}\n"]},"metadata":{},"sourceType":"script"}