{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechServiceRecognizer = void 0;\n\nvar Exports_1 = require(\"../sdk/Exports\");\n\nvar Exports_2 = require(\"./Exports\"); // tslint:disable-next-line:max-classes-per-file\n\n\nvar SpeechServiceRecognizer =\n/** @class */\nfunction (_super) {\n  __extends(SpeechServiceRecognizer, _super);\n\n  function SpeechServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {\n    var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) || this;\n\n    _this.privSpeechRecognizer = speechRecognizer;\n\n    if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\n      var sourceLanguages = recognizerConfig.autoDetectSourceLanguages.split(\",\");\n\n      _this.privSpeechContext.setSection(\"languageId\", {\n        languages: sourceLanguages,\n        onSuccess: {\n          action: \"Recognize\"\n        },\n        onUnknown: {\n          action: \"None\"\n        }\n      });\n\n      _this.privSpeechContext.setSection(\"phraseOutput\", {\n        interimResults: {\n          resultType: \"Auto\"\n        },\n        phraseResults: {\n          resultType: \"Always\"\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  SpeechServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, resultProps, processed, _a, hypothesis, offset, ev, simple, resultReason, cancelReason, detailed, event_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resultProps = new Exports_1.PropertyCollection();\n            resultProps.setProperty(Exports_1.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n            processed = false;\n            _a = connectionMessage.path.toLowerCase();\n\n            switch (_a) {\n              case \"speech.hypothesis\":\n                return [3\n                /*break*/\n                , 1];\n\n              case \"speech.fragment\":\n                return [3\n                /*break*/\n                , 1];\n\n              case \"speech.phrase\":\n                return [3\n                /*break*/\n                , 2];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 1:\n            hypothesis = Exports_2.SpeechHypothesis.fromJSON(connectionMessage.textBody);\n            offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n            result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, Exports_1.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, // Speaker Id\n            undefined, connectionMessage.textBody, resultProps);\n            this.privRequestSession.onHypothesis(offset);\n            ev = new Exports_1.SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n            if (!!this.privSpeechRecognizer.recognizing) {\n              try {\n                this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            processed = true;\n            return [3\n            /*break*/\n            , 7];\n\n          case 2:\n            simple = Exports_2.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n            resultReason = Exports_2.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n            if (!(Exports_1.ResultReason.Canceled === resultReason)) return [3\n            /*break*/\n            , 4];\n            cancelReason = Exports_2.EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            return [4\n            /*yield*/\n            , this.cancelRecognitionLocal(cancelReason, Exports_2.EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus), undefined)];\n\n          case 3:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === Exports_1.ResultReason.NoMatch && simple.RecognitionStatus !== Exports_2.RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(Exports_2.OutputFormatPropertyName) === Exports_1.OutputFormat[Exports_1.OutputFormat.Simple]) {\n                result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, // Speaker Id\n                undefined, connectionMessage.textBody, resultProps);\n              } else {\n                detailed = Exports_2.DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                result = new Exports_1.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === Exports_2.RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, // Speaker Id\n                undefined, connectionMessage.textBody, resultProps);\n              }\n\n              event_1 = new Exports_1.SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privSpeechRecognizer.recognized) {\n                try {\n                  this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event_1);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n\n            _b.label = 5;\n\n          case 5:\n            processed = true;\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            , processed];\n        }\n      });\n    });\n  }; // Cancels recognition.\n\n\n  SpeechServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_1.PropertyCollection();\n    properties.setProperty(Exports_2.CancellationErrorCodePropertyName, Exports_1.CancellationErrorCode[errorCode]);\n\n    if (!!this.privSpeechRecognizer.canceled) {\n      var cancelEvent = new Exports_1.SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      var result = new Exports_1.SpeechRecognitionResult(requestId, Exports_1.ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // Language Detection Confidence\n      undefined, // Speaker Id\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  };\n\n  return SpeechServiceRecognizer;\n}(Exports_2.ServiceRecognizerBase);\n\nexports.SpeechServiceRecognizer = SpeechServiceRecognizer;","map":{"version":3,"mappings":"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","names":["__extends","authentication","connectionFactory","audioSource","recognizerConfig","speechRecognizer","_super","_this","privSpeechRecognizer","autoDetectSourceLanguages","undefined","sourceLanguages","split","privSpeechContext","setSection","languages","onSuccess","action","onUnknown","interimResults","resultType","phraseResults","SpeechServiceRecognizer","connectionMessage","resultProps","Exports_1","setProperty","SpeechServiceResponse_JsonResult","textBody","processed","_a","path","toLowerCase","hypothesis","Exports_2","fromJSON","offset","Offset","privRequestSession","currentTurnAudioOffset","result","requestId","RecognizingSpeech","Text","Duration","Language","LanguageDetectionConfidence","onHypothesis","ev","sessionId","recognizing","error","simple","resultReason","implTranslateRecognitionResult","RecognitionStatus","onPhraseRecognized","Canceled","cancelReason","implTranslateCancelResult","cancelRecognitionLocal","implTranslateCancelErrorCode","_b","isSpeechEnded","NoMatch","InitialSilenceTimeout","privRecognizerConfig","parameters","getProperty","Simple","DisplayText","detailed","Success","NBest","Display","event_1","recognized","privSuccessCallback","e","privErrorCallback","cancellationReason","errorCode","properties","canceled","cancelEvent","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = recognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                languages: sourceLanguages,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}