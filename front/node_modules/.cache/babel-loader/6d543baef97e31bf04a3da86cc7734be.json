{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.multiaudioRelativeUri = \"/speech/recognition/multiaudio\";\n\n    this.create = (config, authInfo, connectionId) => {\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\n      const hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      const hostDefault = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\n      const queryParams = {};\n      const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n      if (endpointId) {\n        if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n          queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n        }\n      } else if (language) {\n        if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n          queryParams[QueryParameterNames.Language] = language;\n        }\n      }\n\n      this.setCommonUrlParams(config, queryParams, endpoint);\n\n      if (!endpoint) {\n        endpoint = host;\n      }\n\n      const headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n      const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","TranscriberConnectionFactory","constructor","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","toLowerCase","startsWith","hostDefault","multiaudioRelativeUri","host","SpeechServiceConnection_Host","queryParams","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","search","CustomSpeechDeploymentId","Language","setCommonUrlParams","headers","token","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}