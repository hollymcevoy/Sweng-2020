{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\n\n\nfunction tap(nextOrObserver, error, complete) {\n  return function tapOperatorFunction(source) {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nexports.tap = tap;\n\nvar DoOperator = function () {\n  function DoOperator(nextOrObserver, error, complete) {\n    this.nextOrObserver = nextOrObserver;\n    this.error = error;\n    this.complete = complete;\n  }\n\n  DoOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  };\n\n  return DoOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DoSubscriber = function (_super) {\n  __extends(DoSubscriber, _super);\n\n  function DoSubscriber(destination, nextOrObserver, error, complete) {\n    _super.call(this, destination);\n\n    var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  DoSubscriber.prototype._next = function (value) {\n    var safeSubscriber = this.safeSubscriber;\n    safeSubscriber.next(value);\n\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  };\n\n  DoSubscriber.prototype._error = function (err) {\n    var safeSubscriber = this.safeSubscriber;\n    safeSubscriber.error(err);\n\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  };\n\n  DoSubscriber.prototype._complete = function () {\n    var safeSubscriber = this.safeSubscriber;\n    safeSubscriber.complete();\n\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  };\n\n  return DoSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"mappings":";;;;;;;;;;;;AACA,2BAA2B,eAA3B;AASA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,aAAuBA,cAAvB,EACuBC,KADvB,EAEuBC,QAFvB,EAE4C;AAC1C,SAAO,6BAA6BC,MAA7B,EAAkD;AACvD,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,UAAJ,CAAeL,cAAf,EAA+BC,KAA/B,EAAsCC,QAAtC,CAAZ,CAAP;AACD,GAFD;AAGD;;AANeI,cAAGC,GAAH;;AAQhB;AACE,sBAAoBP,cAApB,EACoBC,KADpB,EAEoBC,QAFpB,EAEyC;AAFrB;AACA;AACA;AACnB;;AACDG,wCAAKG,UAAL,EAAgCL,MAAhC,EAA2C;AACzC,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,YAAJ,CAAiBF,UAAjB,EAA6B,KAAKR,cAAlC,EAAkD,KAAKC,KAAvD,EAA8D,KAAKC,QAAnE,CAAjB,CAAP;AACD,GAFD;;AAGF;AAAC,CARD;AAUA;;;;;;;AAKA;AAA8BS;;AAI5B,wBAAYC,WAAZ,EACYZ,cADZ,EAEYC,KAFZ,EAGYC,QAHZ,EAGiC;AAC/BW,sBAAMD,WAAN;;AAEA,QAAME,cAAc,GAAG,IAAIC,uBAAJ,CAAkBf,cAAlB,EAAkCC,KAAlC,EAAyCC,QAAzC,CAAvB;AACAY,kBAAc,CAACE,kBAAf,GAAoC,IAApC;AACA,SAAKC,GAAL,CAASH,cAAT;AACA,SAAKA,cAAL,GAAsBA,cAAtB;AACD;;AAESJ,iCAAV,UAAgBQ,KAAhB,EAAwB;AACd;AACRJ,kBAAc,CAACK,IAAf,CAAoBD,KAApB;;AACA,QAAIJ,cAAc,CAACM,eAAnB,EAAoC;AAClC,WAAKR,WAAL,CAAiBX,KAAjB,CAAuBa,cAAc,CAACO,cAAtC;AACD,KAFD,MAEO;AACL,WAAKT,WAAL,CAAiBO,IAAjB,CAAsBD,KAAtB;AACD;AACF,GARS;;AAUAR,kCAAV,UAAiBY,GAAjB,EAAyB;AACf;AACRR,kBAAc,CAACb,KAAf,CAAqBqB,GAArB;;AACA,QAAIR,cAAc,CAACM,eAAnB,EAAoC;AAClC,WAAKR,WAAL,CAAiBX,KAAjB,CAAuBa,cAAc,CAACO,cAAtC;AACD,KAFD,MAEO;AACL,WAAKT,WAAL,CAAiBX,KAAjB,CAAuBqB,GAAvB;AACD;AACF,GARS;;AAUAZ,qCAAV;AACU;AACRI,kBAAc,CAACZ,QAAf;;AACA,QAAIY,cAAc,CAACM,eAAnB,EAAoC;AAClC,WAAKR,WAAL,CAAiBX,KAAjB,CAAuBa,cAAc,CAACO,cAAtC;AACD,KAFD,MAEO;AACL,WAAKT,WAAL,CAAiBV,QAAjB;AACD;AACF,GARS;;AASZ;AA7CA,EAA8Ba,uBAA9B","names":["nextOrObserver","error","complete","source","lift","DoOperator","exports","tap","subscriber","subscribe","DoSubscriber","__extends","destination","_super","safeSubscriber","Subscriber_1","syncErrorThrowable","add","value","next","syncErrorThrown","syncErrorValue","err"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/tap.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}