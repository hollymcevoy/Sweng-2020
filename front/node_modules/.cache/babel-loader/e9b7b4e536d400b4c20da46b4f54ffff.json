{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useParseAdaptiveCardJSON;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _botframeworkWebchatComponent = require(\"botframework-webchat-component\");\n\nvar _react = require(\"react\");\n\nvar _useAdaptiveCardsPackage = _interopRequireDefault(require(\"../useAdaptiveCardsPackage\"));\n\nvar _useStyleOptions3 = _interopRequireDefault(require(\"../../../hooks/useStyleOptions\"));\n\nvar useDirection = _botframeworkWebchatComponent.hooks.useDirection;\n\nfunction updateRTLInline(element, rtl, adaptiveCardsPackage) {\n  if (element instanceof adaptiveCardsPackage.Container) {\n    element.rtl = rtl;\n  } // Tree traversal to add rtl boolean to child elements\n\n\n  if (element.getItemAt && element.getItemCount) {\n    var count = element.getItemCount();\n\n    for (var index = 0; index < count; index++) {\n      var child = element.getItemAt(index);\n      updateRTLInline(child, rtl, adaptiveCardsPackage);\n    }\n  }\n}\n\nfunction useParseAdaptiveCardJSON() {\n  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),\n      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),\n      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];\n\n  var _useDirection = useDirection(),\n      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  var _useStyleOptions = (0, _useStyleOptions3.default)(),\n      _useStyleOptions2 = (0, _slicedToArray2.default)(_useStyleOptions, 1),\n      adaptiveCardsParserMaxVersion = _useStyleOptions2[0].adaptiveCardsParserMaxVersion;\n\n  var AdaptiveCard = adaptiveCardsPackage.AdaptiveCard,\n      SerializationContext = adaptiveCardsPackage.SerializationContext,\n      Version = adaptiveCardsPackage.Version;\n  var maxVersion = (0, _react.useMemo)(function () {\n    var maxVersion = Version.parse(adaptiveCardsParserMaxVersion, new SerializationContext());\n\n    if (maxVersion && !maxVersion.isValid) {\n      console.warn('botframework-webchat: \"adaptiveCardsParserMaxVersion\" specified is not a valid version.');\n      return;\n    }\n\n    return maxVersion;\n  }, [adaptiveCardsParserMaxVersion, SerializationContext, Version]);\n  return (0, _react.useCallback)(function (content) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$ignoreErrors = _ref.ignoreErrors,\n        ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors;\n\n    if (!content) {\n      return;\n    }\n\n    var card = new AdaptiveCard();\n    var errors = [];\n    var serializationContext = new SerializationContext(maxVersion);\n    card.parse(content, serializationContext);\n    var eventCount = serializationContext.eventCount;\n\n    for (var i = 0; i < eventCount; i++) {\n      errors.push(serializationContext.getEventAt(i));\n    }\n\n    if (!ignoreErrors && errors.length) {\n      console.error('botframework-webchat: Failed to parse Adaptive Card', {\n        errors: errors\n      });\n      throw new Error('botframework-webchat: Failed to parse Adaptive Card');\n    }\n\n    updateRTLInline(card, direction === 'rtl', adaptiveCardsPackage);\n    return card;\n  }, [AdaptiveCard, adaptiveCardsPackage, direction, maxVersion, SerializationContext]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA,IAAQA,YAAR,GAAyBC,oCAAjBD,YAAR;;AAEA,SAASE,eAAT,CAAyBC,OAAzB,EAAkCC,GAAlC,EAAuCC,oBAAvC,EAA6D;AAC3D,MAAIF,OAAO,YAAYE,oBAAoB,CAACC,SAA5C,EAAuD;AACrDH,WAAO,CAACC,GAARD,GAAcC,GAAdD;AAFyD,IAK3D;;;AACA,MAAIA,OAAO,CAACI,SAARJ,IAAqBA,OAAO,CAACK,YAAjC,EAA+C;AAC7C,QAAMC,KAAK,GAAGN,OAAO,CAACK,YAARL,EAAd;;AAEA,SAAK,IAAIO,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,KAA5B,EAAmCC,KAAK,EAAxC,EAA4C;AAC1C,UAAMC,KAAK,GAAGR,OAAO,CAACI,SAARJ,CAAkBO,KAAlBP,CAAd;AAEAD,qBAAe,CAACS,KAAD,EAAQP,GAAR,EAAaC,oBAAb,CAAfH;AACD;AACF;AACF;;AAEc,SAASU,wBAAT,GAAoC;AACjD,8BAA+B,uCAA/B;AAAA;AAAA,MAAOP,oBAAP;;AACA,sBAAoBL,YAAY,EAAhC;AAAA;AAAA,MAAOa,SAAP;;AACA,yBAA4C,gCAA5C;AAAA;AAAA,MAASC,6BAAT,wBAASA,6BAAT;;AAEA,MAAQC,YAAR,GAAwDV,oBAAxD,CAAQU,YAAR;AAAA,MAAsBC,oBAAtB,GAAwDX,oBAAxD,CAAsBW,oBAAtB;AAAA,MAA4CC,OAA5C,GAAwDZ,oBAAxD,CAA4CY,OAA5C;AAEA,MAAMC,UAAU,GAAG,oBAAQ,YAAM;AAC/B,QAAMA,UAAU,GAAGD,OAAO,CAACE,KAARF,CAAcH,6BAAdG,EAA6C,IAAID,oBAAJ,EAA7CC,CAAnB;;AAEA,QAAIC,UAAU,IAAI,CAACA,UAAU,CAACE,OAA9B,EAAuC;AACrCC,aAAO,CAACC,IAARD,CAAa,yFAAbA;AAEA;AACD;;AAED,WAAOH,UAAP;AATiB,KAUhB,CAACJ,6BAAD,EAAgCE,oBAAhC,EAAsDC,OAAtD,CAVgB,CAAnB;AAYA,SAAO,wBACL,UAACM,OAAD,EAA4C;AAAA,mFAAP,EAAO;AAAA,iCAAhCC,YAAgC;AAAA,QAAhCA,YAAgC,kCAAjB,KAAiB;;AAC1C,QAAI,CAACD,OAAL,EAAc;AACZ;AACD;;AAED,QAAME,IAAI,GAAG,IAAIV,YAAJ,EAAb;AACA,QAAMW,MAAM,GAAG,EAAf;AACA,QAAMC,oBAAoB,GAAG,IAAIX,oBAAJ,CAAyBE,UAAzB,CAA7B;AAEAO,QAAI,CAACN,KAALM,CAAWF,OAAXE,EAAoBE,oBAApBF;AAEA,QAAQG,UAAR,GAAuBD,oBAAvB,CAAQC,UAAR;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAApB,EAAgCC,CAAC,EAAjC,EAAqC;AACnCH,YAAM,CAACI,IAAPJ,CAAYC,oBAAoB,CAACI,UAArBJ,CAAgCE,CAAhCF,CAAZD;AACD;;AAED,QAAI,CAACF,YAAD,IAAiBE,MAAM,CAACM,MAA5B,EAAoC;AAClCX,aAAO,CAACY,KAARZ,CAAc,qDAAdA,EAAqE;AAAEK,cAAM,EAANA;AAAF,OAArEL;AAEA,YAAM,IAAIa,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAEDhC,mBAAe,CAACuB,IAAD,EAAOZ,SAAS,KAAK,KAArB,EAA4BR,oBAA5B,CAAfH;AAEA,WAAOuB,IAAP;AA1BG,KA4BL,CAACV,YAAD,EAAeV,oBAAf,EAAqCQ,SAArC,EAAgDK,UAAhD,EAA4DF,oBAA5D,CA5BK,CAAP;AA8BD","names":["useDirection","hooks","updateRTLInline","element","rtl","adaptiveCardsPackage","Container","getItemAt","getItemCount","count","index","child","useParseAdaptiveCardJSON","direction","adaptiveCardsParserMaxVersion","AdaptiveCard","SerializationContext","Version","maxVersion","parse","isValid","console","warn","content","ignoreErrors","card","errors","serializationContext","eventCount","i","push","getEventAt","length","error","Error"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat/lib/src/adaptiveCards/hooks/internal/useParseAdaptiveCardJSON.ts"],"sourcesContent":["import { hooks } from 'botframework-webchat-component';\nimport { useCallback, useMemo } from 'react';\n\nimport useAdaptiveCardsPackage from '../useAdaptiveCardsPackage';\nimport useStyleOptions from '../../../hooks/useStyleOptions';\n\nconst { useDirection } = hooks;\n\nfunction updateRTLInline(element, rtl, adaptiveCardsPackage) {\n  if (element instanceof adaptiveCardsPackage.Container) {\n    element.rtl = rtl;\n  }\n\n  // Tree traversal to add rtl boolean to child elements\n  if (element.getItemAt && element.getItemCount) {\n    const count = element.getItemCount();\n\n    for (let index = 0; index < count; index++) {\n      const child = element.getItemAt(index);\n\n      updateRTLInline(child, rtl, adaptiveCardsPackage);\n    }\n  }\n}\n\nexport default function useParseAdaptiveCardJSON() {\n  const [adaptiveCardsPackage] = useAdaptiveCardsPackage();\n  const [direction] = useDirection();\n  const [{ adaptiveCardsParserMaxVersion }] = useStyleOptions();\n\n  const { AdaptiveCard, SerializationContext, Version } = adaptiveCardsPackage;\n\n  const maxVersion = useMemo(() => {\n    const maxVersion = Version.parse(adaptiveCardsParserMaxVersion, new SerializationContext());\n\n    if (maxVersion && !maxVersion.isValid) {\n      console.warn('botframework-webchat: \"adaptiveCardsParserMaxVersion\" specified is not a valid version.');\n\n      return;\n    }\n\n    return maxVersion;\n  }, [adaptiveCardsParserMaxVersion, SerializationContext, Version]);\n\n  return useCallback(\n    (content, { ignoreErrors = false } = {}) => {\n      if (!content) {\n        return;\n      }\n\n      const card = new AdaptiveCard();\n      const errors = [];\n      const serializationContext = new SerializationContext(maxVersion);\n\n      card.parse(content, serializationContext);\n\n      const { eventCount } = serializationContext;\n\n      for (let i = 0; i < eventCount; i++) {\n        errors.push(serializationContext.getEventAt(i));\n      }\n\n      if (!ignoreErrors && errors.length) {\n        console.error('botframework-webchat: Failed to parse Adaptive Card', { errors });\n\n        throw new Error('botframework-webchat: Failed to parse Adaptive Card');\n      }\n\n      updateRTLInline(card, direction === 'rtl', adaptiveCardsPackage);\n\n      return card;\n    },\n    [AdaptiveCard, adaptiveCardsPackage, direction, maxVersion, SerializationContext]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}