{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _CheckMarkIcon = _interopRequireDefault(require(\"./CheckMarkIcon\"));\n\nvar _ExclamationMarkIcon = _interopRequireDefault(require(\"./ExclamationMarkIcon\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\n\nvar NotificationIcon = function NotificationIcon(_ref) {\n  var className = _ref.className,\n      level = _ref.level;\n  var localize = useLocalizer();\n  var prefixes = {\n    error: localize('TOAST_ALT_ERROR'),\n    info: localize('TOAST_ALT_INFO'),\n    success: localize('TOAST_ALT_SUCCESS'),\n    warn: localize('TOAST_ALT_WARN')\n  }; // Mitigated through denylisting.\n  // eslint-disable-next-line security/detect-object-injection\n\n  var prefix = !(0, _botframeworkWebchatCore.isForbiddenPropertyName)(level) && prefixes[level] || '';\n  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, level === 'success' ? /*#__PURE__*/_react.default.createElement(_CheckMarkIcon.default, {\n    \"aria-label\": prefix,\n    className: className\n  }) : /*#__PURE__*/_react.default.createElement(_ExclamationMarkIcon.default, {\n    \"aria-label\": prefix,\n    className: className\n  }));\n};\n\nNotificationIcon.defaultProps = {\n  className: undefined\n};\nNotificationIcon.propTypes = {\n  className: _propTypes.default.string,\n  level: _propTypes.default.oneOf(['error', 'info', 'success', 'warn']).isRequired\n};\nvar _default = NotificationIcon;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEA,IAAQA,YAAR,GAAyBC,8BAAjBD,YAAR;;AAEA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,OAA0B;AAAA,MAAvBC,SAAuB,QAAvBA,SAAuB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACjD,MAAMC,QAAQ,GAAGL,YAAY,EAA7B;AAEA,MAAMM,QAAQ,GAAG;AACfC,SAAK,EAAEF,QAAQ,CAAC,iBAAD,CADA;AAEfG,QAAI,EAAEH,QAAQ,CAAC,gBAAD,CAFC;AAGfI,WAAO,EAAEJ,QAAQ,CAAC,mBAAD,CAHF;AAIfK,QAAI,EAAEL,QAAQ,CAAC,gBAAD;AAJC,GAAjB,CAHiD,CAUjD;AACA;;AACA,MAAMM,MAAM,GAAI,CAAC,sDAAwBP,KAAxB,CAAD,IAAmCE,QAAQ,CAACF,KAAD,CAA3C,IAAuD,EAAvE;AAEA,sBACEQ,6BAACA,eAAMC,QAAP,QACGT,KAAK,KAAK,SAAVA,gBACCQ,6BAACE,sBAAD;AAAe,kBAAYH,MAA3B;AAAmCR,aAAS,EAAEA;AAA9C,IADDC,gBAGCQ,6BAACG,4BAAD;AAAqB,kBAAYJ,MAAjC;AAAyCR,aAAS,EAAEA;AAApD,IAJJ,CADF;AAdF;;AAyBAD,gBAAgB,CAACc,YAAjBd,GAAgC;AAC9BC,WAAS,EAAEc;AADmB,CAAhCf;AAIAA,gBAAgB,CAACgB,SAAjBhB,GAA6B;AAC3BC,WAAS,EAAEgB,mBAAUC,MADM;AAE3BhB,OAAK,EAAEe,mBAAUE,KAAVF,CAAgB,CAAC,OAAD,EAAU,MAAV,EAAkB,SAAlB,EAA6B,MAA7B,CAAhBA,EAAsDG;AAFlC,CAA7BpB;eAKeA","names":["useLocalizer","hooks","NotificationIcon","className","level","localize","prefixes","error","info","success","warn","prefix","_react","Fragment","_CheckMarkIcon","_ExclamationMarkIcon","defaultProps","undefined","propTypes","PropTypes","string","oneOf","isRequired"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Toast/NotificationIcon.js"],"sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport { isForbiddenPropertyName } from 'botframework-webchat-core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport CheckMarkIcon from './CheckMarkIcon';\nimport ExclamationMarkIcon from './ExclamationMarkIcon';\n\nconst { useLocalizer } = hooks;\n\nconst NotificationIcon = ({ className, level }) => {\n  const localize = useLocalizer();\n\n  const prefixes = {\n    error: localize('TOAST_ALT_ERROR'),\n    info: localize('TOAST_ALT_INFO'),\n    success: localize('TOAST_ALT_SUCCESS'),\n    warn: localize('TOAST_ALT_WARN')\n  };\n\n  // Mitigated through denylisting.\n  // eslint-disable-next-line security/detect-object-injection\n  const prefix = (!isForbiddenPropertyName(level) && prefixes[level]) || '';\n\n  return (\n    <React.Fragment>\n      {level === 'success' ? (\n        <CheckMarkIcon aria-label={prefix} className={className} />\n      ) : (\n        <ExclamationMarkIcon aria-label={prefix} className={className} />\n      )}\n    </React.Fragment>\n  );\n};\n\nNotificationIcon.defaultProps = {\n  className: undefined\n};\n\nNotificationIcon.propTypes = {\n  className: PropTypes.string,\n  level: PropTypes.oneOf(['error', 'info', 'success', 'warn']).isRequired\n};\n\nexport default NotificationIcon;\n"]},"metadata":{},"sourceType":"script"}