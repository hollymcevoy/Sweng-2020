{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _react = require(\"react\");\n\nvar _intersectionOf = _interopRequireDefault(require(\"../../../Utils/intersectionOf\"));\n\nvar _removeInline = _interopRequireDefault(require(\"../../../Utils/removeInline\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useGroupActivities = _botframeworkWebchatApi.hooks.useGroupActivities;\n\nfunction validateAllEntriesTagged(entries, bins) {\n  return entries.every(function (entry) {\n    return bins.some(function (bin) {\n      return bin.includes(entry);\n    });\n  });\n} // Activity tree is a multidimensional array, while activities is a 1D array.\n// - The first dimension of the array contains activities with same sender;\n// - The second dimension of the array contains activities with same status.\n// [\n//   [\n//     // Both messages are from bot and is sent as a batch, we will group them as an array.\n//     'Bot: Hello!'\n//     'Bot: What can I help today?'\n//   ],\n//   [\n//     'User: What is the weather?'\n//   ],\n//   [\n//     'Bot: Let me look it up... hold on.'\n//   ],\n//   [\n//     // This message is in a different group because it is more than a few seconds apart from the previous message.\n//     'Bot: Here is the weather forecast.'\n//   ]\n// ]\n\n\nfunction useActivityTreeWithRenderer(entries) {\n  var groupActivities = useGroupActivities(); // We bin activities in 2 different ways:\n  // - `activitiesBySender` is a 2D array containing activities with same sender\n  // - `activitiesByStatus` is a 2D array containing activities with same status\n  // Both arrays should contains all activities.\n\n  var _useMemo = (0, _react.useMemo)(function () {\n    var visibleActivities = entries.map(function (_ref) {\n      var activity = _ref.activity;\n      return activity;\n    });\n\n    var _groupActivities = groupActivities({\n      activities: visibleActivities\n    }),\n        activitiesBySender = _groupActivities.sender,\n        activitiesByStatus = _groupActivities.status;\n\n    var _map = [activitiesBySender, activitiesByStatus].map(function (bins) {\n      return bins.map(function (bin) {\n        return bin.map(function (activity) {\n          return entries.find(function (entry) {\n            return entry.activity === activity;\n          });\n        });\n      });\n    }),\n        _map2 = _slicedToArray(_map, 2),\n        entriesBySender = _map2[0],\n        entriesByStatus = _map2[1];\n\n    if (!validateAllEntriesTagged(visibleActivities, activitiesBySender)) {\n      console.warn('botframework-webchat: Not every activities are grouped in the \"sender\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.');\n    }\n\n    if (!validateAllEntriesTagged(visibleActivities, activitiesByStatus)) {\n      console.warn('botframework-webchat: Not every activities are grouped in the \"status\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.');\n    }\n\n    return {\n      entriesBySender: entriesBySender,\n      entriesByStatus: entriesByStatus\n    };\n  }, [entries, groupActivities]),\n      entriesBySender = _useMemo.entriesBySender,\n      entriesByStatus = _useMemo.entriesByStatus; // Create a tree of activities with 2 dimensions: sender, followed by status.\n\n\n  var activityTree = (0, _react.useMemo)(function () {\n    var entriesPendingGrouping = _toConsumableArray(entries);\n\n    var activityTree = [];\n\n    var _loop = function _loop() {\n      var entriesWithSameSender = entriesBySender.find(function (bin) {\n        return bin.includes(entriesPendingGrouping[0]);\n      });\n      var senderTree = [];\n      entriesWithSameSender.forEach(function (entry) {\n        var entriesWithSameStatus = entriesByStatus.find(function (bin) {\n          return bin.includes(entry);\n        });\n        var entriesWithSameSenderAndStatus = (0, _intersectionOf.default)(entriesPendingGrouping, entriesWithSameSender, entriesWithSameStatus);\n\n        if (entriesWithSameSenderAndStatus.length) {\n          senderTree.push(Object.freeze(entriesWithSameSenderAndStatus));\n\n          _removeInline.default.apply(void 0, [entriesPendingGrouping].concat(_toConsumableArray(entriesWithSameSenderAndStatus)));\n        }\n      });\n      activityTree.push(Object.freeze(senderTree));\n    };\n\n    while (entriesPendingGrouping.length) {\n      _loop();\n    } // Assertion: All entries must be assigned to the activityTree.\n\n\n    if (!entries.every(function (activity) {\n      return activityTree.some(function (activitiesWithSameSender) {\n        return activitiesWithSameSender.some(function (activitiesWithSameSenderAndStatus) {\n          return activitiesWithSameSenderAndStatus.includes(activity);\n        });\n      });\n    })) {\n      console.warn('botframework-webchat internal: Not all visible activities are grouped in the activityTree.', {\n        entries: entries,\n        activityTree: activityTree\n      });\n    }\n\n    return Object.freeze(activityTree);\n  }, [entriesBySender, entriesByStatus, entries]);\n  return activityTree;\n}\n\nvar _default = useActivityTreeWithRenderer;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["useGroupActivities","hooks","validateAllEntriesTagged","entries","bins","every","some","bin","includes","entry","useActivityTreeWithRenderer","groupActivities","visibleActivities","map","activity","activities","activitiesBySender","sender","activitiesByStatus","status","find","entriesBySender","entriesByStatus","console","warn","activityTree","entriesPendingGrouping","entriesWithSameSender","senderTree","forEach","entriesWithSameStatus","entriesWithSameSenderAndStatus","length","push","Object","freeze","removeInline","_loop","activitiesWithSameSender","activitiesWithSameSenderAndStatus"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/providers/ActivityTree/private/useActivityTreeWithRenderer.ts"],"sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport { useMemo } from 'react';\n\nimport type { DirectLineActivity } from 'botframework-webchat-core';\n\nimport intersectionOf from '../../../Utils/intersectionOf';\nimport removeInline from '../../../Utils/removeInline';\n\nimport type { ActivityWithRenderer, ReadonlyActivityTree } from './types';\n\nconst { useGroupActivities } = hooks;\n\nfunction validateAllEntriesTagged(\n  entries: readonly ActivityWithRenderer[],\n  bins: readonly (readonly ActivityWithRenderer[])[]\n): boolean {\n  return entries.every(entry => bins.some(bin => bin.includes(entry)));\n}\n\n// Activity tree is a multidimensional array, while activities is a 1D array.\n// - The first dimension of the array contains activities with same sender;\n// - The second dimension of the array contains activities with same status.\n\n// [\n//   [\n//     // Both messages are from bot and is sent as a batch, we will group them as an array.\n//     'Bot: Hello!'\n//     'Bot: What can I help today?'\n//   ],\n//   [\n//     'User: What is the weather?'\n//   ],\n//   [\n//     'Bot: Let me look it up... hold on.'\n//   ],\n//   [\n//     // This message is in a different group because it is more than a few seconds apart from the previous message.\n//     'Bot: Here is the weather forecast.'\n//   ]\n// ]\n\nfunction useActivityTreeWithRenderer(entries: readonly ActivityWithRenderer[]): ReadonlyActivityTree {\n  const groupActivities = useGroupActivities();\n\n  // We bin activities in 2 different ways:\n  // - `activitiesBySender` is a 2D array containing activities with same sender\n  // - `activitiesByStatus` is a 2D array containing activities with same status\n  // Both arrays should contains all activities.\n\n  const { entriesBySender, entriesByStatus } = useMemo<{\n    entriesBySender: readonly (readonly DirectLineActivity[])[];\n    entriesByStatus: readonly (readonly DirectLineActivity[])[];\n  }>(() => {\n    const visibleActivities = entries.map(({ activity }) => activity);\n\n    const {\n      sender: activitiesBySender,\n      status: activitiesByStatus\n    }: {\n      sender: readonly (readonly DirectLineActivity[])[];\n      status: readonly (readonly DirectLineActivity[])[];\n    } = groupActivities({\n      activities: visibleActivities\n    });\n\n    const [entriesBySender, entriesByStatus] = [activitiesBySender, activitiesByStatus].map(bins =>\n      bins.map(bin => bin.map(activity => entries.find(entry => entry.activity === activity)))\n    );\n\n    if (!validateAllEntriesTagged(visibleActivities, activitiesBySender)) {\n      console.warn(\n        'botframework-webchat: Not every activities are grouped in the \"sender\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.'\n      );\n    }\n\n    if (!validateAllEntriesTagged(visibleActivities, activitiesByStatus)) {\n      console.warn(\n        'botframework-webchat: Not every activities are grouped in the \"status\" property. Please fix \"groupActivitiesMiddleware\" and group every activities.'\n      );\n    }\n\n    return {\n      entriesBySender,\n      entriesByStatus\n    };\n  }, [entries, groupActivities]);\n\n  // Create a tree of activities with 2 dimensions: sender, followed by status.\n\n  const activityTree: ReadonlyActivityTree = useMemo(() => {\n    const entriesPendingGrouping = [...entries];\n    const activityTree: (readonly (readonly ActivityWithRenderer[])[])[] = [];\n\n    while (entriesPendingGrouping.length) {\n      const entriesWithSameSender = entriesBySender.find(bin => bin.includes(entriesPendingGrouping[0]));\n      const senderTree: (readonly ActivityWithRenderer[])[] = [];\n\n      entriesWithSameSender.forEach(entry => {\n        const entriesWithSameStatus = entriesByStatus.find(bin => bin.includes(entry));\n\n        const entriesWithSameSenderAndStatus = intersectionOf<ActivityWithRenderer>(\n          entriesPendingGrouping,\n          entriesWithSameSender,\n          entriesWithSameStatus\n        );\n\n        if (entriesWithSameSenderAndStatus.length) {\n          senderTree.push(Object.freeze(entriesWithSameSenderAndStatus));\n          removeInline(entriesPendingGrouping, ...entriesWithSameSenderAndStatus);\n        }\n      });\n\n      activityTree.push(Object.freeze(senderTree));\n    }\n\n    // Assertion: All entries must be assigned to the activityTree.\n    if (\n      !entries.every(activity =>\n        activityTree.some(activitiesWithSameSender =>\n          activitiesWithSameSender.some(activitiesWithSameSenderAndStatus =>\n            activitiesWithSameSenderAndStatus.includes(activity)\n          )\n        )\n      )\n    ) {\n      console.warn('botframework-webchat internal: Not all visible activities are grouped in the activityTree.', {\n        entries,\n        activityTree\n      });\n    }\n\n    return Object.freeze(activityTree);\n  }, [entriesBySender, entriesByStatus, entries]);\n\n  return activityTree;\n}\n\nexport type { ActivityWithRenderer };\n\nexport default useActivityTreeWithRenderer;\n"]},"metadata":{},"sourceType":"script"}