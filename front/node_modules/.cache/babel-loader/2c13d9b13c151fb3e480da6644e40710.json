{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebsocketMessageAdapter = void 0;\n\nvar HeaderNames_1 = require(\"../common.speech/HeaderNames\");\n\nvar Exports_1 = require(\"../common/Exports\"); // Node.JS specific web socket / browser support.\n\n\nvar ws_1 = __importDefault(require(\"ws\"));\n\nvar CertChecks_1 = require(\"./CertChecks\");\n\nvar WebsocketMessageAdapter =\n/** @class */\nfunction () {\n  function WebsocketMessageAdapter(uri, connectionId, messageFormatter, proxyInfo, headers, enableCompression) {\n    var _this = this;\n\n    this.open = function () {\n      if (_this.privConnectionState === Exports_1.ConnectionState.Disconnected) {\n        return Promise.reject(\"Cannot open a connection that is in \" + _this.privConnectionState + \" state\");\n      }\n\n      if (_this.privConnectionEstablishDeferral) {\n        return _this.privConnectionEstablishDeferral.promise;\n      }\n\n      _this.privConnectionEstablishDeferral = new Exports_1.Deferred();\n      _this.privCertificateValidatedDeferral = new Exports_1.Deferred();\n      _this.privConnectionState = Exports_1.ConnectionState.Connecting;\n\n      try {\n        if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\n          // Browser handles cert checks.\n          _this.privCertificateValidatedDeferral.resolve();\n\n          _this.privWebsocketClient = new WebSocket(_this.privUri);\n        } else {\n          var options = {\n            headers: _this.privHeaders,\n            perMessageDeflate: _this.privEnableCompression\n          }; // The ocsp library will handle validation for us and fail the connection if needed.\n\n          _this.privCertificateValidatedDeferral.resolve();\n\n          var checkAgent = new CertChecks_1.CertCheckAgent(_this.proxyInfo);\n          options.agent = checkAgent.GetAgent();\n          _this.privWebsocketClient = new ws_1.default(_this.privUri, options);\n        }\n\n        _this.privWebsocketClient.binaryType = \"arraybuffer\";\n        _this.privReceivingMessageQueue = new Exports_1.Queue();\n        _this.privDisconnectDeferral = new Exports_1.Deferred();\n        _this.privSendMessageQueue = new Exports_1.Queue();\n\n        _this.processSendQueue().catch(function (reason) {\n          Exports_1.Events.instance.onEvent(new Exports_1.BackgroundEvent(reason));\n        });\n      } catch (error) {\n        _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(500, error));\n\n        return _this.privConnectionEstablishDeferral.promise;\n      }\n\n      _this.onEvent(new Exports_1.ConnectionStartEvent(_this.privConnectionId, _this.privUri));\n\n      _this.privWebsocketClient.onopen = function (e) {\n        _this.privCertificateValidatedDeferral.promise.then(function () {\n          _this.privConnectionState = Exports_1.ConnectionState.Connected;\n\n          _this.onEvent(new Exports_1.ConnectionEstablishedEvent(_this.privConnectionId));\n\n          _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(200, \"\"));\n        }, function (error) {\n          _this.privConnectionEstablishDeferral.reject(error);\n        });\n      };\n\n      _this.privWebsocketClient.onerror = function (e) {\n        _this.onEvent(new Exports_1.ConnectionErrorEvent(_this.privConnectionId, e.message, e.type));\n\n        _this.privLastErrorReceived = e.message;\n      };\n\n      _this.privWebsocketClient.onclose = function (e) {\n        if (_this.privConnectionState === Exports_1.ConnectionState.Connecting) {\n          _this.privConnectionState = Exports_1.ConnectionState.Disconnected; // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n\n          _this.privConnectionEstablishDeferral.resolve(new Exports_1.ConnectionOpenResponse(e.code, e.reason + \" \" + _this.privLastErrorReceived));\n        } else {\n          _this.privConnectionState = Exports_1.ConnectionState.Disconnected;\n          _this.privWebsocketClient = null;\n\n          _this.onEvent(new Exports_1.ConnectionClosedEvent(_this.privConnectionId, e.code, e.reason));\n        }\n\n        _this.onClose(e.code, e.reason).catch(function (reason) {\n          Exports_1.Events.instance.onEvent(new Exports_1.BackgroundEvent(reason));\n        });\n      };\n\n      _this.privWebsocketClient.onmessage = function (e) {\n        var networkReceivedTime = new Date().toISOString();\n\n        if (_this.privConnectionState === Exports_1.ConnectionState.Connected) {\n          var deferred_1 = new Exports_1.Deferred(); // let id = ++this.idCounter;\n\n          _this.privReceivingMessageQueue.enqueueFromPromise(deferred_1.promise);\n\n          if (e.data instanceof ArrayBuffer) {\n            var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Binary, e.data);\n\n            _this.privMessageFormatter.toConnectionMessage(rawMessage).then(function (connectionMessage) {\n              _this.onEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.privConnectionId, networkReceivedTime, connectionMessage));\n\n              deferred_1.resolve(connectionMessage);\n            }, function (error) {\n              // TODO: Events for these ?\n              deferred_1.reject(\"Invalid binary message format. Error: \" + error);\n            });\n          } else {\n            var rawMessage = new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, e.data);\n\n            _this.privMessageFormatter.toConnectionMessage(rawMessage).then(function (connectionMessage) {\n              _this.onEvent(new Exports_1.ConnectionMessageReceivedEvent(_this.privConnectionId, networkReceivedTime, connectionMessage));\n\n              deferred_1.resolve(connectionMessage);\n            }, function (error) {\n              // TODO: Events for these ?\n              deferred_1.reject(\"Invalid text message format. Error: \" + error);\n            });\n          }\n        }\n      };\n\n      return _this.privConnectionEstablishDeferral.promise;\n    };\n\n    this.send = function (message) {\n      if (_this.privConnectionState !== Exports_1.ConnectionState.Connected) {\n        return Promise.reject(\"Cannot send on connection that is in \" + Exports_1.ConnectionState[_this.privConnectionState] + \" state\");\n      }\n\n      var messageSendStatusDeferral = new Exports_1.Deferred();\n      var messageSendDeferral = new Exports_1.Deferred();\n\n      _this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\n\n      _this.privMessageFormatter.fromConnectionMessage(message).then(function (rawMessage) {\n        messageSendDeferral.resolve({\n          Message: message,\n          RawWebsocketMessage: rawMessage,\n          sendStatusDeferral: messageSendStatusDeferral\n        });\n      }, function (error) {\n        messageSendDeferral.reject(\"Error formatting the message. \" + error);\n      });\n\n      return messageSendStatusDeferral.promise;\n    };\n\n    this.read = function () {\n      if (_this.privConnectionState !== Exports_1.ConnectionState.Connected) {\n        return Promise.reject(\"Cannot read on connection that is in \" + _this.privConnectionState + \" state\");\n      }\n\n      return _this.privReceivingMessageQueue.dequeue();\n    };\n\n    this.close = function (reason) {\n      if (_this.privWebsocketClient) {\n        if (_this.privConnectionState !== Exports_1.ConnectionState.Disconnected) {\n          _this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n        }\n      } else {\n        return Promise.resolve();\n      }\n\n      return _this.privDisconnectDeferral.promise;\n    };\n\n    this.sendRawMessage = function (sendItem) {\n      try {\n        // indicates we are draining the queue and it came with no message;\n        if (!sendItem) {\n          return Promise.resolve();\n        }\n\n        _this.onEvent(new Exports_1.ConnectionMessageSentEvent(_this.privConnectionId, new Date().toISOString(), sendItem.Message)); // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\n\n\n        if (_this.isWebsocketOpen) {\n          _this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\n        } else {\n          return Promise.reject(\"websocket send error: Websocket not ready \" + _this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\n        }\n\n        return Promise.resolve();\n      } catch (e) {\n        return Promise.reject(\"websocket send error: \" + e);\n      }\n    };\n\n    this.onEvent = function (event) {\n      _this.privConnectionEvents.onEvent(event);\n\n      Exports_1.Events.instance.onEvent(event);\n    };\n\n    if (!uri) {\n      throw new Exports_1.ArgumentNullError(\"uri\");\n    }\n\n    if (!messageFormatter) {\n      throw new Exports_1.ArgumentNullError(\"messageFormatter\");\n    }\n\n    this.proxyInfo = proxyInfo;\n    this.privConnectionEvents = new Exports_1.EventSource();\n    this.privConnectionId = connectionId;\n    this.privMessageFormatter = messageFormatter;\n    this.privConnectionState = Exports_1.ConnectionState.None;\n    this.privUri = uri;\n    this.privHeaders = headers;\n    this.privEnableCompression = enableCompression; // Add the connection ID to the headers\n\n    this.privHeaders[HeaderNames_1.HeaderNames.ConnectionId] = this.privConnectionId;\n    this.privLastErrorReceived = \"\";\n  }\n\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"state\", {\n    get: function () {\n      return this.privConnectionState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"events\", {\n    get: function () {\n      return this.privConnectionEvents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebsocketMessageAdapter.prototype.onClose = function (code, reason) {\n    return __awaiter(this, void 0, void 0, function () {\n      var closeReason;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            closeReason = \"Connection closed. \" + code + \": \" + reason;\n            this.privConnectionState = Exports_1.ConnectionState.Disconnected;\n            this.privDisconnectDeferral.resolve();\n            return [4\n            /*yield*/\n            , this.privReceivingMessageQueue.drainAndDispose(function (pendingReceiveItem) {// TODO: Events for these ?\n              // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n            }, closeReason)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.privSendMessageQueue.drainAndDispose(function (pendingSendItem) {\n              pendingSendItem.sendStatusDeferral.reject(closeReason);\n            }, closeReason)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  WebsocketMessageAdapter.prototype.processSendQueue = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var itemToSend, sendItem, sendError_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!true) return [3\n            /*break*/\n            , 6];\n            itemToSend = this.privSendMessageQueue.dequeue();\n            return [4\n            /*yield*/\n            , itemToSend];\n\n          case 1:\n            sendItem = _a.sent(); // indicates we are draining the queue and it came with no message;\n\n            if (!sendItem) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.sendRawMessage(sendItem)];\n\n          case 3:\n            _a.sent();\n\n            sendItem.sendStatusDeferral.resolve();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            sendError_1 = _a.sent();\n            sendItem.sendStatusDeferral.reject(sendError_1);\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [3\n            /*break*/\n            , 0];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(WebsocketMessageAdapter.prototype, \"isWebsocketOpen\", {\n    get: function () {\n      return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  WebsocketMessageAdapter.forceNpmWebSocket = false;\n  return WebsocketMessageAdapter;\n}();\n\nexports.WebsocketMessageAdapter = WebsocketMessageAdapter;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA,6C,CAuBA;;;AACA;;AACA;;AAQA;AAAA;AAAA;AAoBI,mCACIA,GADJ,EAEIC,YAFJ,EAGIC,gBAHJ,EAIIC,SAJJ,EAKIC,OALJ,EAMIC,iBANJ,EAM8B;AAN9B;;AAmCO,gBAAO;AACV,UAAIC,KAAI,CAACC,mBAAL,KAA6BC,0BAAgBC,YAAjD,EAA+D;AAC3D,eAAOC,OAAO,CAACC,MAAR,CAAuC,yCAAuCL,KAAI,CAACC,mBAA5C,GAA+D,QAAtG,CAAP;AACH;;AAED,UAAID,KAAI,CAACM,+BAAT,EAA0C;AACtC,eAAON,KAAI,CAACM,+BAAL,CAAqCC,OAA5C;AACH;;AAEDP,WAAI,CAACM,+BAAL,GAAuC,IAAIJ,kBAAJ,EAAvC;AACAF,WAAI,CAACQ,gCAAL,GAAwC,IAAIN,kBAAJ,EAAxC;AAEAF,WAAI,CAACC,mBAAL,GAA2BC,0BAAgBO,UAA3C;;AAEA,UAAI;AAEA,YAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoC,CAACC,uBAAuB,CAACC,iBAAjE,EAAoF;AAChF;AACAZ,eAAI,CAACQ,gCAAL,CAAsCK,OAAtC;;AAEAb,eAAI,CAACc,mBAAL,GAA2B,IAAIJ,SAAJ,CAAcV,KAAI,CAACe,OAAnB,CAA3B;AACH,SALD,MAKO;AACH,cAAMC,OAAO,GAAqB;AAAElB,mBAAO,EAAEE,KAAI,CAACiB,WAAhB;AAA6BC,6BAAiB,EAAElB,KAAI,CAACmB;AAArD,WAAlC,CADG,CAEH;;AACAnB,eAAI,CAACQ,gCAAL,CAAsCK,OAAtC;;AACA,cAAMO,UAAU,GAAmB,IAAIC,2BAAJ,CAAmBrB,KAAI,CAACH,SAAxB,CAAnC;AAEAmB,iBAAO,CAACM,KAAR,GAAgBF,UAAU,CAACG,QAAX,EAAhB;AACAvB,eAAI,CAACc,mBAAL,GAA2B,IAAIU,YAAJ,CAAOxB,KAAI,CAACe,OAAZ,EAAqBC,OAArB,CAA3B;AACH;;AAEDhB,aAAI,CAACc,mBAAL,CAAyBW,UAAzB,GAAsC,aAAtC;AACAzB,aAAI,CAAC0B,yBAAL,GAAiC,IAAIxB,eAAJ,EAAjC;AACAF,aAAI,CAAC2B,sBAAL,GAA8B,IAAIzB,kBAAJ,EAA9B;AACAF,aAAI,CAAC4B,oBAAL,GAA4B,IAAI1B,eAAJ,EAA5B;;AACAF,aAAI,CAAC6B,gBAAL,GAAwBC,KAAxB,CAA8B,UAACC,MAAD,EAAe;AACzC7B,2BAAO8B,QAAP,CAAgBC,OAAhB,CAAwB,IAAI/B,yBAAJ,CAAoB6B,MAApB,CAAxB;AACH,SAFD;AAGH,OAxBD,CAwBE,OAAOG,KAAP,EAAc;AACZlC,aAAI,CAACM,+BAAL,CAAqCO,OAArC,CAA6C,IAAIX,gCAAJ,CAA2B,GAA3B,EAAgCgC,KAAhC,CAA7C;;AACA,eAAOlC,KAAI,CAACM,+BAAL,CAAqCC,OAA5C;AACH;;AAEDP,WAAI,CAACiC,OAAL,CAAa,IAAI/B,8BAAJ,CAAyBF,KAAI,CAACmC,gBAA9B,EAAgDnC,KAAI,CAACe,OAArD,CAAb;;AAEAf,WAAI,CAACc,mBAAL,CAAyBsB,MAAzB,GAAkC,UAACC,CAAD,EAA8B;AAC5DrC,aAAI,CAACQ,gCAAL,CAAsCD,OAAtC,CAA8C+B,IAA9C,CAAmD;AAC/CtC,eAAI,CAACC,mBAAL,GAA2BC,0BAAgBqC,SAA3C;;AACAvC,eAAI,CAACiC,OAAL,CAAa,IAAI/B,oCAAJ,CAA+BF,KAAI,CAACmC,gBAApC,CAAb;;AACAnC,eAAI,CAACM,+BAAL,CAAqCO,OAArC,CAA6C,IAAIX,gCAAJ,CAA2B,GAA3B,EAAgC,EAAhC,CAA7C;AACH,SAJD,EAIG,UAACgC,KAAD,EAAc;AACblC,eAAI,CAACM,+BAAL,CAAqCD,MAArC,CAA4C6B,KAA5C;AACH,SAND;AAOH,OARD;;AAUAlC,WAAI,CAACc,mBAAL,CAAyB0B,OAAzB,GAAmC,UAACH,CAAD,EAAyE;AACxGrC,aAAI,CAACiC,OAAL,CAAa,IAAI/B,8BAAJ,CAAyBF,KAAI,CAACmC,gBAA9B,EAAgDE,CAAC,CAACI,OAAlD,EAA2DJ,CAAC,CAACK,IAA7D,CAAb;;AACA1C,aAAI,CAAC2C,qBAAL,GAA6BN,CAAC,CAACI,OAA/B;AACH,OAHD;;AAKAzC,WAAI,CAACc,mBAAL,CAAyB8B,OAAzB,GAAmC,UAACP,CAAD,EAA+E;AAC9G,YAAIrC,KAAI,CAACC,mBAAL,KAA6BC,0BAAgBO,UAAjD,EAA6D;AACzDT,eAAI,CAACC,mBAAL,GAA2BC,0BAAgBC,YAA3C,CADyD,CAEzD;;AACAH,eAAI,CAACM,+BAAL,CAAqCO,OAArC,CAA6C,IAAIX,gCAAJ,CAA2BmC,CAAC,CAACQ,IAA7B,EAAmCR,CAAC,CAACN,MAAF,GAAW,GAAX,GAAiB/B,KAAI,CAAC2C,qBAAzD,CAA7C;AACH,SAJD,MAIO;AACH3C,eAAI,CAACC,mBAAL,GAA2BC,0BAAgBC,YAA3C;AACAH,eAAI,CAACc,mBAAL,GAA2B,IAA3B;;AACAd,eAAI,CAACiC,OAAL,CAAa,IAAI/B,+BAAJ,CAA0BF,KAAI,CAACmC,gBAA/B,EAAiDE,CAAC,CAACQ,IAAnD,EAAyDR,CAAC,CAACN,MAA3D,CAAb;AACH;;AAED/B,aAAI,CAAC8C,OAAL,CAAaT,CAAC,CAACQ,IAAf,EAAqBR,CAAC,CAACN,MAAvB,EAA+BD,KAA/B,CAAqC,UAACC,MAAD,EAAe;AAChD7B,2BAAO8B,QAAP,CAAgBC,OAAhB,CAAwB,IAAI/B,yBAAJ,CAAoB6B,MAApB,CAAxB;AACH,SAFD;AAGH,OAdD;;AAgBA/B,WAAI,CAACc,mBAAL,CAAyBiC,SAAzB,GAAqC,UAACV,CAAD,EAA2D;AAC5F,YAAMW,mBAAmB,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAA5B;;AACA,YAAIlD,KAAI,CAACC,mBAAL,KAA6BC,0BAAgBqC,SAAjD,EAA4D;AACxD,cAAMY,UAAQ,GAAG,IAAIjD,kBAAJ,EAAjB,CADwD,CAExD;;AACAF,eAAI,CAAC0B,yBAAL,CAA+B0B,kBAA/B,CAAkDD,UAAQ,CAAC5C,OAA3D;;AACA,cAAI8B,CAAC,CAACgB,IAAF,YAAkBC,WAAtB,EAAmC;AAC/B,gBAAMC,UAAU,GAAG,IAAIrD,6BAAJ,CAAwBA,sBAAYsD,MAApC,EAA4CnB,CAAC,CAACgB,IAA9C,CAAnB;;AACArD,iBAAI,CAACyD,oBAAL,CACKC,mBADL,CACyBH,UADzB,EAEKjB,IAFL,CAEU,UAACqB,iBAAD,EAAqC;AACvC3D,mBAAI,CAACiC,OAAL,CAAa,IAAI/B,wCAAJ,CAAmCF,KAAI,CAACmC,gBAAxC,EAA0Da,mBAA1D,EAA+EW,iBAA/E,CAAb;;AACAR,wBAAQ,CAACtC,OAAT,CAAiB8C,iBAAjB;AACH,aALL,EAKO,UAACzB,KAAD,EAAc;AACb;AACAiB,wBAAQ,CAAC9C,MAAT,CAAgB,2CAAyC6B,KAAzD;AACH,aARL;AASH,WAXD,MAWO;AACH,gBAAMqB,UAAU,GAAG,IAAIrD,6BAAJ,CAAwBA,sBAAY0D,IAApC,EAA0CvB,CAAC,CAACgB,IAA5C,CAAnB;;AACArD,iBAAI,CAACyD,oBAAL,CACKC,mBADL,CACyBH,UADzB,EAEKjB,IAFL,CAEU,UAACqB,iBAAD,EAAqC;AACvC3D,mBAAI,CAACiC,OAAL,CAAa,IAAI/B,wCAAJ,CAAmCF,KAAI,CAACmC,gBAAxC,EAA0Da,mBAA1D,EAA+EW,iBAA/E,CAAb;;AACAR,wBAAQ,CAACtC,OAAT,CAAiB8C,iBAAjB;AACH,aALL,EAKO,UAACzB,KAAD,EAAc;AACb;AACAiB,wBAAQ,CAAC9C,MAAT,CAAgB,yCAAuC6B,KAAvD;AACH,aARL;AASH;AACJ;AACJ,OA9BD;;AAgCA,aAAOlC,KAAI,CAACM,+BAAL,CAAqCC,OAA5C;AACH,KA7GM;;AA+GA,gBAAO,UAACkC,OAAD,EAA2B;AACrC,UAAIzC,KAAI,CAACC,mBAAL,KAA6BC,0BAAgBqC,SAAjD,EAA4D;AACxD,eAAOnC,OAAO,CAACC,MAAR,CAAe,0CAAwCH,0BAAgBF,KAAI,CAACC,mBAArB,CAAxC,GAAiF,QAAhG,CAAP;AACH;;AAED,UAAM4D,yBAAyB,GAAG,IAAI3D,kBAAJ,EAAlC;AACA,UAAM4D,mBAAmB,GAAG,IAAI5D,kBAAJ,EAA5B;;AAEAF,WAAI,CAAC4B,oBAAL,CAA0BwB,kBAA1B,CAA6CU,mBAAmB,CAACvD,OAAjE;;AAEAP,WAAI,CAACyD,oBAAL,CACKM,qBADL,CAC2BtB,OAD3B,EAEKH,IAFL,CAEU,UAACiB,UAAD,EAAgC;AAClCO,2BAAmB,CAACjD,OAApB,CAA4B;AACxBmD,iBAAO,EAAEvB,OADe;AAExBwB,6BAAmB,EAAEV,UAFG;AAGxBW,4BAAkB,EAAEL;AAHI,SAA5B;AAKH,OARL,EAQO,UAAC3B,KAAD,EAAc;AACb4B,2BAAmB,CAACzD,MAApB,CAA2B,mCAAiC6B,KAA5D;AACH,OAVL;;AAYA,aAAO2B,yBAAyB,CAACtD,OAAjC;AACH,KAvBM;;AAyBA,gBAAO;AACV,UAAIP,KAAI,CAACC,mBAAL,KAA6BC,0BAAgBqC,SAAjD,EAA4D;AACxD,eAAOnC,OAAO,CAACC,MAAR,CAAkC,0CAAwCL,KAAI,CAACC,mBAA7C,GAAgE,QAAlG,CAAP;AACH;;AAED,aAAOD,KAAI,CAAC0B,yBAAL,CAA+ByC,OAA/B,EAAP;AACH,KANM;;AAQA,iBAAQ,UAACpC,MAAD,EAAgB;AAC3B,UAAI/B,KAAI,CAACc,mBAAT,EAA8B;AAC1B,YAAId,KAAI,CAACC,mBAAL,KAA6BC,0BAAgBC,YAAjD,EAA+D;AAC3DH,eAAI,CAACc,mBAAL,CAAyBsD,KAAzB,CAA+B,IAA/B,EAAqCrC,MAAM,GAAGA,MAAH,GAAY,0BAAvD;AACH;AACJ,OAJD,MAIO;AACH,eAAO3B,OAAO,CAACS,OAAR,EAAP;AACH;;AAED,aAAOb,KAAI,CAAC2B,sBAAL,CAA4BpB,OAAnC;AACH,KAVM;;AAgBC,0BAAiB,UAAC8D,QAAD,EAAoB;AACzC,UAAI;AACA;AACA,YAAI,CAACA,QAAL,EAAe;AACX,iBAAOjE,OAAO,CAACS,OAAR,EAAP;AACH;;AAEDb,aAAI,CAACiC,OAAL,CAAa,IAAI/B,oCAAJ,CAA+BF,KAAI,CAACmC,gBAApC,EAAsD,IAAIc,IAAJ,GAAWC,WAAX,EAAtD,EAAgFmB,QAAQ,CAACL,OAAzF,CAAb,EANA,CAQA;;;AACA,YAAIhE,KAAI,CAACsE,eAAT,EAA0B;AACtBtE,eAAI,CAACc,mBAAL,CAAyByD,IAAzB,CAA8BF,QAAQ,CAACJ,mBAAT,CAA6BO,OAA3D;AACH,SAFD,MAEO;AACH,iBAAOpE,OAAO,CAACC,MAAR,CAAe,+CAA+CL,KAAI,CAACmC,gBAApD,GAAuE,GAAvE,GAA6EkC,QAAQ,CAACL,OAAT,CAAiBS,EAA9F,GAAmG,GAAnG,GAAyG,IAAIC,KAAJ,GAAYC,KAApI,CAAP;AACH;;AACD,eAAOvE,OAAO,CAACS,OAAR,EAAP;AAEH,OAhBD,CAgBE,OAAOwB,CAAP,EAAU;AACR,eAAOjC,OAAO,CAACC,MAAR,CAAe,2BAAyBgC,CAAxC,CAAP;AACH;AACJ,KApBO;;AAsDA,mBAAU,UAACuC,KAAD,EAAuB;AACrC5E,WAAI,CAAC6E,oBAAL,CAA0B5C,OAA1B,CAAkC2C,KAAlC;;AACA1E,uBAAO8B,QAAP,CAAgBC,OAAhB,CAAwB2C,KAAxB;AACH,KAHO;;AAjPJ,QAAI,CAAClF,GAAL,EAAU;AACN,YAAM,IAAIQ,2BAAJ,CAAsB,KAAtB,CAAN;AACH;;AAED,QAAI,CAACN,gBAAL,EAAuB;AACnB,YAAM,IAAIM,2BAAJ,CAAsB,kBAAtB,CAAN;AACH;;AAED,SAAKL,SAAL,GAAiBA,SAAjB;AACA,SAAKgF,oBAAL,GAA4B,IAAI3E,qBAAJ,EAA5B;AACA,SAAKiC,gBAAL,GAAwBxC,YAAxB;AACA,SAAK8D,oBAAL,GAA4B7D,gBAA5B;AACA,SAAKK,mBAAL,GAA2BC,0BAAgB4E,IAA3C;AACA,SAAK/D,OAAL,GAAerB,GAAf;AACA,SAAKuB,WAAL,GAAmBnB,OAAnB;AACA,SAAKqB,qBAAL,GAA6BpB,iBAA7B,CAjB0B,CAmB1B;;AACA,SAAKkB,WAAL,CAAiB8D,0BAAYC,YAA7B,IAA6C,KAAK7C,gBAAlD;AAEA,SAAKQ,qBAAL,GAA6B,EAA7B;AACH;;AAEDsC,wBAAWtE,iCAAX,EAAW,OAAX,EAAgB;SAAhB;AACI,aAAO,KAAKV,mBAAZ;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAgKAgF,wBAAWtE,iCAAX,EAAW,QAAX,EAAiB;SAAjB;AACI,aAAO,KAAKkE,oBAAZ;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AA0BclE,8CAAd,UAAsBkC,IAAtB,EAAoCd,MAApC,EAAkD;;;;;;AACxCmD,uBAAW,GAAG,wBAAsBrC,IAAtB,GAA0B,IAA1B,GAA+Bd,MAA7C;AACN,iBAAK9B,mBAAL,GAA2BC,0BAAgBC,YAA3C;AACA,iBAAKwB,sBAAL,CAA4Bd,OAA5B;AACA;AAAA;AAAA,cAAM,KAAKa,yBAAL,CAA+ByD,eAA/B,CAA+C,UAACC,kBAAD,EAAsC,CACvF;AACA;AACH,aAHK,EAGHF,WAHG,CAAN;;;AAAAG;;AAKA;AAAA;AAAA,cAAM,KAAKzD,oBAAL,CAA0BuD,eAA1B,CAA0C,UAACG,eAAD,EAA2B;AACvEA,6BAAe,CAACpB,kBAAhB,CAAmC7D,MAAnC,CAA0C6E,WAA1C;AACH,aAFK,EAEHA,WAFG,CAAN;;;AAAAG;;;;;;;;AAGH,GAZa;;AAcA1E,uDAAd;;;;;;iBACW,MAAI;AAAA;AAAA;AACD4E,sBAAU,GAAuB,KAAK3D,oBAAL,CAA0BuC,OAA1B,EAAjC;AACsB;AAAA;AAAA,cAAMoB,UAAN;;;AAAtBlB,oBAAQ,GAAcgB,SAAtB,EACN;;AACA,gBAAI,CAAChB,QAAL,EAAe;AACX;AAAA;AAAA;AACH;;;;;;;AAGG;AAAA;AAAA,cAAM,KAAKmB,cAAL,CAAoBnB,QAApB,CAAN;;;AAAAgB;;AACAhB,oBAAQ,CAACH,kBAAT,CAA4BrD,OAA5B;;;;;;;AAEAwD,oBAAQ,CAACH,kBAAT,CAA4B7D,MAA5B,CAAmCoF,WAAnC;;;;;;;;;;;;;;;;;AAGX,GAhBa;;AAuBdR,wBAAYtE,iCAAZ,EAAY,iBAAZ,EAA2B;SAA3B;AACI,aAAO,KAAKG,mBAAL,IAA4B,KAAKA,mBAAL,CAAyB4E,UAAzB,KAAwC,KAAK5E,mBAAL,CAAyB6E,IAApG;AACH,KAF0B;qBAAA;;AAAA,GAA3B;AAhQchF,8CAA6B,KAA7B;AAoQlB;AAAC,CAtRD;;AAAaiF","names":["uri","connectionId","messageFormatter","proxyInfo","headers","enableCompression","_this","privConnectionState","Exports_1","Disconnected","Promise","reject","privConnectionEstablishDeferral","promise","privCertificateValidatedDeferral","Connecting","WebSocket","WebsocketMessageAdapter","forceNpmWebSocket","resolve","privWebsocketClient","privUri","options","privHeaders","perMessageDeflate","privEnableCompression","checkAgent","CertChecks_1","agent","GetAgent","ws_1","binaryType","privReceivingMessageQueue","privDisconnectDeferral","privSendMessageQueue","processSendQueue","catch","reason","instance","onEvent","error","privConnectionId","onopen","e","then","Connected","onerror","message","type","privLastErrorReceived","onclose","code","onClose","onmessage","networkReceivedTime","Date","toISOString","deferred_1","enqueueFromPromise","data","ArrayBuffer","rawMessage","Binary","privMessageFormatter","toConnectionMessage","connectionMessage","Text","messageSendStatusDeferral","messageSendDeferral","fromConnectionMessage","Message","RawWebsocketMessage","sendStatusDeferral","dequeue","close","sendItem","isWebsocketOpen","send","payload","id","Error","stack","event","privConnectionEvents","None","HeaderNames_1","ConnectionId","Object","closeReason","drainAndDispose","pendingReceiveItem","_a","pendingSendItem","itemToSend","sendRawMessage","sendError_1","readyState","OPEN","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport ws from \"ws\";\r\nimport { CertCheckAgent } from \"./CertChecks\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string; };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string; },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n                const checkAgent: CertCheckAgent = new CertCheckAgent(this.proxyInfo);\r\n\r\n                options.agent = checkAgent.GetAgent();\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<void> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<void> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}