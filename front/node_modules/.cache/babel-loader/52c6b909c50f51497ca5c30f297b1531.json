{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AudioOutputConfigImpl = exports.AudioConfigImpl = exports.AudioConfig = void 0;\n\nvar Exports_1 = require(\"../../common.browser/Exports\");\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar Exports_2 = require(\"../Exports\");\n\nvar AudioFileWriter_1 = require(\"./AudioFileWriter\");\n\nvar AudioInputStream_1 = require(\"./AudioInputStream\");\n\nvar AudioOutputStream_1 = require(\"./AudioOutputStream\");\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\n\n\nvar AudioConfig =\n/** @class */\nfunction () {\n  function AudioConfig() {}\n  /**\n   * Creates an AudioConfig object representing the default microphone on the system.\n   * @member AudioConfig.fromDefaultMicrophoneInput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromDefaultMicrophoneInput = function () {\n    var pcmRecorder = new Exports_1.PcmRecorder();\n    return new AudioConfigImpl(new Exports_1.MicAudioSource(pcmRecorder));\n  };\n  /**\n   * Creates an AudioConfig object representing a microphone with the specified device ID.\n   * @member AudioConfig.fromMicrophoneInput\n   * @function\n   * @public\n   * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n   *        Default microphone is used the value is omitted.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromMicrophoneInput = function (deviceId) {\n    var pcmRecorder = new Exports_1.PcmRecorder();\n    return new AudioConfigImpl(new Exports_1.MicAudioSource(pcmRecorder, deviceId));\n  };\n  /**\n   * Creates an AudioConfig object representing the specified file.\n   * @member AudioConfig.fromWavFileInput\n   * @function\n   * @public\n   * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromWavFileInput = function (file, name) {\n    if (name === void 0) {\n      name = \"unnamedBuffer.wav\";\n    }\n\n    return new AudioConfigImpl(new Exports_1.FileAudioSource(file, name));\n  };\n  /**\n   * Creates an AudioConfig object representing the specified stream.\n   * @member AudioConfig.fromStreamInput\n   * @function\n   * @public\n   * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\n   *        stream. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n\n\n  AudioConfig.fromStreamInput = function (audioStream) {\n    if (audioStream instanceof Exports_2.PullAudioInputStreamCallback) {\n      return new AudioConfigImpl(new AudioInputStream_1.PullAudioInputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof Exports_2.AudioInputStream) {\n      return new AudioConfigImpl(audioStream);\n    }\n\n    if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\n      var pcmRecorder = new Exports_1.PcmRecorder();\n      return new AudioConfigImpl(new Exports_1.MicAudioSource(pcmRecorder, null, null, audioStream));\n    }\n\n    throw new Error(\"Not Supported Type\");\n  };\n  /**\n   * Creates an AudioConfig object representing the default speaker.\n   * @member AudioConfig.fromDefaultSpeakerOutput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  AudioConfig.fromDefaultSpeakerOutput = function () {\n    return new AudioOutputConfigImpl(new Exports_2.SpeakerAudioDestination());\n  };\n  /**\n   * Creates an AudioConfig object representing the custom IPlayer object.\n   * You can use the IPlayer object to control pause, resume, etc.\n   * @member AudioConfig.fromSpeakerOutput\n   * @function\n   * @public\n   * @param {IPlayer} player - the IPlayer object for playback.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.12.0\n   */\n\n\n  AudioConfig.fromSpeakerOutput = function (player) {\n    if (player === undefined) {\n      return AudioConfig.fromDefaultSpeakerOutput();\n    }\n\n    if (player instanceof Exports_2.SpeakerAudioDestination) {\n      return new AudioOutputConfigImpl(player);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  };\n  /**\n   * Creates an AudioConfig object representing a specified output audio file\n   * @member AudioConfig.fromAudioFileOutput\n   * @function\n   * @public\n   * @param {PathLike} filename - the filename of the output audio file\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  AudioConfig.fromAudioFileOutput = function (filename) {\n    return new AudioOutputConfigImpl(new AudioFileWriter_1.AudioFileWriter(filename));\n  };\n  /**\n   * Creates an AudioConfig object representing a specified audio output stream\n   * @member AudioConfig.fromStreamOutput\n   * @function\n   * @public\n   * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n   *        stream.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n\n\n  AudioConfig.fromStreamOutput = function (audioStream) {\n    if (audioStream instanceof Exports_2.PushAudioOutputStreamCallback) {\n      return new AudioOutputConfigImpl(new AudioOutputStream_1.PushAudioOutputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof Exports_2.PushAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    if (audioStream instanceof Exports_2.PullAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  };\n\n  return AudioConfig;\n}();\n\nexports.AudioConfig = AudioConfig;\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\n\nvar AudioConfigImpl =\n/** @class */\nfunction (_super) {\n  __extends(AudioConfigImpl, _super);\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioSource} source - An audio source.\n   */\n\n\n  function AudioConfigImpl(source) {\n    var _this = _super.call(this) || this;\n\n    _this.privSource = source;\n    return _this;\n  }\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"format\", {\n    /**\n     * Format information for the audio\n     */\n    get: function () {\n      return this.privSource.format;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @member AudioConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n\n  AudioConfigImpl.prototype.close = function (cb, err) {\n    this.privSource.turnOff().then(function () {\n      if (!!cb) {\n        cb();\n      }\n    }, function (error) {\n      if (!!err) {\n        err(error);\n      }\n    });\n  };\n  /**\n   * @member AudioConfigImpl.prototype.id\n   * @function\n   * @public\n   */\n\n\n  AudioConfigImpl.prototype.id = function () {\n    return this.privSource.id();\n  };\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"blob\", {\n    /**\n     * @member AudioConfigImpl.prototype.blob\n     * @function\n     * @public\n     */\n    get: function () {\n      return this.privSource.blob;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @member AudioConfigImpl.prototype.turnOn\n   * @function\n   * @public\n   * @returns {Promise<void>} A promise.\n   */\n\n  AudioConfigImpl.prototype.turnOn = function () {\n    return this.privSource.turnOn();\n  };\n  /**\n   * @member AudioConfigImpl.prototype.attach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   * @returns {Promise<IAudioStreamNode>} A promise.\n   */\n\n\n  AudioConfigImpl.prototype.attach = function (audioNodeId) {\n    return this.privSource.attach(audioNodeId);\n  };\n  /**\n   * @member AudioConfigImpl.prototype.detach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   */\n\n\n  AudioConfigImpl.prototype.detach = function (audioNodeId) {\n    return this.privSource.detach(audioNodeId);\n  };\n  /**\n   * @member AudioConfigImpl.prototype.turnOff\n   * @function\n   * @public\n   * @returns {Promise<void>} A promise.\n   */\n\n\n  AudioConfigImpl.prototype.turnOff = function () {\n    return this.privSource.turnOff();\n  };\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"events\", {\n    /**\n     * @member AudioConfigImpl.prototype.events\n     * @function\n     * @public\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n     */\n    get: function () {\n      return this.privSource.events;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AudioConfigImpl.prototype.setProperty = function (name, value) {\n    Contracts_1.Contracts.throwIfNull(value, \"value\");\n\n    if (undefined !== this.privSource.setProperty) {\n      this.privSource.setProperty(name, value);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n  };\n\n  AudioConfigImpl.prototype.getProperty = function (name, def) {\n    if (undefined !== this.privSource.getProperty) {\n      return this.privSource.getProperty(name, def);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n\n    return def;\n  };\n\n  Object.defineProperty(AudioConfigImpl.prototype, \"deviceInfo\", {\n    get: function () {\n      return this.privSource.deviceInfo;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AudioConfigImpl;\n}(AudioConfig);\n\nexports.AudioConfigImpl = AudioConfigImpl;\n\nvar AudioOutputConfigImpl =\n/** @class */\nfunction (_super) {\n  __extends(AudioOutputConfigImpl, _super);\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioDestination} destination - An audio destination.\n   */\n\n\n  function AudioOutputConfigImpl(destination) {\n    var _this = _super.call(this) || this;\n\n    _this.privDestination = destination;\n    return _this;\n  }\n\n  Object.defineProperty(AudioOutputConfigImpl.prototype, \"format\", {\n    set: function (format) {\n      this.privDestination.format = format;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AudioOutputConfigImpl.prototype.write = function (buffer) {\n    this.privDestination.write(buffer);\n  };\n\n  AudioOutputConfigImpl.prototype.close = function () {\n    this.privDestination.close();\n  };\n\n  AudioOutputConfigImpl.prototype.id = function () {\n    return this.privDestination.id();\n  };\n\n  AudioOutputConfigImpl.prototype.setProperty = function (name, value) {\n    throw new Error(\"This AudioConfig instance does not support setting properties.\");\n  };\n\n  AudioOutputConfigImpl.prototype.getProperty = function (name, def) {\n    throw new Error(\"This AudioConfig instance does not support getting properties.\");\n  };\n\n  return AudioOutputConfigImpl;\n}(AudioConfig);\n\nexports.AudioOutputConfigImpl = AudioOutputConfigImpl;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAcA;;AACA;;AAaA;;AACA;;AACA;AAGA;;;;;;;AAKA;AAAA;AAAA;AAAA,0BAsKC;AArKG;;;;;;;;;AAOcA,2CAAd;AACI,QAAMC,WAAW,GAAG,IAAIC,qBAAJ,EAApB;AACA,WAAO,IAAIC,eAAJ,CAAoB,IAAID,wBAAJ,CAAmBD,WAAnB,CAApB,CAAP;AACH,GAHa;AAKd;;;;;;;;;;;AAScD,oCAAd,UAAkCI,QAAlC,EAAmD;AAC/C,QAAMH,WAAW,GAAG,IAAIC,qBAAJ,EAApB;AACA,WAAO,IAAIC,eAAJ,CAAoB,IAAID,wBAAJ,CAAmBD,WAAnB,EAAgCG,QAAhC,CAApB,CAAP;AACH,GAHa;AAKd;;;;;;;;;;AAQcJ,iCAAd,UAA+BK,IAA/B,EAAoDC,IAApD,EAAsF;AAAlC;AAAAA;AAAkC;;AAClF,WAAO,IAAIH,eAAJ,CAAoB,IAAID,yBAAJ,CAAoBG,IAApB,EAA0BC,IAA1B,CAApB,CAAP;AACH,GAFa;AAId;;;;;;;;;;;AAScN,gCAAd,UAA8BO,WAA9B,EACiB;AACb,QAAIA,WAAW,YAAYC,sCAA3B,EAAyD;AACrD,aAAO,IAAIL,eAAJ,CAAoB,IAAIM,2CAAJ,CAA6BF,WAA7B,CAApB,CAAP;AACH;;AAED,QAAIA,WAAW,YAAYC,0BAA3B,EAA6C;AACzC,aAAO,IAAIL,eAAJ,CAAoBI,WAApB,CAAP;AACH;;AACD,QAAI,OAAOG,WAAP,KAAuB,WAAvB,IAAsCH,WAAW,YAAYG,WAAjE,EAA8E;AAC1E,UAAMT,WAAW,GAAG,IAAIC,qBAAJ,EAApB;AACA,aAAO,IAAIC,eAAJ,CAAoB,IAAID,wBAAJ,CAAmBD,WAAnB,EAAgC,IAAhC,EAAsC,IAAtC,EAA4CM,WAA5C,CAApB,CAAP;AACH;;AAED,UAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;AACH,GAfa;AAiBd;;;;;;;;;;AAQcX,yCAAd;AACI,WAAO,IAAIY,qBAAJ,CAA0B,IAAIJ,iCAAJ,EAA1B,CAAP;AACH,GAFa;AAId;;;;;;;;;;;;AAUcR,kCAAd,UAAgCa,MAAhC,EAAgD;AAC5C,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACtB,aAAOd,WAAW,CAACe,wBAAZ,EAAP;AACH;;AACD,QAAIF,MAAM,YAAYL,iCAAtB,EAA+C;AAC3C,aAAO,IAAII,qBAAJ,CAA0BC,MAA1B,CAAP;AACH;;AAED,UAAM,IAAIF,KAAJ,CAAU,oBAAV,CAAN;AACH,GATa;AAWd;;;;;;;;;;;AAScX,oCAAd,UAAkCgB,QAAlC,EAAoD;AAChD,WAAO,IAAIJ,qBAAJ,CAA0B,IAAIK,iCAAJ,CAAoBD,QAApB,CAA1B,CAAP;AACH,GAFa;AAId;;;;;;;;;;;;AAUchB,iCAAd,UAA+BO,WAA/B,EAA6F;AACzF,QAAIA,WAAW,YAAYC,uCAA3B,EAA0D;AACtD,aAAO,IAAII,qBAAJ,CAA0B,IAAIM,6CAAJ,CAA8BX,WAA9B,CAA1B,CAAP;AACH;;AAED,QAAIA,WAAW,YAAYC,+BAA3B,EAAkD;AAC9C,aAAO,IAAII,qBAAJ,CAA0BL,WAA1B,CAAP;AACH;;AAED,QAAIA,WAAW,YAAYC,+BAA3B,EAAkD;AAC9C,aAAO,IAAII,qBAAJ,CAA0BL,WAA1B,CAAP;AACH;;AAED,UAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;AACH,GAda;;AA6ClB;AAtKA;;AAAsBQ;AAwKtB;;;;;;AAKA;AAAA;AAAA;AAAqCC;AAGjC;;;;;;;AAKA,2BAAmBC,MAAnB,EAAuC;AAAvC,gBACIC,qBAAO,IADX;;AAEIC,SAAI,CAACC,UAAL,GAAkBH,MAAlB;;AACH;;AAKDI,wBAAWtB,yBAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA;AACI,aAAO,KAAKqB,UAAL,CAAgBE,MAAvB;AACH,KAFgB;qBAAA;;AAAA,GAAjB;AAIA;;;;;;AAKOvB,oCAAP,UAAawB,EAAb,EAA8BC,GAA9B,EAA2D;AACvD,SAAKJ,UAAL,CAAgBK,OAAhB,GAA0BC,IAA1B,CAA+B;AAC3B,UAAI,CAAC,CAACH,EAAN,EAAU;AACNA,UAAE;AACL;AACJ,KAJD,EAIG,UAACI,KAAD,EAAc;AACb,UAAI,CAAC,CAACH,GAAN,EAAW;AACPA,WAAG,CAACG,KAAD,CAAH;AACH;AACJ,KARD;AASH,GAVM;AAYP;;;;;;;AAKO5B,iCAAP;AACI,WAAO,KAAKqB,UAAL,CAAgBQ,EAAhB,EAAP;AACH,GAFM;;AASPP,wBAAWtB,yBAAX,EAAW,MAAX,EAAe;AALf;;;;;SAKA;AACI,aAAO,KAAKqB,UAAL,CAAgBS,IAAvB;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIA;;;;;;;AAMO9B,qCAAP;AACI,WAAO,KAAKqB,UAAL,CAAgBU,MAAhB,EAAP;AACH,GAFM;AAIP;;;;;;;;;AAOO/B,qCAAP,UAAcgC,WAAd,EAAiC;AAC7B,WAAO,KAAKX,UAAL,CAAgBY,MAAhB,CAAuBD,WAAvB,CAAP;AACH,GAFM;AAIP;;;;;;;;AAMOhC,qCAAP,UAAcgC,WAAd,EAAiC;AAC7B,WAAO,KAAKX,UAAL,CAAgBa,MAAhB,CAAuBF,WAAvB,CAAP;AACH,GAFM;AAIP;;;;;;;;AAMOhC,sCAAP;AACI,WAAO,KAAKqB,UAAL,CAAgBK,OAAhB,EAAP;AACH,GAFM;;AAUPJ,wBAAWtB,yBAAX,EAAW,QAAX,EAAiB;AANjB;;;;;;SAMA;AACI,aAAO,KAAKqB,UAAL,CAAgBc,MAAvB;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIOnC,0CAAP,UAAmBG,IAAnB,EAAiCiC,KAAjC,EAA8C;AAC1CC,0BAAUC,WAAV,CAAsBF,KAAtB,EAA6B,OAA7B;;AAEA,QAAIzB,SAAS,KAAK,KAAKU,UAAL,CAAgBkB,WAAlC,EAA+C;AAC3C,WAAKlB,UAAL,CAAgBkB,WAAhB,CAA4BpC,IAA5B,EAAkCiC,KAAlC;AACH,KAFD,MAEO;AACH,YAAM,IAAI5B,KAAJ,CAAU,gEAAV,CAAN;AACH;AAEJ,GATM;;AAWAR,0CAAP,UAAmBG,IAAnB,EAAiCqC,GAAjC,EAA6C;AACzC,QAAI7B,SAAS,KAAK,KAAKU,UAAL,CAAgBoB,WAAlC,EAA+C;AAC3C,aAAO,KAAKpB,UAAL,CAAgBoB,WAAhB,CAA4BtC,IAA5B,EAAkCqC,GAAlC,CAAP;AACH,KAFD,MAEO;AACH,YAAM,IAAIhC,KAAJ,CAAU,gEAAV,CAAN;AACH;;AAED,WAAOgC,GAAP;AACH,GARM;;AAUPlB,wBAAWtB,yBAAX,EAAW,YAAX,EAAqB;SAArB;AACI,aAAO,KAAKqB,UAAL,CAAgBqB,UAAvB;AACH,KAFoB;qBAAA;;AAAA,GAArB;AAGJ;AAAC,CAlID,CAAqC7C,WAArC;;AAAamB;;AAoIb;AAAA;AAAA;AAA2CC;AAGvC;;;;;;;AAKA,iCAAmB0B,WAAnB,EAAiD;AAAjD,gBACIxB,qBAAO,IADX;;AAEIC,SAAI,CAACwB,eAAL,GAAuBD,WAAvB;;AACH;;AAEDrB,wBAAWb,+BAAX,EAAW,QAAX,EAAiB;SAAjB,UAAkBc,MAAlB,EAA2C;AACvC,WAAKqB,eAAL,CAAqBrB,MAArB,GAA8BA,MAA9B;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIOd,0CAAP,UAAaoC,MAAb,EAAgC;AAC5B,SAAKD,eAAL,CAAqBE,KAArB,CAA2BD,MAA3B;AACH,GAFM;;AAIApC,0CAAP;AACI,SAAKmC,eAAL,CAAqBG,KAArB;AACH,GAFM;;AAIAtC,uCAAP;AACI,WAAO,KAAKmC,eAAL,CAAqBf,EAArB,EAAP;AACH,GAFM;;AAIApB,gDAAP,UAAmBN,IAAnB,EAAiCiC,KAAjC,EAA8C;AAC1C,UAAM,IAAI5B,KAAJ,CAAU,gEAAV,CAAN;AACH,GAFM;;AAIAC,gDAAP,UAAmBN,IAAnB,EAAiCqC,GAAjC,EAA6C;AACzC,UAAM,IAAIhC,KAAJ,CAAU,gEAAV,CAAN;AACH,GAFM;;AAGX;AAAC,CApCD,CAA2CX,WAA3C;;AAAamB","names":["AudioConfig","pcmRecorder","Exports_1","AudioConfigImpl","deviceId","file","name","audioStream","Exports_2","AudioInputStream_1","MediaStream","Error","AudioOutputConfigImpl","player","undefined","fromDefaultSpeakerOutput","filename","AudioFileWriter_1","AudioOutputStream_1","exports","__extends","source","_super","_this","privSource","Object","format","cb","err","turnOff","then","error","id","blob","turnOn","audioNodeId","attach","detach","events","value","Contracts_1","throwIfNull","setProperty","def","getProperty","deviceInfo","destination","privDestination","buffer","write","close"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder();\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder();\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then(() => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.privSource.blob;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}