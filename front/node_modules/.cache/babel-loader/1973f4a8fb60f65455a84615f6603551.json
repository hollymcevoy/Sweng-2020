{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IntentRecognizer = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../common/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_3 = require(\"./Exports\");\n/**\n * Intent recognizer.\n * @class\n */\n\n\nvar IntentRecognizer =\n/** @class */\nfunction (_super) {\n  __extends(IntentRecognizer, _super);\n  /**\n   * Initializes an instance of the IntentRecognizer.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - The set of configuration properties.\n   * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n   */\n\n\n  function IntentRecognizer(speechConfig, audioConfig) {\n    var _this = this;\n\n    Contracts_1.Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    var configImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n    _this = _super.call(this, audioConfig, configImpl.properties, new Exports_1.IntentConnectionFactory()) || this;\n    _this.privAddedIntents = [];\n    _this.privAddedLmIntents = {};\n    _this.privDisposedIntentRecognizer = false;\n    _this.privProperties = configImpl.properties;\n    Contracts_1.Contracts.throwIfNullOrWhitespace(_this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage]);\n    return _this;\n  }\n\n  Object.defineProperty(IntentRecognizer.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Gets the spoken language of recognition.\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} the spoken language of recognition.\n     */\n    get: function () {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IntentRecognizer.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function () {\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    set: function (value) {\n      this.properties.setProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IntentRecognizer.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this IntentRecognizer.\n     * @member IntentRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their\n     *          values defined for this IntentRecognizer.\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Starts intent recognition, and stops after the first utterance is recognized.\n   * The task returns the recognition text and intent as result.\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n   *       so it is suitable only for single shot recognition like command or query.\n   *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\n   * @member IntentRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  IntentRecognizer.prototype.recognizeOnceAsync = function (cb, err) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      var context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      var intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    Exports_2.marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(Exports_1.RecognitionMode.Interactive), cb, err);\n  };\n  /**\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  IntentRecognizer.prototype.startContinuousRecognitionAsync = function (cb, err) {\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      var context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      var intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    Exports_2.marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(Exports_1.RecognitionMode.Conversation), cb, err);\n  };\n  /**\n   * Stops continuous intent recognition.\n   * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  IntentRecognizer.prototype.stopContinuousRecognitionAsync = function (cb, err) {\n    Exports_2.marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  };\n  /**\n   * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   *       This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  IntentRecognizer.prototype.startKeywordRecognitionAsync = function (model, cb, err) {\n    Contracts_1.Contracts.throwIfNull(model, \"model\");\n\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  };\n  /**\n   * Stops continuous speech recognition.\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n   *       This functionality is currently not included in the SDK itself.\n   * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  IntentRecognizer.prototype.stopKeywordRecognitionAsync = function (cb, err) {\n    if (!!cb) {\n      cb();\n    }\n  };\n  /**\n   * Adds a phrase that should be recognized as intent.\n   * @member IntentRecognizer.prototype.addIntent\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\n   * @param {string} phrase - A String that specifies the phrase representing the intent.\n   */\n\n\n  IntentRecognizer.prototype.addIntent = function (simplePhrase, intentId) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts_1.Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n    this.privAddedIntents.push([intentId, simplePhrase]);\n  };\n  /**\n   * Adds an intent from Language Understanding service for recognition.\n   * @member IntentRecognizer.prototype.addIntentWithLanguageModel\n   * @function\n   * @public\n   * @param {string} intentId - A String that represents the identifier of the intent\n   *        to be recognized. Ignored if intentName is empty.\n   * @param {string} model - The intent model from Language Understanding service.\n   * @param {string} intentName - The intent name defined in the intent model. If it\n   *        is empty, all intent names defined in the model will be added.\n   */\n\n\n  IntentRecognizer.prototype.addIntentWithLanguageModel = function (intentId, model, intentName) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts_1.Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts_1.Contracts.throwIfNull(model, \"model\");\n    var modelImpl = model;\n    Contracts_1.Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privAddedLmIntents[intentId] = new Exports_1.AddedLmIntent(modelImpl, intentName);\n  };\n  /**\n   * @summary Adds all intents from the specified Language Understanding Model.\n   * @member IntentRecognizer.prototype.addAllIntents\n   * @function\n   * @public\n   * @function\n   * @public\n   * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\n   * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\n   */\n\n\n  IntentRecognizer.prototype.addAllIntents = function (model, intentId) {\n    Contracts_1.Contracts.throwIfNull(model, \"model\");\n    var modelImpl = model;\n    Contracts_1.Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privUmbrellaIntent = new Exports_1.AddedLmIntent(modelImpl, intentId);\n  };\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member IntentRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  IntentRecognizer.prototype.close = function (cb, errorCb) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Exports_2.marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  };\n\n  IntentRecognizer.prototype.createRecognizerConfig = function (speechConfig) {\n    return new Exports_1.RecognizerConfig(speechConfig, this.properties);\n  };\n\n  IntentRecognizer.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {\n    var audioImpl = audioConfig;\n    return new Exports_1.IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  };\n\n  IntentRecognizer.prototype.dispose = function (disposing) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privDisposedIntentRecognizer) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!disposing) return [3\n            /*break*/\n            , 2];\n            this.privDisposedIntentRecognizer = true;\n            return [4\n            /*yield*/\n            , _super.prototype.dispose.call(this, disposing)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IntentRecognizer.prototype.buildSpeechContext = function () {\n    var appId;\n    var region;\n    var subscriptionKey;\n    var refGrammers = [];\n\n    if (undefined !== this.privUmbrellaIntent) {\n      appId = this.privUmbrellaIntent.modelImpl.appId;\n      region = this.privUmbrellaIntent.modelImpl.region;\n      subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n    } // Build the reference grammer array.\n\n\n    for (var _i = 0, _a = Object.keys(this.privAddedLmIntents); _i < _a.length; _i++) {\n      var intentId = _a[_i];\n      var addedLmIntent = this.privAddedLmIntents[intentId]; // validate all the same model, region, and key...\n\n      if (appId === undefined) {\n        appId = addedLmIntent.modelImpl.appId;\n      } else {\n        if (appId !== addedLmIntent.modelImpl.appId) {\n          throw new Error(\"Intents must all be from the same LUIS model\");\n        }\n      }\n\n      if (region === undefined) {\n        region = addedLmIntent.modelImpl.region;\n      } else {\n        if (region !== addedLmIntent.modelImpl.region) {\n          throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n        }\n      }\n\n      if (subscriptionKey === undefined) {\n        subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n      } else {\n        if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n          throw new Error(\"Intents must all use the same subscription key\");\n        }\n      }\n\n      var grammer = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n      refGrammers.push(grammer);\n    }\n\n    return {\n      Intent: {\n        id: appId,\n        key: subscriptionKey === undefined ? this.privProperties.getProperty(Exports_3.PropertyId[Exports_3.PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n        provider: \"LUIS\"\n      },\n      ReferenceGrammars: undefined === this.privUmbrellaIntent ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"]\n    };\n  };\n\n  return IntentRecognizer;\n}(Exports_3.Recognizer);\n\nexports.IntentRecognizer = IntentRecognizer;","map":{"version":3,"mappings":"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","names":["__extends","speechConfig","audioConfig","Contracts_1","throwIfNullOrUndefined","configImpl","_this","properties","Exports_1","privAddedIntents","privAddedLmIntents","privDisposedIntentRecognizer","privProperties","throwIfNullOrWhitespace","getProperty","Exports_3","SpeechServiceConnection_RecoLanguage","Object","IntentRecognizer","throwIfDisposed","SpeechServiceAuthorization_Token","value","setProperty","cb","err","keys","length","undefined","privUmbrellaIntent","context","buildSpeechContext","privReco","speechContext","setSection","Intent","dynamicGrammar","addReferenceGrammar","ReferenceGrammars","intentReco","setIntents","Exports_2","recognizeOnceAsyncImpl","Interactive","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsyncImpl","model","throwIfNull","simplePhrase","intentId","push","intentName","modelImpl","appId","errorCb","dispose","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","_super","call","_a","region","subscriptionKey","refGrammers","_i","addedLmIntent","Error","grammer","id","key","SpeechServiceConnection_Key","provider","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     *          values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition like command or query.\r\n     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     *        to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     *        is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string,\r\n        key: string,\r\n        provider: string,\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n"]},"metadata":{},"sourceType":"script"}