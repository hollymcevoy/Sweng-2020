{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = dedupeFilenames;\n\nvar _parseFilename2 = _interopRequireDefault(require(\"./parseFilename\"));\n\nfunction dedupeFilenames(array) {\n  var nextArray = [];\n  array.forEach(function (value) {\n    var _parseFilename = (0, _parseFilename2[\"default\"])(value),\n        extname = _parseFilename.extname,\n        name = _parseFilename.name;\n\n    var count = 0;\n    var nextValue = value;\n\n    while (nextArray.includes(nextValue)) {\n      nextValue = [name, \"(\".concat(++count, \")\")].filter(function (segment) {\n        return segment;\n      }).join(' ') + extname;\n    }\n\n    nextArray.push(nextValue);\n  });\n  return nextArray;\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAEe,SAASA,eAAT,CAAyBC,KAAzB,EAA0C;AACrD,MAAMC,SAAmB,GAAG,EAA5B;AAEAD,OAAK,CAACE,OAANF,CAAc,iBAAS;AACnB,yBAA0B,gCAAcG,KAAd,CAA1B;AAAA,QAAQC,OAAR,kBAAQA,OAAR;AAAA,QAAiBC,IAAjB,kBAAiBA,IAAjB;;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,SAAS,GAAGJ,KAAhB;;AAEA,WAAOF,SAAS,CAACO,QAAVP,CAAmBM,SAAnBN,CAAP,EAAsC;AAClCM,eAAS,GAAG,CAACF,IAAD,aAAa,EAAEC,KAAf,QAA2BG,MAA3B,CAAkC,mBAAO;AAAA,eAAIC,OAAJ;AAAzC,SAAsDC,IAAtD,CAA2D,GAA3D,IAAkEP,OAA9EG;AACH;;AAEDN,aAAS,CAACW,IAAVX,CAAeM,SAAfN;AATJ;AAYA,SAAOA,SAAP;AACH","names":["dedupeFilenames","array","nextArray","forEach","value","extname","name","count","nextValue","includes","filter","segment","join","push"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-directlinejs/src/dedupeFilenames.ts"],"sourcesContent":["import parseFilename from './parseFilename';\n\nexport default function dedupeFilenames(array: string[]) {\n    const nextArray: string[] = [];\n\n    array.forEach(value => {\n        const { extname, name } = parseFilename(value);\n        let count = 0;\n        let nextValue = value;\n\n        while (nextArray.includes(nextValue)) {\n            nextValue = [name, `(${ (++count) })`].filter(segment => segment).join(' ') + extname;\n        }\n\n        nextArray.push(nextValue);\n    });\n\n    return nextArray;\n}\n"]},"metadata":{},"sourceType":"script"}