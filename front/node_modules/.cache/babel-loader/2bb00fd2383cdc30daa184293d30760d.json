{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n\nvar ScalarObservable_1 = require('./ScalarObservable');\n\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar ArrayLikeObservable = function (_super) {\n  __extends(ArrayLikeObservable, _super);\n\n  function ArrayLikeObservable(arrayLike, scheduler) {\n    _super.call(this);\n\n    this.arrayLike = arrayLike;\n    this.scheduler = scheduler;\n\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  ArrayLikeObservable.create = function (arrayLike, scheduler) {\n    var length = arrayLike.length;\n\n    if (length === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    } else if (length === 1) {\n      return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  };\n\n  ArrayLikeObservable.dispatch = function (state) {\n    var arrayLike = state.arrayLike,\n        index = state.index,\n        length = state.length,\n        subscriber = state.subscriber;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n    state.index = index + 1;\n    this.schedule(state);\n  };\n  /** @deprecated internal use only */\n\n\n  ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n\n    var _a = this,\n        arrayLike = _a.arrayLike,\n        scheduler = _a.scheduler;\n\n    var length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike: arrayLike,\n        index: index,\n        length: length,\n        subscriber: subscriber\n      });\n    } else {\n      for (var i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n\n      subscriber.complete();\n    }\n  };\n\n  return ArrayLikeObservable;\n}(Observable_1.Observable);\n\nexports.ArrayLikeObservable = ArrayLikeObservable;","map":{"version":3,"mappings":";;;;;;;;;;;;AACA,2BAA2B,eAA3B;;AACA,iCAAiC,oBAAjC;;AACA,gCAAgC,mBAAhC;AAIA;;;;;;;AAKA;AAA4CA;;AAmC1C,+BAAoBC,SAApB,EAAqDC,SAArD,EAA2E;AACzEC;;AADkB;AAAiC;;AAEnD,QAAI,CAACD,SAAD,IAAcD,SAAS,CAACG,MAAV,KAAqB,CAAvC,EAA0C;AACxC,WAAKC,SAAL,GAAiB,IAAjB;AACA,WAAKC,KAAL,GAAaL,SAAS,CAAC,CAAD,CAAtB;AACD;AACF;;AAvCMM,+BAAP,UAAiBN,SAAjB,EAA0CC,SAA1C,EAAgE;AAC9D,QAAME,MAAM,GAAGH,SAAS,CAACG,MAAzB;;AACA,QAAIA,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,IAAII,iCAAJ,EAAP;AACD,KAFD,MAEO,IAAIJ,MAAM,KAAK,CAAf,EAAkB;AACvB,aAAO,IAAIK,mCAAJ,CAA6BR,SAAS,CAAC,CAAD,CAAtC,EAA2CC,SAA3C,CAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAIK,mBAAJ,CAAwBN,SAAxB,EAAmCC,SAAnC,CAAP;AACD;AACF,GATM;;AAWAK,iCAAP,UAAgBG,KAAhB,EAA0B;AAChB;AAAA,QAAWC,mBAAX;AAAA,QAAkBP,qBAAlB;AAAA,QAA0BQ,6BAA1B;;AAER,QAAIA,UAAU,CAACC,MAAf,EAAuB;AACrB;AACD;;AAED,QAAIF,KAAK,IAAIP,MAAb,EAAqB;AACnBQ,gBAAU,CAACE,QAAX;AACA;AACD;;AAEDF,cAAU,CAACG,IAAX,CAAgBd,SAAS,CAACU,KAAD,CAAzB;AAEAD,SAAK,CAACC,KAAN,GAAcA,KAAK,GAAG,CAAtB;AAEO,SAAMK,QAAN,CAAeN,KAAf;AACR,GAjBM;AA8BP;;;AAAqCH,uDAAWK,UAAX,EAAoC;AACvE,QAAID,KAAK,GAAG,CAAZ;;AACA;AAAA,QAAQV,wBAAR;AAAA,QAAmBC,wBAAnB;;AACA,QAAME,MAAM,GAAGH,SAAS,CAACG,MAAzB;;AAEA,QAAIF,SAAJ,EAAe;AACb,aAAOA,SAAS,CAACc,QAAV,CAAmBT,mBAAmB,CAACU,QAAvC,EAAiD,CAAjD,EAAoD;AACzDhB,4BADyD;AAC9CU,oBAD8C;AACvCP,sBADuC;AAC/BQ;AAD+B,OAApD,CAAP;AAGD,KAJD,MAIO;AACL,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAJ,IAAc,CAACQ,UAAU,CAACC,MAA1C,EAAkDK,CAAC,EAAnD,EAAuD;AACrDN,kBAAU,CAACG,IAAX,CAAgBd,SAAS,CAACiB,CAAD,CAAzB;AACD;;AACDN,gBAAU,CAACE,QAAX;AACD;AACF,GAfoC;;AAgBvC;AA3DA,EAA4CK,uBAA5C;;AAAaC,8BAAmBb,mBAAnB","names":["__extends","arrayLike","scheduler","_super","length","_isScalar","value","ArrayLikeObservable","EmptyObservable_1","ScalarObservable_1","state","index","subscriber","closed","complete","next","schedule","dispatch","i","Observable_1","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/observable/ArrayLikeObservable.ts"],"sourcesContent":["import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}