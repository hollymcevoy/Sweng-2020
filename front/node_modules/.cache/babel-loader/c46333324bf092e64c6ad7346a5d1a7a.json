{"ast":null,"code":"import { useMemo } from 'react';\nvar SUBSCRIBER_LIMIT = 10;\nexport default function useCallbackRefWithSubscribe() {\n  return useMemo(function () {\n    var subscriptions = [];\n\n    var callbackRef = function callbackRef(current) {\n      callbackRef.current = current;\n      subscriptions.forEach(function (subscription) {\n        subscription.cleanup && subscription.cleanup();\n        subscription.cleanup = subscription.callback(current);\n      });\n    };\n\n    callbackRef.subscribe = function (callback) {\n      var subscription = {\n        callback: callback\n      };\n      subscriptions.push(subscription);\n\n      if (subscriptions.length >= SUBSCRIBER_LIMIT) {\n        console.warn(\"useSubscribe: Reaching maximum limit of subscribers (\".concat(SUBSCRIBER_LIMIT, \"), please make sure your code did clean up properly.\"));\n      }\n\n      subscription.cleanup = callback(callbackRef.current);\n      return function () {\n        subscription.cleanup && subscription.cleanup();\n        var index = subscriptions.indexOf(subscription);\n        ~index && subscriptions.splice(index, 1);\n      };\n    };\n\n    return callbackRef;\n  }, []);\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,IAAMC,gBAAgB,GAAG,EAAzB;AAEA,eAAe,SAASC,2BAAT,GAAuC;AACpD,SAAOF,OAAO,CAAC,YAAM;AACnB,QAAMG,aAAa,GAAG,EAAtB;;AAEA,QAAMC,WAAW,GAAG,SAAdA,WAAc,UAAW;AAC7BA,iBAAW,CAACC,OAAZD,GAAsBC,OAAtBD;AAEAD,mBAAa,CAACG,OAAdH,CAAsB,wBAAgB;AACpCI,oBAAY,CAACC,OAAbD,IAAwBA,YAAY,CAACC,OAAbD,EAAxBA;AACAA,oBAAY,CAACC,OAAbD,GAAuBA,YAAY,CAACE,QAAbF,CAAsBF,OAAtBE,CAAvBA;AAFF;AAHF;;AASAH,eAAW,CAACM,SAAZN,GAAwB,oBAAY;AAClC,UAAMG,YAAY,GAAG;AAAEE,gBAAQ,EAARA;AAAF,OAArB;AAEAN,mBAAa,CAACQ,IAAdR,CAAmBI,YAAnBJ;;AAEA,UAAIA,aAAa,CAACS,MAAdT,IAAwBF,gBAA5B,EAA8C;AAC5CY,eAAO,CAACC,IAARD,gEAC0DZ,gBAD1D;AAGD;;AAEDM,kBAAY,CAACC,OAAbD,GAAuBE,QAAQ,CAACL,WAAW,CAACC,OAAb,CAA/BE;AAEA,aAAO,YAAM;AACXA,oBAAY,CAACC,OAAbD,IAAwBA,YAAY,CAACC,OAAbD,EAAxBA;AAEA,YAAMQ,KAAK,GAAGZ,aAAa,CAACa,OAAdb,CAAsBI,YAAtBJ,CAAd;AAEA,SAACY,KAAD,IAAUZ,aAAa,CAACc,MAAdd,CAAqBY,KAArBZ,EAA4B,CAA5BA,CAAV;AALF;AAbF;;AAsBA,WAAOC,WAAP;AAlCY,KAmCX,EAnCW,CAAd;AAoCD","names":["useMemo","SUBSCRIBER_LIMIT","useCallbackRefWithSubscribe","subscriptions","callbackRef","current","forEach","subscription","cleanup","callback","subscribe","push","length","console","warn","index","indexOf","splice"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/react-film/src/hooks/internal/useCallbackRefWithSubscribe.js"],"sourcesContent":["import { useMemo } from 'react';\n\nconst SUBSCRIBER_LIMIT = 10;\n\nexport default function useCallbackRefWithSubscribe() {\n  return useMemo(() => {\n    const subscriptions = [];\n\n    const callbackRef = current => {\n      callbackRef.current = current;\n\n      subscriptions.forEach(subscription => {\n        subscription.cleanup && subscription.cleanup();\n        subscription.cleanup = subscription.callback(current);\n      });\n    };\n\n    callbackRef.subscribe = callback => {\n      const subscription = { callback };\n\n      subscriptions.push(subscription);\n\n      if (subscriptions.length >= SUBSCRIBER_LIMIT) {\n        console.warn(\n          `useSubscribe: Reaching maximum limit of subscribers (${SUBSCRIBER_LIMIT}), please make sure your code did clean up properly.`\n        );\n      }\n\n      subscription.cleanup = callback(callbackRef.current);\n\n      return () => {\n        subscription.cleanup && subscription.cleanup();\n\n        const index = subscriptions.indexOf(subscription);\n\n        ~index && subscriptions.splice(index, 1);\n      };\n    };\n\n    return callbackRef;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}