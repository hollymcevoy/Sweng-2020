{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionFactoryBase = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar ConnectionFactoryBase =\n/** @class */\nfunction () {\n  function ConnectionFactoryBase() {}\n\n  ConnectionFactoryBase.prototype.setCommonUrlParams = function (config, queryParams, endpoint) {\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames_1.QueryParameterNames.EnableAudioLogging, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames_1.QueryParameterNames.EnableWordLevelTimestamps, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames_1.QueryParameterNames.Profanity, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames_1.QueryParameterNames.InitialSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames_1.QueryParameterNames.EndSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames_1.QueryParameterNames.StableIntermediateThreshold, config, queryParams, endpoint);\n    var serviceProperties = JSON.parse(config.parameters.getProperty(Exports_1.ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach(function (value, num, array) {\n      queryParams[value] = serviceProperties[value];\n    });\n  };\n\n  ConnectionFactoryBase.prototype.setUrlParameter = function (propId, parameterName, config, queryParams, endpoint) {\n    var value = config.parameters.getProperty(propId, undefined);\n\n    if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n      queryParams[parameterName] = value.toLocaleLowerCase();\n    }\n  };\n\n  return ConnectionFactoryBase;\n}();\n\nexports.ConnectionFactoryBase = ConnectionFactoryBase;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AAIA;;AAEA;;AAEA;AAAA;AAAA;AAAA,oCAmEC;;AA7DaA,uDAAV,UACIC,MADJ,EAEIC,WAFJ,EAGIC,QAHJ,EAGoB;AAEhB,SAAKC,eAAL,CAAqBC,qBAAWC,0CAAhC,EACIC,0CAAoBC,kBADxB,EAEIP,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBC,qBAAWI,gDAAhC,EACIF,0CAAoBG,yBADxB,EAEIT,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBC,qBAAWM,qCAAhC,EACIJ,0CAAoBK,SADxB,EAEIX,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBC,qBAAWQ,+CAAhC,EACIN,0CAAoBO,uBADxB,EAEIb,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBC,qBAAWU,2CAAhC,EACIR,0CAAoBS,mBADxB,EAEIf,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBC,qBAAWY,kDAAhC,EACIV,0CAAoBW,2BADxB,EAEIjB,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,QAAMgB,iBAAiB,GAA8BC,IAAI,CAACC,KAAL,CAAWpB,MAAM,CAACqB,UAAP,CAAkBC,WAAlB,CAA8BC,uCAA9B,EAA6D,IAA7D,CAAX,CAArD;AAEAC,UAAM,CAACC,IAAP,CAAYP,iBAAZ,EAA+BQ,OAA/B,CAAuC,UAACC,KAAD,EAAgBC,GAAhB,EAA6BC,KAA7B,EAA4C;AAC/E5B,iBAAW,CAAC0B,KAAD,CAAX,GAAqBT,iBAAiB,CAACS,KAAD,CAAtC;AACH,KAFD;AAGH,GA9CS;;AAgDA5B,oDAAV,UACI+B,MADJ,EAEIC,aAFJ,EAGI/B,MAHJ,EAIIC,WAJJ,EAKIC,QALJ,EAKoB;AAEhB,QAAMyB,KAAK,GAAW3B,MAAM,CAACqB,UAAP,CAAkBC,WAAlB,CAA8BQ,MAA9B,EAAsCE,SAAtC,CAAtB;;AAEA,QAAIL,KAAK,KAAK,CAACzB,QAAD,IAAaA,QAAQ,CAAC+B,MAAT,CAAgBF,aAAhB,MAAmC,CAAC,CAAtD,CAAT,EAAmE;AAC/D9B,iBAAW,CAAC8B,aAAD,CAAX,GAA6BJ,KAAK,CAACO,iBAAN,EAA7B;AACH;AACJ,GAZS;;AAad;AAnEA;;AAAsBC","names":["ConnectionFactoryBase","config","queryParams","endpoint","setUrlParameter","Exports_2","SpeechServiceConnection_EnableAudioLogging","QueryParameterNames_1","EnableAudioLogging","SpeechServiceResponse_RequestWordLevelTimestamps","EnableWordLevelTimestamps","SpeechServiceResponse_ProfanityOption","Profanity","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","serviceProperties","JSON","parse","parameters","getProperty","Exports_1","Object","keys","forEach","value","num","array","propId","parameterName","undefined","search","toLocaleLowerCase","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging,\r\n            QueryParameterNames.EnableAudioLogging,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps,\r\n            QueryParameterNames.EnableWordLevelTimestamps,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption,\r\n            QueryParameterNames.Profanity,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n            QueryParameterNames.InitialSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\r\n            QueryParameterNames.EndSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold,\r\n            QueryParameterNames.StableIntermediateThreshold,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        Object.keys(serviceProperties).forEach((value: string, num: number, array: string[]) => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}