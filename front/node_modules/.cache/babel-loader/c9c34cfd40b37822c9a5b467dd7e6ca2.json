{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = activities;\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _deleteActivity = require(\"../actions/deleteActivity\");\n\nvar _incomingActivity = require(\"../actions/incomingActivity\");\n\nvar _markActivity = require(\"../actions/markActivity\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _ActivityClientState = require(\"../constants/ActivityClientState\");\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, -1] }] */\n\n\nvar DEFAULT_STATE = [];\nvar DIRECT_LINE_PLACEHOLDER_URL = 'https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png';\n\nfunction getClientActivityID(_ref) {\n  var _ref$channelData = _ref.channelData;\n  _ref$channelData = _ref$channelData === void 0 ? {} : _ref$channelData;\n  var clientActivityID = _ref$channelData.clientActivityID;\n  return clientActivityID;\n}\n\nfunction findByClientActivityID(clientActivityID) {\n  return function (activity) {\n    return getClientActivityID(activity) === clientActivityID;\n  };\n}\n\nfunction patchActivity(activity) {\n  // Direct Line channel will return a placeholder image for the user-uploaded image.\n  // As observed, the URL for the placeholder image is https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png.\n  // To make our code simpler, we are removing the value if \"contentUrl\" is pointing to a placeholder image.\n  // TODO: [P2] #2869 This \"contentURL\" removal code should be moved to DirectLineJS adapter.\n  // Also, if the \"contentURL\" starts with \"blob:\", this means the user is uploading a file (the URL is constructed by URL.createObjectURL)\n  // Although the copy/reference of the file is temporary in-memory, to make the UX consistent across page refresh, we do not allow the user to re-download the file either.\n  return (0, _simpleUpdateIn[\"default\"])(activity, ['attachments', function () {\n    return true;\n  }, 'contentUrl'], function (contentUrl) {\n    if (contentUrl !== DIRECT_LINE_PLACEHOLDER_URL && !/^blob:/i.test(contentUrl)) {\n      return contentUrl;\n    }\n  });\n}\n\nfunction upsertActivityWithSort(activities, nextActivity) {\n  nextActivity = patchActivity(nextActivity);\n  var _nextActivity = nextActivity,\n      _nextActivity$channel = _nextActivity.channelData;\n  _nextActivity$channel = _nextActivity$channel === void 0 ? {} : _nextActivity$channel;\n  var nextClientActivityID = _nextActivity$channel.clientActivityID;\n  var nextTimestamp = Date.parse(nextActivity.timestamp);\n  var nextActivities = activities.filter(function (_ref2) {\n    var _ref2$channelData = _ref2.channelData;\n    _ref2$channelData = _ref2$channelData === void 0 ? {} : _ref2$channelData;\n    var clientActivityID = _ref2$channelData.clientActivityID,\n        id = _ref2.id;\n    return (// We will remove all \"sending messages\" activities and activities with same ID\n      // \"clientActivityID\" is unique and used to track if the message has been sent and echoed back from the server\n      !(nextClientActivityID && clientActivityID === nextClientActivityID) && !(id && id === nextActivity.id)\n    );\n  }); // Then, find the right (sorted) place to insert the new activity at, based on timestamp\n  // Since clockskew might happen, we will ignore timestamp on messages that are sending\n\n  var indexToInsert = nextActivities.findIndex(function (_ref3) {\n    var _ref3$channelData = _ref3.channelData;\n    _ref3$channelData = _ref3$channelData === void 0 ? {} : _ref3$channelData;\n    var state = _ref3$channelData.state,\n        timestamp = _ref3.timestamp;\n    return Date.parse(timestamp) > nextTimestamp && state !== _ActivityClientState.SENDING && state !== _ActivityClientState.SEND_FAILED;\n  }); // If no right place are found, append it\n\n  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);\n  return nextActivities;\n}\n\nfunction activities() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;\n\n  var _ref4 = arguments.length > 1 ? arguments[1] : undefined,\n      meta = _ref4.meta,\n      payload = _ref4.payload,\n      type = _ref4.type;\n\n  switch (type) {\n    case _deleteActivity.DELETE_ACTIVITY:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [function (_ref5) {\n        var id = _ref5.id;\n        return id === payload.activityID;\n      }]);\n      break;\n\n    case _markActivity.MARK_ACTIVITY:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [function (_ref6) {\n        var id = _ref6.id;\n        return id === payload.activityID;\n      }, 'channelData', payload.name], function () {\n        return payload.value;\n      });\n      break;\n\n    case _postActivity.POST_ACTIVITY_PENDING:\n      state = upsertActivityWithSort(state, (0, _simpleUpdateIn[\"default\"])(payload.activity, ['channelData', 'state'], function () {\n        return _ActivityClientState.SENDING;\n      }));\n      break;\n\n    case _postActivity.POST_ACTIVITY_REJECTED:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [findByClientActivityID(meta.clientActivityID), 'channelData', 'state'], function () {\n        return _ActivityClientState.SEND_FAILED;\n      });\n      break;\n\n    case _postActivity.POST_ACTIVITY_FULFILLED:\n      state = (0, _simpleUpdateIn[\"default\"])(state, [findByClientActivityID(meta.clientActivityID)], function () {\n        return (// We will replace the activity with the version from the server\n          (0, _simpleUpdateIn[\"default\"])(patchActivity(payload.activity), ['channelData', 'state'], function () {\n            return _ActivityClientState.SENT;\n          })\n        );\n      });\n      break;\n\n    case _incomingActivity.INCOMING_ACTIVITY:\n      // TODO: [P4] #2100 Move \"typing\" into Constants.ActivityType\n      state = upsertActivityWithSort(state, payload.activity);\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_STATE","DIRECT_LINE_PLACEHOLDER_URL","getClientActivityID","channelData","_ref$channelData","clientActivityID","findByClientActivityID","activity","patchActivity","contentUrl","test","upsertActivityWithSort","activities","nextActivity","_nextActivity$channel","nextClientActivityID","nextTimestamp","Date","parse","timestamp","nextActivities","filter","_ref2$channelData","id","indexToInsert","findIndex","_ref3$channelData","state","SENDING","SEND_FAILED","splice","length","meta","payload","type","DELETE_ACTIVITY","activityID","MARK_ACTIVITY","name","value","POST_ACTIVITY_PENDING","POST_ACTIVITY_REJECTED","POST_ACTIVITY_FULFILLED","SENT","INCOMING_ACTIVITY"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/reducers/activities.js"],"sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, -1] }] */\n\nimport updateIn from 'simple-update-in';\n\nimport { DELETE_ACTIVITY } from '../actions/deleteActivity';\nimport { INCOMING_ACTIVITY } from '../actions/incomingActivity';\nimport { MARK_ACTIVITY } from '../actions/markActivity';\n\nimport { POST_ACTIVITY_FULFILLED, POST_ACTIVITY_PENDING, POST_ACTIVITY_REJECTED } from '../actions/postActivity';\n\nimport { SEND_FAILED, SENDING, SENT } from '../constants/ActivityClientState';\n\nconst DEFAULT_STATE = [];\nconst DIRECT_LINE_PLACEHOLDER_URL =\n  'https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png';\n\nfunction getClientActivityID({ channelData: { clientActivityID } = {} }) {\n  return clientActivityID;\n}\n\nfunction findByClientActivityID(clientActivityID) {\n  return activity => getClientActivityID(activity) === clientActivityID;\n}\n\nfunction patchActivity(activity) {\n  // Direct Line channel will return a placeholder image for the user-uploaded image.\n  // As observed, the URL for the placeholder image is https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png.\n  // To make our code simpler, we are removing the value if \"contentUrl\" is pointing to a placeholder image.\n\n  // TODO: [P2] #2869 This \"contentURL\" removal code should be moved to DirectLineJS adapter.\n\n  // Also, if the \"contentURL\" starts with \"blob:\", this means the user is uploading a file (the URL is constructed by URL.createObjectURL)\n  // Although the copy/reference of the file is temporary in-memory, to make the UX consistent across page refresh, we do not allow the user to re-download the file either.\n\n  return updateIn(activity, ['attachments', () => true, 'contentUrl'], contentUrl => {\n    if (contentUrl !== DIRECT_LINE_PLACEHOLDER_URL && !/^blob:/iu.test(contentUrl)) {\n      return contentUrl;\n    }\n  });\n}\n\nfunction upsertActivityWithSort(activities, nextActivity) {\n  nextActivity = patchActivity(nextActivity);\n\n  const { channelData: { clientActivityID: nextClientActivityID } = {} } = nextActivity;\n\n  const nextTimestamp = Date.parse(nextActivity.timestamp);\n  const nextActivities = activities.filter(\n    ({ channelData: { clientActivityID } = {}, id }) =>\n      // We will remove all \"sending messages\" activities and activities with same ID\n      // \"clientActivityID\" is unique and used to track if the message has been sent and echoed back from the server\n      !(nextClientActivityID && clientActivityID === nextClientActivityID) && !(id && id === nextActivity.id)\n  );\n\n  // Then, find the right (sorted) place to insert the new activity at, based on timestamp\n  // Since clockskew might happen, we will ignore timestamp on messages that are sending\n\n  const indexToInsert = nextActivities.findIndex(\n    ({ channelData: { state } = {}, timestamp }) =>\n      Date.parse(timestamp) > nextTimestamp && state !== SENDING && state !== SEND_FAILED\n  );\n\n  // If no right place are found, append it\n  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);\n\n  return nextActivities;\n}\n\nexport default function activities(state = DEFAULT_STATE, { meta, payload, type }) {\n  switch (type) {\n    case DELETE_ACTIVITY:\n      state = updateIn(state, [({ id }) => id === payload.activityID]);\n      break;\n\n    case MARK_ACTIVITY:\n      state = updateIn(\n        state,\n        [({ id }) => id === payload.activityID, 'channelData', payload.name],\n        () => payload.value\n      );\n      break;\n\n    case POST_ACTIVITY_PENDING:\n      state = upsertActivityWithSort(\n        state,\n        updateIn(payload.activity, ['channelData', 'state'], () => SENDING)\n      );\n      break;\n\n    case POST_ACTIVITY_REJECTED:\n      state = updateIn(\n        state,\n        [findByClientActivityID(meta.clientActivityID), 'channelData', 'state'],\n        () => SEND_FAILED\n      );\n      break;\n\n    case POST_ACTIVITY_FULFILLED:\n      state = updateIn(state, [findByClientActivityID(meta.clientActivityID)], () =>\n        // We will replace the activity with the version from the server\n        updateIn(patchActivity(payload.activity), ['channelData', 'state'], () => SENT)\n      );\n\n      break;\n\n    case INCOMING_ACTIVITY:\n      // TODO: [P4] #2100 Move \"typing\" into Constants.ActivityType\n      state = upsertActivityWithSort(state, payload.activity);\n      break;\n\n    default:\n      break;\n  }\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"script"}