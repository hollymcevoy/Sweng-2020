{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DynamicGrammarBuilder = void 0;\n/**\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\n * @class DynamicGrammarBuilder\n */\n\nvar DynamicGrammarBuilder =\n/** @class */\nfunction () {\n  function DynamicGrammarBuilder() {} // Adds one more reference phrases to the dynamic grammar to send.\n  // All added phrases are generic phrases.\n\n\n  DynamicGrammarBuilder.prototype.addPhrase = function (phrase) {\n    if (!this.privPhrases) {\n      this.privPhrases = [];\n    }\n\n    if (phrase instanceof Array) {\n      this.privPhrases = this.privPhrases.concat(phrase);\n    } else {\n      this.privPhrases.push(phrase);\n    }\n  }; // Clears all phrases stored in the current object.\n\n\n  DynamicGrammarBuilder.prototype.clearPhrases = function () {\n    this.privPhrases = undefined;\n  }; // Adds one or more reference grammars to the current grammar.\n\n\n  DynamicGrammarBuilder.prototype.addReferenceGrammar = function (grammar) {\n    if (!this.privGrammars) {\n      this.privGrammars = [];\n    }\n\n    if (grammar instanceof Array) {\n      this.privGrammars = this.privGrammars.concat(grammar);\n    } else {\n      this.privGrammars.push(grammar);\n    }\n  }; // clears all grammars stored on the recognizer.\n\n\n  DynamicGrammarBuilder.prototype.clearGrammars = function () {\n    this.privGrammars = undefined;\n  }; // Generates an object that represents the dynamic grammar used by the Speech Service.\n  // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\n  // of a DynamicGrammarBuilder\n\n\n  DynamicGrammarBuilder.prototype.generateGrammarObject = function () {\n    if (this.privGrammars === undefined && this.privPhrases === undefined) {\n      return undefined;\n    }\n\n    var retObj = {};\n    retObj.ReferenceGrammars = this.privGrammars;\n\n    if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\n      var retPhrases_1 = [];\n      this.privPhrases.forEach(function (value, index, array) {\n        retPhrases_1.push({\n          Text: value\n        });\n      });\n      retObj.Groups = [{\n        Type: \"Generic\",\n        Items: retPhrases_1\n      }];\n    }\n\n    return retObj;\n  };\n\n  return DynamicGrammarBuilder;\n}();\n\nexports.DynamicGrammarBuilder = DynamicGrammarBuilder;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAOA;;;;;AAIA;AAAA;AAAA;AAAA,oCAmEC,CAnED,CAKI;AACA;;;AACOA,8CAAP,UAAiBC,MAAjB,EAA0C;AACtC,QAAI,CAAC,KAAKC,WAAV,EAAuB;AACnB,WAAKA,WAAL,GAAmB,EAAnB;AACH;;AAED,QAAID,MAAM,YAAYE,KAAtB,EAA6B;AACzB,WAAKD,WAAL,GAAmB,KAAKA,WAAL,CAAiBE,MAAjB,CAAwBH,MAAxB,CAAnB;AACH,KAFD,MAEO;AACH,WAAKC,WAAL,CAAiBG,IAAjB,CAAsBJ,MAAtB;AACH;AACJ,GAVM,CAPX,CAmBI;;;AACOD,iDAAP;AACI,SAAKE,WAAL,GAAmBI,SAAnB;AACH,GAFM,CApBX,CAwBI;;;AACON,wDAAP,UAA2BO,OAA3B,EAAqD;AACjD,QAAI,CAAC,KAAKC,YAAV,EAAwB;AACpB,WAAKA,YAAL,GAAoB,EAApB;AACH;;AAED,QAAID,OAAO,YAAYJ,KAAvB,EAA8B;AAC1B,WAAKK,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,MAAlB,CAAyBG,OAAzB,CAApB;AACH,KAFD,MAEO;AACH,WAAKC,YAAL,CAAkBH,IAAlB,CAAuBE,OAAvB;AACH;AACJ,GAVM,CAzBX,CAqCI;;;AACOP,kDAAP;AACI,SAAKQ,YAAL,GAAoBF,SAApB;AACH,GAFM,CAtCX,CA0CI;AACA;AACA;;;AACON,0DAAP;AACI,QAAI,KAAKQ,YAAL,KAAsBF,SAAtB,IAAmC,KAAKJ,WAAL,KAAqBI,SAA5D,EAAuE;AACnE,aAAOA,SAAP;AACH;;AAED,QAAMG,MAAM,GAAoB,EAAhC;AACAA,UAAM,CAACC,iBAAP,GAA2B,KAAKF,YAAhC;;AAEA,QAAIF,SAAS,KAAK,KAAKJ,WAAnB,IAAkC,MAAM,KAAKA,WAAL,CAAiBS,MAA7D,EAAqE;AACjE,UAAMC,YAAU,GAA6B,EAA7C;AAEA,WAAKV,WAAL,CAAiBW,OAAjB,CAAyB,UAACC,KAAD,EAAgBC,KAAhB,EAA+BC,KAA/B,EAA8C;AACnEJ,oBAAU,CAACP,IAAX,CAAgB;AACZY,cAAI,EAAEH;AADM,SAAhB;AAGH,OAJD;AAMAL,YAAM,CAACS,MAAP,GAAgB,CAAC;AAAEC,YAAI,EAAE,SAAR;AAAmBC,aAAK,EAAER;AAA1B,OAAD,CAAhB;AACH;;AAED,WAAOH,MAAP;AACH,GArBM;;AAsBX;AAnEA;;AAAaY","names":["DynamicGrammarBuilder","phrase","privPhrases","Array","concat","push","undefined","grammar","privGrammars","retObj","ReferenceGrammars","length","retPhrases_1","forEach","value","index","array","Text","Groups","Type","Items","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase as string[]);\r\n        } else {\r\n            this.privPhrases.push(phrase as string);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar as string[]);\r\n        } else {\r\n            this.privGrammars.push(grammar as string);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string, index: number, array: string[]): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}