{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\n\n\nfunction mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return function mergeMapOperatorFunction(source) {\n    if (typeof resultSelector === 'number') {\n      concurrent = resultSelector;\n      resultSelector = null;\n    }\n\n    return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n  };\n}\n\nexports.mergeMap = mergeMap;\n\nvar MergeMapOperator = function () {\n  function MergeMapOperator(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar MergeMapSubscriber = function (_super) {\n  __extends(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    _super.call(this, destination);\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result, value, index);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  };\n\n  MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var result;\n\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.MergeMapSubscriber = MergeMapSubscriber;","map":{"version":3,"mappings":"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","names":["project","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","lift","MergeMapOperator","exports","mergeMap","observer","subscribe","MergeMapSubscriber","__extends","destination","_super","value","active","_tryNext","buffer","push","result","index","err","error","_innerSub","ish","add","subscribeToResult_1","hasCompleted","length","complete","outerValue","innerValue","outerIndex","innerIndex","innerSub","_notifyResultSelector","next","remove","_next","shift","OuterSubscriber_1"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/mergeMap.ts"],"sourcesContent":["import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}