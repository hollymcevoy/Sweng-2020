{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLocalizeAccessKey;\n\nvar _react = require(\"react\");\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _useNavigatorPlatform3 = _interopRequireDefault(require(\"./useNavigatorPlatform\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\n\nfunction useLocalizeAccessKey() {\n  var _useNavigatorPlatform = (0, _useNavigatorPlatform3.default)(),\n      _useNavigatorPlatform2 = _slicedToArray(_useNavigatorPlatform, 1),\n      apple = _useNavigatorPlatform2[0].apple;\n\n  var localize = useLocalizer();\n  return (0, _react.useCallback)(function (accessKey) {\n    if (!accessKey || typeof accessKey !== 'string' || !accessKey.length) {\n      throw new Error('useLocalizeAccessKey: \"accessKey\" must be a non-empty string');\n    }\n\n    return localize(apple ? 'ACCESS_KEY_FOR_MAC_ALT' : 'ACCESS_KEY_ALT', accessKey[0]);\n  }, [apple, localize]);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAQA,YAAR,GAAyBC,8BAAjBD,YAAR;;AAEe,SAASE,oBAAT,GAAgC;AAC7C,8BAAoB,qCAApB;AAAA;AAAA,MAASC,KAAT,6BAASA,KAAT;;AACA,MAAMC,QAAQ,GAAGJ,YAAY,EAA7B;AAEA,SAAO,wBACL,qBAAa;AACX,QAAI,CAACK,SAAD,IAAc,OAAOA,SAAP,KAAqB,QAAnC,IAA+C,CAACA,SAAS,CAACC,MAA9D,EAAsE;AACpE,YAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,WAAOH,QAAQ,CAACD,KAAK,GAAG,wBAAH,GAA8B,gBAApC,EAAsDE,SAAS,CAAC,CAAD,CAA/D,CAAf;AANG,KAQL,CAACF,KAAD,EAAQC,QAAR,CARK,CAAP;AAUD","names":["useLocalizer","hooks","useLocalizeAccessKey","apple","localize","accessKey","length","Error"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/hooks/internal/useLocalizeAccessKey.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { hooks } from 'botframework-webchat-api';\n\nimport useNavigatorPlatform from './useNavigatorPlatform';\n\nconst { useLocalizer } = hooks;\n\nexport default function useLocalizeAccessKey() {\n  const [{ apple }] = useNavigatorPlatform();\n  const localize = useLocalizer();\n\n  return useCallback(\n    accessKey => {\n      if (!accessKey || typeof accessKey !== 'string' || !accessKey.length) {\n        throw new Error('useLocalizeAccessKey: \"accessKey\" must be a non-empty string');\n      }\n\n      return localize(apple ? 'ACCESS_KEY_FOR_MAC_ALT' : 'ACCESS_KEY_ALT', accessKey[0]);\n    },\n    [apple, localize]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}