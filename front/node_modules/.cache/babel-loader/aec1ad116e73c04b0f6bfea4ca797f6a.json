{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = _interopRequireDefault(require(\"./private/Context\"));\n\nvar _findLastIndex = _interopRequireDefault(require(\"../../utils/findLastIndex\"));\n\nvar _useActivities3 = _interopRequireDefault(require(\"../../hooks/useActivities\"));\n\nvar _useActivityKeys3 = _interopRequireDefault(require(\"../ActivityKeyer/useActivityKeys\"));\n\nvar _usePrevious = _interopRequireDefault(require(\"../../hooks/internal/usePrevious\"));\n\nvar _useValueRef = _interopRequireDefault(require(\"../../hooks/internal/useValueRef\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction findClosestActivityKeyIfNotExists(activityKey, keys, prevKeys) {\n  if (keys.includes(activityKey)) {\n    return activityKey;\n  } else if (!prevKeys || !activityKey) {\n    // Initially, when the transcript was empty, there should be nothing read.\n    return;\n  } // If the last activity key is no longer in this activities (say, deleted), we try to find the closest one.\n\n\n  var prevIndex = prevKeys.indexOf(activityKey);\n\n  if (~prevIndex) {\n    // List out all previously activity keys, find the closest one that is in the new transcript.\n    var acknowledgedActivityKeys = prevKeys.slice(0, prevIndex).reverse();\n\n    var _iterator = _createForOfIteratorHelper(acknowledgedActivityKeys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prevAcknowledgedActivityKey = _step.value;\n\n        if (keys.includes(prevAcknowledgedActivityKey)) {\n          return prevAcknowledgedActivityKey;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } // If nothing is found, return `undefined`.\n\n}\n\nvar ActivityAcknowledgementComposer = function ActivityAcknowledgementComposer(_ref) {\n  var children = _ref.children;\n\n  var _useActivities = (0, _useActivities3.default)(),\n      _useActivities2 = _slicedToArray(_useActivities, 1),\n      activities = _useActivities2[0];\n\n  var _useActivityKeys = (0, _useActivityKeys3.default)(),\n      _useActivityKeys2 = _slicedToArray(_useActivityKeys, 1),\n      allActivityKeys = _useActivityKeys2[0];\n\n  var _useState = (0, _react.useState)(),\n      _useState2 = _slicedToArray(_useState, 2),\n      rawLastAcknowledgedActivityKey = _useState2[0],\n      setRawLastAcknowledgedActivityKey = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rawLastReadActivityKey = _useState4[0],\n      setRawLastReadActivityKey = _useState4[1];\n\n  var allActivityKeysRef = (0, _useValueRef.default)(allActivityKeys);\n  var prevAllActivityKeys = (0, _usePrevious.default)(allActivityKeys);\n  var lastOutgoingActivityKeyIndex = (0, _react.useMemo)(function () {\n    return (0, _findLastIndex.default)(activities, function (activity) {\n      var _activity$from;\n\n      return ((_activity$from = activity.from) === null || _activity$from === void 0 ? void 0 : _activity$from.role) === 'user';\n    });\n  }, [activities]); // Make sure when we return \"lastReadActivityKey\" exists in the current transcript.\n\n  var lastReadActivityKey = (0, _react.useMemo)(function () {\n    rawLastReadActivityKey && !~prevAllActivityKeys.includes(rawLastReadActivityKey) && console.warn(\"botframework-webchat internal assertion: \\\"rawLastReadActivityKey\\\" of value \".concat(rawLastReadActivityKey, \" should be in the \\\"prevAllActivityKeys\\\" array.\"));\n    return findClosestActivityKeyIfNotExists(rawLastReadActivityKey, allActivityKeys, prevAllActivityKeys);\n  }, [allActivityKeys, prevAllActivityKeys, rawLastReadActivityKey]);\n  var lastReadActivityKeyRef = (0, _useValueRef.default)(lastReadActivityKey); // Make sure when we return \"lastAcknowledgedActivityKey\" exists in the current transcript.\n\n  var lastAcknowledgedActivityKey = (0, _react.useMemo)(function () {\n    rawLastAcknowledgedActivityKey && !~prevAllActivityKeys.includes(rawLastAcknowledgedActivityKey) && console.warn(\"botframework-webchat internal assertion: \\\"rawLastAcknowledgedActivityKey\\\" of value \".concat(rawLastAcknowledgedActivityKey, \" should be in the \\\"prevAllActivityKeys\\\" array.\"));\n    var lastAcknowledgedActivityKey = findClosestActivityKeyIfNotExists(rawLastAcknowledgedActivityKey, allActivityKeys, prevAllActivityKeys); // TODO: [P2] Since Direct Line may send history and does not have read receipt.\n    //            Thus, if we don't assume everything is acknowledged initially, while displaying the history,\n    //            the transcript would soon stop scrolling.\n    //            Thus, before the first outgoing activity is detected, we need to assume everything is acknowledged.\n\n    return allActivityKeys[Math.max(allActivityKeys.indexOf(lastAcknowledgedActivityKey), lastOutgoingActivityKeyIndex)] || allActivityKeys[allActivityKeys.length - 1];\n  }, [allActivityKeys, lastOutgoingActivityKeyIndex, prevAllActivityKeys, rawLastAcknowledgedActivityKey]);\n  var activityAcknowledgements = (0, _react.useMemo)(function () {\n    var activityAcknowledgements = new Map();\n    var lastAcknowledgedIndex = allActivityKeys.indexOf(lastAcknowledgedActivityKey);\n    var lastReadIndex = allActivityKeys.indexOf(lastReadActivityKey);\n    allActivityKeys.forEach(function (activityKey, index) {\n      activityAcknowledgements.set(activityKey, {\n        acknowledged: index <= lastAcknowledgedIndex,\n        read: index <= lastReadIndex\n      });\n    });\n    return Object.freeze(activityAcknowledgements);\n  }, [allActivityKeys, lastAcknowledgedActivityKey, lastReadActivityKey]);\n  var activityAcknowledgementsRef = (0, _useValueRef.default)(activityAcknowledgements);\n  var getHasAcknowledgedByActivityKey = (0, _react.useCallback)(function (activityKey) {\n    var _activityAcknowledgem;\n\n    return (_activityAcknowledgem = activityAcknowledgementsRef.current.get(activityKey)) === null || _activityAcknowledgem === void 0 ? void 0 : _activityAcknowledgem.acknowledged;\n  }, [activityAcknowledgementsRef]); // TODO: [P2] Memoize with `useMemoWithPrevious` for better memoization of arrays.\n\n  var activityKeysByReadState = (0, _react.useMemo)(function () {\n    var index = allActivityKeys.indexOf(lastReadActivityKey);\n    return Object.freeze([Object.freeze(allActivityKeys.slice(0, index + 1)), Object.freeze(allActivityKeys.slice(index + 1))]);\n  }, [allActivityKeys, lastReadActivityKey]);\n  var markAllAsAcknowledged = (0, _react.useCallback)(function () {\n    var allActivityKeys = allActivityKeysRef.current;\n    setRawLastAcknowledgedActivityKey(allActivityKeys[allActivityKeys.length - 1]);\n  }, [allActivityKeysRef, setRawLastAcknowledgedActivityKey]);\n  var markActivityKeyAsRead = (0, _react.useCallback)(function (activityKey) {\n    var allActivityKeys = allActivityKeysRef.current;\n    var index = allActivityKeys.indexOf(activityKey);\n\n    if (!~index) {\n      return console.warn(\"botframework-webchat: Cannot mark activity with key \".concat(activityKey, \" as read because it is not in the transcript.\"));\n    }\n\n    index > allActivityKeys.indexOf(lastReadActivityKeyRef.current) && setRawLastReadActivityKey(activityKey);\n  }, [allActivityKeysRef, lastReadActivityKeyRef, setRawLastReadActivityKey]);\n\n  if (activityKeysByReadState[0].length + activityKeysByReadState[1].length !== allActivityKeys.length) {\n    console.warn('botframework-webchat internal: Sum of count of read and unread activity keys MUST equals to total number of activity keys.');\n  }\n\n  var contextValue = (0, _react.useMemo)(function () {\n    return {\n      activityKeysByReadState: activityKeysByReadState,\n      getHasAcknowledgedByActivityKey: getHasAcknowledgedByActivityKey,\n      lastAcknowledgedActivityKeyState: Object.freeze([lastAcknowledgedActivityKey]),\n      lastReadActivityKeyState: Object.freeze([lastReadActivityKey]),\n      markActivityKeyAsRead: markActivityKeyAsRead,\n      markAllAsAcknowledged: markAllAsAcknowledged\n    };\n  }, [activityKeysByReadState, getHasAcknowledgedByActivityKey, lastAcknowledgedActivityKey, lastReadActivityKey, markActivityKeyAsRead, markAllAsAcknowledged]);\n  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {\n    value: contextValue\n  }, children);\n};\n\nvar _default = ActivityAcknowledgementComposer;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["findClosestActivityKeyIfNotExists","activityKey","keys","prevKeys","includes","prevIndex","indexOf","acknowledgedActivityKeys","slice","reverse","prevAcknowledgedActivityKey","_iterator","ActivityAcknowledgementComposer","children","activities","allActivityKeys","rawLastAcknowledgedActivityKey","setRawLastAcknowledgedActivityKey","rawLastReadActivityKey","setRawLastReadActivityKey","allActivityKeysRef","prevAllActivityKeys","lastOutgoingActivityKeyIndex","from","role","lastReadActivityKey","console","warn","lastReadActivityKeyRef","lastAcknowledgedActivityKey","Math","max","length","activityAcknowledgements","Map","lastAcknowledgedIndex","lastReadIndex","forEach","index","set","acknowledged","read","Object","freeze","activityAcknowledgementsRef","getHasAcknowledgedByActivityKey","current","get","_activityAcknowledgem","activityKeysByReadState","markAllAsAcknowledged","markActivityKeyAsRead","contextValue","lastAcknowledgedActivityKeyState","lastReadActivityKeyState","_react","_Context","Provider","value"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-api/lib/src/providers/ActivityAcknowledgement/ActivityAcknowledgementComposer.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\n\nimport type { FC, PropsWithChildren } from 'react';\n\nimport ActivityAcknowledgementContext, { ActivityAcknowledgementContextType } from './private/Context';\nimport findLastIndex from '../../utils/findLastIndex';\nimport useActivities from '../../hooks/useActivities';\nimport useActivityKeys from '../ActivityKeyer/useActivityKeys';\nimport usePrevious from '../../hooks/internal/usePrevious';\nimport useValueRef from '../../hooks/internal/useValueRef';\n\nimport type { ActivityAcknowledgement } from './private/types';\n\ntype ActivityAcknowledgementComposerProps = PropsWithChildren<{}>;\n\nfunction findClosestActivityKeyIfNotExists(\n  activityKey: string,\n  keys: readonly string[],\n  prevKeys: readonly string[]\n): string | undefined {\n  if (keys.includes(activityKey)) {\n    return activityKey;\n  } else if (!prevKeys || !activityKey) {\n    // Initially, when the transcript was empty, there should be nothing read.\n    return;\n  }\n\n  // If the last activity key is no longer in this activities (say, deleted), we try to find the closest one.\n  const prevIndex = prevKeys.indexOf(activityKey);\n\n  if (~prevIndex) {\n    // List out all previously activity keys, find the closest one that is in the new transcript.\n    const acknowledgedActivityKeys = prevKeys.slice(0, prevIndex).reverse();\n\n    for (const prevAcknowledgedActivityKey of acknowledgedActivityKeys) {\n      if (keys.includes(prevAcknowledgedActivityKey)) {\n        return prevAcknowledgedActivityKey;\n      }\n    }\n  }\n\n  // If nothing is found, return `undefined`.\n}\n\nconst ActivityAcknowledgementComposer: FC<ActivityAcknowledgementComposerProps> = ({ children }) => {\n  const [activities] = useActivities();\n  const [allActivityKeys] = useActivityKeys();\n  const [rawLastAcknowledgedActivityKey, setRawLastAcknowledgedActivityKey] = useState<string | undefined>();\n  const [rawLastReadActivityKey, setRawLastReadActivityKey] = useState<string | undefined>();\n\n  const allActivityKeysRef = useValueRef(allActivityKeys);\n  const prevAllActivityKeys = usePrevious(allActivityKeys);\n\n  const lastOutgoingActivityKeyIndex = useMemo(\n    () => findLastIndex(activities, activity => activity.from?.role === 'user'),\n    [activities]\n  );\n\n  // Make sure when we return \"lastReadActivityKey\" exists in the current transcript.\n  const lastReadActivityKey = useMemo(() => {\n    rawLastReadActivityKey &&\n      !~prevAllActivityKeys.includes(rawLastReadActivityKey) &&\n      console.warn(\n        `botframework-webchat internal assertion: \"rawLastReadActivityKey\" of value ${rawLastReadActivityKey} should be in the \"prevAllActivityKeys\" array.`\n      );\n\n    return findClosestActivityKeyIfNotExists(rawLastReadActivityKey, allActivityKeys, prevAllActivityKeys);\n  }, [allActivityKeys, prevAllActivityKeys, rawLastReadActivityKey]);\n\n  const lastReadActivityKeyRef = useValueRef(lastReadActivityKey);\n\n  // Make sure when we return \"lastAcknowledgedActivityKey\" exists in the current transcript.\n  const lastAcknowledgedActivityKey = useMemo(() => {\n    rawLastAcknowledgedActivityKey &&\n      !~prevAllActivityKeys.includes(rawLastAcknowledgedActivityKey) &&\n      console.warn(\n        `botframework-webchat internal assertion: \"rawLastAcknowledgedActivityKey\" of value ${rawLastAcknowledgedActivityKey} should be in the \"prevAllActivityKeys\" array.`\n      );\n\n    const lastAcknowledgedActivityKey = findClosestActivityKeyIfNotExists(\n      rawLastAcknowledgedActivityKey,\n      allActivityKeys,\n      prevAllActivityKeys\n    );\n\n    // TODO: [P2] Since Direct Line may send history and does not have read receipt.\n    //            Thus, if we don't assume everything is acknowledged initially, while displaying the history,\n    //            the transcript would soon stop scrolling.\n    //            Thus, before the first outgoing activity is detected, we need to assume everything is acknowledged.\n    return (\n      allActivityKeys[Math.max(allActivityKeys.indexOf(lastAcknowledgedActivityKey), lastOutgoingActivityKeyIndex)] ||\n      allActivityKeys[allActivityKeys.length - 1]\n    );\n  }, [allActivityKeys, lastOutgoingActivityKeyIndex, prevAllActivityKeys, rawLastAcknowledgedActivityKey]);\n\n  const activityAcknowledgements = useMemo<Readonly<Map<string, ActivityAcknowledgement>>>(() => {\n    const activityAcknowledgements = new Map<string, ActivityAcknowledgement>();\n    const lastAcknowledgedIndex = allActivityKeys.indexOf(lastAcknowledgedActivityKey);\n    const lastReadIndex = allActivityKeys.indexOf(lastReadActivityKey);\n\n    allActivityKeys.forEach((activityKey, index) => {\n      activityAcknowledgements.set(activityKey, {\n        acknowledged: index <= lastAcknowledgedIndex,\n        read: index <= lastReadIndex\n      });\n    });\n\n    return Object.freeze(activityAcknowledgements);\n  }, [allActivityKeys, lastAcknowledgedActivityKey, lastReadActivityKey]);\n\n  const activityAcknowledgementsRef = useValueRef(activityAcknowledgements);\n\n  const getHasAcknowledgedByActivityKey = useCallback<(activityKey: string) => boolean>(\n    (activityKey: string) => activityAcknowledgementsRef.current.get(activityKey)?.acknowledged,\n    [activityAcknowledgementsRef]\n  );\n\n  // TODO: [P2] Memoize with `useMemoWithPrevious` for better memoization of arrays.\n  const activityKeysByReadState = useMemo<readonly [readonly string[], readonly string[]]>(() => {\n    const index = allActivityKeys.indexOf(lastReadActivityKey);\n\n    return Object.freeze([\n      Object.freeze(allActivityKeys.slice(0, index + 1)),\n      Object.freeze(allActivityKeys.slice(index + 1))\n    ]) as readonly [readonly string[], readonly string[]];\n  }, [allActivityKeys, lastReadActivityKey]);\n\n  const markAllAsAcknowledged = useCallback((): void => {\n    const { current: allActivityKeys } = allActivityKeysRef;\n\n    setRawLastAcknowledgedActivityKey(allActivityKeys[allActivityKeys.length - 1]);\n  }, [allActivityKeysRef, setRawLastAcknowledgedActivityKey]);\n\n  const markActivityKeyAsRead = useCallback(\n    (activityKey: string): void => {\n      const { current: allActivityKeys } = allActivityKeysRef;\n      const index = allActivityKeys.indexOf(activityKey);\n\n      if (!~index) {\n        return console.warn(\n          `botframework-webchat: Cannot mark activity with key ${activityKey} as read because it is not in the transcript.`\n        );\n      }\n\n      index > allActivityKeys.indexOf(lastReadActivityKeyRef.current) && setRawLastReadActivityKey(activityKey);\n    },\n    [allActivityKeysRef, lastReadActivityKeyRef, setRawLastReadActivityKey]\n  );\n\n  if (activityKeysByReadState[0].length + activityKeysByReadState[1].length !== allActivityKeys.length) {\n    console.warn(\n      'botframework-webchat internal: Sum of count of read and unread activity keys MUST equals to total number of activity keys.'\n    );\n  }\n\n  const contextValue = useMemo<ActivityAcknowledgementContextType>(\n    () => ({\n      activityKeysByReadState,\n      getHasAcknowledgedByActivityKey,\n      lastAcknowledgedActivityKeyState: Object.freeze([lastAcknowledgedActivityKey]) as readonly [string],\n      lastReadActivityKeyState: Object.freeze([lastReadActivityKey]) as readonly [string],\n      markActivityKeyAsRead,\n      markAllAsAcknowledged\n    }),\n    [\n      activityKeysByReadState,\n      getHasAcknowledgedByActivityKey,\n      lastAcknowledgedActivityKey,\n      lastReadActivityKey,\n      markActivityKeyAsRead,\n      markAllAsAcknowledged\n    ]\n  );\n\n  return (\n    <ActivityAcknowledgementContext.Provider value={contextValue}>{children}</ActivityAcknowledgementContext.Provider>\n  );\n};\n\nexport default ActivityAcknowledgementComposer;\n"]},"metadata":{},"sourceType":"script"}