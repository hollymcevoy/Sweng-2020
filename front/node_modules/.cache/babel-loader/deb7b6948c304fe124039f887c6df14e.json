{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechConnectionFactory = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../common.speech/Exports\");\n\nvar Exports_3 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_4 = require(\"./Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar SpeechConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(SpeechConnectionFactory, _super);\n\n  function SpeechConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    _this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    _this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\n\n    _this.create = function (config, authInfo, connectionId) {\n      var endpoint = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      var region = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Region, undefined);\n      var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      var host = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n      var queryParams = {};\n      var endpointId = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      var language = config.parameters.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n      if (endpointId) {\n        if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n          queryParams[QueryParameterNames_1.QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n        }\n      } else if (language) {\n        if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.Language) === -1) {\n          queryParams[QueryParameterNames_1.QueryParameterNames.Language] = language;\n        }\n      }\n\n      if (!endpoint || endpoint.search(QueryParameterNames_1.QueryParameterNames.Format) === -1) {\n        queryParams[QueryParameterNames_1.QueryParameterNames.Format] = config.parameters.getProperty(Exports_2.OutputFormatPropertyName, Exports_3.OutputFormat[Exports_3.OutputFormat.Simple]).toLowerCase();\n      }\n\n      if (config.autoDetectSourceLanguages !== undefined) {\n        queryParams[QueryParameterNames_1.QueryParameterNames.EnableLanguageId] = \"true\";\n      }\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      if (!endpoint) {\n        switch (config.recognitionMode) {\n          case Exports_4.RecognitionMode.Conversation:\n            if (config.parameters.getProperty(Exports_2.ForceDictationPropertyName, \"false\") === \"true\") {\n              endpoint = host + _this.dictationRelativeUri;\n            } else {\n              endpoint = host + _this.conversationRelativeUri;\n            }\n\n            break;\n\n          case Exports_4.RecognitionMode.Dictation:\n            endpoint = host + _this.dictationRelativeUri;\n            break;\n\n          default:\n            endpoint = host + _this.interactiveRelativeUri; // default is interactive\n\n            break;\n        }\n      }\n\n      var headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames_1.HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(Exports_3.PropertyId.SpeechServiceConnection_Url, endpoint);\n      var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_4.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n\n    return _this;\n  }\n\n  return SpeechConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.SpeechConnectionFactory = SpeechConnectionFactory;","map":{"version":3,"mappings":"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","names":["__extends","_this","config","authInfo","connectionId","endpoint","parameters","getProperty","Exports_3","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","toLowerCase","startsWith","host","SpeechServiceConnection_Host","queryParams","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","search","QueryParameterNames_1","CustomSpeechDeploymentId","Language","Format","Exports_2","Simple","autoDetectSourceLanguages","EnableLanguageId","setCommonUrlParams","recognitionMode","Exports_4","Conversation","dictationRelativeUri","conversationRelativeUri","Dictation","interactiveRelativeUri","headers","token","headerName","HeaderNames_1","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","Exports_1","fromRecognizerConfig","ConnectionFactoryBase_1","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        endpoint = host + this.conversationRelativeUri;\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}