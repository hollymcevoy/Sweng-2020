{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.type = exports.connectivity = exports.Device = exports.OS = exports.System = exports.Context = exports.SpeechServiceConfig = exports.RecognizerConfig = exports.SpeechResultFormat = exports.RecognitionMode = void 0; // tslint:disable:max-classes-per-file\n\nvar Exports_1 = require(\"../sdk/Exports\");\n\nvar RecognitionMode;\n\n(function (RecognitionMode) {\n  RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\n  RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\n  RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\n})(RecognitionMode = exports.RecognitionMode || (exports.RecognitionMode = {}));\n\nvar SpeechResultFormat;\n\n(function (SpeechResultFormat) {\n  SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\n  SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\n})(SpeechResultFormat = exports.SpeechResultFormat || (exports.SpeechResultFormat = {}));\n\nvar RecognizerConfig =\n/** @class */\nfunction () {\n  function RecognizerConfig(speechServiceConfig, parameters) {\n    this.privRecognitionMode = RecognitionMode.Interactive;\n    this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n    this.privParameters = parameters;\n    this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\n  }\n\n  Object.defineProperty(RecognizerConfig.prototype, \"parameters\", {\n    get: function () {\n      return this.privParameters;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"recognitionMode\", {\n    get: function () {\n      return this.privRecognitionMode;\n    },\n    set: function (value) {\n      this.privRecognitionMode = value;\n      this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n      this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"SpeechServiceConfig\", {\n    get: function () {\n      return this.privSpeechServiceConfig;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"recognitionActivityTimeout\", {\n    get: function () {\n      return this.privRecognitionActivityTimeout;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"isContinuousRecognition\", {\n    get: function () {\n      return this.privRecognitionMode !== RecognitionMode.Interactive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"autoDetectSourceLanguages\", {\n    get: function () {\n      return this.parameters.getProperty(Exports_1.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RecognizerConfig.prototype, \"maxRetryCount\", {\n    get: function () {\n      return this.privMaxRetryCount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return RecognizerConfig;\n}();\n\nexports.RecognizerConfig = RecognizerConfig; // The config is serialized and sent as the Speech.Config\n\nvar SpeechServiceConfig =\n/** @class */\nfunction () {\n  function SpeechServiceConfig(context) {\n    var _this = this;\n\n    this.serialize = function () {\n      return JSON.stringify(_this, function (key, value) {\n        if (value && typeof value === \"object\") {\n          var replacement = {};\n\n          for (var k in value) {\n            if (Object.hasOwnProperty.call(value, k)) {\n              replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n            }\n          }\n\n          return replacement;\n        }\n\n        return value;\n      });\n    };\n\n    this.context = context;\n  }\n\n  Object.defineProperty(SpeechServiceConfig.prototype, \"Context\", {\n    get: function () {\n      return this.context;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechServiceConfig.prototype, \"Recognition\", {\n    get: function () {\n      return this.recognition;\n    },\n    set: function (value) {\n      this.recognition = value.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SpeechServiceConfig;\n}();\n\nexports.SpeechServiceConfig = SpeechServiceConfig;\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(os) {\n    this.system = new System();\n    this.os = os;\n  }\n\n  return Context;\n}();\n\nexports.Context = Context;\n\nvar System =\n/** @class */\nfunction () {\n  function System() {\n    // Note: below will be patched for official builds.\n    var SPEECHSDK_CLIENTSDK_VERSION = \"1.17.0\";\n    this.name = \"SpeechSDK\";\n    this.version = SPEECHSDK_CLIENTSDK_VERSION;\n    this.build = \"JavaScript\";\n    this.lang = \"JavaScript\";\n  }\n\n  return System;\n}();\n\nexports.System = System;\n\nvar OS =\n/** @class */\nfunction () {\n  function OS(platform, name, version) {\n    this.platform = platform;\n    this.name = name;\n    this.version = version;\n  }\n\n  return OS;\n}();\n\nexports.OS = OS;\n\nvar Device =\n/** @class */\nfunction () {\n  function Device(manufacturer, model, version) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n    this.version = version;\n  }\n\n  return Device;\n}();\n\nexports.Device = Device;\nvar connectivity;\n\n(function (connectivity) {\n  connectivity[\"Bluetooth\"] = \"Bluetooth\";\n  connectivity[\"Wired\"] = \"Wired\";\n  connectivity[\"WiFi\"] = \"WiFi\";\n  connectivity[\"Cellular\"] = \"Cellular\";\n  connectivity[\"InBuilt\"] = \"InBuilt\";\n  connectivity[\"Unknown\"] = \"Unknown\";\n})(connectivity = exports.connectivity || (exports.connectivity = {}));\n\nvar type;\n\n(function (type) {\n  type[\"Phone\"] = \"Phone\";\n  type[\"Speaker\"] = \"Speaker\";\n  type[\"Car\"] = \"Car\";\n  type[\"Headset\"] = \"Headset\";\n  type[\"Thermostat\"] = \"Thermostat\";\n  type[\"Microphones\"] = \"Microphones\";\n  type[\"Deskphone\"] = \"Deskphone\";\n  type[\"RemoteControl\"] = \"RemoteControl\";\n  type[\"Unknown\"] = \"Unknown\";\n  type[\"File\"] = \"File\";\n  type[\"Stream\"] = \"Stream\";\n})(type = exports.type || (exports.type = {}));","map":{"version":3,"mappings":"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","names":["RecognitionMode","exports","SpeechResultFormat","speechServiceConfig","parameters","Interactive","privSpeechServiceConfig","SpeechServiceConfig","Context","privParameters","privMaxRetryCount","parseInt","getProperty","Object","RecognizerConfig","privRecognitionMode","value","privRecognitionActivityTimeout","Recognition","Exports_1","SpeechServiceConnection_AutoDetectSourceLanguages","undefined","context","JSON","stringify","_this","key","replacement","k","hasOwnProperty","call","charAt","toLowerCase","substring","recognition","os","system","System","SPEECHSDK_CLIENTSDK_VERSION","name","version","build","lang","platform","manufacturer","model","connectivity","type"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n\r\n    constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.17.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n"]},"metadata":{},"sourceType":"script"}