{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Participant = exports.User = void 0;\n\nvar Exports_1 = require(\"../Exports\");\n\nvar User =\n/** @class */\nfunction () {\n  function User(userId) {\n    this.privUserId = userId;\n  }\n\n  Object.defineProperty(User.prototype, \"userId\", {\n    get: function () {\n      return this.privUserId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return User;\n}();\n\nexports.User = User; // tslint:disable-next-line: max-classes-per-file\n\nvar Participant =\n/** @class */\nfunction () {\n  function Participant(id, avatar, displayName, isHost, isMuted, isUsingTts, preferredLanguage, voice) {\n    this.privId = id;\n    this.privAvatar = avatar;\n    this.privDisplayName = displayName;\n    this.privIsHost = isHost;\n    this.privIsMuted = isMuted;\n    this.privIsUsingTts = isUsingTts;\n    this.privPreferredLanguage = preferredLanguage;\n    this.privVoice = voice;\n    this.privProperties = new Exports_1.PropertyCollection();\n  }\n\n  Participant.From = function (id, language, voice) {\n    return new Participant(id, \"\", id, false, false, false, language, voice);\n  };\n\n  Object.defineProperty(Participant.prototype, \"avatar\", {\n    get: function () {\n      return this.privAvatar;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"displayName\", {\n    get: function () {\n      return this.privDisplayName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"id\", {\n    get: function () {\n      return this.privId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"preferredLanguage\", {\n    get: function () {\n      return this.privPreferredLanguage;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"isHost\", {\n    get: function () {\n      return this.privIsHost;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"isMuted\", {\n    get: function () {\n      return this.privIsMuted;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"isUsingTts\", {\n    get: function () {\n      return this.privIsUsingTts;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"voice\", {\n    get: function () {\n      return this.privVoice;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Participant.prototype, \"properties\", {\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Participant;\n}();\n\nexports.Participant = Participant;","map":{"version":3,"mappings":"cAAA;AACA;AACA;;;;;;;AAEA;;AAWA;AAAA;AAAA;AAGI,gBAAYA,MAAZ,EAA0B;AACtB,SAAKC,UAAL,GAAkBD,MAAlB;AACH;;AAEDE,wBAAWC,cAAX,EAAW,QAAX,EAAiB;SAAjB;AACI,aAAO,KAAKF,UAAZ;AACH,KAFgB;qBAAA;;AAAA,GAAjB;AAGJ;AAVA;;AAAaG,oB,CAiDb;;AACA;AAAA;AAAA;AAWI,uBAAYC,EAAZ,EAAwBC,MAAxB,EAAwCC,WAAxC,EAA6DC,MAA7D,EAA8EC,OAA9E,EAAgGC,UAAhG,EAAqHC,iBAArH,EAAgJC,KAAhJ,EAA8J;AAC1J,SAAKC,MAAL,GAAcR,EAAd;AACA,SAAKS,UAAL,GAAkBR,MAAlB;AACA,SAAKS,eAAL,GAAuBR,WAAvB;AACA,SAAKS,UAAL,GAAkBR,MAAlB;AACA,SAAKS,WAAL,GAAmBR,OAAnB;AACA,SAAKS,cAAL,GAAsBR,UAAtB;AACA,SAAKS,qBAAL,GAA6BR,iBAA7B;AACA,SAAKS,SAAL,GAAiBR,KAAjB;AACA,SAAKS,cAAL,GAAsB,IAAIC,4BAAJ,EAAtB;AACH;;AAEaC,qBAAd,UAAmBlB,EAAnB,EAA+BmB,QAA/B,EAAiDZ,KAAjD,EAA8D;AAC1D,WAAO,IAAIW,WAAJ,CAAgBlB,EAAhB,EAAoB,EAApB,EAAwBA,EAAxB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiDmB,QAAjD,EAA2DZ,KAA3D,CAAP;AACH,GAFa;;AAIdV,wBAAWqB,qBAAX,EAAW,QAAX,EAAiB;SAAjB;AACI,aAAO,KAAKT,UAAZ;AACH,KAFgB;qBAAA;;AAAA,GAAjB;AAIAZ,wBAAWqB,qBAAX,EAAW,aAAX,EAAsB;SAAtB;AACI,aAAO,KAAKR,eAAZ;AACH,KAFqB;qBAAA;;AAAA,GAAtB;AAIAb,wBAAWqB,qBAAX,EAAW,IAAX,EAAa;SAAb;AACI,aAAO,KAAKV,MAAZ;AACH,KAFY;qBAAA;;AAAA,GAAb;AAIAX,wBAAWqB,qBAAX,EAAW,mBAAX,EAA4B;SAA5B;AACI,aAAO,KAAKJ,qBAAZ;AACH,KAF2B;qBAAA;;AAAA,GAA5B;AAIAjB,wBAAWqB,qBAAX,EAAW,QAAX,EAAiB;SAAjB;AACI,aAAO,KAAKP,UAAZ;AACH,KAFgB;qBAAA;;AAAA,GAAjB;AAIAd,wBAAWqB,qBAAX,EAAW,SAAX,EAAkB;SAAlB;AACI,aAAO,KAAKN,WAAZ;AACH,KAFiB;qBAAA;;AAAA,GAAlB;AAIAf,wBAAWqB,qBAAX,EAAW,YAAX,EAAqB;SAArB;AACI,aAAO,KAAKL,cAAZ;AACH,KAFoB;qBAAA;;AAAA,GAArB;AAIAhB,wBAAWqB,qBAAX,EAAW,OAAX,EAAgB;SAAhB;AACI,aAAO,KAAKH,SAAZ;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAIAlB,wBAAWqB,qBAAX,EAAW,YAAX,EAAqB;SAArB;AACI,aAAO,KAAKF,cAAZ;AACH,KAFoB;qBAAA;;AAAA,GAArB;AAGJ;AA9DA;;AAAajB","names":["userId","privUserId","Object","User","exports","id","avatar","displayName","isHost","isMuted","isUsingTts","preferredLanguage","voice","privId","privAvatar","privDisplayName","privIsHost","privIsMuted","privIsUsingTts","privPreferredLanguage","privVoice","privProperties","Exports_1","Participant","language"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../Exports\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}