{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLocalizer;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _react = require(\"react\");\n\nvar _getAllLocalizedStrings = _interopRequireDefault(require(\"../localization/getAllLocalizedStrings\"));\n\nvar _useLocalizedGlobalize = _interopRequireDefault(require(\"./internal/useLocalizedGlobalize\"));\n\nvar _useLocalizedStrings = _interopRequireDefault(require(\"./internal/useLocalizedStrings\"));\n\nvar _isObject = _interopRequireDefault(require(\"../utils/isObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar DEFAULT_STRINGS = (0, _getAllLocalizedStrings.default)()['en-US'];\n\nfunction useLocalizer() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      plural = _ref.plural;\n\n  var _useLocalizedGlobaliz = (0, _useLocalizedGlobalize.default)(),\n      _useLocalizedGlobaliz2 = _slicedToArray(_useLocalizedGlobaliz, 1),\n      globalize = _useLocalizedGlobaliz2[0];\n\n  var localizedStrings = (0, _useLocalizedStrings.default)();\n  return (0, _react.useCallback)(function (id) {\n    var stringId = id;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (plural) {\n      var pluralId = id;\n\n      if (!(0, _isObject.default)(pluralId)) {\n        throw new Error('useLocalizer: Plural string must pass \"id\" as a map instead of string.');\n      } else if (typeof pluralId.other !== 'string') {\n        throw new Error('useLocalizer: Plural string must have \"id.other\" of string.');\n      } else if (typeof args[0] !== 'number') {\n        throw new Error('useLocalizer: Plural string must have first argument as a number.');\n      }\n\n      for (var _i2 = 0, _arr2 = ['zero', 'one', 'two', 'few', 'many']; _i2 < _arr2.length; _i2++) {\n        var pluralForm = _arr2[_i2]; // Mitigation through allowlisting.\n        // eslint-disable-next-line security/detect-object-injection\n\n        var type = _typeof(id[pluralForm]);\n\n        if (type !== 'string' && type !== 'undefined') {\n          throw new Error(\"useLocalizer: Plural string must have \\\"id.\".concat(pluralForm, \"\\\" of string or undefined.\"));\n        }\n      }\n\n      var unsupportedPluralForms = Object.keys(id).filter(function (pluralForm) {\n        return !['zero', 'one', 'two', 'few', 'many', 'other'].includes(pluralForm);\n      });\n\n      if (unsupportedPluralForms.length) {\n        throw new Error(\"useLocalizer: Plural string \\\"id\\\" must be either \\\"zero\\\", \\\"one\\\", \\\"two\\\", \\\"few\\\", \\\"many\\\", \\\"other\\\". But not \".concat(unsupportedPluralForms.map(function (pluralForm) {\n          return \"\\\"\".concat(pluralForm, \"\\\"\");\n        }).join(', '), \".\"));\n      }\n\n      stringId = pluralId[globalize.plural(args[0])] || pluralId.other;\n    } else if (typeof id !== 'string') {\n      throw new Error('useLocalizer: \"id\" must be a string.');\n    }\n\n    return Object.entries(args).reduce(function (str, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          index = _ref3[0],\n          arg = _ref3[1];\n\n      return str.replace(\"$\".concat(+index + 1), arg);\n    }, // Mitigation through denylisting.\n    // eslint-disable-next-line security/detect-object-injection\n    (0, _botframeworkWebchatCore.isForbiddenPropertyName)(stringId) ? '' : localizedStrings[stringId] || DEFAULT_STRINGS[stringId] || '');\n  }, [globalize, localizedStrings, plural]);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,uCAAyB,OAAzB,CAAxB;;AAWe,SAASC,YAAT,GAA6D;AAAA,iFAAJ,EAAI;AAAA,MAArCC,MAAqC,QAArCA,MAAqC;;AAC1E,8BAAoB,qCAApB;AAAA;AAAA,MAAOC,SAAP;;AACA,MAAMC,gBAAgB,GAAG,mCAAzB;AAEA,SAAO,wBACL,UAACC,EAAD,EAAqE;AACnE,QAAIC,QAAQ,GAAGD,EAAf;;AADmE,sCAA5CE,IAA4C;AAA5CA,UAA4C,UAA5CA,GAA4CC,eAA5CD;AAA4C;;AAGnE,QAAIL,MAAJ,EAAY;AACV,UAAMO,QAAQ,GAAGJ,EAAjB;;AAEA,UAAI,CAAC,uBAASI,QAAT,CAAL,EAAyB;AACvB,cAAM,IAAIC,KAAJ,CAAU,wEAAV,CAAN;AADF,aAEO,IAAI,OAAOD,QAAQ,CAACE,KAAhB,KAA0B,QAA9B,EAAwC;AAC7C,cAAM,IAAID,KAAJ,CAAU,6DAAV,CAAN;AADK,aAEA,IAAI,OAAOH,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AACtC,cAAM,IAAIG,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAED,gCAAyB,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,CAAzB,6BAAgE;AAA3D,YAAME,UAAU,aAAhB,CAA2D,CAC9D;AACA;;AACA,YAAMC,IAAI,WAAUR,EAAE,CAACO,UAAD,CAAZ,CAAV;;AAEA,YAAIC,IAAI,KAAK,QAATA,IAAqBA,IAAI,KAAK,WAAlC,EAA+C;AAC7C,gBAAM,IAAIH,KAAJ,sDAAuDE,UAAvD,gCAAN;AACD;AACF;;AAED,UAAME,sBAAsB,GAAGC,MAAM,CAACC,IAAPD,CAAYV,EAAZU,EAAgBE,MAAhBF,CAC7B,sBAAU;AAAA,eAAI,CAAC,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,OAAtC,EAA+CG,QAA/C,CAAwDN,UAAxD,CAAL;AADmB,QAA/B;;AAIA,UAAIE,sBAAsB,CAACK,MAA3B,EAAmC;AACjC,cAAM,IAAIT,KAAJ,+HACqGI,sBAAsB,CAC5HM,GADsGN,CAClG,sBAAU;AAAA,6BAAQF,UAAR;AADwF,WAEtGS,IAFsGP,CAEjG,IAFiGA,CADrG,OAAN;AAKD;;AAEDR,cAAQ,GAAGG,QAAQ,CAACN,SAAS,CAACD,MAAVC,CAAiBI,IAAI,CAAC,CAAD,CAArBJ,CAAD,CAARM,IAAuCA,QAAQ,CAACE,KAA3DL;AAjCF,WAkCO,IAAI,OAAOD,EAAP,KAAc,QAAlB,EAA4B;AACjC,YAAM,IAAIK,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,WAAOK,MAAM,CAACO,OAAPP,CAAeR,IAAfQ,EAAqBQ,MAArBR,CACL,UAACS,GAAD;AAAA;AAAA,UAAOC,KAAP;AAAA,UAAcC,GAAd;;AAAA,aAAuBF,GAAG,CAACG,OAAJH,YAAgB,CAACC,KAAD,GAAS,CAAzB,GAA8BC,GAA9BF,CAAvB;AADK,OAEL;AACA;AACA,0DAAwBlB,QAAxB,IAAoC,EAApC,GAAyCF,gBAAgB,CAACE,QAAD,CAAhBF,IAA8BJ,eAAe,CAACM,QAAD,CAA7CF,IAA2D,EAJ/FW,CAAP;AA1CG,KAiDL,CAACZ,SAAD,EAAYC,gBAAZ,EAA8BF,MAA9B,CAjDK,CAAP;AAmDD","names":["DEFAULT_STRINGS","useLocalizer","plural","globalize","localizedStrings","id","stringId","args","arguments","pluralId","Error","other","pluralForm","type","unsupportedPluralForms","Object","keys","filter","includes","length","map","join","entries","reduce","str","index","arg","replace"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-api/lib/src/hooks/useLocalizer.ts"],"sourcesContent":["import { isForbiddenPropertyName } from 'botframework-webchat-core';\nimport { useCallback } from 'react';\n\nimport getAllLocalizedStrings from '../localization/getAllLocalizedStrings';\nimport useLocalizedGlobalize from './internal/useLocalizedGlobalize';\nimport useLocalizedStrings from './internal/useLocalizedStrings';\nimport isObject from '../utils/isObject';\n\nconst DEFAULT_STRINGS = getAllLocalizedStrings()['en-US'];\n\ntype Plural = {\n  zero?: string;\n  one?: string;\n  two?: string;\n  few?: string;\n  many?: string;\n  other: string;\n};\n\nexport default function useLocalizer({ plural }: { plural?: boolean } = {}) {\n  const [globalize] = useLocalizedGlobalize();\n  const localizedStrings = useLocalizedStrings();\n\n  return useCallback(\n    (id: string | Plural, ...args: [(number | string)?, ...string[]]) => {\n      let stringId = id as string;\n\n      if (plural) {\n        const pluralId = id as Plural;\n\n        if (!isObject(pluralId)) {\n          throw new Error('useLocalizer: Plural string must pass \"id\" as a map instead of string.');\n        } else if (typeof pluralId.other !== 'string') {\n          throw new Error('useLocalizer: Plural string must have \"id.other\" of string.');\n        } else if (typeof args[0] !== 'number') {\n          throw new Error('useLocalizer: Plural string must have first argument as a number.');\n        }\n\n        for (const pluralForm of ['zero', 'one', 'two', 'few', 'many']) {\n          // Mitigation through allowlisting.\n          // eslint-disable-next-line security/detect-object-injection\n          const type = typeof id[pluralForm];\n\n          if (type !== 'string' && type !== 'undefined') {\n            throw new Error(`useLocalizer: Plural string must have \"id.${pluralForm}\" of string or undefined.`);\n          }\n        }\n\n        const unsupportedPluralForms = Object.keys(id).filter(\n          pluralForm => !['zero', 'one', 'two', 'few', 'many', 'other'].includes(pluralForm)\n        );\n\n        if (unsupportedPluralForms.length) {\n          throw new Error(\n            `useLocalizer: Plural string \"id\" must be either \"zero\", \"one\", \"two\", \"few\", \"many\", \"other\". But not ${unsupportedPluralForms\n              .map(pluralForm => `\"${pluralForm}\"`)\n              .join(', ')}.`\n          );\n        }\n\n        stringId = pluralId[globalize.plural(args[0])] || pluralId.other;\n      } else if (typeof id !== 'string') {\n        throw new Error('useLocalizer: \"id\" must be a string.');\n      }\n\n      return Object.entries(args).reduce(\n        (str, [index, arg]) => str.replace(`$${+index + 1}`, arg),\n        // Mitigation through denylisting.\n        // eslint-disable-next-line security/detect-object-injection\n        isForbiddenPropertyName(stringId) ? '' : localizedStrings[stringId] || DEFAULT_STRINGS[stringId] || ''\n      );\n    },\n    [globalize, localizedStrings, plural]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}