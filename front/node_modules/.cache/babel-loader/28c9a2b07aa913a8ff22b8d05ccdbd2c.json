{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = patchDialogServiceConnectorInline;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _pDeferEs = _interopRequireDefault(require(\"p-defer-es5\")); // Patching a function to add pre-processing of arguments and post-processing of result.\n\n\nfunction patchFunction(fn, pre, post) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args = pre ? pre.apply(void 0, (0, _toConsumableArray2.default)(args)) : args;\n    var result = fn.apply(void 0, (0, _toConsumableArray2.default)(args));\n    return post ? post(result) : result;\n  };\n}\n\nfunction patchDialogServiceConnectorInline(dialogServiceConnector) {\n  // This function will patch DialogServiceConnector by modifying the object.\n  // The patches are intended to fill-in features to make DialogServiceConnector object works like the full-fledged Recognizer object.\n  var lastRecognitionDeferred;\n  dialogServiceConnector.listenOnceAsync = patchFunction(dialogServiceConnector.listenOnceAsync.bind(dialogServiceConnector), function (resolve, reject) {\n    lastRecognitionDeferred = (0, _pDeferEs.default)();\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    return [patchFunction(resolve, null, function (result) {\n      lastRecognitionDeferred.resolve(result);\n      return result;\n    }), patchFunction(reject, null, function (error) {\n      lastRecognitionDeferred.reject(error);\n      return error;\n    })].concat(args);\n  }); // TODO: [P1] #2664 startContinuousRecognitionAsync is not working yet in Speech SDK 1.15.0.\n  //       We need to polyfill to use listenOnceAsync instead, and disable stopContinuousRecognitionAsync.\n\n  dialogServiceConnector.startContinuousRecognitionAsync = function (resolve, reject) {\n    dialogServiceConnector.listenOnceAsync(function () {// We will resolve the Promise in a setTimeout.\n    }, function (err) {\n      resolve = null;\n      reject && reject(err);\n    });\n    setTimeout(function () {\n      reject = null;\n      resolve && resolve();\n    }, 0);\n  }; // TODO: stopContinuousRecognitionAsync is not working yet.\n  //       We will leave out the implementation as falsy, Web Chat will disable the microphone button after start dictate.\n  //       This will prevent user from aborting speech recognition.\n  // dialogServiceConnector.stopContinuousRecognitionAsync = resolve => {\n  // };\n\n\n  return dialogServiceConnector;\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,+D,CAEA;;;AACA,SAASA,aAAT,CAAuBC,EAAvB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AACpC,SAAO,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS,MAATA,GAASC,eAATD;AAAS;;AAClBA,QAAI,GAAGF,GAAG,GAAGA,GAAG,MAAHA,0CAAOE,IAAP,EAAH,GAAkBA,IAA5BA;AAEA,QAAME,MAAM,GAAGL,EAAE,MAAFA,0CAAMG,IAAN,EAAf;AAEA,WAAOD,IAAI,GAAGA,IAAI,CAACG,MAAD,CAAP,GAAkBA,MAA7B;AALF;AAOD;;AAEc,SAASC,iCAAT,CAA2CC,sBAA3C,EAAmE;AAChF;AACA;AAEA,MAAIC,uBAAJ;AAEAD,wBAAsB,CAACE,eAAvBF,GAAyCR,aAAa,CACpDQ,sBAAsB,CAACE,eAAvBF,CAAuCG,IAAvCH,CAA4CA,sBAA5CA,CADoD,EAEpD,UAACI,OAAD,EAAUC,MAAV,EAA8B;AAC5BJ,2BAAuB,GAAG,wBAA1BA;;AAD4B,uCAATL,IAAS;AAATA,UAAS,WAATA,GAASC,gBAATD;AAAS;;AAG5B,YACEJ,aAAa,CAACY,OAAD,EAAU,IAAV,EAAgB,kBAAU;AACrCH,6BAAuB,CAACG,OAAxBH,CAAgCH,MAAhCG;AAEA,aAAOH,MAAP;AAHW,MADf,EAMEN,aAAa,CAACa,MAAD,EAAS,IAAT,EAAe,iBAAS;AACnCJ,6BAAuB,CAACI,MAAxBJ,CAA+BK,KAA/BL;AAEA,aAAOK,KAAP;AAHW,MANf,SAWKV,IAXL;AALkD,IAAtDI,CANgF,CA2BhF;AACA;;AACAA,wBAAsB,CAACO,+BAAvBP,GAAyD,UAACI,OAAD,EAAUC,MAAV,EAAqB;AAC5EL,0BAAsB,CAACE,eAAvBF,CACE,YAAM,CACJ;AAFJ,OAIE,eAAO;AACLI,aAAO,GAAG,IAAVA;AACAC,YAAM,IAAIA,MAAM,CAACG,GAAD,CAAhBH;AANJ;AAUAI,cAAU,CAAC,YAAM;AACfJ,YAAM,GAAG,IAATA;AACAD,aAAO,IAAIA,OAAO,EAAlBA;AAFQ,OAGP,CAHO,CAAVK;AAXF,IA7BgF,CA8ChF;AACA;AACA;AACA;AACA;;;AAEA,SAAOT,sBAAP;AACD","names":["patchFunction","fn","pre","post","args","arguments","result","patchDialogServiceConnectorInline","dialogServiceConnector","lastRecognitionDeferred","listenOnceAsync","bind","resolve","reject","error","startContinuousRecognitionAsync","err","setTimeout"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-directlinespeech-sdk/lib/src/patchDialogServiceConnectorInline.js"],"sourcesContent":["import createDeferred from 'p-defer-es5';\n\n// Patching a function to add pre-processing of arguments and post-processing of result.\nfunction patchFunction(fn, pre, post) {\n  return (...args) => {\n    args = pre ? pre(...args) : args;\n\n    const result = fn(...args);\n\n    return post ? post(result) : result;\n  };\n}\n\nexport default function patchDialogServiceConnectorInline(dialogServiceConnector) {\n  // This function will patch DialogServiceConnector by modifying the object.\n  // The patches are intended to fill-in features to make DialogServiceConnector object works like the full-fledged Recognizer object.\n\n  let lastRecognitionDeferred;\n\n  dialogServiceConnector.listenOnceAsync = patchFunction(\n    dialogServiceConnector.listenOnceAsync.bind(dialogServiceConnector),\n    (resolve, reject, ...args) => {\n      lastRecognitionDeferred = createDeferred();\n\n      return [\n        patchFunction(resolve, null, result => {\n          lastRecognitionDeferred.resolve(result);\n\n          return result;\n        }),\n        patchFunction(reject, null, error => {\n          lastRecognitionDeferred.reject(error);\n\n          return error;\n        }),\n        ...args\n      ];\n    }\n  );\n\n  // TODO: [P1] #2664 startContinuousRecognitionAsync is not working yet in Speech SDK 1.15.0.\n  //       We need to polyfill to use listenOnceAsync instead, and disable stopContinuousRecognitionAsync.\n  dialogServiceConnector.startContinuousRecognitionAsync = (resolve, reject) => {\n    dialogServiceConnector.listenOnceAsync(\n      () => {\n        // We will resolve the Promise in a setTimeout.\n      },\n      err => {\n        resolve = null;\n        reject && reject(err);\n      }\n    );\n\n    setTimeout(() => {\n      reject = null;\n      resolve && resolve();\n    }, 0);\n  };\n\n  // TODO: stopContinuousRecognitionAsync is not working yet.\n  //       We will leave out the implementation as falsy, Web Chat will disable the microphone button after start dictate.\n  //       This will prevent user from aborting speech recognition.\n  // dialogServiceConnector.stopContinuousRecognitionAsync = resolve => {\n  // };\n\n  return dialogServiceConnector;\n}\n"]},"metadata":{},"sourceType":"script"}