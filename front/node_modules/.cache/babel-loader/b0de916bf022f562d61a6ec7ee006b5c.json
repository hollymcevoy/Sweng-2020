{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CognitiveSubscriptionKeyAuthentication = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar IAuthentication_1 = require(\"./IAuthentication\");\n/**\n * @class\n */\n\n\nvar CognitiveSubscriptionKeyAuthentication =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n   * @constructor\n   * @param {string} subscriptionKey - The subscription key\n   */\n  function CognitiveSubscriptionKeyAuthentication(subscriptionKey) {\n    var _this = this;\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n\n\n    this.fetch = function (authFetchEventId) {\n      return Promise.resolve(_this.privAuthInfo);\n    };\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n\n\n    this.fetchOnExpiry = function (authFetchEventId) {\n      return Promise.resolve(_this.privAuthInfo);\n    };\n\n    if (!subscriptionKey) {\n      throw new Exports_1.ArgumentNullError(\"subscriptionKey\");\n    }\n\n    this.privAuthInfo = new IAuthentication_1.AuthInfo(HeaderNames_1.HeaderNames.AuthKey, subscriptionKey);\n  }\n\n  return CognitiveSubscriptionKeyAuthentication;\n}();\n\nexports.CognitiveSubscriptionKeyAuthentication = CognitiveSubscriptionKeyAuthentication;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AAGA;;AACA;AAKA;;;;;AAGA;AAAA;AAAA;AAGI;;;;;AAKA,kDAAYA,eAAZ,EAAmC;AAAnC;AAQA;;;;;;;;;AAOO,iBAAQ,UAACC,gBAAD,EAAyB;AACpC,aAAOC,OAAO,CAACC,OAAR,CAAgBC,KAAI,CAACC,YAArB,CAAP;AACH,KAFM;AAIP;;;;;;;;;AAOO,yBAAgB,UAACJ,gBAAD,EAAyB;AAC5C,aAAOC,OAAO,CAACC,OAAR,CAAgBC,KAAI,CAACC,YAArB,CAAP;AACH,KAFM;;AAzBH,QAAI,CAACL,eAAL,EAAsB;AAClB,YAAM,IAAIM,2BAAJ,CAAsB,iBAAtB,CAAN;AACH;;AAED,SAAKD,YAAL,GAAoB,IAAIE,0BAAJ,CAAaC,0BAAYC,OAAzB,EAAkCT,eAAlC,CAApB;AACH;;AAuBL;AArCA;;AAAaU","names":["subscriptionKey","authFetchEventId","Promise","resolve","_this","privAuthInfo","Exports_1","IAuthentication_1","HeaderNames_1","AuthKey","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}