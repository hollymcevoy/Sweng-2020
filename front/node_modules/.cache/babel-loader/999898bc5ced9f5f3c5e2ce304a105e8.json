{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar context = /*#__PURE__*/(0, _react.createContext)(undefined);\ncontext.displayName = 'WebChatAPIContext';\nvar _default = context;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAqEA,IAAMA,OAAO,gBAAG,0BAAiCC,SAAjC,CAAhB;AAEAD,OAAO,CAACE,WAARF,GAAsB,mBAAtBA;eAEeA","names":["context","undefined","displayName"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-api/lib/src/hooks/internal/WebChatAPIContext.ts"],"sourcesContent":["import { createContext } from 'react';\nimport { DirectLineActivity, DirectLineJSBotConnection } from 'botframework-webchat-core';\n\nimport { AttachmentForScreenReaderComponentFactory } from '../../types/AttachmentForScreenReaderMiddleware';\nimport { AvatarComponentFactory } from '../../types/AvatarMiddleware';\nimport { GroupActivities } from '../../types/GroupActivitiesMiddleware';\nimport { LegacyActivityRenderer } from '../../types/ActivityMiddleware';\nimport { Observable } from 'redux';\nimport { PerformCardAction } from '../../types/CardActionMiddleware';\nimport { RenderActivityStatus } from '../../types/ActivityStatusMiddleware';\nimport { RenderAttachment } from '../../types/AttachmentMiddleware';\nimport { RenderToast } from '../../types/ToastMiddleware';\nimport { ScrollToEndButtonComponentFactory } from '../../types/ScrollToEndButtonMiddleware';\nimport { StrictStyleOptions } from '../../StyleOptions';\nimport LocalizedStrings from '../../types/LocalizedStrings';\nimport PrecompiledGlobalize from '../../types/PrecompiledGlobalize';\nimport TelemetryMeasurementEvent from '../../types/TelemetryMeasurementEvent';\n\ntype WebChatAPIContext = {\n  activityRenderer?: LegacyActivityRenderer;\n  activityStatusRenderer?: RenderActivityStatus;\n  attachmentForScreenReaderRenderer?: AttachmentForScreenReaderComponentFactory;\n  attachmentRenderer?: RenderAttachment;\n  avatarRenderer?: AvatarComponentFactory;\n  clearSuggestedActions?: () => void;\n  dir?: string;\n  directLine?: DirectLineJSBotConnection;\n  disabled?: boolean;\n  dismissNotification?: (id: string) => void;\n  downscaleImageToDataURL?: (blob: Blob, maxWidth: number, maxHeight: number, type: string, quality: number) => string;\n  emitTypingIndicator?: () => void;\n  grammars?: any;\n  groupActivities?: GroupActivities;\n  internalErrorBoxClass?: React.Component | Function;\n  language?: string;\n  localizedGlobalizeState?: PrecompiledGlobalize[];\n  localizedStrings?: { [language: string]: LocalizedStrings };\n  markActivity?: ({ id: string }, name: string, value?: any) => void;\n  onCardAction?: PerformCardAction;\n  onTelemetry?: (event: TelemetryMeasurementEvent) => void;\n  postActivity?: (activity: DirectLineActivity) => Observable<string>;\n  renderMarkdown?: (markdown: string, { markdownRespectCRLF: boolean }, { externalLinkAlt: string }) => string;\n  scrollToEndButtonRenderer?: ScrollToEndButtonComponentFactory;\n  selectVoice?: (voices: typeof window.SpeechSynthesisVoice[], activity: DirectLineActivity) => void;\n  sendEvent?: (name: string, value: any) => void;\n  sendFiles?: (files: File[]) => void;\n  sendMessage?: (text: string, method?: string, { channelData }?: { channelData?: any }) => void;\n  sendMessageBack?: (value: any, text?: string, displayText?: string) => void;\n  sendPostBack?: (value?: any) => void;\n  sendTypingIndicator?: boolean;\n  setDictateInterims?: (interims: string[]) => void;\n  setDictateState?: (dictateState: number) => void;\n  setNotification?: (notification: Notification) => void;\n  setSendBox?: (value: string) => void;\n  setSendTimeout?: (timeout: number) => void;\n  startDictate?: () => void;\n  startSpeakingActivity?: () => void;\n  stopDictate?: () => void;\n  stopSpeakingActivity?: () => void;\n  styleOptions?: StrictStyleOptions;\n  submitSendBox?: (method?: string, { channelData }?: { channelData: any }) => void;\n  telemetryDimensionsRef?: React.Ref<any>;\n  toastRenderer?: RenderToast;\n  trackDimension?: (name: string, data: any) => void;\n  typingIndicatorRenderer?: any; // TODO\n  userID?: string;\n  username?: string;\n};\n\nconst context = createContext<WebChatAPIContext>(undefined);\n\ncontext.displayName = 'WebChatAPIContext';\n\nexport default context;\n"]},"metadata":{},"sourceType":"script"}