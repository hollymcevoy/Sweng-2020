{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventSource = void 0;\n\nvar Error_1 = require(\"./Error\");\n\nvar Guid_1 = require(\"./Guid\");\n\nvar EventSource =\n/** @class */\nfunction () {\n  function EventSource(metadata) {\n    var _this = this;\n\n    this.privEventListeners = {};\n    this.privIsDisposed = false;\n\n    this.onEvent = function (event) {\n      if (_this.isDisposed()) {\n        throw new Error_1.ObjectDisposedError(\"EventSource\");\n      }\n\n      if (_this.metadata) {\n        for (var paramName in _this.metadata) {\n          if (paramName) {\n            if (event.metadata) {\n              if (!event.metadata[paramName]) {\n                event.metadata[paramName] = _this.metadata[paramName];\n              }\n            }\n          }\n        }\n      }\n\n      for (var eventId in _this.privEventListeners) {\n        if (eventId && _this.privEventListeners[eventId]) {\n          _this.privEventListeners[eventId](event);\n        }\n      }\n    };\n\n    this.attach = function (onEventCallback) {\n      var id = Guid_1.createNoDashGuid();\n      _this.privEventListeners[id] = onEventCallback;\n      return {\n        detach: function () {\n          delete _this.privEventListeners[id];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.attachListener = function (listener) {\n      return _this.attach(listener.onEvent);\n    };\n\n    this.isDisposed = function () {\n      return _this.privIsDisposed;\n    };\n\n    this.dispose = function () {\n      _this.privEventListeners = null;\n      _this.privIsDisposed = true;\n    };\n\n    this.privMetadata = metadata;\n  }\n\n  Object.defineProperty(EventSource.prototype, \"metadata\", {\n    get: function () {\n      return this.privMetadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return EventSource;\n}();\n\nexports.EventSource = EventSource;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AACA;;AAMA;AAAA;AAAA;AAKI,uBAAYA,QAAZ,EAAgD;AAAhD;;AAJQ,8BAAiE,EAAjE;AAEA,0BAA0B,KAA1B;;AAMD,mBAAU,UAACC,KAAD,EAAc;AAC3B,UAAIC,KAAI,CAACC,UAAL,EAAJ,EAAuB;AACnB,cAAO,IAAIC,2BAAJ,CAAwB,aAAxB,CAAP;AACH;;AAED,UAAIF,KAAI,CAACF,QAAT,EAAmB;AACf,aAAK,IAAMK,SAAX,IAAwBH,KAAI,CAACF,QAA7B,EAAuC;AACnC,cAAIK,SAAJ,EAAe;AACX,gBAAIJ,KAAK,CAACD,QAAV,EAAoB;AAChB,kBAAI,CAACC,KAAK,CAACD,QAAN,CAAeK,SAAf,CAAL,EAAgC;AAC5BJ,qBAAK,CAACD,QAAN,CAAeK,SAAf,IAA4BH,KAAI,CAACF,QAAL,CAAcK,SAAd,CAA5B;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,WAAK,IAAMC,OAAX,IAAsBJ,KAAI,CAACK,kBAA3B,EAA+C;AAC3C,YAAID,OAAO,IAAIJ,KAAI,CAACK,kBAAL,CAAwBD,OAAxB,CAAf,EAAiD;AAC7CJ,eAAI,CAACK,kBAAL,CAAwBD,OAAxB,EAAiCL,KAAjC;AACH;AACJ;AACJ,KAtBM;;AAwBA,kBAAS,UAACO,eAAD,EAAyC;AACrD,UAAMC,EAAE,GAAGC,yBAAX;AACAR,WAAI,CAACK,kBAAL,CAAwBE,EAAxB,IAA8BD,eAA9B;AACA,aAAO;AACHG,cAAM,EAAE;AACJ,iBAAOT,KAAI,CAACK,kBAAL,CAAwBE,EAAxB,CAAP;AACA,iBAAOG,OAAO,CAACC,OAAR,EAAP;AACH;AAJE,OAAP;AAMH,KATM;;AAWA,0BAAiB,UAACC,QAAD,EAAiC;AACrD,aAAOZ,KAAI,CAACa,MAAL,CAAYD,QAAQ,CAACE,OAArB,CAAP;AACH,KAFM;;AAIA,sBAAa;AAChB,aAAOd,KAAI,CAACe,cAAZ;AACH,KAFM;;AAIA,mBAAU;AACbf,WAAI,CAACK,kBAAL,GAA0B,IAA1B;AACAL,WAAI,CAACe,cAAL,GAAsB,IAAtB;AACH,KAHM;;AA9CH,SAAKC,YAAL,GAAoBlB,QAApB;AACH;;AAkDDmB,wBAAWC,qBAAX,EAAW,UAAX,EAAmB;SAAnB;AACI,aAAO,KAAKF,YAAZ;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAGJ;AA5DA;;AAAaG","names":["metadata","event","_this","isDisposed","Error_1","paramName","eventId","privEventListeners","onEventCallback","id","Guid_1","detach","Promise","resolve","listener","attach","onEvent","privIsDisposed","privMetadata","Object","EventSource","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent = (event: TEvent): void => {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.attach(listener.onEvent);\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}