{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslationConnectionFactory = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar TranslationConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(TranslationConnectionFactory, _super);\n\n  function TranslationConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.create = function (config, authInfo, connectionId) {\n      var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n      if (!endpoint) {\n        var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, undefined);\n        var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n        var host = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\n        endpoint = host + \"/speech/translation/cognitiveservices/v1\";\n      }\n\n      var queryParams = {\n        from: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage),\n        to: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationToLanguages)\n      };\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      _this.setUrlParameter(Exports_2.PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames_1.QueryParameterNames.StableTranslation, config, queryParams, endpoint);\n\n      var voiceName = \"voice\";\n      var featureName = \"features\";\n\n      if (config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n        queryParams[voiceName] = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_TranslationVoice);\n        queryParams[featureName] = \"texttospeech\";\n      }\n\n      var headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames_1.HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Url, endpoint);\n      var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n\n    return _this;\n  }\n\n  return TranslationConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.TranslationConnectionFactory = TranslationConnectionFactory;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAQA;;AAGA;;AAGA;;AAMA;;AACA;;AAEA;AAAA;AAAA;AAAkDA;;AAAlD;AAAA;;AAEWC,mBAAS,UACZC,MADY,EAEZC,QAFY,EAGZC,YAHY,EAGS;AAErB,UAAIC,QAAQ,GAAWH,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWC,gCAAzC,EAA2EC,SAA3E,CAAvB;;AACA,UAAI,CAACL,QAAL,EAAe;AACX,YAAMM,MAAM,GAAWT,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWI,8BAAzC,EAAyEF,SAAzE,CAAvB;AACA,YAAMG,UAAU,GAAYF,MAAM,IAAIA,MAAM,CAACG,WAAP,GAAqBC,UAArB,CAAgC,OAAhC,CAAX,GAAuD,WAAvD,GAAqE,gBAAhG;AACA,YAAMC,IAAI,GAAWd,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWS,4BAAzC,EAAuE,WAAWN,MAAX,GAAoB,aAApB,GAAoCE,UAA3G,CAArB;AACAR,gBAAQ,GAAGW,IAAI,GAAG,0CAAlB;AACH;;AAED,UAAME,WAAW,GAA8B;AAC3CC,YAAI,EAAEjB,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWY,oCAAzC,CADqC;AAE3CC,UAAE,EAAEnB,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWc,8CAAzC;AAFuC,OAA/C;;AAKArB,WAAI,CAACsB,kBAAL,CAAwBrB,MAAxB,EAAgCgB,WAAhC,EAA6Cb,QAA7C;;AACAJ,WAAI,CAACuB,eAAL,CACIhB,qBAAWiB,2DADf,EAEIC,0CAAoBC,iBAFxB,EAGIzB,MAHJ,EAIIgB,WAJJ,EAKIb,QALJ;;AAQA,UAAMuB,SAAS,GAAW,OAA1B;AACA,UAAMC,WAAW,GAAW,UAA5B;;AAEA,UAAI3B,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWsB,wCAAzC,EAAmFpB,SAAnF,MAAkGA,SAAtG,EAAiH;AAC7GQ,mBAAW,CAACU,SAAD,CAAX,GAAyB1B,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWsB,wCAAzC,CAAzB;AACAZ,mBAAW,CAACW,WAAD,CAAX,GAA2B,cAA3B;AACH;;AAED,UAAME,OAAO,GAA8B,EAA3C;;AACA,UAAI5B,QAAQ,CAAC6B,KAAT,KAAmBtB,SAAnB,IAAgCP,QAAQ,CAAC6B,KAAT,KAAmB,EAAvD,EAA2D;AACvDD,eAAO,CAAC5B,QAAQ,CAAC8B,UAAV,CAAP,GAA+B9B,QAAQ,CAAC6B,KAAxC;AACH;;AACDD,aAAO,CAACG,0BAAYC,YAAb,CAAP,GAAoC/B,YAApC;AAEAF,YAAM,CAACI,UAAP,CAAkB8B,WAAlB,CAA8B5B,qBAAW6B,2BAAzC,EAAsEhC,QAAtE;AAEA,UAAMiC,iBAAiB,GAAYpC,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8B,mCAA9B,EAAmE,OAAnE,MAAgF,MAAnH;AACA,aAAO,IAAIgC,6BAAJ,CAAwBlC,QAAxB,EAAkCa,WAAlC,EAA+Ca,OAA/C,EAAwD,IAAIS,mCAAJ,EAAxD,EAAyFD,oBAAUE,oBAAV,CAA+BvC,MAA/B,CAAzF,EAAiIoC,iBAAjI,EAAoJlC,YAApJ,CAAP;AACH,KA7CM;;;AA8CV;;AAAD;AAAC,CAhDD,CAAkDsC,6CAAlD;;AAAaC","names":["__extends","_this","config","authInfo","connectionId","endpoint","parameters","getProperty","Exports_2","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","toLowerCase","startsWith","host","SpeechServiceConnection_Host","queryParams","from","SpeechServiceConnection_RecoLanguage","to","SpeechServiceConnection_TranslationToLanguages","setCommonUrlParams","setUrlParameter","SpeechServiceResponse_TranslationRequestStablePartialResult","QueryParameterNames_1","StableTranslation","voiceName","featureName","SpeechServiceConnection_TranslationVoice","headers","token","headerName","HeaderNames_1","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","Exports_1","Exports_3","fromRecognizerConfig","ConnectionFactoryBase_1","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpoint\r\n        );\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}