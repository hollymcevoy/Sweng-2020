{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutoDetectSourceLanguageConfig = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Language auto detect configuration.\n * @class AutoDetectSourceLanguageConfig\n * Added in version 1.13.0.\n */\n\n\nvar AutoDetectSourceLanguageConfig =\n/** @class */\nfunction () {\n  function AutoDetectSourceLanguageConfig() {\n    this.privProperties = new Exports_2.PropertyCollection();\n  }\n  /**\n   * @member AutoDetectSourceLanguageConfig.fromOpenRange\n   * @function\n   * @public\n   * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\n   * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\n   */\n\n\n  AutoDetectSourceLanguageConfig.fromOpenRange = function () {\n    var config = new AutoDetectSourceLanguageConfig();\n    config.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, Exports_1.AutoDetectSourceLanguagesOpenRangeOptionName);\n    return config;\n  };\n  /**\n   * @member AutoDetectSourceLanguageConfig.fromLanguages\n   * @function\n   * @public\n   * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\n   */\n\n\n  AutoDetectSourceLanguageConfig.fromLanguages = function (languages) {\n    Contracts_1.Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\n    var config = new AutoDetectSourceLanguageConfig();\n    config.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\n    return config;\n  };\n  /**\n   * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\n   * @function\n   * @public\n   * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\n   */\n\n\n  AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs = function (configs) {\n    if (configs.length < 1) {\n      throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\n    }\n\n    var autoConfig = new AutoDetectSourceLanguageConfig();\n    var langs = [];\n    configs.forEach(function (config) {\n      langs.push(config.language);\n\n      if (config.endpointId !== undefined && config.endpointId !== \"\") {\n        var customProperty = config.language + Exports_2.PropertyId.SpeechServiceConnection_EndpointId.toString();\n        autoConfig.properties.setProperty(customProperty, config.endpointId);\n      }\n    });\n    autoConfig.properties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\n    return autoConfig;\n  };\n\n  Object.defineProperty(AutoDetectSourceLanguageConfig.prototype, \"properties\", {\n    /**\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\n     * @function\n     * @public\n     * @return {PropertyCollection} Properties of the config.\n     * @summary Gets an auto detected language config properties\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AutoDetectSourceLanguageConfig;\n}();\n\nexports.AutoDetectSourceLanguageConfig = AutoDetectSourceLanguageConfig;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AACA;;AACA;AAMA;;;;;;;AAKA;AAAA;AAAA;AAGI;AACI,SAAKA,cAAL,GAAsB,IAAIC,4BAAJ,EAAtB;AACH;AAED;;;;;;;;;;;AAScC,iDAAd;AACI,QAAMC,MAAM,GAAG,IAAID,8BAAJ,EAAf;AACAC,UAAM,CAACC,UAAP,CAAkBC,WAAlB,CAA8BJ,qBAAWK,iDAAzC,EAA4FC,sDAA5F;AACA,WAAOJ,MAAP;AACH,GAJa;AAMd;;;;;;;;;;AAQcD,iDAAd,UAA4BM,SAA5B,EAA+C;AAC3CC,0BAAUC,6BAAV,CAAwCF,SAAxC,EAAmD,WAAnD;AACA,QAAML,MAAM,GAAG,IAAID,8BAAJ,EAAf;AACAC,UAAM,CAACC,UAAP,CAAkBC,WAAlB,CAA8BJ,qBAAWK,iDAAzC,EAA4FE,SAAS,CAACG,IAAV,EAA5F;AACA,WAAOR,MAAP;AACH,GALa;AAOd;;;;;;;;;;AAQcD,6DAAd,UAAwCU,OAAxC,EAAuE;AACnE,QAAIA,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACpB,YAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,QAAMC,UAAU,GAAG,IAAIb,8BAAJ,EAAnB;AACA,QAAMc,KAAK,GAAa,EAAxB;AACAJ,WAAO,CAACK,OAAR,CAAgB,UAACd,MAAD,EAA6B;AACzCa,WAAK,CAACE,IAAN,CAAWf,MAAM,CAACgB,QAAlB;;AACA,UAAIhB,MAAM,CAACiB,UAAP,KAAsBC,SAAtB,IAAmClB,MAAM,CAACiB,UAAP,KAAsB,EAA7D,EAAiE;AAC7D,YAAME,cAAc,GAAGnB,MAAM,CAACgB,QAAP,GAAkBlB,qBAAWsB,kCAAX,CAA8CC,QAA9C,EAAzC;AACAT,kBAAU,CAACX,UAAX,CAAsBC,WAAtB,CAAkCiB,cAAlC,EAAkDnB,MAAM,CAACiB,UAAzD;AACH;AACJ,KAND;AAOAL,cAAU,CAACX,UAAX,CAAsBC,WAAtB,CAAkCJ,qBAAWK,iDAA7C,EAAgGU,KAAK,CAACL,IAAN,EAAhG;AAEA,WAAOI,UAAP;AACH,GAhBa;;AAyBdU,wBAAWvB,wCAAX,EAAW,YAAX,EAAqB;AAPrB;;;;;;;SAOA;AACI,aAAO,KAAKF,cAAZ;AACH,KAFoB;qBAAA;;AAAA,GAArB;AAIJ;AA1EA;;AAAa0B","names":["privProperties","Exports_2","AutoDetectSourceLanguageConfig","config","properties","setProperty","SpeechServiceConnection_AutoDetectSourceLanguages","Exports_1","languages","Contracts_1","throwIfArrayEmptyOrWhitespace","join","configs","length","Error","autoConfig","langs","forEach","push","language","endpointId","undefined","customProperty","SpeechServiceConnection_EndpointId","toString","Object","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig) => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}