{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SynthesisAdapterBase = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar SpeechConnectionMessage_Internal_1 = require(\"./SpeechConnectionMessage.Internal\");\n\nvar SynthesisAdapterBase =\n/** @class */\nfunction () {\n  function SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, speechSynthesizer, audioDestination) {\n    var _this = this;\n\n    this.speakOverride = undefined;\n    this.receiveMessageOverride = undefined;\n    this.connectImplOverride = undefined;\n    this.configConnectionOverride = undefined;\n\n    this.sendSynthesisContext = function (connection) {\n      var synthesisContextJson = _this.synthesisContext.toJSON();\n\n      if (synthesisContextJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"synthesis.context\", _this.privSynthesisTurn.requestId, \"application/json\", synthesisContextJson));\n      }\n\n      return;\n    };\n\n    this.sendSpeechServiceConfig = function (connection, SpeechServiceConfigJson) {\n      if (SpeechServiceConfigJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"speech.config\", _this.privSynthesisTurn.requestId, \"application/json\", SpeechServiceConfigJson));\n      }\n    };\n\n    this.sendSsmlMessage = function (connection, ssml, requestId) {\n      return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"ssml\", requestId, \"application/ssml+xml\", ssml));\n    };\n\n    if (!authentication) {\n      throw new Exports_1.ArgumentNullError(\"authentication\");\n    }\n\n    if (!connectionFactory) {\n      throw new Exports_1.ArgumentNullError(\"connectionFactory\");\n    }\n\n    if (!synthesizerConfig) {\n      throw new Exports_1.ArgumentNullError(\"synthesizerConfig\");\n    }\n\n    this.privAuthentication = authentication;\n    this.privConnectionFactory = connectionFactory;\n    this.privSynthesizerConfig = synthesizerConfig;\n    this.privIsDisposed = false;\n    this.privSpeechSynthesizer = speechSynthesizer;\n    this.privSessionAudioDestination = audioDestination;\n    this.privSynthesisTurn = new Exports_3.SynthesisTurn();\n    this.privConnectionEvents = new Exports_1.EventSource();\n    this.privServiceEvents = new Exports_1.EventSource();\n    this.privSynthesisContext = new Exports_3.SynthesisContext(this.privSpeechSynthesizer);\n    this.privAgentConfig = new Exports_3.AgentConfig();\n    this.connectionEvents.attach(function (connectionEvent) {\n      if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        var connectionClosedEvent = connectionEvent;\n\n        if (connectionClosedEvent.statusCode !== 1000) {\n          _this.cancelSynthesisLocal(Exports_2.CancellationReason.Error, connectionClosedEvent.statusCode === 1007 ? Exports_2.CancellationErrorCode.BadRequestParameters : Exports_2.CancellationErrorCode.ConnectionFailure, connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\n        }\n      }\n    });\n  }\n\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"synthesisContext\", {\n    get: function () {\n      return this.privSynthesisContext;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"agentConfig\", {\n    get: function () {\n      return this.privAgentConfig;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"connectionEvents\", {\n    get: function () {\n      return this.privConnectionEvents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"serviceEvents\", {\n    get: function () {\n      return this.privServiceEvents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"activityTemplate\", {\n    get: function () {\n      return this.privActivityTemplate;\n    },\n    set: function (messagePayload) {\n      this.privActivityTemplate = messagePayload;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SynthesisAdapterBase.prototype, \"audioOutputFormat\", {\n    set: function (format) {\n      this.privAudioOutputFormat = format;\n      this.privSynthesisTurn.audioOutputFormat = format;\n\n      if (this.privSessionAudioDestination !== undefined) {\n        this.privSessionAudioDestination.format = format;\n      }\n\n      if (this.synthesisContext !== undefined) {\n        this.synthesisContext.audioOutputFormat = format;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SynthesisAdapterBase.addHeader = function (audio, format) {\n    if (!format.hasHeader) {\n      return audio;\n    }\n\n    format.updateHeader(audio.byteLength);\n    var tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\n    tmp.set(new Uint8Array(format.header), 0);\n    tmp.set(new Uint8Array(audio), format.header.byteLength);\n    return tmp.buffer;\n  };\n\n  SynthesisAdapterBase.prototype.isDisposed = function () {\n    return this.privIsDisposed;\n  };\n\n  SynthesisAdapterBase.prototype.dispose = function (reason) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.privIsDisposed = true;\n\n            if (this.privSessionAudioDestination !== undefined) {\n              this.privSessionAudioDestination.close();\n            }\n\n            if (!this.privConnectionConfigurationPromise) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.privConnectionConfigurationPromise];\n\n          case 1:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , connection.dispose(reason)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.sendNetworkMessage = function (path, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var type, contentType, connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            type = typeof payload === \"string\" ? Exports_1.MessageType.Text : Exports_1.MessageType.Binary;\n            contentType = typeof payload === \"string\" ? \"application/json\" : \"\";\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _a.sent();\n            return [2\n            /*return*/\n            , connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload))];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.Speak = function (text, isSSML, requestId, successCallback, errorCallBack, audioDestination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ssml, connection, synthesisStartEventArgs, messageRetrievalPromise, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (isSSML) {\n              ssml = text;\n            } else {\n              ssml = this.privSpeechSynthesizer.buildSsml(text);\n            }\n\n            if (this.speakOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.speakOverride(ssml, requestId, successCallback, errorCallBack)];\n            }\n\n            this.privSuccessCallback = successCallback;\n            this.privErrorCallback = errorCallBack;\n            this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 3:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , this.sendSynthesisContext(connection)];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.sendSsmlMessage(connection, ssml, requestId)];\n\n          case 5:\n            _a.sent();\n\n            synthesisStartEventArgs = new Exports_2.SpeechSynthesisEventArgs(new Exports_2.SpeechSynthesisResult(requestId, Exports_2.ResultReason.SynthesizingAudioStarted));\n\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\n              this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\n            }\n\n            messageRetrievalPromise = this.receiveMessage();\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_1 = _a.sent();\n            this.cancelSynthesisLocal(Exports_2.CancellationReason.Error, Exports_2.CancellationErrorCode.ConnectionFailure, e_1);\n            return [2\n            /*return*/\n            , Promise.reject(e_1)];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Cancels synthesis.\n\n\n  SynthesisAdapterBase.prototype.cancelSynthesis = function (requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_2.PropertyCollection();\n    properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);\n    var result = new Exports_2.SpeechSynthesisResult(requestId, Exports_2.ResultReason.Canceled, undefined, error, properties);\n\n    if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\n      var cancelEvent = new Exports_2.SpeechSynthesisEventArgs(result);\n\n      try {\n        this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      try {\n        this.privSuccessCallback(result);\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }; // Cancels synthesis.\n\n\n  SynthesisAdapterBase.prototype.cancelSynthesisLocal = function (cancellationReason, errorCode, error) {\n    if (!!this.privSynthesisTurn.isSynthesizing) {\n      this.privSynthesisTurn.onStopSynthesizing();\n      this.cancelSynthesis(this.privSynthesisTurn.requestId, cancellationReason, errorCode, error);\n    }\n  };\n\n  SynthesisAdapterBase.prototype.processTypeSpecificMessages = function (connectionMessage, successCallback, errorCallBack) {\n    return true;\n  };\n\n  SynthesisAdapterBase.prototype.receiveMessage = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection, message, connectionMessage, _a, audioWithHeader, ev, metadataList, _i, metadataList_1, metadata, wordBoundaryEventArgs, bookmarkEventArgs, visemeEventArgs, result, audioBuffer, error_1, e_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 14,, 15]);\n\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _b.sent();\n            return [4\n            /*yield*/\n            , connection.read()];\n\n          case 2:\n            message = _b.sent();\n\n            if (this.receiveMessageOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.receiveMessageOverride()];\n            }\n\n            if (this.privIsDisposed) {\n              // We're done.\n              return [2\n              /*return*/\n              ];\n            } // indicates we are draining the queue and it came with no message;\n\n\n            if (!message) {\n              if (!this.privSynthesisTurn.isSynthesizing) {\n                return [2\n                /*return*/\n                ];\n              } else {\n                return [2\n                /*return*/\n                , this.receiveMessage()];\n              }\n            }\n\n            this.privServiceHasSentMessage = true;\n            connectionMessage = SpeechConnectionMessage_Internal_1.SpeechConnectionMessage.fromConnectionMessage(message);\n            if (!(connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase())) return [3\n            /*break*/\n            , 13];\n            _a = connectionMessage.path.toLowerCase();\n\n            switch (_a) {\n              case \"turn.start\":\n                return [3\n                /*break*/\n                , 3];\n\n              case \"response\":\n                return [3\n                /*break*/\n                , 4];\n\n              case \"audio\":\n                return [3\n                /*break*/\n                , 5];\n\n              case \"audio.metadata\":\n                return [3\n                /*break*/\n                , 6];\n\n              case \"turn.end\":\n                return [3\n                /*break*/\n                , 7];\n            }\n\n            return [3\n            /*break*/\n            , 12];\n\n          case 3:\n            this.privSynthesisTurn.onServiceTurnStartResponse();\n            return [3\n            /*break*/\n            , 13];\n\n          case 4:\n            this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\n            return [3\n            /*break*/\n            , 13];\n\n          case 5:\n            if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase() && !!connectionMessage.binaryBody) {\n              this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\n\n              if (!!this.privSpeechSynthesizer.synthesizing) {\n                try {\n                  audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\n                  ev = new Exports_2.SpeechSynthesisEventArgs(new Exports_2.SpeechSynthesisResult(this.privSynthesisTurn.requestId, Exports_2.ResultReason.SynthesizingAudio, audioWithHeader));\n                  this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n\n              if (this.privSessionAudioDestination !== undefined) {\n                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\n              }\n            }\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 6:\n            metadataList = Exports_3.SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\n\n            for (_i = 0, metadataList_1 = metadataList; _i < metadataList_1.length; _i++) {\n              metadata = metadataList_1[_i];\n\n              switch (metadata.Type) {\n                case Exports_3.MetadataType.WordBoundary:\n                  this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\n                  wordBoundaryEventArgs = new Exports_2.SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset, metadata.Data.text.Text, metadata.Data.text.Length, this.privSynthesisTurn.currentTextOffset);\n\n                  if (!!this.privSpeechSynthesizer.wordBoundary) {\n                    try {\n                      this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\n                    } catch (error) {// Not going to let errors in the event handler\n                      // trip things up.\n                    }\n                  }\n\n                  break;\n\n                case Exports_3.MetadataType.Bookmark:\n                  bookmarkEventArgs = new Exports_2.SpeechSynthesisBookmarkEventArgs(metadata.Data.Offset, metadata.Data.Bookmark);\n\n                  if (!!this.privSpeechSynthesizer.bookmarkReached) {\n                    try {\n                      this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\n                    } catch (error) {// Not going to let errors in the event handler\n                      // trip things up.\n                    }\n                  }\n\n                  break;\n\n                case Exports_3.MetadataType.Viseme:\n                  this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\n\n                  if (metadata.Data.IsLastAnimation) {\n                    visemeEventArgs = new Exports_2.SpeechSynthesisVisemeEventArgs(metadata.Data.Offset, metadata.Data.VisemeId, this.privSynthesisTurn.getAndClearVisemeAnimation());\n\n                    if (!!this.privSpeechSynthesizer.visemeReceived) {\n                      try {\n                        this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\n                      } catch (error) {// Not going to let errors in the event handler\n                        // trip things up.\n                      }\n                    }\n                  }\n\n                  break;\n              }\n            }\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 7:\n            this.privSynthesisTurn.onServiceTurnEndResponse();\n            result = void 0;\n            _b.label = 8;\n\n          case 8:\n            _b.trys.push([8, 10,, 11]);\n\n            return [4\n            /*yield*/\n            , this.privSynthesisTurn.getAllReceivedAudioWithHeader()];\n\n          case 9:\n            audioBuffer = _b.sent();\n            result = new Exports_2.SpeechSynthesisResult(this.privSynthesisTurn.requestId, Exports_2.ResultReason.SynthesizingAudioCompleted, audioBuffer);\n\n            if (!!this.privSuccessCallback) {\n              this.privSuccessCallback(result);\n            }\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            error_1 = _b.sent();\n\n            if (!!this.privErrorCallback) {\n              this.privErrorCallback(error_1);\n            }\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 11:\n            if (this.privSpeechSynthesizer.synthesisCompleted) {\n              try {\n                this.privSpeechSynthesizer.synthesisCompleted(this.privSpeechSynthesizer, new Exports_2.SpeechSynthesisEventArgs(result));\n              } catch (e) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 12:\n            if (!this.processTypeSpecificMessages(connectionMessage)) {\n              // here are some messages that the derived class has not processed, dispatch them to connect class\n              if (!!this.privServiceEvents) {\n                this.serviceEvents.onEvent(new Exports_1.ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n              }\n            }\n\n            _b.label = 13;\n\n          case 13:\n            return [2\n            /*return*/\n            , this.receiveMessage()];\n\n          case 14:\n            e_2 = _b.sent();\n            return [3\n            /*break*/\n            , 15];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.prototype.connectImpl = function (isUnAuthorized) {\n    var _this = this;\n\n    if (isUnAuthorized === void 0) {\n      isUnAuthorized = false;\n    }\n\n    if (this.privConnectionPromise) {\n      return this.privConnectionPromise.then(function (connection) {\n        if (connection.state() === Exports_1.ConnectionState.Disconnected) {\n          _this.privConnectionId = null;\n          _this.privConnectionPromise = null;\n          _this.privServiceHasSentMessage = false;\n          return _this.connectImpl();\n        }\n\n        return _this.privConnectionPromise;\n      }, function (error) {\n        _this.privConnectionId = null;\n        _this.privConnectionPromise = null;\n        _this.privServiceHasSentMessage = false;\n        return _this.connectImpl();\n      });\n    }\n\n    this.privAuthFetchEventId = Exports_1.createNoDashGuid();\n    this.privConnectionId = Exports_1.createNoDashGuid();\n    this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n    var authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n    this.privConnectionPromise = authPromise.then(function (result) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var connection, response;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onAuthCompleted(false)];\n\n            case 1:\n              _a.sent();\n\n              connection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId); // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n              // it'll stop sending events.\n\n              connection.events.attach(function (event) {\n                _this.connectionEvents.onEvent(event);\n              });\n              return [4\n              /*yield*/\n              , connection.open()];\n\n            case 2:\n              response = _a.sent();\n              if (!(response.statusCode === 200)) return [3\n              /*break*/\n              , 4];\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode)];\n\n            case 3:\n              _a.sent();\n\n              return [2\n              /*return*/\n              , Promise.resolve(connection)];\n\n            case 4:\n              if (!(response.statusCode === 403 && !isUnAuthorized)) return [3\n              /*break*/\n              , 5];\n              return [2\n              /*return*/\n              , this.connectImpl(true)];\n\n            case 5:\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason)];\n\n            case 6:\n              _a.sent();\n\n              return [2\n              /*return*/\n              , Promise.reject(\"Unable to contact server. StatusCode: \" + response.statusCode + \", \" + this.privSynthesizerConfig.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint) + \" Reason: \" + response.reason)];\n          }\n        });\n      });\n    }, function (error) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.privSynthesisTurn.onAuthCompleted(true, error)];\n\n            case 1:\n              _a.sent();\n\n              throw new Error(error);\n          }\n        });\n      });\n    }); // Attach an empty handler to allow the promise to run in the background while\n    // other startup events happen. It'll eventually be awaited on.\n\n    this.privConnectionPromise.catch(function () {});\n    return this.privConnectionPromise;\n  };\n\n  SynthesisAdapterBase.prototype.fetchConnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privConnectionConfigurationPromise) {\n              return [2\n              /*return*/\n              , this.privConnectionConfigurationPromise.then(function (connection) {\n                if (connection.state() === Exports_1.ConnectionState.Disconnected) {\n                  _this.privConnectionId = null;\n                  _this.privConnectionConfigurationPromise = null;\n                  _this.privServiceHasSentMessage = false;\n                  return _this.fetchConnection();\n                }\n\n                return _this.privConnectionConfigurationPromise;\n              }, function (error) {\n                _this.privConnectionId = null;\n                _this.privConnectionConfigurationPromise = null;\n                _this.privServiceHasSentMessage = false;\n                return _this.fetchConnection();\n              })];\n            }\n\n            this.privConnectionConfigurationPromise = this.configureConnection();\n            return [4\n            /*yield*/\n            , this.privConnectionConfigurationPromise];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  }; // Takes an established websocket connection to the endpoint and sends speech configuration information.\n\n\n  SynthesisAdapterBase.prototype.configureConnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.connectImpl()];\n\n          case 1:\n            connection = _a.sent();\n\n            if (this.configConnectionOverride !== undefined) {\n              return [2\n              /*return*/\n              , this.configConnectionOverride(connection)];\n            }\n\n            return [4\n            /*yield*/\n            , this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize())];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , connection];\n        }\n      });\n    });\n  };\n\n  SynthesisAdapterBase.telemetryDataEnabled = true;\n  return SynthesisAdapterBase;\n}();\n\nexports.SynthesisAdapterBase = SynthesisAdapterBase;","map":{"version":3,"mappings":"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","names":["authentication","connectionFactory","synthesizerConfig","speechSynthesizer","audioDestination","undefined","connection","synthesisContextJson","_this","synthesisContext","toJSON","send","SpeechConnectionMessage_Internal_1","Exports_1","Text","privSynthesisTurn","requestId","SpeechServiceConfigJson","ssml","privAuthentication","privConnectionFactory","privSynthesizerConfig","privIsDisposed","privSpeechSynthesizer","privSessionAudioDestination","Exports_3","privConnectionEvents","privServiceEvents","privSynthesisContext","privAgentConfig","connectionEvents","attach","connectionEvent","name","connectionClosedEvent","statusCode","cancelSynthesisLocal","Exports_2","Error","BadRequestParameters","ConnectionFailure","reason","Object","SynthesisAdapterBase","privActivityTemplate","messagePayload","format","privAudioOutputFormat","audioOutputFormat","audio","hasHeader","updateHeader","byteLength","tmp","Uint8Array","header","set","buffer","close","privConnectionConfigurationPromise","_a","dispose","connectImpl","path","payload","type","Binary","contentType","fetchConnection","text","isSSML","successCallback","errorCallBack","buildSsml","speakOverride","privSuccessCallback","privErrorCallback","startNewSynthesis","sendSynthesisContext","sendSsmlMessage","synthesisStartEventArgs","SynthesizingAudioStarted","synthesisStarted","messageRetrievalPromise","receiveMessage","e_1","Promise","reject","cancellationReason","errorCode","error","properties","setProperty","result","Canceled","SynthesisCanceled","cancelEvent","isSynthesizing","onStopSynthesizing","cancelSynthesis","connectionMessage","_b","read","message","receiveMessageOverride","privServiceHasSentMessage","fromConnectionMessage","toLowerCase","onServiceTurnStartResponse","onServiceResponseMessage","textBody","streamId","binaryBody","onAudioChunkReceived","synthesizing","audioWithHeader","addHeader","ev","SynthesizingAudio","write","metadataList","fromJSON","Metadata","metadataList_1","_i","metadata","Type","WordBoundary","onWordBoundaryEvent","Data","wordBoundaryEventArgs","Offset","Length","currentTextOffset","wordBoundary","Bookmark","bookmarkEventArgs","bookmarkReached","Viseme","onVisemeMetadataReceived","IsLastAnimation","visemeEventArgs","VisemeId","getAndClearVisemeAnimation","visemeReceived","onServiceTurnEndResponse","getAllReceivedAudioWithHeader","audioBuffer","SynthesizingAudioCompleted","error_1","synthesisCompleted","e","processTypeSpecificMessages","serviceEvents","onEvent","isUnAuthorized","privConnectionPromise","then","state","Disconnected","privConnectionId","privAuthFetchEventId","onPreConnectionStart","authPromise","fetchOnExpiry","fetch","onAuthCompleted","create","events","event","open","response","onConnectionEstablishCompleted","resolve","parameters","getProperty","SpeechServiceConnection_Endpoint","catch","configureConnection","configConnectionOverride","sendSpeechServiceConfig","SpeechServiceConfig","serialize","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => any = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                new SpeechSynthesisResult(\r\n                    requestId,\r\n                    ResultReason.SynthesizingAudioStarted,\r\n                )\r\n            );\r\n\r\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n            }\r\n\r\n            const messageRetrievalPromise = this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                try {\r\n                                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                    const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                        new SpeechSynthesisResult(\r\n                                            this.privSynthesisTurn.requestId,\r\n                                            ResultReason.SynthesizingAudio,\r\n                                            audioWithHeader));\r\n                                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                    this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\r\n\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        this.privSynthesisTurn.currentTextOffset);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n\r\n                                        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            const audioBuffer: ArrayBuffer = await this.privSynthesisTurn.getAllReceivedAudioWithHeader();\r\n                            result = new SpeechSynthesisResult(\r\n                                this.privSynthesisTurn.requestId,\r\n                                ResultReason.SynthesizingAudioCompleted,\r\n                                audioBuffer\r\n                            );\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error);\r\n                            }\r\n                        }\r\n                        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                            try {\r\n                                this.privSpeechSynthesizer.synthesisCompleted(\r\n                                    this.privSpeechSynthesizer,\r\n                                    new SpeechSynthesisEventArgs(result)\r\n                                );\r\n                            } catch (e) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext = (connection: IConnection): Promise<void> => {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo) => {\r\n            await this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, async (error: string): Promise<IConnection> => {\r\n            await this.privSynthesisTurn.onAuthCompleted(true, error);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        this.privConnectionPromise.catch(() => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<void> => {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<void> => {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}