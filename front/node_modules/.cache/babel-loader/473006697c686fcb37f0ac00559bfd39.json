{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _base64Arraybuffer = require(\"base64-arraybuffer\");\n\nvar _buildSSML = _interopRequireDefault(require(\"./buildSSML\"));\n\nvar _isSSML = _interopRequireDefault(require(\"./isSSML\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar DEFAULT_LANGUAGE = 'en-US';\nvar DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nvar DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nvar EMPTY_MP3_BASE64 = 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nfunction _default(_x) {\n  return _ref2.apply(this, arguments);\n}\n\nfunction _ref2() {\n  _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref) {\n    var deploymentId, fetchCredentials, _ref$lang, lang, _ref$outputFormat, outputFormat, pitch, rate, text, _ref$voice, voice, volume, _yield$fetchCredentia, authorizationToken, region, speechSynthesisHostname, subscriptionKey, ssml, hostname, search, url, res;\n\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            deploymentId = _ref.deploymentId, fetchCredentials = _ref.fetchCredentials, _ref$lang = _ref.lang, lang = _ref$lang === void 0 ? DEFAULT_LANGUAGE : _ref$lang, _ref$outputFormat = _ref.outputFormat, outputFormat = _ref$outputFormat === void 0 ? DEFAULT_OUTPUT_FORMAT : _ref$outputFormat, pitch = _ref.pitch, rate = _ref.rate, text = _ref.text, _ref$voice = _ref.voice, voice = _ref$voice === void 0 ? DEFAULT_VOICE : _ref$voice, volume = _ref.volume;\n\n            if (text) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", (0, _base64Arraybuffer.decode)(EMPTY_MP3_BASE64));\n\n          case 3:\n            _context.next = 5;\n            return fetchCredentials();\n\n          case 5:\n            _yield$fetchCredentia = _context.sent;\n            authorizationToken = _yield$fetchCredentia.authorizationToken;\n            region = _yield$fetchCredentia.region;\n            speechSynthesisHostname = _yield$fetchCredentia.speechSynthesisHostname;\n            subscriptionKey = _yield$fetchCredentia.subscriptionKey;\n\n            if (!(authorizationToken && subscriptionKey || !authorizationToken && !subscriptionKey)) {\n              _context.next = 14;\n              break;\n            }\n\n            throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n\n          case 14:\n            if (!(region && speechSynthesisHostname || !region && !speechSynthesisHostname)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n\n          case 16:\n            ssml = (0, _isSSML.default)(text) ? text : (0, _buildSSML.default)({\n              lang: lang,\n              pitch: pitch,\n              rate: rate,\n              text: text,\n              voice: voice,\n              volume: volume\n            }); // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n\n            hostname = speechSynthesisHostname || (deploymentId ? \"\".concat(encodeURI(region), \".voice.speech.microsoft.com\") : \"\".concat(encodeURI(region), \".tts.speech.microsoft.com\"));\n            search = deploymentId ? \"?deploymentId=\".concat(encodeURI(deploymentId)) : '';\n            url = \"https://\".concat(hostname, \"/cognitiveservices/v1\").concat(search);\n            _context.next = 22;\n            return fetch(url, {\n              headers: _objectSpread({\n                'Content-Type': 'application/ssml+xml',\n                'X-Microsoft-OutputFormat': outputFormat\n              }, authorizationToken ? {\n                Authorization: \"Bearer \".concat(authorizationToken)\n              } : {\n                'Ocp-Apim-Subscription-Key': subscriptionKey\n              }),\n              method: 'POST',\n              body: ssml\n            });\n\n          case 22:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 25;\n              break;\n            }\n\n            throw new Error(\"web-speech-cognitive-services: Failed to syntheis speech, server returned \".concat(res.status));\n\n          case 25:\n            return _context.abrupt(\"return\", res.arrayBuffer());\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _ref2.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,GAAG,OAAzB;AACA,IAAMC,qBAAqB,GAAG,2BAA9B;AACA,IAAMC,aAAa,GAAG,kEAAtB;AACA,IAAMC,gBAAgB,GACpB,skBADF;;;;;;;kFAGe;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,wBADa,QACbA,cACAC,gBAFa,QAEbA,gBADAD,EADaE,iBAGbC,IAFAH,EAEAG,IAHa,0BAGNP,gBAHM,YACbI,EADaI,yBAIbC,YAHAL,EAGAK,YAJa,kCAIER,qBAJF,oBACbG,EAIAM,KALa,QAKbA,KAJAN,EAKAO,IANa,QAMbA,IALAP,EAMAQ,IAPa,QAObA,IANAR,EADaS,kBAQbC,KAPAV,EAOAU,KARa,2BAQLZ,aARK,aACbE,EAQAW,MATa,QASbA,MARAX;;AADa,gBAWRQ,IAXQ;AAAAI;AAAA;AAAA;;AAAA,6CAaJ,+BAAOb,gBAAP,CAbI;;AAAA;AAAAa;AAAA,mBAgB0EX,gBAAgB,EAhB1F;;AAAA;AAAAY;AAgBLC,8BAhBK,yBAgBLA;AAAoBC,kBAhBf,yBAgBeA;AAAQC,mCAhBvB,yBAgBuBA;AAAyBC,2BAhBhD,yBAgBgDA;;AAhBhD,kBAkBRH,kBAAkB,IAAIG,eAAtBH,IAA2C,CAACA,kBAAD,IAAuB,CAACG,eAlB3D;AAAAL;AAAA;AAAA;;AAAA,kBAmBL,IAAIM,KAAJ,CAAU,+DAAV,CAnBK;;AAAA;AAAA,kBAoBDH,MAAM,IAAIC,uBAAVD,IAAuC,CAACA,MAAD,IAAW,CAACC,uBApBlD;AAAAJ;AAAA;AAAA;;AAAA,kBAqBL,IAAIM,KAAJ,CAAU,+DAAV,CArBK;;AAAA;AAwBPC,gBAxBO,GAwBA,qBAAOX,IAAP,IAAeA,IAAf,GAAsB,wBAAU;AAAEL,kBAAI,EAAJA,IAAF;AAAQG,mBAAK,EAALA,KAAR;AAAeC,kBAAI,EAAJA,IAAf;AAAqBC,kBAAI,EAAJA,IAArB;AAA2BE,mBAAK,EAALA,KAA3B;AAAkCC,oBAAM,EAANA;AAAlC,aAAV,CAA7BQ,CAxBO,CA0Bb;;AACMC,oBA3BO,GA4BXJ,uBAAuB,KACtBhB,YAAY,aACLqB,SAAS,CAACN,MAAD,CADJ,6CAELM,SAAS,CAACN,MAAD,CAFJ,8BADU,CADnBK;AAKAE,kBAhCO,GAgCEtB,YAAY,2BAAqBqB,SAAS,CAACrB,YAAD,CAA9B,IAAkD,EAAvEsB;AACAC,eAjCO,qBAiCWH,QAjCX,kCAiC6CE,MAjC7C,CAiCPC;AAjCOX;AAAA,mBAmCKY,KAAK,CAACD,GAAD,EAAM;AAC3BE,qBAAO;AACL,gCAAgB,sBADX;AAEL,4CAA4BpB;AAFvB,iBAGDS,kBAAkB,GAClB;AACEY,6BAAa,mBAAaZ,kBAAb;AADf,eADkB,GAIlB;AACE,6CAA6BG;AAD/B,eAPC,CADoB;AAY3BU,oBAAM,EAAE,MAZmB;AAa3BC,kBAAI,EAAET;AAbqB,aAAN,CAnCV;;AAAA;AAmCPU,eAnCO,gBAmCPA;;AAnCO,gBAmDRA,GAAG,CAACC,EAnDI;AAAAlB;AAAA;AAAA;;AAAA,kBAoDL,IAAIM,KAAJ,qFAAwFW,GAAG,CAACE,MAA5F,EApDK;;AAAA;AAAA,6CAuDNF,GAAG,CAACG,WAAJH,EAvDM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["DEFAULT_LANGUAGE","DEFAULT_OUTPUT_FORMAT","DEFAULT_VOICE","EMPTY_MP3_BASE64","deploymentId","fetchCredentials","_ref$lang","lang","_ref$outputFormat","outputFormat","pitch","rate","text","_ref$voice","voice","volume","_context","_yield$fetchCredentia","authorizationToken","region","speechSynthesisHostname","subscriptionKey","Error","ssml","hostname","encodeURI","search","url","fetch","headers","Authorization","method","body","res","ok","status","arrayBuffer"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchSpeechData.js"],"sourcesContent":["import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${ encodeURI(region) }.voice.speech.microsoft.com`\n      : `${ encodeURI(region) }.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${ encodeURI(deploymentId) }` : '';\n  const url = `https://${ hostname }/cognitiveservices/v1${ search }`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n"]},"metadata":{},"sourceType":"script"}