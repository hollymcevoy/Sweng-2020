{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n\n    this.create = (config, authInfo, connectionId) => {\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n      if (!endpoint) {\n        const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n        const hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\n        endpoint = host + \"/speech/translation/cognitiveservices/v1\";\n      }\n\n      const queryParams = {\n        from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n        to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages)\n      };\n      this.setCommonUrlParams(config, queryParams, endpoint);\n      this.setUrlParameter(PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult, QueryParameterNames.StableTranslation, config, queryParams, endpoint);\n      const voiceName = \"voice\";\n      const featureName = \"features\";\n\n      if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n        queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\n        queryParams[featureName] = \"texttospeech\";\n      }\n\n      const headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n      const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","TranslationConnectionFactory","constructor","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","toLowerCase","startsWith","host","SpeechServiceConnection_Host","queryParams","from","SpeechServiceConnection_RecoLanguage","to","SpeechServiceConnection_TranslationToLanguages","setCommonUrlParams","setUrlParameter","SpeechServiceResponse_TranslationRequestStablePartialResult","StableTranslation","voiceName","featureName","SpeechServiceConnection_TranslationVoice","headers","token","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/src/common.speech/TranslationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpoint\r\n        );\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}