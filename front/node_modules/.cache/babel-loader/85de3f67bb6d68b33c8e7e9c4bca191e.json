{"ast":null,"code":"/* eslint no-magic-numbers: \"off\" */\nimport * as browser from './browser';\nimport best from './util/best';\nexport default function getView(dir, scrollable, itemContainer, scrollingTo) {\n  var rtl = dir === 'rtl';\n\n  if (itemContainer && scrollable) {\n    var scrollLeft = scrollingTo || scrollable.scrollLeft;\n    var trueScrollLeft = rtl && (browser.edgeUWP || browser.internetExplorer) ? -scrollLeft : scrollLeft;\n    var items = itemContainer.children; // This will enumerate <li> inside <FilmStrip>\n\n    var scrollCenter = trueScrollLeft + scrollable.offsetWidth / 2;\n    var index = best([].slice.call(items), function (item) {\n      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;\n      return 1 / Math.abs(scrollCenter - offsetCenter);\n    });\n\n    if (~index) {\n      var item = items[index];\n      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;\n      var indexFraction = index + (scrollCenter - offsetCenter) / item.offsetWidth * (rtl ? -1 : 1); // We \"fix\" indexFraction if the viewport is at the start/end of the content\n      // This is to simplify code that use Math.round(indexFraction) to find the scrollable index\n      // if (scrollLeft === 0) {\n      //   indexFraction = 0;\n      // } else if (scrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {\n      //   indexFraction = items.length - 1;\n      // } else if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {\n      //   indexFraction = Math.round(indexFraction);\n      // }\n\n      if (indexFraction % 1 > 0.99 || indexFraction % 1 < 0.01) {\n        indexFraction = Math.round(indexFraction);\n      }\n\n      var selectedIndex;\n\n      if (Math.abs(trueScrollLeft) < 1) {\n        selectedIndex = 0;\n      } else if (rtl ? trueScrollLeft <= scrollable.offsetWidth - scrollable.scrollWidth : trueScrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {\n        selectedIndex = items.length - 1;\n      } else {\n        selectedIndex = Math.round(indexFraction);\n      }\n\n      return {\n        index: selectedIndex,\n        indexFraction: indexFraction\n      };\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;AAEA,OAAO,KAAKA,OAAZ,MAAyB,WAAzB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,UAAtB,EAAkCC,aAAlC,EAAiDC,WAAjD,EAA8D;AAC3E,MAAMC,GAAG,GAAGJ,GAAG,KAAK,KAApB;;AAEA,MAAIE,aAAa,IAAID,UAArB,EAAiC;AAC/B,QAAMI,UAAU,GAAGF,WAAW,IAAIF,UAAU,CAACI,UAA7C;AACA,QAAMC,cAAc,GAAGF,GAAG,KAAKP,OAAO,CAACU,OAARV,IAAmBA,OAAO,CAACW,gBAAhC,CAAHJ,GAAuD,CAACC,UAAxDD,GAAqEC,UAA5F;AACA,QAAMI,KAAK,GAAGP,aAAa,CAACQ,QAA5B,CAH+B,CAGO;;AACtC,QAAMC,YAAY,GAAGL,cAAc,GAAGL,UAAU,CAACW,WAAXX,GAAyB,CAA/D;AACA,QAAMY,KAAK,GAAGf,IAAI,CAAC,GAAGgB,KAAH,CAASC,IAAT,CAAcN,KAAd,CAAD,EAAuB,gBAAQ;AAC/C,UAAMO,YAAY,GAAGC,IAAI,CAACC,UAALD,GAAkBA,IAAI,CAACL,WAALK,GAAmB,CAA1D;AAEA,aAAO,IAAIE,IAAI,CAACC,GAALD,CAASR,YAAY,GAAGK,YAAxBG,CAAX;AAHgB,MAAlB;;AAMA,QAAI,CAACN,KAAL,EAAY;AACV,UAAMI,IAAI,GAAGR,KAAK,CAACI,KAAD,CAAlB;AAEA,UAAMG,YAAY,GAAGC,IAAI,CAACC,UAALD,GAAkBA,IAAI,CAACL,WAALK,GAAmB,CAA1D;AACA,UAAII,aAAa,GAAGR,KAAK,GAAI,CAACF,YAAY,GAAGK,YAAhB,IAAgCC,IAAI,CAACL,WAArC,IAAqDR,GAAG,GAAG,CAAC,CAAJ,GAAQ,CAAhE,CAA7B,CAJU,CAMV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIiB,aAAa,GAAG,CAAhBA,GAAoB,IAApBA,IAA4BA,aAAa,GAAG,CAAhBA,GAAoB,IAApD,EAA0D;AACxDA,qBAAa,GAAGF,IAAI,CAACG,KAALH,CAAWE,aAAXF,CAAhBE;AACD;;AAED,UAAIE,aAAJ;;AAEA,UAAIJ,IAAI,CAACC,GAALD,CAASb,cAATa,IAA2B,CAA/B,EAAkC;AAChCI,qBAAa,GAAG,CAAhBA;AADF,aAEO,IACLnB,GAAG,GACCE,cAAc,IAAIL,UAAU,CAACW,WAAXX,GAAyBA,UAAU,CAACuB,WADvD,GAEClB,cAAc,IAAIL,UAAU,CAACuB,WAAXvB,GAAyBA,UAAU,CAACW,WAHrD,EAIL;AACAW,qBAAa,GAAGd,KAAK,CAACgB,MAANhB,GAAe,CAA/Bc;AALK,aAMA;AACLA,qBAAa,GAAGJ,IAAI,CAACG,KAALH,CAAWE,aAAXF,CAAhBI;AACD;;AAED,aAAO;AACLV,aAAK,EAAEU,aADF;AAELF,qBAAa,EAAbA;AAFK,OAAP;AAID;AACF;AACF","names":["browser","best","getView","dir","scrollable","itemContainer","scrollingTo","rtl","scrollLeft","trueScrollLeft","edgeUWP","internetExplorer","items","children","scrollCenter","offsetWidth","index","slice","call","offsetCenter","item","offsetLeft","Math","abs","indexFraction","round","selectedIndex","scrollWidth","length"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/react-film/src/getView.js"],"sourcesContent":["/* eslint no-magic-numbers: \"off\" */\n\nimport * as browser from './browser';\nimport best from './util/best';\n\nexport default function getView(dir, scrollable, itemContainer, scrollingTo) {\n  const rtl = dir === 'rtl';\n\n  if (itemContainer && scrollable) {\n    const scrollLeft = scrollingTo || scrollable.scrollLeft;\n    const trueScrollLeft = rtl && (browser.edgeUWP || browser.internetExplorer) ? -scrollLeft : scrollLeft;\n    const items = itemContainer.children; // This will enumerate <li> inside <FilmStrip>\n    const scrollCenter = trueScrollLeft + scrollable.offsetWidth / 2;\n    const index = best([].slice.call(items), item => {\n      const offsetCenter = item.offsetLeft + item.offsetWidth / 2;\n\n      return 1 / Math.abs(scrollCenter - offsetCenter);\n    });\n\n    if (~index) {\n      const item = items[index];\n\n      const offsetCenter = item.offsetLeft + item.offsetWidth / 2;\n      let indexFraction = index + ((scrollCenter - offsetCenter) / item.offsetWidth) * (rtl ? -1 : 1);\n\n      // We \"fix\" indexFraction if the viewport is at the start/end of the content\n      // This is to simplify code that use Math.round(indexFraction) to find the scrollable index\n      // if (scrollLeft === 0) {\n      //   indexFraction = 0;\n      // } else if (scrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {\n      //   indexFraction = items.length - 1;\n      // } else if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {\n      //   indexFraction = Math.round(indexFraction);\n      // }\n\n      if (indexFraction % 1 > 0.99 || indexFraction % 1 < 0.01) {\n        indexFraction = Math.round(indexFraction);\n      }\n\n      let selectedIndex;\n\n      if (Math.abs(trueScrollLeft) < 1) {\n        selectedIndex = 0;\n      } else if (\n        rtl\n          ? trueScrollLeft <= scrollable.offsetWidth - scrollable.scrollWidth\n          : trueScrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth\n      ) {\n        selectedIndex = items.length - 1;\n      } else {\n        selectedIndex = Math.round(indexFraction);\n      }\n\n      return {\n        index: selectedIndex,\n        indexFraction\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}