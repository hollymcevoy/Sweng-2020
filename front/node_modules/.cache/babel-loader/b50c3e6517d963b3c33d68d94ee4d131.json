{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createDefaultGroupActivityMiddleware;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar SENT = _botframeworkWebchatCore.Constants.ActivityClientState.SENT;\n\nfunction bin(items, grouping) {\n  var lastBin;\n  var bins = [];\n  var lastItem;\n  items.forEach(function (item) {\n    if (lastItem && grouping(lastItem, item)) {\n      lastBin.push(item);\n    } else {\n      lastBin = [item];\n      bins.push(lastBin);\n    }\n\n    lastItem = item;\n  });\n  return bins;\n}\n\nfunction sending(activity) {\n  return activity.from.role === 'user' && activity.channelData && activity.channelData.state !== SENT;\n}\n\nfunction shouldGroupTimestamp(activityX, activityY, groupTimestamp) {\n  if (groupTimestamp === false) {\n    // Hide timestamp for all activities.\n    return true;\n  } else if (activityX && activityY) {\n    if (sending(activityX) !== sending(activityY)) {\n      return false;\n    }\n\n    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : Infinity;\n    var timeX = new Date(activityX.timestamp).getTime();\n    var timeY = new Date(activityY.timestamp).getTime();\n    return Math.abs(timeX - timeY) <= groupTimestamp;\n  }\n\n  return false;\n}\n\nfunction createDefaultGroupActivityMiddleware(_ref) {\n  var groupTimestamp = _ref.groupTimestamp;\n  return function () {\n    return function () {\n      return function (_ref2) {\n        var activities = _ref2.activities;\n        return {\n          sender: bin(activities, function (x, y) {\n            return x.from.role === y.from.role;\n          }),\n          status: bin(activities, function (x, y) {\n            return shouldGroupTimestamp(x, y, groupTimestamp);\n          })\n        };\n      };\n    };\n  };\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAIA,IACyBA,IADzB,GAEIC,mCADFC,mBACED,CADqBD,IADzB;;AAIA,SAASG,GAAT,CAAgBC,KAAhB,EAA4BC,QAA5B,EAA+E;AAC7E,MAAIC,OAAJ;AACA,MAAMC,IAAW,GAAG,EAApB;AACA,MAAIC,QAAJ;AAEAJ,OAAK,CAACK,OAANL,CAAc,gBAAQ;AACpB,QAAII,QAAQ,IAAIH,QAAQ,CAACG,QAAD,EAAWE,IAAX,CAAxB,EAA0C;AACxCJ,aAAO,CAACK,IAARL,CAAaI,IAAbJ;AADF,WAEO;AACLA,aAAO,GAAG,CAACI,IAAD,CAAVJ;AACAC,UAAI,CAACI,IAALJ,CAAUD,OAAVC;AACD;;AAEDC,YAAQ,GAAGE,IAAXF;AARF;AAWA,SAAOD,IAAP;AACD;;AAED,SAASK,OAAT,CAAiBC,QAAjB,EAAwD;AACtD,SAAOA,QAAQ,CAACC,IAATD,CAAcE,IAAdF,KAAuB,MAAvBA,IAAiCA,QAAQ,CAACG,WAA1CH,IAAyDA,QAAQ,CAACG,WAATH,CAAqBI,KAArBJ,KAA+Bb,IAA/F;AACD;;AAED,SAASkB,oBAAT,CACEC,SADF,EAEEC,SAFF,EAGEC,cAHF,EAIW;AACT,MAAIA,cAAc,KAAK,KAAvB,EAA8B;AAC5B;AACA,WAAO,IAAP;AAFF,SAGO,IAAIF,SAAS,IAAIC,SAAjB,EAA4B;AACjC,QAAIR,OAAO,CAACO,SAAD,CAAPP,KAAuBA,OAAO,CAACQ,SAAD,CAAlC,EAA+C;AAC7C,aAAO,KAAP;AACD;;AAEDC,kBAAc,GAAG,OAAOA,cAAP,KAA0B,QAA1B,GAAqCA,cAArC,GAAsDC,QAAvED;AAEA,QAAME,KAAK,GAAG,IAAIC,IAAJ,CAASL,SAAS,CAACM,SAAnB,EAA8BC,OAA9B,EAAd;AACA,QAAMC,KAAK,GAAG,IAAIH,IAAJ,CAASJ,SAAS,CAACK,SAAnB,EAA8BC,OAA9B,EAAd;AAEA,WAAOE,IAAI,CAACC,GAALD,CAASL,KAAK,GAAGI,KAAjBC,KAA2BP,cAAlC;AACD;;AAED,SAAO,KAAP;AACD;;AAEc,SAASS,oCAAT,OAA6F;AAAA,MAA7CT,cAA6C,QAA7CA,cAA6C;AAC1G,SAAO;AAAA,WACL;AAAA,aACA;AAAA,YAAGU,UAAH,SAAGA,UAAH;AAAA,eAAqB;AACnBC,gBAAM,EAAE7B,GAAG,CAAC4B,UAAD,EAAa,UAACE,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,CAACnB,IAAFmB,CAAOlB,IAAPkB,KAAgBC,CAAC,CAACpB,IAAFoB,CAAOnB,IAAjC;AAAb,YADQ;AAEnBoB,gBAAM,EAAEhC,GAAG,CAAC4B,UAAD,EAAa,UAACE,CAAD,EAAIC,CAAJ;AAAA,mBAAUhB,oBAAoB,CAACe,CAAD,EAAIC,CAAJ,EAAOb,cAAP,CAA9B;AAAb;AAFQ,SAArB;AADA;AADK;AAAP;AAMD","names":["SENT","Constants","ActivityClientState","bin","items","grouping","lastBin","bins","lastItem","forEach","item","push","sending","activity","from","role","channelData","state","shouldGroupTimestamp","activityX","activityY","groupTimestamp","Infinity","timeX","Date","timestamp","getTime","timeY","Math","abs","createDefaultGroupActivityMiddleware","activities","sender","x","y","status"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-api/lib/src/hooks/middleware/createDefaultGroupActivitiesMiddleware.ts"],"sourcesContent":["import { Constants, DirectLineActivity } from 'botframework-webchat-core';\n\nimport GroupActivitiesMiddleware from '../../types/GroupActivitiesMiddleware';\n\nconst {\n  ActivityClientState: { SENT }\n} = Constants;\n\nfunction bin<T>(items: T[], grouping: (last: T, current: T) => boolean): T[][] {\n  let lastBin: T[];\n  const bins: T[][] = [];\n  let lastItem: T;\n\n  items.forEach(item => {\n    if (lastItem && grouping(lastItem, item)) {\n      lastBin.push(item);\n    } else {\n      lastBin = [item];\n      bins.push(lastBin);\n    }\n\n    lastItem = item;\n  });\n\n  return bins;\n}\n\nfunction sending(activity: DirectLineActivity): boolean {\n  return activity.from.role === 'user' && activity.channelData && activity.channelData.state !== SENT;\n}\n\nfunction shouldGroupTimestamp(\n  activityX: DirectLineActivity,\n  activityY: DirectLineActivity,\n  groupTimestamp: boolean | number\n): boolean {\n  if (groupTimestamp === false) {\n    // Hide timestamp for all activities.\n    return true;\n  } else if (activityX && activityY) {\n    if (sending(activityX) !== sending(activityY)) {\n      return false;\n    }\n\n    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : Infinity;\n\n    const timeX = new Date(activityX.timestamp).getTime();\n    const timeY = new Date(activityY.timestamp).getTime();\n\n    return Math.abs(timeX - timeY) <= groupTimestamp;\n  }\n\n  return false;\n}\n\nexport default function createDefaultGroupActivityMiddleware({ groupTimestamp }): GroupActivitiesMiddleware {\n  return () =>\n    () =>\n    ({ activities }) => ({\n      sender: bin(activities, (x, y) => x.from.role === y.from.role),\n      status: bin(activities, (x, y) => shouldGroupTimestamp(x, y, groupTimestamp))\n    });\n}\n"]},"metadata":{},"sourceType":"script"}