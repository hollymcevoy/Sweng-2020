{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _pDeferEs = _interopRequireDefault(require(\"p-defer-es5\"));\n\nfunction _default() {\n  var shiftDeferred;\n  var queue = [];\n\n  var push = function push(value) {\n    if (shiftDeferred) {\n      var _shiftDeferred = shiftDeferred,\n          resolve = _shiftDeferred.resolve;\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  var shift = function shift() {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = (0, _pDeferEs.default)())).promise;\n  };\n\n  return {\n    push: push,\n    shift: shift\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAEe,oBAAW;AACxB,MAAIA,aAAJ;AACA,MAAMC,KAAK,GAAG,EAAd;;AAEA,MAAMC,IAAI,GAAG,SAAPA,IAAO,QAAS;AACpB,QAAIF,aAAJ,EAAmB;AACjB,2BAAoBA,aAApB;AAAA,UAAQG,OAAR,kBAAQA,OAAR;AAEAH,mBAAa,GAAG,IAAhBA;AACAG,aAAO,CAACC,KAAD,CAAPD;AAJF,WAKO;AACLF,WAAK,CAACC,IAAND,CAAWG,KAAXH;AACD;AARH;;AAWA,MAAMI,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,QAAIJ,KAAK,CAACK,MAAV,EAAkB;AAChB,aAAOC,OAAO,CAACJ,OAARI,CAAgBN,KAAK,CAACI,KAANJ,EAAhBM,CAAP;AACD;;AAED,WAAO,CAACP,aAAa,KAAKA,aAAa,GAAG,wBAArB,CAAd,EAAsDQ,OAA7D;AALF;;AAQA,SAAO;AACLN,QAAI,EAAJA,IADK;AAELG,SAAK,EAALA;AAFK,GAAP;AAID","names":["shiftDeferred","queue","push","resolve","value","shift","length","Promise","promise"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/web-speech-cognitive-services/src/Util/createPromiseQueue.js"],"sourcesContent":["import createDeferred from 'p-defer-es5';\n\nexport default function() {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n"]},"metadata":{},"sourceType":"script"}