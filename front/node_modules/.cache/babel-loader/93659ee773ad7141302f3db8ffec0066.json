{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PushAudioOutputStreamImpl = exports.PushAudioOutputStream = exports.PullAudioOutputStreamImpl = exports.PullAudioOutputStream = exports.AudioOutputStream = void 0; // tslint:disable:max-classes-per-file\n\nvar Exports_1 = require(\"../../common/Exports\");\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar AudioOutputFormat_1 = require(\"./AudioOutputFormat\");\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\n\n\nvar AudioOutputStream =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  function AudioOutputStream() {}\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member AudioOutputStream.createPullStream\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The audio output stream being created.\n   */\n\n\n  AudioOutputStream.createPullStream = function () {\n    return PullAudioOutputStream.create();\n  };\n\n  return AudioOutputStream;\n}();\n\nexports.AudioOutputStream = AudioOutputStream;\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\n\nvar PullAudioOutputStream =\n/** @class */\nfunction (_super) {\n  __extends(PullAudioOutputStream, _super);\n\n  function PullAudioOutputStream() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member PullAudioOutputStream.create\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The push audio output stream being created.\n   */\n\n\n  PullAudioOutputStream.create = function () {\n    return new PullAudioOutputStreamImpl();\n  };\n\n  return PullAudioOutputStream;\n}(AudioOutputStream);\n\nexports.PullAudioOutputStream = PullAudioOutputStream;\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\n\nvar PullAudioOutputStreamImpl =\n/** @class */\nfunction (_super) {\n  __extends(PullAudioOutputStreamImpl, _super);\n  /**\n   * Creates and initializes an instance with the given values.\n   * @constructor\n   */\n\n\n  function PullAudioOutputStreamImpl() {\n    var _this = _super.call(this) || this;\n\n    _this.privId = Exports_1.createNoDashGuid();\n    _this.privStream = new Exports_1.Stream();\n    return _this;\n  }\n\n  Object.defineProperty(PullAudioOutputStreamImpl.prototype, \"format\", {\n    /**\n     * Format information for the audio\n     */\n    get: function () {\n      return this.privFormat;\n    },\n\n    /**\n     * Sets the format information to the stream. For internal use only.\n     * @param {AudioStreamFormat} format - the format to be set.\n     */\n    set: function (format) {\n      if (format === undefined || format === null) {\n        this.privFormat = AudioOutputFormat_1.AudioOutputFormatImpl.getDefaultOutputFormat();\n      }\n\n      this.privFormat = format;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PullAudioOutputStreamImpl.prototype, \"isClosed\", {\n    /**\n     * Checks if the stream is closed\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\n     * @property\n     * @public\n     */\n    get: function () {\n      return this.privStream.isClosed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the id of the stream\n   * @member PullAudioOutputStreamImpl.prototype.id\n   * @property\n   * @public\n   */\n\n  PullAudioOutputStreamImpl.prototype.id = function () {\n    return this.privId;\n  };\n  /**\n   * Reads audio data from the internal buffer.\n   * @member PullAudioOutputStreamImpl.prototype.read\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n   * @returns {Promise<number>} - Audio buffer length has been read.\n   */\n\n\n  PullAudioOutputStreamImpl.prototype.read = function (dataBuffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var intView, totalBytes, chunk, tmpBuffer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            intView = new Int8Array(dataBuffer);\n            totalBytes = 0;\n\n            if (this.privLastChunkView !== undefined) {\n              if (this.privLastChunkView.length > dataBuffer.byteLength) {\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n                return [2\n                /*return*/\n                , Promise.resolve(dataBuffer.byteLength)];\n              }\n\n              intView.set(this.privLastChunkView);\n              totalBytes = this.privLastChunkView.length;\n              this.privLastChunkView = undefined;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            if (!(totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.privStream.read()];\n\n          case 2:\n            chunk = _a.sent();\n            if (!(chunk !== undefined && !chunk.isEnd)) return [3\n            /*break*/\n            , 3];\n            tmpBuffer = void 0;\n\n            if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n              tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n              this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n            } else {\n              tmpBuffer = chunk.buffer;\n            }\n\n            intView.set(new Int8Array(tmpBuffer), totalBytes);\n            totalBytes += tmpBuffer.byteLength;\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.privStream.readEnded()];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [2\n            /*return*/\n            , totalBytes];\n        }\n      });\n    });\n  };\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PullAudioOutputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n\n\n  PullAudioOutputStreamImpl.prototype.write = function (dataBuffer) {\n    Contracts_1.Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  };\n  /**\n   * Closes the stream.\n   * @member PullAudioOutputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  PullAudioOutputStreamImpl.prototype.close = function () {\n    this.privStream.close();\n  };\n\n  return PullAudioOutputStreamImpl;\n}(PullAudioOutputStream);\n\nexports.PullAudioOutputStreamImpl = PullAudioOutputStreamImpl;\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\n\nvar PushAudioOutputStream =\n/** @class */\nfunction (_super) {\n  __extends(PushAudioOutputStream, _super);\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n\n\n  function PushAudioOutputStream() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * write() and close() methods.\n   * @member PushAudioOutputStream.create\n   * @function\n   * @public\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   * @returns {PushAudioOutputStream} The push audio output stream being created.\n   */\n\n\n  PushAudioOutputStream.create = function (callback) {\n    return new PushAudioOutputStreamImpl(callback);\n  };\n\n  return PushAudioOutputStream;\n}(AudioOutputStream);\n\nexports.PushAudioOutputStream = PushAudioOutputStream;\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\n\nvar PushAudioOutputStreamImpl =\n/** @class */\nfunction (_super) {\n  __extends(PushAudioOutputStreamImpl, _super);\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * read() and close() methods.\n   * @constructor\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   *        derived from PushAudioOutputStreamCallback\n   */\n\n\n  function PushAudioOutputStreamImpl(callback) {\n    var _this = _super.call(this) || this;\n\n    _this.privId = Exports_1.createNoDashGuid();\n    _this.privCallback = callback;\n    return _this;\n  }\n\n  Object.defineProperty(PushAudioOutputStreamImpl.prototype, \"format\", {\n    // tslint:disable-next-line:no-empty\n    set: function (format) {},\n    enumerable: false,\n    configurable: true\n  });\n\n  PushAudioOutputStreamImpl.prototype.write = function (buffer) {\n    if (!!this.privCallback.write) {\n      this.privCallback.write(buffer);\n    }\n  };\n\n  PushAudioOutputStreamImpl.prototype.close = function () {\n    if (!!this.privCallback.close) {\n      this.privCallback.close();\n    }\n  };\n\n  PushAudioOutputStreamImpl.prototype.id = function () {\n    return this.privId;\n  };\n\n  return PushAudioOutputStreamImpl;\n}(PushAudioOutputStream);\n\nexports.PushAudioOutputStreamImpl = PushAudioOutputStreamImpl;","map":{"version":3,"mappings":"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","names":["AudioOutputStream","PullAudioOutputStream","create","exports","__extends","PullAudioOutputStreamImpl","_super","_this","privId","Exports_1","privStream","Object","privFormat","format","undefined","AudioOutputFormat_1","getDefaultOutputFormat","isClosed","dataBuffer","intView","Int8Array","totalBytes","privLastChunkView","length","byteLength","set","slice","Promise","resolve","isReadEnded","read","chunk","_a","isEnd","tmpBuffer","buffer","readEnded","Contracts_1","throwIfNullOrUndefined","writeStreamChunk","timeReceived","Date","now","close","PushAudioOutputStream","callback","PushAudioOutputStreamImpl","privCallback","write"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                await this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}