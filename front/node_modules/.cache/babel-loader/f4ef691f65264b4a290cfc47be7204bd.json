{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CustomCommandsConfig = void 0;\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar DialogServiceConfig_1 = require(\"./DialogServiceConfig\");\n\nvar Exports_1 = require(\"./Exports\");\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\n\n\nvar CustomCommandsConfig =\n/** @class */\nfunction (_super) {\n  __extends(CustomCommandsConfig, _super);\n  /**\n   * Creates an instance of CustomCommandsConfig.\n   */\n\n\n  function CustomCommandsConfig() {\n    return _super.call(this) || this;\n  }\n  /**\n   * Creates an instance of the bot framework config with the specified subscription and region.\n   * @member CustomCommandsConfig.fromSubscription\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param subscription Subscription key associated with the bot\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new bot framework config.\n   */\n\n\n  CustomCommandsConfig.fromSubscription = function (applicationId, subscription, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var customCommandsConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.CustomCommands);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Key, subscription);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  };\n  /**\n   * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member CustomCommandsConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param applicationId Speech Commands application id.\n   * @param authorizationToken The authorization token associated with the application.\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {CustomCommandsConfig} A new speech commands config.\n   */\n\n\n  CustomCommandsConfig.fromAuthorizationToken = function (applicationId, authorizationToken, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var customCommandsConfig = new DialogServiceConfig_1.DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_DialogType, DialogServiceConfig_1.DialogServiceConfig.DialogTypes.CustomCommands);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    customCommandsConfig.setProperty(Exports_1.PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  };\n\n  Object.defineProperty(CustomCommandsConfig.prototype, \"applicationId\", {\n    /**\n     * Gets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to get.\n     */\n    get: function () {\n      return this.getProperty(Exports_1.PropertyId.Conversation_ApplicationId);\n    },\n\n    /**\n     * Sets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to set.\n     */\n    set: function (value) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n      this.setProperty(Exports_1.PropertyId.Conversation_ApplicationId, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return CustomCommandsConfig;\n}(DialogServiceConfig_1.DialogServiceConfigImpl);\n\nexports.CustomCommandsConfig = CustomCommandsConfig;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;AAEA;;;;;;AAIA;AAAA;AAAA;AAA0CA;AAEtC;;;;;AAGA;WACIC,qBAAO;AACV;AAED;;;;;;;;;;;;AAUcC,0CAAd,UAA+BC,aAA/B,EAAsDC,YAAtD,EAA4EC,MAA5E,EAA0F;AACtFC,0BAAUC,uBAAV,CAAkCJ,aAAlC,EAAiD,eAAjD;AACAG,0BAAUC,uBAAV,CAAkCH,YAAlC,EAAgD,cAAhD;AACAE,0BAAUC,uBAAV,CAAkCF,MAAlC,EAA0C,QAA1C;AAEA,QAAMG,oBAAoB,GAAyB,IAAIC,6CAAJ,EAAnD;AACAD,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWC,uBAA5C,EAAqEH,0CAAoBI,WAApB,CAAgCC,cAArG;AACAN,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWI,0BAA5C,EAAwEZ,aAAxE;AACAK,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWK,2BAA5C,EAAyEZ,YAAzE;AACAI,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWM,8BAA5C,EAA4EZ,MAA5E;AACA,WAAOG,oBAAP;AACH,GAXa;AAad;;;;;;;;;;;;;;;;;AAecN,gDAAd,UAAqCC,aAArC,EAA4De,kBAA5D,EAAwFb,MAAxF,EAAsG;AAClGC,0BAAUC,uBAAV,CAAkCJ,aAAlC,EAAiD,eAAjD;AACAG,0BAAUC,uBAAV,CAAkCW,kBAAlC,EAAsD,oBAAtD;AACAZ,0BAAUC,uBAAV,CAAkCF,MAAlC,EAA0C,QAA1C;AAEA,QAAMG,oBAAoB,GAAyB,IAAIC,6CAAJ,EAAnD;AACAD,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWC,uBAA5C,EAAqEH,0CAAoBI,WAApB,CAAgCC,cAArG;AACAN,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWI,0BAA5C,EAAwEZ,aAAxE;AACAK,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWQ,gCAA5C,EAA8ED,kBAA9E;AACAV,wBAAoB,CAACE,WAArB,CAAiCC,qBAAWM,8BAA5C,EAA4EZ,MAA5E;AACA,WAAOG,oBAAP;AACH,GAXa;;AAoBdY,wBAAWlB,8BAAX,EAAW,eAAX,EAAwB;AAKxB;;;;;;;SAOA;AACI,aAAO,KAAKmB,WAAL,CAAiBV,qBAAWI,0BAA5B,CAAP;AACH,KAduB;;AAPxB;;;;;;;SAOA,UAAyBO,KAAzB,EAAsC;AAClChB,4BAAUC,uBAAV,CAAkCe,KAAlC,EAAyC,OAAzC;AACA,WAAKZ,WAAL,CAAiBC,qBAAWI,0BAA5B,EAAwDO,KAAxD;AACH,KAHuB;qBAAA;;AAAA,GAAxB;AAeJ;AAAC,CAlFD,CAA0Cb,6CAA1C;;AAAac","names":["__extends","_super","CustomCommandsConfig","applicationId","subscription","region","Contracts_1","throwIfNullOrWhitespace","customCommandsConfig","DialogServiceConfig_1","setProperty","Exports_1","Conversation_DialogType","DialogTypes","CustomCommands","Conversation_ApplicationId","SpeechServiceConnection_Key","SpeechServiceConnection_Region","authorizationToken","SpeechServiceAuthorization_Token","Object","getProperty","value","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}