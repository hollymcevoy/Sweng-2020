{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestMessageAdapter = exports.RestRequestType = void 0;\n\nvar Exports_1 = require(\"../common/Exports\"); // Node.JS specific xmlhttprequest / browser support.\n\n\nvar XHR = __importStar(require(\"xmlhttprequest-ts\"));\n\nvar RestRequestType;\n\n(function (RestRequestType) {\n  RestRequestType[\"Get\"] = \"get\";\n  RestRequestType[\"Post\"] = \"post\";\n  RestRequestType[\"Delete\"] = \"delete\";\n  RestRequestType[\"File\"] = \"file\";\n})(RestRequestType = exports.RestRequestType || (exports.RestRequestType = {})); // accept rest operations via request method and return abstracted objects from server response\n\n\nvar RestMessageAdapter =\n/** @class */\nfunction () {\n  function RestMessageAdapter(configParams, connectionId) {\n    if (!configParams) {\n      throw new Exports_1.ArgumentNullError(\"configParams\");\n    }\n\n    this.privHeaders = configParams.headers;\n    this.privTimeout = configParams.timeout;\n    this.privIgnoreCache = configParams.ignoreCache;\n  }\n\n  RestMessageAdapter.prototype.setHeaders = function (key, value) {\n    this.privHeaders[key] = value;\n  };\n\n  RestMessageAdapter.prototype.request = function (method, uri, queryParams, body, binaryBody) {\n    var _this = this;\n\n    if (queryParams === void 0) {\n      queryParams = {};\n    }\n\n    if (body === void 0) {\n      body = null;\n    }\n\n    if (binaryBody === void 0) {\n      binaryBody = null;\n    }\n\n    var responseReceivedDeferral = new Exports_1.Deferred();\n    var xhr;\n\n    if (typeof XMLHttpRequest === \"undefined\") {\n      xhr = new XHR.XMLHttpRequest();\n    } else {\n      xhr = new XMLHttpRequest();\n    }\n\n    var requestCommand = method === RestRequestType.File ? \"post\" : method;\n    xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\n\n    if (this.privHeaders) {\n      Object.keys(this.privHeaders).forEach(function (key) {\n        return xhr.setRequestHeader(key, _this.privHeaders[key]);\n      });\n    }\n\n    if (this.privIgnoreCache) {\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    }\n\n    xhr.timeout = this.privTimeout;\n\n    xhr.onload = function () {\n      responseReceivedDeferral.resolve(_this.parseXHRResult(xhr));\n    };\n\n    xhr.onerror = function () {\n      responseReceivedDeferral.resolve(_this.errorResponse(xhr, \"Failed to make request.\"));\n    };\n\n    xhr.ontimeout = function () {\n      responseReceivedDeferral.resolve(_this.errorResponse(xhr, \"Request took longer than expected.\"));\n    };\n\n    if (method === RestRequestType.File && binaryBody) {\n      xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n      xhr.send(binaryBody);\n    } else if (method === RestRequestType.Post && body) {\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send(JSON.stringify(body));\n    } else {\n      xhr.send();\n    }\n\n    return responseReceivedDeferral.promise;\n  };\n\n  RestMessageAdapter.prototype.parseXHRResult = function (xhr) {\n    return {\n      data: xhr.responseText,\n      headers: xhr.getAllResponseHeaders(),\n      json: function () {\n        return JSON.parse(xhr.responseText);\n      },\n      ok: xhr.status >= 200 && xhr.status < 300,\n      status: xhr.status,\n      statusText: xhr.statusText\n    };\n  };\n\n  RestMessageAdapter.prototype.errorResponse = function (xhr, message) {\n    if (message === void 0) {\n      message = null;\n    }\n\n    return {\n      data: message || xhr.statusText,\n      headers: xhr.getAllResponseHeaders(),\n      json: function () {\n        return JSON.parse(message || \"\\\"\" + xhr.statusText + \"\\\"\");\n      },\n      ok: false,\n      status: xhr.status,\n      statusText: xhr.statusText\n    };\n  };\n\n  RestMessageAdapter.prototype.withQuery = function (url, params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    var queryString = this.queryParams(params);\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n  };\n\n  RestMessageAdapter.prototype.queryParams = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return Object.keys(params).map(function (k) {\n      return encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]);\n    }).join(\"&\");\n  };\n\n  return RestMessageAdapter;\n}();\n\nexports.RestMessageAdapter = RestMessageAdapter;","map":{"version":3,"mappings":"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","names":["RestRequestType","exports","configParams","connectionId","Exports_1","privHeaders","headers","privTimeout","timeout","privIgnoreCache","ignoreCache","RestMessageAdapter","key","value","method","uri","queryParams","body","binaryBody","responseReceivedDeferral","xhr","XMLHttpRequest","XHR","requestCommand","File","open","withQuery","Object","keys","forEach","setRequestHeader","_this","onload","resolve","parseXHRResult","onerror","errorResponse","ontimeout","send","Post","JSON","stringify","promise","data","responseText","getAllResponseHeaders","json","parse","ok","status","statusText","message","url","params","queryString","indexOf","map","k","encodeURIComponent","join"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\n// Node.JS specific xmlhttprequest / browser support.\r\nimport * as XHR from \"xmlhttprequest-ts\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"get\",\r\n    Post = \"post\",\r\n    Delete = \"delete\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privTimeout: number;\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions,\r\n        connectionId?: string\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privTimeout = configParams.timeout;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string ): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\r\n        if (typeof (XMLHttpRequest) === \"undefined\") {\r\n            xhr = new XHR.XMLHttpRequest();\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n        }\r\n        const requestCommand = method === RestRequestType.File ? \"post\" : method;\r\n        xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\r\n\r\n        if (this.privHeaders) {\r\n            Object.keys(this.privHeaders).forEach((key: any) => xhr.setRequestHeader(key, this.privHeaders[key]));\r\n        }\r\n\r\n        if (this.privIgnoreCache) {\r\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n        }\r\n\r\n        xhr.timeout = this.privTimeout;\r\n\r\n        xhr.onload = () => {\r\n            responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\r\n        };\r\n\r\n        xhr.onerror = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\r\n        };\r\n\r\n        xhr.ontimeout = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\r\n        };\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\r\n            xhr.send(binaryBody);\r\n        } else if (method === RestRequestType.Post && body) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.send(JSON.stringify(body));\r\n        } else {\r\n            xhr.send();\r\n        }\r\n\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IRestResponse {\r\n        return {\r\n            data: xhr.responseText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(xhr.responseText) as T,\r\n            ok: xhr.status >= 200 && xhr.status < 300,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IRestResponse {\r\n        return {\r\n            data: message || xhr.statusText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n            ok: false,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}