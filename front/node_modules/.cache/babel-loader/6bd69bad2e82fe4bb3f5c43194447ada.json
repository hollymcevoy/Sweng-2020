{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { PropertyId, VoiceProfileType } from \"../sdk/Exports\";\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SpeakerIdMessageAdapter\n */\n\nexport class SpeakerIdMessageAdapter {\n  constructor(config) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"https://\" + region + \".api.cognitive\" + hostSuffix + \"/speaker/{mode}/v2.0/{dependency}\");\n      endpoint = host + \"/profiles\";\n    }\n\n    this.privUri = endpoint;\n    const options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\n   * Sends create profile request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of voice profile to create.\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\n   */\n\n\n  createProfile(profileType, lang) {\n    const uri = this.getOperationUri(profileType);\n    this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"application/json\");\n    return this.privRestAdapter.request(RestRequestType.Post, uri, {}, {\n      locale: lang\n    });\n  }\n  /**\n   * Sends create enrollment request to endpoint.\n   * @function\n   * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  createEnrollment(profile, audioSource) {\n    this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\n    return audioSource.blob.then(result => {\n      return this.privRestAdapter.request(RestRequestType.File, uri, {\n        ignoreMinLength: \"true\"\n      }, null, result);\n    });\n  }\n  /**\n   * Sends verification request to endpoint.\n   * @function\n   * @param {SpeakerVerificationModel} model - voice model to verify against.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  verifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n      const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \"/verify\";\n\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, {\n          ignoreMinLength: \"true\"\n        }, null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\n   * Sends identification request to endpoint.\n   * @function\n   * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\n   */\n\n\n  identifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n      const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \"/identifySingleSpeaker\";\n\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, {\n          profileIds: model.voiceProfileIds,\n          ignoreMinLength: \"true\"\n        }, null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\n   * Sends profile status request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to check.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to status request\n   */\n\n\n  getProfileStatus(profile) {\n    const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, {});\n  }\n  /**\n   * Sends get all profiles request to endpoint.\n   * @function\n   * @param {VoiceProfileType} profileType - type of profiles to return list of\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing all profiles\n   */\n\n\n  getProfiles(profileType) {\n    const uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(RestRequestType.Get, uri, {});\n  }\n  /**\n   * Sends get authorization phrases request to endpoint.\n   * @function\n   * @param {string} lang - language/locale of voice profile\n   * @public\n   * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\n   */\n\n\n  getAuthorizationPhrases(lang) {\n    const uri = `${this.getOperationUri(VoiceProfileType.TextDependentVerification)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, {});\n  }\n  /**\n   * Sends delete profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to delete.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to deletion request\n   */\n\n\n  deleteProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n    return this.privRestAdapter.request(RestRequestType.Delete, uri, {});\n  }\n  /**\n   * Sends reset profile request to endpoint.\n   * @function\n   * @param {VoiceProfile} profile - voice profile to reset enrollments for.\n   * @public\n   * @returns {Promise<IRestResponse>} rest response to reset request\n   */\n\n\n  resetProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/reset\";\n    return this.privRestAdapter.request(RestRequestType.Post, uri, {});\n  }\n\n  getOperationUri(profileType) {\n    const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\n    const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\n    return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RestConfigBase","RestMessageAdapter","RestRequestType","PropertyId","VoiceProfileType","SpeakerIdMessageAdapter","constructor","config","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","toLowerCase","startsWith","host","SpeechServiceConnection_Host","privUri","options","requestOptions","headers","configParams","subscriptionKey","SpeechServiceConnection_Key","privRestAdapter","createProfile","profileType","lang","uri","getOperationUri","setHeaders","contentTypeKey","request","Post","locale","createEnrollment","profile","audioSource","profileId","blob","then","result","File","ignoreMinLength","verifySpeaker","model","voiceProfile","e","Promise","resolve","data","identifySpeaker","TextIndependentIdentification","profileIds","voiceProfileIds","getProfileStatus","Get","getProfiles","getAuthorizationPhrases","TextDependentVerification","replace","deleteProfile","Delete","resetProfile","mode","dependency"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/src/common.speech/SpeakerIdMessageAdapter.ts"],"sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    PromiseResult,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"https://\" + region + \".api.cognitive\" + hostSuffix + \"/speaker/{mode}/v2.0/{dependency}\");\r\n            endpoint = host + \"/profiles\";\r\n        }\r\n        this.privUri = endpoint;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"application/json\");\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {}, { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => {\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \"/verify\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \"/identifySingleSpeaker\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, { profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }, null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends profile status request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to check.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends get all profiles request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n     */\r\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends get authorization phrases request to endpoint.\r\n     * @function\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n     */\r\n    public getAuthorizationPhrases(lang: string): Promise<IRestResponse> {\r\n        const uri = `${this.getOperationUri(VoiceProfileType.TextDependentVerification)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, {});\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {});\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}