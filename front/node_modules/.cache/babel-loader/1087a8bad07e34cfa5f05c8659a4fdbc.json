{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Table = exports.TableRow = exports.TableCell = exports.StylableContainer = exports.TableColumnDefinition = void 0; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nvar card_elements_1 = require(\"./card-elements\");\n\nvar enums_1 = require(\"./enums\");\n\nvar registry_1 = require(\"./registry\");\n\nvar serialization_1 = require(\"./serialization\");\n\nvar shared_1 = require(\"./shared\");\n\nvar strings_1 = require(\"./strings\");\n\nvar utils_1 = require(\"./utils\");\n\nvar TableColumnDefinition =\n/** @class */\nfunction (_super) {\n  __extends(TableColumnDefinition, _super);\n\n  function TableColumnDefinition() {\n    //#region Schema\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.width = new shared_1.SizeAndUnit(1, enums_1.SizeUnit.Weight);\n    return _this;\n  }\n\n  TableColumnDefinition.prototype.getSchemaKey = function () {\n    return \"ColumnDefinition\";\n  };\n\n  TableColumnDefinition.horizontalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, \"horizontalCellContentAlignment\", enums_1.HorizontalAlignment);\n  TableColumnDefinition.verticalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, \"verticalCellContentAlignment\", enums_1.VerticalAlignment);\n  TableColumnDefinition.widthProperty = new serialization_1.CustomProperty(serialization_1.Versions.v1_5, \"width\", function (sender, property, source, context) {\n    var result = property.defaultValue;\n    var value = source[property.name];\n    var invalidWidth = false;\n\n    if (typeof value === \"number\" && !isNaN(value)) {\n      result = new shared_1.SizeAndUnit(value, enums_1.SizeUnit.Weight);\n    } else if (typeof value === \"string\") {\n      try {\n        result = shared_1.SizeAndUnit.parse(value);\n      } catch (e) {\n        invalidWidth = true;\n      }\n    } else {\n      invalidWidth = true;\n    }\n\n    if (invalidWidth) {\n      context.logParseEvent(sender, enums_1.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidColumnWidth(value));\n    }\n\n    return result;\n  }, function (sender, property, target, value, context) {\n    if (value.unit === enums_1.SizeUnit.Pixel) {\n      context.serializeValue(target, \"width\", value.physicalSize + \"px\");\n    } else {\n      context.serializeNumber(target, \"width\", value.physicalSize);\n    }\n  }, new shared_1.SizeAndUnit(1, enums_1.SizeUnit.Weight));\n\n  __decorate([serialization_1.property(TableColumnDefinition.horizontalCellContentAlignmentProperty)], TableColumnDefinition.prototype, \"horizontalCellContentAlignment\", void 0);\n\n  __decorate([serialization_1.property(TableColumnDefinition.verticalCellContentAlignmentProperty)], TableColumnDefinition.prototype, \"verticalCellContentAlignment\", void 0);\n\n  __decorate([serialization_1.property(TableColumnDefinition.widthProperty)], TableColumnDefinition.prototype, \"width\", void 0);\n\n  return TableColumnDefinition;\n}(serialization_1.SerializableObject);\n\nexports.TableColumnDefinition = TableColumnDefinition;\n\nvar StylableContainer =\n/** @class */\nfunction (_super) {\n  __extends(StylableContainer, _super);\n\n  function StylableContainer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._items = [];\n    return _this;\n  }\n\n  StylableContainer.prototype.parseItem = function (source, context) {\n    var _this = this;\n\n    return context.parseCardObject(this, source, [], // Forbidden types not supported for elements for now\n    !this.isDesignMode(), function (typeName) {\n      return _this.createItemInstance(typeName);\n    }, function (typeName, errorType) {\n      context.logParseEvent(undefined, enums_1.ValidationEvent.ElementTypeNotAllowed, strings_1.Strings.errors.elementTypeNotAllowed(typeName));\n    });\n  };\n\n  StylableContainer.prototype.internalAddItem = function (item) {\n    if (!item.parent) {\n      this._items.push(item);\n\n      item.setParent(this);\n    } else {\n      throw new Error(strings_1.Strings.errors.elementAlreadyParented());\n    }\n  };\n\n  StylableContainer.prototype.internalRemoveItem = function (item) {\n    var itemIndex = this._items.indexOf(item);\n\n    if (itemIndex >= 0) {\n      this._items.splice(itemIndex, 1);\n\n      item.setParent(undefined);\n      this.updateLayout();\n      return true;\n    }\n\n    return false;\n  };\n\n  StylableContainer.prototype.internalParse = function (source, context) {\n    _super.prototype.internalParse.call(this, source, context);\n\n    this._items = [];\n    var items = source[this.getCollectionPropertyName()];\n\n    if (Array.isArray(items)) {\n      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n        var item = items_1[_i];\n        var instance = this.parseItem(item, context);\n\n        if (instance) {\n          this._items.push(instance);\n        }\n      }\n    }\n  };\n\n  StylableContainer.prototype.internalToJSON = function (target, context) {\n    _super.prototype.internalToJSON.call(this, target, context);\n\n    context.serializeArray(target, this.getCollectionPropertyName(), this._items);\n  };\n\n  StylableContainer.prototype.removeItem = function (item) {\n    return this.internalRemoveItem(item);\n  };\n\n  StylableContainer.prototype.getItemCount = function () {\n    return this._items.length;\n  };\n\n  StylableContainer.prototype.getItemAt = function (index) {\n    return this._items[index];\n  };\n\n  StylableContainer.prototype.getFirstVisibleRenderedItem = function () {\n    return this.getItemCount() > 0 ? this.getItemAt(0) : undefined;\n  };\n\n  StylableContainer.prototype.getLastVisibleRenderedItem = function () {\n    return this.getItemCount() > 0 ? this.getItemAt(this.getItemCount() - 1) : undefined;\n  };\n\n  return StylableContainer;\n}(card_elements_1.StylableCardElementContainer);\n\nexports.StylableContainer = StylableContainer;\n\nvar TableCell =\n/** @class */\nfunction (_super) {\n  __extends(TableCell, _super);\n\n  function TableCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._columnIndex = -1;\n    _this._cellType = \"data\";\n    return _this;\n  }\n\n  TableCell.prototype.getHasBorder = function () {\n    return this.parentRow.parentTable.showGridLines;\n  };\n\n  TableCell.prototype.applyBorder = function () {\n    if (this.renderedElement && this.getHasBorder()) {\n      var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.parentRow.parentTable.gridStyle);\n\n      if (styleDefinition.borderColor) {\n        var borderColor = utils_1.stringToCssColor(styleDefinition.borderColor);\n\n        if (borderColor) {\n          this.renderedElement.style.borderRight = \"1px solid \" + borderColor;\n          this.renderedElement.style.borderBottom = \"1px solid \" + borderColor;\n        }\n      }\n    }\n  };\n\n  TableCell.prototype.getDefaultPadding = function () {\n    return this.getHasBackground() || this.getHasBorder() ? new shared_1.PaddingDefinition(enums_1.Spacing.Small, enums_1.Spacing.Small, enums_1.Spacing.Small, enums_1.Spacing.Small) : _super.prototype.getDefaultPadding.call(this);\n  };\n\n  TableCell.prototype.internalRender = function () {\n    var cellElement = _super.prototype.internalRender.call(this);\n\n    if (cellElement) {\n      cellElement.setAttribute(\"role\", this.cellType === \"data\" ? \"cell\" : \"columnheader\");\n      cellElement.style.minWidth = \"0\";\n\n      if (this.cellType === \"header\") {\n        cellElement.setAttribute(\"scope\", \"col\");\n      }\n    }\n\n    return cellElement;\n  };\n\n  TableCell.prototype.shouldSerialize = function (context) {\n    return true;\n  };\n\n  TableCell.prototype.getJsonTypeName = function () {\n    return \"TableCell\";\n  };\n\n  TableCell.prototype.getEffectiveTextStyleDefinition = function () {\n    if (this.cellType === \"header\") {\n      return this.hostConfig.textStyles.columnHeader;\n    }\n\n    return _super.prototype.getEffectiveTextStyleDefinition.call(this);\n  };\n\n  TableCell.prototype.getEffectiveHorizontalAlignment = function () {\n    if (this.horizontalAlignment !== undefined) {\n      return this.horizontalAlignment;\n    }\n\n    if (this.parentRow.horizontalCellContentAlignment !== undefined) {\n      return this.parentRow.horizontalCellContentAlignment;\n    }\n\n    if (this.columnIndex >= 0) {\n      var horizontalAlignment = this.parentRow.parentTable.getColumnAt(this.columnIndex).horizontalCellContentAlignment;\n\n      if (horizontalAlignment !== undefined) {\n        return horizontalAlignment;\n      }\n    }\n\n    if (this.parentRow.parentTable.horizontalCellContentAlignment !== undefined) {\n      return this.parentRow.parentTable.horizontalCellContentAlignment;\n    }\n\n    return _super.prototype.getEffectiveHorizontalAlignment.call(this);\n  };\n\n  TableCell.prototype.getEffectiveVerticalContentAlignment = function () {\n    if (this.verticalContentAlignment !== undefined) {\n      return this.verticalContentAlignment;\n    }\n\n    if (this.parentRow.verticalCellContentAlignment !== undefined) {\n      return this.parentRow.verticalCellContentAlignment;\n    }\n\n    if (this.columnIndex >= 0) {\n      var verticalAlignment = this.parentRow.parentTable.getColumnAt(this.columnIndex).verticalCellContentAlignment;\n\n      if (verticalAlignment !== undefined) {\n        return verticalAlignment;\n      }\n    }\n\n    if (this.parentRow.parentTable.verticalCellContentAlignment !== undefined) {\n      return this.parentRow.parentTable.verticalCellContentAlignment;\n    }\n\n    return _super.prototype.getEffectiveVerticalContentAlignment.call(this);\n  };\n\n  Object.defineProperty(TableCell.prototype, \"columnIndex\", {\n    get: function () {\n      return this._columnIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TableCell.prototype, \"cellType\", {\n    get: function () {\n      return this._cellType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TableCell.prototype, \"parentRow\", {\n    get: function () {\n      return this.parent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TableCell.prototype, \"isStandalone\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TableCell;\n}(card_elements_1.Container);\n\nexports.TableCell = TableCell;\n\nvar TableRow =\n/** @class */\nfunction (_super) {\n  __extends(TableRow, _super);\n\n  function TableRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } //#endregion\n\n\n  TableRow.prototype.getDefaultPadding = function () {\n    return new shared_1.PaddingDefinition(enums_1.Spacing.None, enums_1.Spacing.None, enums_1.Spacing.None, enums_1.Spacing.None);\n  };\n\n  TableRow.prototype.applyBackground = function () {\n    if (this.renderedElement) {\n      var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));\n\n      if (styleDefinition.backgroundColor) {\n        var bgColor = utils_1.stringToCssColor(styleDefinition.backgroundColor);\n        this.renderedElement.style.backgroundColor = bgColor;\n      }\n    }\n  };\n\n  TableRow.prototype.getCollectionPropertyName = function () {\n    return \"cells\";\n  };\n\n  TableRow.prototype.createItemInstance = function (typeName) {\n    return !typeName || typeName === \"TableCell\" ? new TableCell() : undefined;\n  };\n\n  TableRow.prototype.internalRender = function () {\n    var isFirstRow = this.getIsFirstRow();\n    var cellSpacing = this.hostConfig.table.cellSpacing;\n    var rowElement = document.createElement(\"div\");\n    rowElement.setAttribute(\"role\", \"row\");\n    rowElement.style.display = \"flex\";\n    rowElement.style.flexDirection = \"row\";\n\n    for (var i = 0; i < Math.min(this.getItemCount(), this.parentTable.getColumnCount()); i++) {\n      var cell = this.getItemAt(i); // Cheating a bit in order to keep cellType read-only\n\n      cell[\"_columnIndex\"] = i;\n      cell[\"_cellType\"] = this.parentTable.firstRowAsHeaders && isFirstRow ? \"header\" : \"data\";\n      var renderedCell = cell.render();\n\n      if (renderedCell) {\n        var column = this.parentTable.getColumnAt(i);\n\n        if (column.computedWidth.unit === enums_1.SizeUnit.Pixel) {\n          renderedCell.style.flex = \"0 0 \" + column.computedWidth.physicalSize + \"px\";\n        } else {\n          renderedCell.style.flex = \"1 1 \" + column.computedWidth.physicalSize + \"%\";\n        }\n\n        if (i > 0 && !this.parentTable.showGridLines && cellSpacing > 0) {\n          renderedCell.style.marginLeft = cellSpacing + \"px\";\n        }\n\n        rowElement.appendChild(renderedCell);\n      }\n    }\n\n    return rowElement.children.length > 0 ? rowElement : undefined;\n  };\n\n  TableRow.prototype.shouldSerialize = function (context) {\n    return true;\n  };\n\n  TableRow.prototype.addCell = function (cell) {\n    this.internalAddItem(cell);\n  };\n\n  TableRow.prototype.removeCellAt = function (columnIndex) {\n    if (columnIndex >= 0 && columnIndex < this.getItemCount()) {\n      return this.removeItem(this.getItemAt(columnIndex));\n    }\n\n    return false;\n  };\n\n  TableRow.prototype.ensureHasEnoughCells = function (cellCount) {\n    while (this.getItemCount() < cellCount) {\n      this.addCell(new TableCell());\n    }\n  };\n\n  TableRow.prototype.getJsonTypeName = function () {\n    return \"TableRow\";\n  };\n\n  TableRow.prototype.getIsFirstRow = function () {\n    return this.parentTable.getItemAt(0) === this;\n  };\n\n  Object.defineProperty(TableRow.prototype, \"parentTable\", {\n    get: function () {\n      return this.parent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TableRow.prototype, \"isStandalone\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  }); //#region Schema\n\n  TableRow.styleProperty = new card_elements_1.ContainerStyleProperty(serialization_1.Versions.v1_5, \"style\");\n  TableRow.horizontalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, \"horizontalCellContentAlignment\", enums_1.HorizontalAlignment);\n  TableRow.verticalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, \"verticalCellContentAlignment\", enums_1.VerticalAlignment);\n\n  __decorate([serialization_1.property(TableRow.horizontalCellContentAlignmentProperty)], TableRow.prototype, \"horizontalCellContentAlignment\", void 0);\n\n  __decorate([serialization_1.property(TableRow.verticalCellContentAlignmentProperty)], TableRow.prototype, \"verticalCellContentAlignment\", void 0);\n\n  return TableRow;\n}(StylableContainer);\n\nexports.TableRow = TableRow;\n\nvar Table =\n/** @class */\nfunction (_super) {\n  __extends(Table, _super);\n\n  function Table() {\n    //#region Schema\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._columns = [];\n    _this.firstRowAsHeaders = true;\n    _this.showGridLines = true;\n    return _this;\n  }\n\n  Object.defineProperty(Table.prototype, \"gridStyle\", {\n    get: function () {\n      var style = this.getValue(Table.gridStyleProperty);\n\n      if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\n        return style;\n      }\n\n      return undefined;\n    },\n    set: function (value) {\n      this.setValue(Table.gridStyleProperty, value);\n    },\n    enumerable: false,\n    configurable: true\n  }); //#endregion\n\n  Table.prototype.ensureRowsHaveEnoughCells = function () {\n    for (var i = 0; i < this.getItemCount(); i++) {\n      this.getItemAt(i).ensureHasEnoughCells(this.getColumnCount());\n    }\n  };\n\n  Table.prototype.removeCellsFromColumn = function (columnIndex) {\n    for (var i = 0; i < this.getItemCount(); i++) {\n      this.getItemAt(i).removeCellAt(columnIndex);\n    }\n  };\n\n  Table.prototype.getCollectionPropertyName = function () {\n    return \"rows\";\n  };\n\n  Table.prototype.createItemInstance = function (typeName) {\n    return !typeName || typeName === \"TableRow\" ? new TableRow() : undefined;\n  };\n\n  Table.prototype.internalParse = function (source, context) {\n    _super.prototype.internalParse.call(this, source, context);\n\n    this.ensureRowsHaveEnoughCells();\n  };\n\n  Table.prototype.internalRender = function () {\n    if (this.getItemCount() > 0) {\n      var totalWeights = 0;\n\n      for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {\n        var column = _a[_i];\n\n        if (column.width.unit === enums_1.SizeUnit.Weight) {\n          totalWeights += column.width.physicalSize;\n        }\n      }\n\n      for (var _b = 0, _c = this._columns; _b < _c.length; _b++) {\n        var column = _c[_b];\n\n        if (column.width.unit === enums_1.SizeUnit.Pixel) {\n          column.computedWidth = new shared_1.SizeAndUnit(column.width.physicalSize, enums_1.SizeUnit.Pixel);\n        } else {\n          column.computedWidth = new shared_1.SizeAndUnit(100 / totalWeights * column.width.physicalSize, enums_1.SizeUnit.Weight);\n        }\n      }\n\n      var tableElement = document.createElement(\"div\");\n      tableElement.setAttribute(\"role\", \"table\");\n      tableElement.style.display = \"flex\";\n      tableElement.style.flexDirection = \"column\";\n\n      if (this.showGridLines) {\n        var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.gridStyle);\n\n        if (styleDefinition.borderColor) {\n          var borderColor = utils_1.stringToCssColor(styleDefinition.borderColor);\n\n          if (borderColor) {\n            tableElement.style.borderTop = \"1px solid \" + borderColor;\n            tableElement.style.borderLeft = \"1px solid \" + borderColor;\n          }\n        }\n      }\n\n      var cellSpacing = this.hostConfig.table.cellSpacing;\n\n      for (var i = 0; i < this.getItemCount(); i++) {\n        var renderedRow = this.getItemAt(i).render();\n\n        if (renderedRow) {\n          if (i > 0 && !this.showGridLines && cellSpacing > 0) {\n            var separatorRow = document.createElement(\"div\");\n            separatorRow.setAttribute(\"aria-hidden\", \"true\");\n            separatorRow.style.height = cellSpacing + \"px\";\n            tableElement.appendChild(separatorRow);\n          }\n\n          tableElement.appendChild(renderedRow);\n        }\n      }\n\n      return tableElement;\n    }\n\n    return undefined;\n  };\n\n  Table.prototype.addColumn = function (column) {\n    this._columns.push(column);\n\n    this.ensureRowsHaveEnoughCells();\n  };\n\n  Table.prototype.removeColumn = function (column) {\n    var index = this._columns.indexOf(column);\n\n    if (index >= 0) {\n      this.removeCellsFromColumn(index);\n\n      this._columns.splice(index, 1);\n    }\n  };\n\n  Table.prototype.getColumnCount = function () {\n    return this._columns.length;\n  };\n\n  Table.prototype.getColumnAt = function (index) {\n    return this._columns[index];\n  };\n\n  Table.prototype.addRow = function (row) {\n    this.internalAddItem(row);\n    row.ensureHasEnoughCells(this.getColumnCount());\n  };\n\n  Table.prototype.getJsonTypeName = function () {\n    return \"Table\";\n  };\n\n  Table.columnsProperty = new serialization_1.SerializableObjectCollectionProperty(serialization_1.Versions.v1_5, \"columns\", TableColumnDefinition);\n  Table.firstRowAsHeadersProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_5, \"firstRowAsHeaders\", true);\n  Table.showGridLinesProperty = new serialization_1.BoolProperty(serialization_1.Versions.v1_5, \"showGridLines\", true);\n  Table.gridStyleProperty = new card_elements_1.ContainerStyleProperty(serialization_1.Versions.v1_5, \"gridStyle\");\n  Table.horizontalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, \"horizontalCellContentAlignment\", enums_1.HorizontalAlignment);\n  Table.verticalCellContentAlignmentProperty = new serialization_1.EnumProperty(serialization_1.Versions.v1_5, \"verticalCellContentAlignment\", enums_1.VerticalAlignment);\n\n  __decorate([serialization_1.property(Table.columnsProperty)], Table.prototype, \"_columns\", void 0);\n\n  __decorate([serialization_1.property(Table.firstRowAsHeadersProperty)], Table.prototype, \"firstRowAsHeaders\", void 0);\n\n  __decorate([serialization_1.property(Table.showGridLinesProperty)], Table.prototype, \"showGridLines\", void 0);\n\n  __decorate([serialization_1.property(Table.gridStyleProperty)], Table.prototype, \"gridStyle\", null);\n\n  __decorate([serialization_1.property(Table.horizontalCellContentAlignmentProperty)], Table.prototype, \"horizontalCellContentAlignment\", void 0);\n\n  __decorate([serialization_1.property(Table.verticalCellContentAlignmentProperty)], Table.prototype, \"verticalCellContentAlignment\", void 0);\n\n  return Table;\n}(StylableContainer);\n\nexports.Table = Table;\nregistry_1.GlobalRegistry.defaultElements.register(\"Table\", Table, serialization_1.Versions.v1_5);","map":{"version":3,"mappings":"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","names":["__extends","_this","shared_1","enums_1","Weight","TableColumnDefinition","serialization_1","v1_5","sender","property","source","context","result","defaultValue","value","name","invalidWidth","isNaN","parse","e","logParseEvent","InvalidPropertyValue","strings_1","errors","invalidColumnWidth","target","unit","Pixel","serializeValue","physicalSize","serializeNumber","__decorate","horizontalCellContentAlignmentProperty","verticalCellContentAlignmentProperty","widthProperty","exports","StylableContainer","parseCardObject","isDesignMode","typeName","createItemInstance","errorType","undefined","ElementTypeNotAllowed","elementTypeNotAllowed","item","parent","_items","push","setParent","Error","elementAlreadyParented","itemIndex","indexOf","splice","updateLayout","_super","internalParse","call","items","getCollectionPropertyName","Array","isArray","_i","instance","parseItem","internalToJSON","serializeArray","internalRemoveItem","length","index","getItemCount","getItemAt","card_elements_1","TableCell","parentRow","parentTable","showGridLines","renderedElement","getHasBorder","styleDefinition","hostConfig","containerStyles","getStyleByName","gridStyle","borderColor","utils_1","style","borderRight","borderBottom","getHasBackground","Small","getDefaultPadding","cellElement","internalRender","setAttribute","cellType","minWidth","textStyles","columnHeader","getEffectiveTextStyleDefinition","horizontalAlignment","horizontalCellContentAlignment","columnIndex","getColumnAt","getEffectiveHorizontalAlignment","verticalContentAlignment","verticalCellContentAlignment","verticalAlignment","getEffectiveVerticalContentAlignment","Object","_columnIndex","_cellType","TableRow","None","defaultStyle","backgroundColor","bgColor","isFirstRow","getIsFirstRow","cellSpacing","table","rowElement","document","createElement","display","flexDirection","i","Math","min","getColumnCount","cell","firstRowAsHeaders","renderedCell","render","column","computedWidth","flex","marginLeft","appendChild","children","internalAddItem","removeItem","cellCount","addCell","Table","getValue","gridStyleProperty","setValue","ensureHasEnoughCells","removeCellAt","ensureRowsHaveEnoughCells","totalWeights","_columns","width","_b","tableElement","borderTop","borderLeft","renderedRow","separatorRow","height","removeCellsFromColumn","row","columnsProperty","firstRowAsHeadersProperty","showGridLinesProperty","registry_1","defaultElements","register"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/adaptivecards/src/table.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { CardElement, StylableCardElementContainer, SerializationContext, Container, ContainerStyleProperty } from \"./card-elements\";\nimport { HorizontalAlignment, VerticalAlignment, SizeUnit, ValidationEvent, TypeErrorType, Spacing } from \"./enums\";\nimport { TextStyleDefinition } from \"./host-config\";\nimport { GlobalRegistry } from \"./registry\";\nimport { BaseSerializationContext, BoolProperty, CustomProperty, EnumProperty, property, PropertyBag,\n    PropertyDefinition, SerializableObject, SerializableObjectCollectionProperty, Versions } from \"./serialization\";\nimport { SizeAndUnit, PaddingDefinition } from \"./shared\";\nimport { Strings } from \"./strings\";\nimport { stringToCssColor } from \"./utils\";\n\nexport class TableColumnDefinition extends SerializableObject {\n    //#region Schema\n\n    static readonly horizontalCellContentAlignmentProperty = new EnumProperty(Versions.v1_5, \"horizontalCellContentAlignment\", HorizontalAlignment);\n    static readonly verticalCellContentAlignmentProperty = new EnumProperty(Versions.v1_5, \"verticalCellContentAlignment\", VerticalAlignment);\n\n    static readonly widthProperty = new CustomProperty<SizeAndUnit>(\n        Versions.v1_5,\n        \"width\",\n        (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => {\n            let result: SizeAndUnit = property.defaultValue;\n            let value = source[property.name];\n            let invalidWidth = false;\n\n            if (typeof value === \"number\" && !isNaN(value)) {\n                result = new SizeAndUnit(value, SizeUnit.Weight);\n            }\n            else if (typeof value === \"string\") {\n                try {\n                    result = SizeAndUnit.parse(value);\n                }\n                catch (e) {\n                    invalidWidth = true;\n                }\n            }\n            else {\n                invalidWidth = true;\n            }\n\n            if (invalidWidth) {\n                context.logParseEvent(\n                    sender,\n                    ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidColumnWidth(value));\n            }\n\n            return result;\n        },\n        (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: SizeAndUnit, context: BaseSerializationContext) => {\n            if (value.unit === SizeUnit.Pixel) {\n                context.serializeValue(target, \"width\", value.physicalSize + \"px\");\n            }\n            else {\n                context.serializeNumber(target, \"width\", value.physicalSize);\n            }\n        },\n        new SizeAndUnit(1, SizeUnit.Weight));\n\n    @property(TableColumnDefinition.horizontalCellContentAlignmentProperty)\n    horizontalCellContentAlignment?: HorizontalAlignment;\n\n    @property(TableColumnDefinition.verticalCellContentAlignmentProperty)\n    verticalCellContentAlignment?: VerticalAlignment;\n\n    @property(TableColumnDefinition.widthProperty)\n    width: SizeAndUnit = new SizeAndUnit(1, SizeUnit.Weight);\n\n    getSchemaKey(): string {\n        return \"ColumnDefinition\";\n    }\n\n    //#endregion\n\n    computedWidth: SizeAndUnit;\n}\n\nexport abstract class StylableContainer<T extends CardElement> extends StylableCardElementContainer {\n    private _items: T[] = [];\n\n    private parseItem(source: any, context: SerializationContext): T | undefined {\n        return context.parseCardObject<T>(\n            this,\n            source,\n            [], // Forbidden types not supported for elements for now\n            !this.isDesignMode(),\n            (typeName: string) => {\n                return this.createItemInstance(typeName);\n            },\n            (typeName: string, errorType: TypeErrorType) => {\n                context.logParseEvent(\n                    undefined,\n                    ValidationEvent.ElementTypeNotAllowed,\n                    Strings.errors.elementTypeNotAllowed(typeName));\n            });\n    }\n\n    protected abstract getCollectionPropertyName(): string;\n    protected abstract createItemInstance(typeName: string): T | undefined;\n\n    protected internalAddItem(item: T) {\n        if (!item.parent) {\n            this._items.push(item);\n\n            item.setParent(this);\n        }\n        else {\n            throw new Error(Strings.errors.elementAlreadyParented());\n        }\n    }\n\n    protected internalRemoveItem(item: T): boolean {\n        let itemIndex = this._items.indexOf(item);\n\n        if (itemIndex >= 0) {\n            this._items.splice(itemIndex, 1);\n\n            item.setParent(undefined);\n\n            this.updateLayout();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    protected internalParse(source: any, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this._items = [];\n\n        let items = source[this.getCollectionPropertyName()];\n\n        if (Array.isArray(items)) {\n            for (let item of items) {\n                let instance = this.parseItem(item, context);\n\n                if (instance) {\n                    this._items.push(instance);\n                }\n            }\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\n        super.internalToJSON(target, context);\n\n        context.serializeArray(target, this.getCollectionPropertyName(), this._items);\n    }\n\n    removeItem(item: T): boolean {\n        return this.internalRemoveItem(item);\n    }\n\n    getItemCount(): number {\n        return this._items.length;\n    }\n\n    getItemAt(index: number): T {\n        return this._items[index];\n    }\n\n    getFirstVisibleRenderedItem(): T | undefined {\n        return this.getItemCount() > 0 ? this.getItemAt(0) : undefined;\n    }\n\n    getLastVisibleRenderedItem(): T | undefined {\n        return this.getItemCount() > 0 ? this.getItemAt(this.getItemCount() - 1) : undefined;\n    }\n}\n\nexport type CellType = \"data\" | \"header\";\n\nexport class TableCell extends Container {\n    private _columnIndex: number = -1;\n    private _cellType: CellType = \"data\";\n\n    protected getHasBorder(): boolean {\n        return this.parentRow.parentTable.showGridLines;\n    }\n\n    protected applyBorder() {\n        if (this.renderedElement && this.getHasBorder()) {\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.parentRow.parentTable.gridStyle);\n\n            if (styleDefinition.borderColor) {\n                const borderColor = <string>stringToCssColor(styleDefinition.borderColor);\n\n                if (borderColor) {\n                    this.renderedElement.style.borderRight = \"1px solid \" + borderColor;\n                    this.renderedElement.style.borderBottom = \"1px solid \" + borderColor;\n                }\n            }\n        }\n    }\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return this.getHasBackground() || this.getHasBorder() ?\n            new PaddingDefinition(\n                Spacing.Small,\n                Spacing.Small,\n                Spacing.Small,\n                Spacing.Small) : super.getDefaultPadding();\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        let cellElement = super.internalRender();\n\n        if (cellElement) {\n            cellElement.setAttribute(\"role\", this.cellType === \"data\" ? \"cell\" : \"columnheader\");\n            cellElement.style.minWidth = \"0\";\n\n            if (this.cellType === \"header\") {\n                cellElement.setAttribute(\"scope\", \"col\");\n            }\n        }\n\n        return cellElement;\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return true;\n    }\n\n    getJsonTypeName(): string {\n        return \"TableCell\";\n    }\n\n    getEffectiveTextStyleDefinition(): TextStyleDefinition {\n        if (this.cellType === \"header\") {\n            return this.hostConfig.textStyles.columnHeader;\n        }\n\n        return super.getEffectiveTextStyleDefinition();\n    }\n\n    getEffectiveHorizontalAlignment(): HorizontalAlignment {\n        if (this.horizontalAlignment !== undefined) {\n            return this.horizontalAlignment;\n        }\n\n        if (this.parentRow.horizontalCellContentAlignment !== undefined) {\n            return this.parentRow.horizontalCellContentAlignment;\n        }\n\n        if (this.columnIndex >= 0) {\n            let horizontalAlignment = this.parentRow.parentTable.getColumnAt(this.columnIndex).horizontalCellContentAlignment;\n\n            if (horizontalAlignment !== undefined) {\n                return horizontalAlignment;\n            }\n        }\n\n        if (this.parentRow.parentTable.horizontalCellContentAlignment !== undefined) {\n            return this.parentRow.parentTable.horizontalCellContentAlignment;\n        }\n\n        return super.getEffectiveHorizontalAlignment();\n    }\n\n    getEffectiveVerticalContentAlignment(): VerticalAlignment {\n        if (this.verticalContentAlignment !== undefined) {\n            return this.verticalContentAlignment;\n        }\n\n        if (this.parentRow.verticalCellContentAlignment !== undefined) {\n            return this.parentRow.verticalCellContentAlignment;\n        }\n\n        if (this.columnIndex >= 0) {\n            let verticalAlignment = this.parentRow.parentTable.getColumnAt(this.columnIndex).verticalCellContentAlignment;\n\n            if (verticalAlignment !== undefined) {\n                return verticalAlignment;\n            }\n        }\n\n        if (this.parentRow.parentTable.verticalCellContentAlignment !== undefined) {\n            return this.parentRow.parentTable.verticalCellContentAlignment;\n        }\n\n        return super.getEffectiveVerticalContentAlignment();\n    }\n\n    get columnIndex(): number {\n        return this._columnIndex;\n    }\n\n    get cellType(): CellType {\n        return this._cellType;\n    }\n\n    get parentRow(): TableRow {\n        return this.parent as TableRow;\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n}\n\nexport class TableRow extends StylableContainer<TableCell> {\n    //#region Schema\n\n    static readonly styleProperty = new ContainerStyleProperty(Versions.v1_5, \"style\");\n    static readonly horizontalCellContentAlignmentProperty = new EnumProperty(Versions.v1_5, \"horizontalCellContentAlignment\", HorizontalAlignment);\n    static readonly verticalCellContentAlignmentProperty = new EnumProperty(Versions.v1_5, \"verticalCellContentAlignment\", VerticalAlignment);\n\n    @property(TableRow.horizontalCellContentAlignmentProperty)\n    horizontalCellContentAlignment?: HorizontalAlignment;\n\n    @property(TableRow.verticalCellContentAlignmentProperty)\n    verticalCellContentAlignment?: VerticalAlignment;\n\n    //#endregion\n\n    protected getDefaultPadding(): PaddingDefinition {\n        return new PaddingDefinition(\n            Spacing.None,\n            Spacing.None,\n            Spacing.None,\n            Spacing.None);\n    }\n\n    protected applyBackground() {\n        if (this.renderedElement) {\n            let styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));\n\n            if (styleDefinition.backgroundColor) {\n                const bgColor = <string>stringToCssColor(styleDefinition.backgroundColor);\n                this.renderedElement.style.backgroundColor = bgColor;\n            }\n        }\n    }\n\n    protected getCollectionPropertyName(): string {\n        return \"cells\";\n    }\n\n    protected createItemInstance(typeName: string): TableCell | undefined {\n        return !typeName || typeName === \"TableCell\" ? new TableCell() : undefined;\n    }\n    \n    protected internalRender(): HTMLElement | undefined {\n        let isFirstRow = this.getIsFirstRow();\n        let cellSpacing = this.hostConfig.table.cellSpacing;\n\n        let rowElement = document.createElement(\"div\");\n        rowElement.setAttribute(\"role\", \"row\");\n        rowElement.style.display = \"flex\";\n        rowElement.style.flexDirection = \"row\";\n\n        for (let i = 0; i < Math.min(this.getItemCount(), this.parentTable.getColumnCount()); i++) {\n            let cell = this.getItemAt(i);\n\n            // Cheating a bit in order to keep cellType read-only\n            cell[\"_columnIndex\"] = i;\n            cell[\"_cellType\"] = (this.parentTable.firstRowAsHeaders && isFirstRow) ? \"header\" : \"data\";\n\n            let renderedCell = cell.render();\n\n            if (renderedCell) {\n                let column = this.parentTable.getColumnAt(i);\n\n                if (column.computedWidth.unit === SizeUnit.Pixel) {\n                    renderedCell.style.flex = \"0 0 \" + column.computedWidth.physicalSize + \"px\";\n                }\n                else {\n                    renderedCell.style.flex = \"1 1 \" + column.computedWidth.physicalSize + \"%\";\n                }\n\n                if (i > 0 && !this.parentTable.showGridLines && cellSpacing > 0) {\n                    renderedCell.style.marginLeft = cellSpacing + \"px\";\n                }\n\n                rowElement.appendChild(renderedCell);\n            }\n        }\n\n        return rowElement.children.length > 0 ? rowElement : undefined;\n    }\n\n    protected shouldSerialize(context: SerializationContext): boolean {\n        return true;\n    }\n\n    addCell(cell: TableCell) {\n        this.internalAddItem(cell);\n    }\n\n    removeCellAt(columnIndex: number): boolean {\n        if (columnIndex >= 0 && columnIndex < this.getItemCount()) {\n            return this.removeItem(this.getItemAt(columnIndex));\n        }\n\n        return false;\n    }\n\n    ensureHasEnoughCells(cellCount: number) {\n        while (this.getItemCount() < cellCount) {\n            this.addCell(new TableCell());\n        }\n    }\n\n    getJsonTypeName(): string {\n        return \"TableRow\";\n    }\n\n    getIsFirstRow(): boolean {\n        return this.parentTable.getItemAt(0) === this;\n    }\n\n    get parentTable(): Table {\n        return this.parent as Table;\n    }\n\n    get isStandalone(): boolean {\n        return false;\n    }\n}\n\nexport class Table extends StylableContainer<TableRow> {\n    //#region Schema\n\n    private static readonly columnsProperty = new SerializableObjectCollectionProperty(Versions.v1_5, \"columns\", TableColumnDefinition);\n\n    static readonly firstRowAsHeadersProperty = new BoolProperty(Versions.v1_5, \"firstRowAsHeaders\", true);\n    static readonly showGridLinesProperty = new BoolProperty(Versions.v1_5, \"showGridLines\", true);\n    static readonly gridStyleProperty = new ContainerStyleProperty(Versions.v1_5, \"gridStyle\");\n    static readonly horizontalCellContentAlignmentProperty = new EnumProperty(Versions.v1_5, \"horizontalCellContentAlignment\", HorizontalAlignment);\n    static readonly verticalCellContentAlignmentProperty = new EnumProperty(Versions.v1_5, \"verticalCellContentAlignment\", VerticalAlignment);\n\n    @property(Table.columnsProperty)\n    private _columns: TableColumnDefinition[] = [];\n\n    @property(Table.firstRowAsHeadersProperty)\n    firstRowAsHeaders: boolean = true;\n\n    @property(Table.showGridLinesProperty)\n    showGridLines: boolean = true;\n\n    @property(Table.gridStyleProperty)\n    get gridStyle(): string | undefined {\n        let style = this.getValue(Table.gridStyleProperty);\n\n        if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\n            return style;\n        }\n\n        return undefined;\n    }\n\n    set gridStyle(value: string | undefined) {\n        this.setValue(Table.gridStyleProperty, value);\n    }\n\n    @property(Table.horizontalCellContentAlignmentProperty)\n    horizontalCellContentAlignment?: HorizontalAlignment;\n\n    @property(Table.verticalCellContentAlignmentProperty)\n    verticalCellContentAlignment?: VerticalAlignment;\n\n    //#endregion\n\n    private ensureRowsHaveEnoughCells() {\n        for (let i = 0; i < this.getItemCount(); i++) {\n            this.getItemAt(i).ensureHasEnoughCells(this.getColumnCount());\n        }\n    }\n\n    private removeCellsFromColumn(columnIndex: number) {\n        for (let i = 0; i < this.getItemCount(); i++) {\n            this.getItemAt(i).removeCellAt(columnIndex);\n        }\n    }\n\n    protected getCollectionPropertyName(): string {\n        return \"rows\";\n    }\n\n    protected createItemInstance(typeName: string): TableRow | undefined {\n        return !typeName || typeName === \"TableRow\" ? new TableRow() : undefined;\n    }\n\n    protected internalParse(source: PropertyBag, context: SerializationContext) {\n        super.internalParse(source, context);\n\n        this.ensureRowsHaveEnoughCells();\n    }\n\n    protected internalRender(): HTMLElement | undefined {\n        if (this.getItemCount() > 0) {\n            let totalWeights: number = 0;\n\n            for (let column of this._columns) {\n                if (column.width.unit === SizeUnit.Weight) {\n                    totalWeights += column.width.physicalSize;\n                }\n            }\n\n            for (let column of this._columns) {\n                if (column.width.unit === SizeUnit.Pixel) {\n                    column.computedWidth = new SizeAndUnit(column.width.physicalSize, SizeUnit.Pixel);\n                }\n                else {\n                    column.computedWidth = new SizeAndUnit(100 / totalWeights * column.width.physicalSize, SizeUnit.Weight);\n                }\n            }\n\n            let tableElement = document.createElement(\"div\");\n            tableElement.setAttribute(\"role\", \"table\");\n            tableElement.style.display = \"flex\";\n            tableElement.style.flexDirection = \"column\";\n\n            if (this.showGridLines) {\n                let styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.gridStyle);\n\n                if (styleDefinition.borderColor) {\n                    const borderColor = <string>stringToCssColor(styleDefinition.borderColor);\n    \n                    if (borderColor) {\n                        tableElement.style.borderTop = \"1px solid \" + borderColor;\n                        tableElement.style.borderLeft = \"1px solid \" + borderColor;\n                    }\n                }\n            }\n\n            let cellSpacing = this.hostConfig.table.cellSpacing;\n\n            for (let i = 0; i < this.getItemCount(); i++) {\n                let renderedRow = this.getItemAt(i).render();\n\n                if (renderedRow) {\n                    if (i > 0 && !this.showGridLines && cellSpacing > 0) {\n                        let separatorRow = document.createElement(\"div\");\n                        separatorRow.setAttribute(\"aria-hidden\", \"true\");\n                        separatorRow.style.height = cellSpacing + \"px\";\n\n                        tableElement.appendChild(separatorRow);\n                    }\n\n                    tableElement.appendChild(renderedRow);\n                }\n            }\n\n            return tableElement;\n        }\n\n        return undefined;\n    }\n\n    addColumn(column: TableColumnDefinition) {\n        this._columns.push(column);\n\n        this.ensureRowsHaveEnoughCells();\n    }\n\n    removeColumn(column: TableColumnDefinition) {\n        let index = this._columns.indexOf(column);\n\n        if (index >= 0) {\n            this.removeCellsFromColumn(index);\n\n            this._columns.splice(index, 1);\n        }\n    }\n\n    getColumnCount(): number {\n        return this._columns.length;\n    }\n\n    getColumnAt(index: number): TableColumnDefinition {\n        return this._columns[index];\n    }\n\n    addRow(row: TableRow) {\n        this.internalAddItem(row);\n\n        row.ensureHasEnoughCells(this.getColumnCount());\n    }\n\n    getJsonTypeName(): string {\n        return \"Table\";\n    }\n}\n\nGlobalRegistry.defaultElements.register(\"Table\", Table, Versions.v1_5);\n"]},"metadata":{},"sourceType":"script"}