{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\n\n\nfunction catchError(selector) {\n  return function catchErrorOperatorFunction(source) {\n    var operator = new CatchOperator(selector);\n    var caught = source.lift(operator);\n    return operator.caught = caught;\n  };\n}\n\nexports.catchError = catchError;\n\nvar CatchOperator = function () {\n  function CatchOperator(selector) {\n    this.selector = selector;\n  }\n\n  CatchOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  };\n\n  return CatchOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar CatchSubscriber = function (_super) {\n  __extends(CatchSubscriber, _super);\n\n  function CatchSubscriber(destination, selector, caught) {\n    _super.call(this, destination);\n\n    this.selector = selector;\n    this.caught = caught;\n  } // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n\n\n  CatchSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var result = void 0;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        _super.prototype.error.call(this, err2);\n\n        return;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.add(subscribeToResult_1.subscribeToResult(this, result));\n    }\n  };\n\n  return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"mappings":";;;;;;;;;;;;AAIA,gCAAgC,oBAAhC;;AACA,kCAAkC,2BAAlC;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,oBAAiCA,QAAjC,EAAkG;AAChG,SAAO,oCAAoCC,MAApC,EAAyD;AAC9D,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,CAAkBH,QAAlB,CAAjB;AACA,QAAMI,MAAM,GAAGH,MAAM,CAACI,IAAP,CAAYH,QAAZ,CAAf;AACA,WAAQA,QAAQ,CAACE,MAAT,GAAkBA,MAA1B;AACD,GAJD;AAKD;;AANeE,qBAAUC,UAAV;;AAQhB;AAGE,yBAAoBP,QAApB,EAAyF;AAArE;AACnB;;AAEDG,2CAAKK,UAAL,EAAgCP,MAAhC,EAA2C;AACzC,WAAOA,MAAM,CAACQ,SAAP,CAAiB,IAAIC,eAAJ,CAAoBF,UAApB,EAAgC,KAAKR,QAArC,EAA+C,KAAKI,MAApD,CAAjB,CAAP;AACD,GAFD;;AAGF;AAAC,CATD;AAWA;;;;;;;AAKA;AAAoCO;;AAClC,2BAAYC,WAAZ,EACoBZ,QADpB,EAEoBI,MAFpB,EAEyC;AACvCS,sBAAMD,WAAN;;AAFkB;AACA;AAEnB,GALH,CAOE;AACA;AACA;AACA;AACA;;;AACAF,8CAAMI,GAAN,EAAc;AACZ,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,UAAIC,MAAM,SAAV;;AACA,UAAI;AACFA,cAAM,GAAG,KAAKhB,QAAL,CAAcc,GAAd,EAAmB,KAAKV,MAAxB,CAAT;AACA,OAFF,CAEE,OAAOa,IAAP,EAAa;AACbJ,yBAAMK,KAAN,CAAWC,IAAX,CAAW,IAAX,EAAYF,IAAZ;;AACA;AACD;;AACD,WAAKG,sBAAL;;AACA,WAAKC,GAAL,CAASC,sCAAkB,IAAlB,EAAwBN,MAAxB,CAAT;AACD;AACF,GAZD;;AAaF;AAzBA,EAAoCO,iCAApC","names":["selector","source","operator","CatchOperator","caught","lift","exports","catchError","subscriber","subscribe","CatchSubscriber","__extends","destination","_super","err","isStopped","result","err2","error","call","_unsubscribeAndRecycle","add","subscribeToResult_1","OuterSubscriber_1"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/catchError.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}