{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AdaptiveApplet = void 0;\n\nvar Enums = require(\"./enums\");\n\nvar Utils = require(\"./utils\");\n\nvar shared_1 = require(\"./shared\");\n\nvar activity_request_1 = require(\"./activity-request\");\n\nvar strings_1 = require(\"./strings\");\n\nvar card_elements_1 = require(\"./card-elements\");\n\nvar serialization_1 = require(\"./serialization\");\n\nfunction logEvent(level, message) {\n  var optionalParams = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    optionalParams[_i - 2] = arguments[_i];\n  }\n\n  if (shared_1.GlobalSettings.applets.logEnabled) {\n    if (shared_1.GlobalSettings.applets.onLogEvent) {\n      shared_1.GlobalSettings.applets.onLogEvent(level, message, optionalParams);\n    } else {\n      switch (level) {\n        case Enums.LogLevel.Warning:\n          console.warn(message, optionalParams);\n          break;\n\n        case Enums.LogLevel.Error:\n          console.error(message, optionalParams);\n          break;\n\n        default:\n          console.log(message, optionalParams);\n          break;\n      }\n    }\n  }\n}\n\nvar ActivityRequest =\n/** @class */\nfunction () {\n  function ActivityRequest(action, trigger, consecutiveRefreshes) {\n    this.action = action;\n    this.trigger = trigger;\n    this.consecutiveRefreshes = consecutiveRefreshes;\n    this.attemptNumber = 0;\n  }\n\n  ActivityRequest.prototype.retryAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.onSend) {\n          this.onSend(this);\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return ActivityRequest;\n}();\n\nvar AdaptiveApplet =\n/** @class */\nfunction () {\n  function AdaptiveApplet() {\n    this._allowAutomaticCardUpdate = false;\n    this.renderedElement = document.createElement(\"div\");\n    this.renderedElement.className = \"aaf-cardHost\";\n    this.renderedElement.style.position = \"relative\";\n    this.renderedElement.style.display = \"flex\";\n    this.renderedElement.style.flexDirection = \"column\";\n    this._cardHostElement = document.createElement(\"div\");\n    this._refreshButtonHostElement = document.createElement(\"div\");\n    this._refreshButtonHostElement.className = \"aaf-refreshButtonHost\";\n    this._refreshButtonHostElement.style.display = \"none\";\n    this.renderedElement.appendChild(this._cardHostElement);\n    this.renderedElement.appendChild(this._refreshButtonHostElement);\n  }\n\n  AdaptiveApplet.prototype.displayCard = function (card) {\n    if (card.renderedElement) {\n      Utils.clearElementChildren(this._cardHostElement);\n      this._refreshButtonHostElement.style.display = \"none\";\n\n      this._cardHostElement.appendChild(card.renderedElement);\n    } else {\n      throw new Error(\"displayCard: undefined card.\");\n    }\n  };\n\n  AdaptiveApplet.prototype.showManualRefreshButton = function (refreshAction) {\n    var _this = this;\n\n    var displayBuiltInManualRefreshButton = this.onShowManualRefreshButton ? this.onShowManualRefreshButton(this) : true;\n\n    if (displayBuiltInManualRefreshButton) {\n      this._refreshButtonHostElement.style.display = \"none\";\n      var renderedRefreshButton = undefined;\n\n      if (this.onRenderManualRefreshButton) {\n        renderedRefreshButton = this.onRenderManualRefreshButton(this);\n      } else {\n        var message = strings_1.Strings.runtime.refreshThisCard();\n\n        if (shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic) {\n          var autoRefreshPausedMessage = strings_1.Strings.runtime.automaticRefreshPaused();\n\n          if (autoRefreshPausedMessage[autoRefreshPausedMessage.length - 1] !== \" \") {\n            autoRefreshPausedMessage += \" \";\n          }\n\n          message = strings_1.Strings.runtime.clckToRestartAutomaticRefresh();\n        }\n\n        var cardPayload = {\n          type: \"AdaptiveCard\",\n          version: \"1.2\",\n          body: [{\n            type: \"RichTextBlock\",\n            horizontalAlignment: \"right\",\n            inlines: [{\n              type: \"TextRun\",\n              text: message,\n              selectAction: {\n                type: \"Action.Submit\",\n                id: \"refreshCard\"\n              }\n            }]\n          }]\n        };\n        var card = new card_elements_1.AdaptiveCard();\n        card.parse(cardPayload, new card_elements_1.SerializationContext(serialization_1.Versions.v1_2));\n\n        card.onExecuteAction = function (action) {\n          if (action.id === \"refreshCard\") {\n            Utils.clearElementChildren(_this._refreshButtonHostElement);\n\n            _this.internalExecuteAction(refreshAction, activity_request_1.ActivityRequestTrigger.Automatic, 0);\n          }\n        };\n\n        renderedRefreshButton = card.render();\n      }\n\n      if (renderedRefreshButton) {\n        Utils.clearElementChildren(this._refreshButtonHostElement);\n\n        this._refreshButtonHostElement.appendChild(renderedRefreshButton);\n\n        this._refreshButtonHostElement.style.removeProperty(\"display\");\n      }\n    }\n  };\n\n  AdaptiveApplet.prototype.createActivityRequest = function (action, trigger, consecutiveRefreshes) {\n    var _this = this;\n\n    if (this.card) {\n      var request_1 = new ActivityRequest(action, trigger, consecutiveRefreshes);\n\n      request_1.onSend = function (sender) {\n        sender.attemptNumber++;\n\n        _this.internalSendActivityRequestAsync(request_1);\n      };\n\n      var cancel = this.onPrepareActivityRequest ? !this.onPrepareActivityRequest(this, request_1, action) : false;\n      return cancel ? undefined : request_1;\n    } else {\n      throw new Error(\"createActivityRequest: no card has been set.\");\n    }\n  };\n\n  AdaptiveApplet.prototype.createMagicCodeInputCard = function (attemptNumber) {\n    var payload = {\n      type: \"AdaptiveCard\",\n      version: \"1.0\",\n      body: [{\n        type: \"TextBlock\",\n        color: \"attention\",\n        text: attemptNumber === 1 ? undefined : \"That didn't work... let's try again.\",\n        wrap: true,\n        horizontalAlignment: \"center\"\n      }, {\n        type: \"TextBlock\",\n        text: \"Please login in the popup. You will obtain a magic code. Paste that code below and select \\\"Submit\\\"\",\n        wrap: true,\n        horizontalAlignment: \"center\"\n      }, {\n        type: \"Input.Text\",\n        id: \"magicCode\",\n        placeholder: \"Enter magic code\"\n      }, {\n        type: \"ActionSet\",\n        horizontalAlignment: \"center\",\n        actions: [{\n          type: \"Action.Submit\",\n          id: AdaptiveApplet.submitMagicCodeActionId,\n          title: \"Submit\"\n        }, {\n          type: \"Action.Submit\",\n          id: AdaptiveApplet.cancelMagicCodeAuthActionId,\n          title: \"Cancel\"\n        }]\n      }]\n    };\n    var card = new card_elements_1.AdaptiveCard();\n    card.parse(payload);\n    return card;\n  };\n\n  AdaptiveApplet.prototype.cancelAutomaticRefresh = function () {\n    if (this._allowAutomaticCardUpdate) {\n      logEvent(Enums.LogLevel.Warning, \"Automatic card refresh has been cancelled as a result of the user interacting with the card.\");\n    }\n\n    this._allowAutomaticCardUpdate = false;\n  };\n\n  AdaptiveApplet.prototype.createSerializationContext = function () {\n    return this.onCreateSerializationContext ? this.onCreateSerializationContext(this) : new card_elements_1.SerializationContext();\n  };\n\n  AdaptiveApplet.prototype.internalSetCard = function (payload, consecutiveRefreshes) {\n    var _this = this;\n\n    if (typeof payload === \"object\" && payload[\"type\"] === \"AdaptiveCard\") {\n      this._cardPayload = payload;\n    }\n\n    if (this._cardPayload) {\n      try {\n        var card = new card_elements_1.AdaptiveCard();\n\n        if (this.hostConfig) {\n          card.hostConfig = this.hostConfig;\n        }\n\n        var serializationContext = this.createSerializationContext();\n        card.parse(this._cardPayload, serializationContext);\n        var doChangeCard = this.onCardChanging ? this.onCardChanging(this, this._cardPayload) : true;\n\n        if (doChangeCard) {\n          this._card = card;\n\n          if (this._card.authentication && this._card.authentication.tokenExchangeResource && this.onPrefetchSSOToken) {\n            this.onPrefetchSSOToken(this, this._card.authentication.tokenExchangeResource);\n          }\n\n          this._card.onExecuteAction = function (action) {\n            // If the user takes an action, cancel any pending automatic refresh\n            _this.cancelAutomaticRefresh();\n\n            _this.internalExecuteAction(action, activity_request_1.ActivityRequestTrigger.Manual, 0);\n          };\n\n          this._card.onInputValueChanged = function (input) {\n            // If the user modifies an input, cancel any pending automatic refresh\n            _this.cancelAutomaticRefresh();\n          };\n\n          this._card.render();\n\n          if (this._card.renderedElement) {\n            this.displayCard(this._card);\n\n            if (this.onCardChanged) {\n              this.onCardChanged(this);\n            }\n\n            if (this._card.refresh) {\n              if (shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic && consecutiveRefreshes < shared_1.GlobalSettings.applets.refresh.maximumConsecutiveAutomaticRefreshes) {\n                if (shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes <= 0) {\n                  logEvent(Enums.LogLevel.Info, \"Triggering automatic card refresh number \" + (consecutiveRefreshes + 1));\n                  this.internalExecuteAction(this._card.refresh.action, activity_request_1.ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);\n                } else {\n                  logEvent(Enums.LogLevel.Info, \"Scheduling automatic card refresh number \" + (consecutiveRefreshes + 1) + \" in \" + shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes + \"ms\");\n                  var action_1 = this._card.refresh.action;\n                  this._allowAutomaticCardUpdate = true;\n                  window.setTimeout(function () {\n                    if (_this._allowAutomaticCardUpdate) {\n                      _this.internalExecuteAction(action_1, activity_request_1.ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);\n                    }\n                  }, shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes);\n                }\n              } else if (shared_1.GlobalSettings.applets.refresh.mode !== Enums.RefreshMode.Disabled) {\n                if (consecutiveRefreshes > 0) {\n                  logEvent(Enums.LogLevel.Warning, \"Stopping automatic refreshes after \" + consecutiveRefreshes + \" consecutive refreshes.\");\n                } else {\n                  logEvent(Enums.LogLevel.Warning, \"The card has a refresh section, but automatic refreshes are disabled.\");\n                }\n\n                if (shared_1.GlobalSettings.applets.refresh.allowManualRefreshesAfterAutomaticRefreshes || shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Manual) {\n                  logEvent(Enums.LogLevel.Info, \"Showing manual refresh button.\");\n                  this.showManualRefreshButton(this._card.refresh.action);\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // Ignore all errors\n        logEvent(Enums.LogLevel.Error, \"setCard: \" + error);\n      }\n    }\n  };\n\n  AdaptiveApplet.prototype.internalExecuteAction = function (action, trigger, consecutiveRefreshes) {\n    if (action instanceof card_elements_1.ExecuteAction) {\n      if (this.channelAdapter) {\n        var request = this.createActivityRequest(action, trigger, consecutiveRefreshes);\n\n        if (request) {\n          request.retryAsync();\n        }\n      } else {\n        throw new Error(\"internalExecuteAction: No channel adapter set.\");\n      }\n    }\n\n    if (this.onAction) {\n      this.onAction(this, action);\n    }\n  };\n\n  AdaptiveApplet.prototype.createProgressOverlay = function (request) {\n    if (!this._progressOverlay) {\n      if (this.onCreateProgressOverlay) {\n        this._progressOverlay = this.onCreateProgressOverlay(this, request);\n      } else {\n        this._progressOverlay = document.createElement(\"div\");\n        this._progressOverlay.className = \"aaf-progress-overlay\";\n        var spinner = document.createElement(\"div\");\n        spinner.className = \"aaf-spinner\";\n        spinner.style.width = \"28px\";\n        spinner.style.height = \"28px\";\n\n        this._progressOverlay.appendChild(spinner);\n      }\n    }\n\n    return this._progressOverlay;\n  };\n\n  AdaptiveApplet.prototype.removeProgressOverlay = function (request) {\n    if (this.onRemoveProgressOverlay) {\n      this.onRemoveProgressOverlay(this, request);\n    }\n\n    if (this._progressOverlay !== undefined) {\n      this.renderedElement.removeChild(this._progressOverlay);\n      this._progressOverlay = undefined;\n    }\n  };\n\n  AdaptiveApplet.prototype.activityRequestSucceeded = function (response, parsedContent) {\n    if (this.onActivityRequestSucceeded) {\n      this.onActivityRequestSucceeded(this, response, parsedContent);\n    }\n  };\n\n  AdaptiveApplet.prototype.activityRequestFailed = function (response) {\n    return this.onActivityRequestFailed ? this.onActivityRequestFailed(this, response) : shared_1.GlobalSettings.applets.defaultTimeBetweenRetryAttempts;\n  };\n\n  AdaptiveApplet.prototype.showAuthCodeInputDialog = function (request) {\n    var _this = this;\n\n    var showBuiltInAuthCodeInputCard = this.onShowAuthCodeInputDialog ? this.onShowAuthCodeInputDialog(this, request) : true;\n\n    if (showBuiltInAuthCodeInputCard) {\n      var authCodeInputCard = this.createMagicCodeInputCard(request.attemptNumber);\n      authCodeInputCard.render();\n\n      authCodeInputCard.onExecuteAction = function (submitMagicCodeAction) {\n        if (_this.card && submitMagicCodeAction instanceof card_elements_1.SubmitAction) {\n          switch (submitMagicCodeAction.id) {\n            case AdaptiveApplet.submitMagicCodeActionId:\n              var authCode = undefined;\n\n              if (submitMagicCodeAction.data && typeof submitMagicCodeAction.data[\"magicCode\"] === \"string\") {\n                authCode = submitMagicCodeAction.data[\"magicCode\"];\n              }\n\n              if (authCode) {\n                _this.displayCard(_this.card);\n\n                request.authCode = authCode;\n                request.retryAsync();\n              } else {\n                alert(\"Please enter the magic code you received.\");\n              }\n\n              break;\n\n            case AdaptiveApplet.cancelMagicCodeAuthActionId:\n              logEvent(Enums.LogLevel.Warning, \"Authentication cancelled by user.\");\n\n              _this.displayCard(_this.card);\n\n              break;\n\n            default:\n              logEvent(Enums.LogLevel.Error, \"Unespected action taken from magic code input card (id = \" + submitMagicCodeAction.id + \")\");\n              alert(strings_1.Strings.magicCodeInputCard.somethingWentWrong());\n              break;\n          }\n        }\n      };\n\n      this.displayCard(authCodeInputCard);\n    }\n  };\n\n  AdaptiveApplet.prototype.internalSendActivityRequestAsync = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var overlay, done, _loop_1, this_1, state_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.channelAdapter) {\n              throw new Error(\"internalSendActivityRequestAsync: channelAdapter is not set.\");\n            }\n\n            overlay = this.createProgressOverlay(request);\n\n            if (overlay !== undefined) {\n              this.renderedElement.appendChild(overlay);\n            }\n\n            done = false;\n\n            _loop_1 = function () {\n              var response, error_1, parsedContent, retryIn_1, attemptOAuth, left, top_1;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    response = undefined;\n\n                    if (request.attemptNumber === 1) {\n                      logEvent(Enums.LogLevel.Info, \"Sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n                    } else {\n                      logEvent(Enums.LogLevel.Info, \"Re-sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n                    }\n\n                    _b.label = 1;\n\n                  case 1:\n                    _b.trys.push([1, 3,, 4]);\n\n                    return [4\n                    /*yield*/\n                    , this_1.channelAdapter.sendRequestAsync(request)];\n\n                  case 2:\n                    response = _b.sent();\n                    return [3\n                    /*break*/\n                    , 4];\n\n                  case 3:\n                    error_1 = _b.sent();\n                    logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error_1);\n                    this_1.removeProgressOverlay(request);\n                    done = true;\n                    return [3\n                    /*break*/\n                    , 4];\n\n                  case 4:\n                    if (!response) return [3\n                    /*break*/\n                    , 10];\n                    if (!(response instanceof activity_request_1.SuccessResponse)) return [3\n                    /*break*/\n                    , 5];\n                    this_1.removeProgressOverlay(request);\n\n                    if (response.rawContent === undefined) {\n                      throw new Error(\"internalSendActivityRequestAsync: Action.Execute result is undefined\");\n                    }\n\n                    parsedContent = response.rawContent;\n\n                    try {\n                      parsedContent = JSON.parse(response.rawContent);\n                    } catch (_c) {// Leave parseContent as is\n                    }\n\n                    if (typeof parsedContent === \"string\") {\n                      logEvent(Enums.LogLevel.Info, \"The activity request returned a string after \" + request.attemptNumber + \" attempt(s).\");\n                      this_1.activityRequestSucceeded(response, parsedContent);\n                    } else if (typeof parsedContent === \"object\" && parsedContent[\"type\"] === \"AdaptiveCard\") {\n                      logEvent(Enums.LogLevel.Info, \"The activity request returned an Adaptive Card after \" + request.attemptNumber + \" attempt(s).\");\n                      this_1.internalSetCard(parsedContent, request.consecutiveRefreshes);\n                      this_1.activityRequestSucceeded(response, this_1.card);\n                    } else {\n                      throw new Error(\"internalSendActivityRequestAsync: Action.Execute result is of unsupported type (\" + typeof response.rawContent + \")\");\n                    }\n\n                    done = true;\n                    return [3\n                    /*break*/\n                    , 10];\n\n                  case 5:\n                    if (!(response instanceof activity_request_1.ErrorResponse)) return [3\n                    /*break*/\n                    , 9];\n                    retryIn_1 = this_1.activityRequestFailed(response);\n                    if (!(retryIn_1 >= 0 && request.attemptNumber < shared_1.GlobalSettings.applets.maximumRetryAttempts)) return [3\n                    /*break*/\n                    , 7];\n                    logEvent(Enums.LogLevel.Warning, \"Activity request failed: \" + response.error.message + \". Retrying in \" + retryIn_1 + \"ms\");\n                    request.attemptNumber++;\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve, reject) {\n                      window.setTimeout(function () {\n                        resolve();\n                      }, retryIn_1);\n                    })];\n\n                  case 6:\n                    _b.sent();\n\n                    return [3\n                    /*break*/\n                    , 8];\n\n                  case 7:\n                    logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + response.error.message + \". Giving up after \" + request.attemptNumber + \" attempt(s)\");\n                    this_1.removeProgressOverlay(request);\n                    done = true;\n                    _b.label = 8;\n\n                  case 8:\n                    return [3\n                    /*break*/\n                    , 10];\n\n                  case 9:\n                    if (response instanceof activity_request_1.LoginRequestResponse) {\n                      logEvent(Enums.LogLevel.Info, \"The activity request returned a LoginRequestResponse after \" + request.attemptNumber + \" attempt(s).\");\n\n                      if (request.attemptNumber <= shared_1.GlobalSettings.applets.maximumRetryAttempts) {\n                        attemptOAuth = true;\n\n                        if (response.tokenExchangeResource && this_1.onSSOTokenNeeded) {\n                          // Attempt to use SSO. The host will return true if it can handle SSO, in which case\n                          // we bypass OAuth\n                          attemptOAuth = !this_1.onSSOTokenNeeded(this_1, request, response.tokenExchangeResource);\n                        }\n\n                        if (attemptOAuth) {\n                          // Attempt to use OAuth\n                          this_1.removeProgressOverlay(request);\n\n                          if (response.signinButton === undefined) {\n                            throw new Error(\"internalSendActivityRequestAsync: the login request doesn't contain a valid signin URL.\");\n                          }\n\n                          logEvent(Enums.LogLevel.Info, \"Login required at \" + response.signinButton.value);\n\n                          if (this_1.onShowSigninPrompt) {\n                            // Bypass the built-in auth prompt if the host app handles it\n                            this_1.onShowSigninPrompt(this_1, request, response.signinButton);\n                          } else {\n                            this_1.showAuthCodeInputDialog(request);\n                            left = window.screenX + (window.outerWidth - shared_1.GlobalSettings.applets.authPromptWidth) / 2;\n                            top_1 = window.screenY + (window.outerHeight - shared_1.GlobalSettings.applets.authPromptHeight) / 2;\n                            window.open(response.signinButton.value, response.signinButton.title ? response.signinButton.title : \"Sign in\", \"width=\" + shared_1.GlobalSettings.applets.authPromptWidth + \",height=\" + shared_1.GlobalSettings.applets.authPromptHeight + \",left=\" + left + \",top=\" + top_1);\n                          }\n                        }\n                      } else {\n                        logEvent(Enums.LogLevel.Error, \"Authentication failed. Giving up after \" + request.attemptNumber + \" attempt(s)\");\n                        alert(strings_1.Strings.magicCodeInputCard.authenticationFailed());\n                      }\n\n                      return [2\n                      /*return*/\n                      , \"break\"];\n                    } else {\n                      throw new Error(\"Unhandled response type: \" + response.toString());\n                    }\n\n                    _b.label = 10;\n\n                  case 10:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _a.label = 1;\n\n          case 1:\n            if (!!done) return [3\n            /*break*/\n            , 3];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 2:\n            state_1 = _a.sent();\n            if (state_1 === \"break\") return [3\n            /*break*/\n            , 3];\n            return [3\n            /*break*/\n            , 1];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AdaptiveApplet.prototype.refreshCard = function () {\n    if (this._card && this._card.refresh) {\n      this.internalExecuteAction(this._card.refresh.action, activity_request_1.ActivityRequestTrigger.Manual, 0);\n    }\n  };\n\n  AdaptiveApplet.prototype.setCard = function (payload) {\n    this.internalSetCard(payload, 0);\n  };\n\n  Object.defineProperty(AdaptiveApplet.prototype, \"card\", {\n    get: function () {\n      return this._card;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AdaptiveApplet.submitMagicCodeActionId = \"submitMagicCode\";\n  AdaptiveApplet.cancelMagicCodeAuthActionId = \"cancelMagicCodeAuth\";\n  return AdaptiveApplet;\n}();\n\nexports.AdaptiveApplet = AdaptiveApplet;","map":{"version":3,"mappings":"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","names":["logEvent","level","message","optionalParams","shared_1","applets","logEnabled","onLogEvent","Enums","LogLevel","Warning","console","warn","Error","error","log","action","trigger","consecutiveRefreshes","ActivityRequest","onSend","renderedElement","document","createElement","className","style","position","display","flexDirection","_cardHostElement","_refreshButtonHostElement","appendChild","AdaptiveApplet","card","Utils","clearElementChildren","refreshAction","displayBuiltInManualRefreshButton","onShowManualRefreshButton","renderedRefreshButton","undefined","onRenderManualRefreshButton","strings_1","runtime","refreshThisCard","refresh","mode","RefreshMode","Automatic","autoRefreshPausedMessage","automaticRefreshPaused","length","clckToRestartAutomaticRefresh","cardPayload","type","version","body","horizontalAlignment","inlines","text","selectAction","id","card_elements_1","parse","serialization_1","v1_2","onExecuteAction","_this","internalExecuteAction","activity_request_1","render","removeProperty","request_1","sender","attemptNumber","internalSendActivityRequestAsync","cancel","onPrepareActivityRequest","payload","color","wrap","placeholder","actions","submitMagicCodeActionId","title","cancelMagicCodeAuthActionId","_allowAutomaticCardUpdate","onCreateSerializationContext","_cardPayload","hostConfig","serializationContext","createSerializationContext","doChangeCard","onCardChanging","_card","authentication","tokenExchangeResource","onPrefetchSSOToken","cancelAutomaticRefresh","Manual","onInputValueChanged","input","displayCard","onCardChanged","maximumConsecutiveAutomaticRefreshes","timeBetweenAutomaticRefreshes","Info","action_1","window","setTimeout","Disabled","allowManualRefreshesAfterAutomaticRefreshes","showManualRefreshButton","channelAdapter","request","createActivityRequest","retryAsync","onAction","_progressOverlay","onCreateProgressOverlay","spinner","width","height","onRemoveProgressOverlay","removeChild","response","parsedContent","onActivityRequestSucceeded","onActivityRequestFailed","defaultTimeBetweenRetryAttempts","showBuiltInAuthCodeInputCard","onShowAuthCodeInputDialog","authCodeInputCard","createMagicCodeInputCard","submitMagicCodeAction","authCode","data","alert","magicCodeInputCard","somethingWentWrong","overlay","createProgressOverlay","done","this_1","sendRequestAsync","_b","error_1","removeProgressOverlay","rawContent","JSON","activityRequestSucceeded","internalSetCard","retryIn_1","activityRequestFailed","maximumRetryAttempts","Promise","resolve","reject","attemptOAuth","onSSOTokenNeeded","signinButton","value","onShowSigninPrompt","showAuthCodeInputDialog","left","screenX","outerWidth","authPromptWidth","top_1","screenY","outerHeight","authPromptHeight","open","authenticationFailed","toString","Object","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/adaptivecards/src/adaptive-applet.ts"],"sourcesContent":["import * as Enums from \"./enums\";\nimport * as Utils from \"./utils\";\nimport { GlobalSettings } from \"./shared\";\nimport { ChannelAdapter } from \"./channel-adapter\";\nimport { ActivityResponse, IActivityRequest, ActivityRequestTrigger, SuccessResponse, ErrorResponse, LoginRequestResponse } from \"./activity-request\";\nimport { Strings } from \"./strings\";\nimport { SubmitAction, ExecuteAction, SerializationContext, AdaptiveCard, Action, Input, Authentication, TokenExchangeResource, AuthCardButton, CardElement } from \"./card-elements\";\nimport { Versions } from \"./serialization\";\nimport { HostConfig } from \"./host-config\";\n\nfunction logEvent(level: Enums.LogLevel, message?: any, ...optionalParams: any[]) {\n    if (GlobalSettings.applets.logEnabled) {\n        if (GlobalSettings.applets.onLogEvent) {\n            GlobalSettings.applets.onLogEvent(level, message, optionalParams);\n        }\n        else {\n            switch (level) {\n                case Enums.LogLevel.Warning:\n                    console.warn(message, optionalParams);\n                    break;\n                case Enums.LogLevel.Error:\n                    console.error(message, optionalParams);\n                    break;\n                default:\n                    console.log(message, optionalParams);\n                    break;\n            }\n        }\n    }\n}\n\nclass ActivityRequest implements IActivityRequest {\n    constructor(\n        readonly action: ExecuteAction,\n        readonly trigger: ActivityRequestTrigger,\n        readonly consecutiveRefreshes: number) { }\n\n    authCode?: string;\n    authToken?: string;\n    attemptNumber: number = 0;\n\n    onSend: (sender: ActivityRequest) => void;\n\n    async retryAsync(): Promise<void> {\n        if (this.onSend) {\n            this.onSend(this);\n        }\n    }\n}\n\nexport class AdaptiveApplet {\n    private static readonly submitMagicCodeActionId = \"submitMagicCode\";\n    private static readonly cancelMagicCodeAuthActionId = \"cancelMagicCodeAuth\";\n\n    private _card?: AdaptiveCard;\n    private _cardPayload: any;\n    private _allowAutomaticCardUpdate: boolean = false;\n    private _refreshButtonHostElement: HTMLElement;\n    private _cardHostElement: HTMLElement;\n    private _progressOverlay?: HTMLElement;\n\n    private displayCard(card: AdaptiveCard) {\n        if (card.renderedElement) {\n            Utils.clearElementChildren(this._cardHostElement);\n\n            this._refreshButtonHostElement.style.display = \"none\";\n\n            this._cardHostElement.appendChild(card.renderedElement);\n        }\n        else {\n            throw new Error(\"displayCard: undefined card.\");\n        }\n    }\n\n    private showManualRefreshButton(refreshAction: ExecuteAction) {\n        let displayBuiltInManualRefreshButton = this.onShowManualRefreshButton ? this.onShowManualRefreshButton(this) : true;\n\n        if (displayBuiltInManualRefreshButton) {\n            this._refreshButtonHostElement.style.display = \"none\";\n\n            let renderedRefreshButton: HTMLElement | undefined = undefined;\n\n            if (this.onRenderManualRefreshButton) {\n                renderedRefreshButton = this.onRenderManualRefreshButton(this);\n            }\n            else {\n                let message = Strings.runtime.refreshThisCard();\n                \n                if (GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic) {\n                    let autoRefreshPausedMessage = Strings.runtime.automaticRefreshPaused();\n\n                    if (autoRefreshPausedMessage[autoRefreshPausedMessage.length - 1] !== \" \") {\n                        autoRefreshPausedMessage += \" \";\n                    }\n\n                    message = Strings.runtime.clckToRestartAutomaticRefresh();\n                }\n\n                let cardPayload = {\n                    type: \"AdaptiveCard\",\n                    version: \"1.2\",\n                    body: [\n                        {\n                            type: \"RichTextBlock\",\n                            horizontalAlignment: \"right\",\n                            inlines: [\n                                {\n                                    type: \"TextRun\",\n                                    text: message,\n                                    selectAction: {\n                                        type: \"Action.Submit\",\n                                        id: \"refreshCard\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                };\n\n                let card = new AdaptiveCard();\n                card.parse(cardPayload, new SerializationContext(Versions.v1_2));\n                card.onExecuteAction = (action: Action) => {\n                    if (action.id === \"refreshCard\") {\n                        Utils.clearElementChildren(this._refreshButtonHostElement);\n                        \n                        this.internalExecuteAction(refreshAction, ActivityRequestTrigger.Automatic, 0);\n                    }\n                }\n\n                renderedRefreshButton = card.render();\n            }\n\n            if (renderedRefreshButton) {\n                Utils.clearElementChildren(this._refreshButtonHostElement);\n\n                this._refreshButtonHostElement.appendChild(renderedRefreshButton);\n\n                this._refreshButtonHostElement.style.removeProperty(\"display\");\n            }\n        }\n    }\n\n    private createActivityRequest(action: ExecuteAction, trigger: ActivityRequestTrigger, consecutiveRefreshes: number): ActivityRequest | undefined {\n        if (this.card) {\n            let request = new ActivityRequest(action, trigger, consecutiveRefreshes);\n            request.onSend = (sender: ActivityRequest) => {\n                sender.attemptNumber++;\n\n                this.internalSendActivityRequestAsync(request);\n            }\n\n            let cancel = this.onPrepareActivityRequest ? !this.onPrepareActivityRequest(this, request, action) : false;\n\n            return cancel ? undefined : request;\n        }\n        else {\n            throw new Error(\"createActivityRequest: no card has been set.\");\n        }\n    }\n\n    private createMagicCodeInputCard(attemptNumber: number): AdaptiveCard {\n        let payload = {\n            type: \"AdaptiveCard\",\n            version: \"1.0\",\n            body: [\n                {\n                    type: \"TextBlock\",\n                    color: \"attention\",\n                    text: attemptNumber === 1 ? undefined : \"That didn't work... let's try again.\",\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"TextBlock\",\n                    text: \"Please login in the popup. You will obtain a magic code. Paste that code below and select \\\"Submit\\\"\",\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"Input.Text\",\n                    id: \"magicCode\",\n                    placeholder: \"Enter magic code\"\n                },\n                {\n                    type: \"ActionSet\",\n                    horizontalAlignment: \"center\",\n                    actions: [\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet.submitMagicCodeActionId,\n                            title: \"Submit\"\n                        },\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet.cancelMagicCodeAuthActionId,\n                            title: \"Cancel\"\n                        }\n                    ]\n                }\n            ]\n        };\n\n        let card = new AdaptiveCard();\n        card.parse(payload);\n\n        return card;\n    }\n\n    private cancelAutomaticRefresh() {\n        if (this._allowAutomaticCardUpdate) {\n            logEvent(Enums.LogLevel.Warning, \"Automatic card refresh has been cancelled as a result of the user interacting with the card.\");\n        }\n\n        this._allowAutomaticCardUpdate = false;\n    }\n\n    private createSerializationContext(): SerializationContext {\n        return this.onCreateSerializationContext ? this.onCreateSerializationContext(this) : new SerializationContext();\n    }\n\n    private internalSetCard(payload: any, consecutiveRefreshes: number) {\n        if (typeof payload === \"object\" && payload[\"type\"] === \"AdaptiveCard\") {\n            this._cardPayload = payload;\n        }\n\n        if (this._cardPayload) {\n            try {\n                let card = new AdaptiveCard();\n\n                if (this.hostConfig) {\n                    card.hostConfig = this.hostConfig;\n                }\n\n                let serializationContext = this.createSerializationContext();\n\n                card.parse(this._cardPayload, serializationContext);\n\n                let doChangeCard = this.onCardChanging ? this.onCardChanging(this, this._cardPayload) : true;\n\n                if (doChangeCard) {\n                    this._card = card;\n\n                    if (this._card.authentication && this._card.authentication.tokenExchangeResource && this.onPrefetchSSOToken) {\n                        this.onPrefetchSSOToken(this, this._card.authentication.tokenExchangeResource);\n                    }\n\n                    this._card.onExecuteAction = (action: Action) => {\n                        // If the user takes an action, cancel any pending automatic refresh\n                        this.cancelAutomaticRefresh();\n\n                        this.internalExecuteAction(action, ActivityRequestTrigger.Manual, 0);\n                    }\n                    this._card.onInputValueChanged = (input: Input) => {\n                        // If the user modifies an input, cancel any pending automatic refresh\n                        this.cancelAutomaticRefresh();\n                    }\n\n                    this._card.render();\n\n                    if (this._card.renderedElement) {\n                        this.displayCard(this._card);\n\n                        if (this.onCardChanged) {\n                            this.onCardChanged(this);\n                        }\n\n                        if (this._card.refresh) {\n                            if (GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic && consecutiveRefreshes < GlobalSettings.applets.refresh.maximumConsecutiveAutomaticRefreshes) {\n                                if (GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes <= 0) {\n                                    logEvent(Enums.LogLevel.Info, \"Triggering automatic card refresh number \" + (consecutiveRefreshes + 1));\n\n                                    this.internalExecuteAction(this._card.refresh.action, ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);\n                                }\n                                else {\n                                    logEvent(Enums.LogLevel.Info, \"Scheduling automatic card refresh number \" + (consecutiveRefreshes + 1) + \" in \" + GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes + \"ms\");\n\n                                    let action = this._card.refresh.action;\n\n                                    this._allowAutomaticCardUpdate = true;\n\n                                    window.setTimeout(\n                                        () => {\n                                            if (this._allowAutomaticCardUpdate) {\n                                                this.internalExecuteAction(action, ActivityRequestTrigger.Automatic, consecutiveRefreshes + 1);\n                                            }\n                                        },\n                                        GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes\n                                    )\n                                }\n                            }\n                            else if (GlobalSettings.applets.refresh.mode !== Enums.RefreshMode.Disabled) {\n                                if (consecutiveRefreshes > 0) {\n                                    logEvent(Enums.LogLevel.Warning, \"Stopping automatic refreshes after \" + consecutiveRefreshes + \" consecutive refreshes.\");\n                                }\n                                else {\n                                    logEvent(Enums.LogLevel.Warning, \"The card has a refresh section, but automatic refreshes are disabled.\");\n                                }\n\n                                if (GlobalSettings.applets.refresh.allowManualRefreshesAfterAutomaticRefreshes || GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Manual) {\n                                    logEvent(Enums.LogLevel.Info, \"Showing manual refresh button.\");\n\n                                    this.showManualRefreshButton(this._card.refresh.action);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                // Ignore all errors\n                logEvent(Enums.LogLevel.Error, \"setCard: \" + error);\n            }\n        }\n    }\n\n    private internalExecuteAction(action: Action, trigger: ActivityRequestTrigger, consecutiveRefreshes: number) {\n        if (action instanceof ExecuteAction) {\n            if (this.channelAdapter) {\n                let request = this.createActivityRequest(action, trigger, consecutiveRefreshes);\n\n                if (request) {\n                    request.retryAsync();\n                }\n            }\n            else {\n                throw new Error(\"internalExecuteAction: No channel adapter set.\");\n            }\n        }\n\n        if (this.onAction) {\n            this.onAction(this, action);\n        }\n    }\n\n    private createProgressOverlay(request: ActivityRequest): HTMLElement | undefined {\n        if (!this._progressOverlay) {\n            if (this.onCreateProgressOverlay) {\n                this._progressOverlay = this.onCreateProgressOverlay(this, request);\n            }\n            else {\n                this._progressOverlay = document.createElement(\"div\");\n                this._progressOverlay.className = \"aaf-progress-overlay\";\n\n                let spinner = document.createElement(\"div\");\n                spinner.className = \"aaf-spinner\";\n                spinner.style.width = \"28px\";\n                spinner.style.height = \"28px\";\n\n                this._progressOverlay.appendChild(spinner);\n            }\n        }\n\n        return this._progressOverlay;\n    }\n\n    private removeProgressOverlay(request: IActivityRequest) {\n        if (this.onRemoveProgressOverlay) {\n            this.onRemoveProgressOverlay(this, request);\n        }\n        \n        if (this._progressOverlay !== undefined) {\n            this.renderedElement.removeChild(this._progressOverlay);\n\n            this._progressOverlay = undefined;\n        }\n    }\n\n    private activityRequestSucceeded(response: SuccessResponse, parsedContent: string | AdaptiveCard | undefined) {\n        if (this.onActivityRequestSucceeded) {\n            this.onActivityRequestSucceeded(this, response, parsedContent);\n        }\n    }\n\n    private activityRequestFailed(response: ErrorResponse): number {\n        return this.onActivityRequestFailed ? this.onActivityRequestFailed(this, response) : GlobalSettings.applets.defaultTimeBetweenRetryAttempts;\n    }\n\n    private showAuthCodeInputDialog(request: ActivityRequest) {\n        let showBuiltInAuthCodeInputCard = this.onShowAuthCodeInputDialog ? this.onShowAuthCodeInputDialog(this, request) : true;\n\n        if (showBuiltInAuthCodeInputCard) {\n            let authCodeInputCard = this.createMagicCodeInputCard(request.attemptNumber);\n            authCodeInputCard.render();\n            authCodeInputCard.onExecuteAction = (submitMagicCodeAction: Action) => {\n                if (this.card && submitMagicCodeAction instanceof SubmitAction) {\n                    switch (submitMagicCodeAction.id) {\n                        case AdaptiveApplet.submitMagicCodeActionId:\n                            let authCode: string | undefined = undefined;\n\n                            if (submitMagicCodeAction.data && typeof (<any>submitMagicCodeAction.data)[\"magicCode\"] === \"string\") {\n                                authCode = (<any>submitMagicCodeAction.data)[\"magicCode\"];\n                            }\n\n                            if (authCode) {\n                                this.displayCard(this.card);\n\n                                request.authCode = authCode;\n                                request.retryAsync();\n                            }\n                            else {\n                                alert(\"Please enter the magic code you received.\");\n                            }\n\n                            break;\n                        case AdaptiveApplet.cancelMagicCodeAuthActionId:\n                            logEvent(Enums.LogLevel.Warning, \"Authentication cancelled by user.\");\n\n                            this.displayCard(this.card);\n\n                            break;\n                        default:\n                            logEvent(Enums.LogLevel.Error, \"Unespected action taken from magic code input card (id = \" + submitMagicCodeAction.id + \")\");\n\n                            alert(Strings.magicCodeInputCard.somethingWentWrong());\n\n                            break;\n                    }\n                }\n            }\n\n            this.displayCard(authCodeInputCard);\n        }\n    }\n\n    private async internalSendActivityRequestAsync(request: ActivityRequest) {\n        if (!this.channelAdapter) {\n            throw new Error(\"internalSendActivityRequestAsync: channelAdapter is not set.\")\n        }\n\n        let overlay = this.createProgressOverlay(request);\n\n        if (overlay !== undefined) {\n            this.renderedElement.appendChild(overlay);\n        }\n\n        let done = false;\n\n        while (!done) {\n            let response: ActivityResponse | undefined = undefined;\n\n            if (request.attemptNumber === 1) {\n                logEvent(Enums.LogLevel.Info, \"Sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n            }\n            else {\n                logEvent(Enums.LogLevel.Info, \"Re-sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n            }\n\n            try {\n                response = await this.channelAdapter.sendRequestAsync(request);\n            }\n            catch (error) {\n                logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error);\n\n                this.removeProgressOverlay(request);\n\n                done = true;\n            }\n\n            if (response) {\n                if (response instanceof SuccessResponse) {\n                    this.removeProgressOverlay(request);\n\n                    if (response.rawContent === undefined) {\n                        throw new Error(\"internalSendActivityRequestAsync: Action.Execute result is undefined\");\n                    }\n\n                    let parsedContent = response.rawContent;\n\n                    try {\n                        parsedContent = JSON.parse(response.rawContent);\n                    }\n                    catch {\n                        // Leave parseContent as is\n                    }\n\n                    if (typeof parsedContent === \"string\") {\n                        logEvent(Enums.LogLevel.Info, \"The activity request returned a string after \" + request.attemptNumber + \" attempt(s).\");\n\n                        this.activityRequestSucceeded(response, parsedContent);\n                    }\n                    else if (typeof parsedContent === \"object\" && parsedContent[\"type\"] === \"AdaptiveCard\") {\n                        logEvent(Enums.LogLevel.Info, \"The activity request returned an Adaptive Card after \" + request.attemptNumber + \" attempt(s).\");\n\n                        this.internalSetCard(parsedContent, request.consecutiveRefreshes);\n                        this.activityRequestSucceeded(response, this.card);\n                    }\n                    else {\n                        throw new Error(\"internalSendActivityRequestAsync: Action.Execute result is of unsupported type (\" + typeof response.rawContent + \")\");\n                    }\n\n                    done = true;\n                }\n                else if (response instanceof ErrorResponse) {\n                    let retryIn: number = this.activityRequestFailed(response);\n\n                    if (retryIn >= 0 && request.attemptNumber < GlobalSettings.applets.maximumRetryAttempts) {\n                        logEvent(\n                            Enums.LogLevel.Warning,\n                            `Activity request failed: ${response.error.message}. Retrying in ${retryIn}ms`);\n\n                        request.attemptNumber++;\n\n                        await new Promise<void>(\n                            (resolve, reject) => {\n                                window.setTimeout(\n                                    () => { resolve(); },\n                                    retryIn\n                                )\n                            });\n                    }\n                    else {\n                        logEvent(\n                            Enums.LogLevel.Error,\n                            `Activity request failed: ${response.error.message}. Giving up after ${request.attemptNumber} attempt(s)`);\n\n                        this.removeProgressOverlay(request);\n\n                        done = true;\n                    }\n                }\n                else if (response instanceof LoginRequestResponse) {\n                    logEvent(Enums.LogLevel.Info, \"The activity request returned a LoginRequestResponse after \" + request.attemptNumber + \" attempt(s).\");\n\n                    if (request.attemptNumber <= GlobalSettings.applets.maximumRetryAttempts) {\n                        let attemptOAuth = true;\n\n                        if (response.tokenExchangeResource && this.onSSOTokenNeeded) {\n                            // Attempt to use SSO. The host will return true if it can handle SSO, in which case\n                            // we bypass OAuth\n                            attemptOAuth = !this.onSSOTokenNeeded(this, request, response.tokenExchangeResource);\n                        }\n\n                        if (attemptOAuth) {\n                            // Attempt to use OAuth\n                            this.removeProgressOverlay(request);\n                            \n                            if (response.signinButton === undefined) {\n                                throw new Error(\"internalSendActivityRequestAsync: the login request doesn't contain a valid signin URL.\");\n                            }\n\n                            logEvent(Enums.LogLevel.Info, \"Login required at \" + response.signinButton.value);\n\n                            if (this.onShowSigninPrompt) {\n                                // Bypass the built-in auth prompt if the host app handles it\n                                this.onShowSigninPrompt(this, request, response.signinButton);\n                            }\n                            else {\n                                this.showAuthCodeInputDialog(request);\n\n                                let left = window.screenX + (window.outerWidth - GlobalSettings.applets.authPromptWidth) / 2;\n                                let top = window.screenY + (window.outerHeight - GlobalSettings.applets.authPromptHeight) / 2;\n\n                                window.open(\n                                    response.signinButton.value,\n                                    response.signinButton.title ? response.signinButton.title : \"Sign in\",\n                                    `width=${GlobalSettings.applets.authPromptWidth},height=${GlobalSettings.applets.authPromptHeight},left=${left},top=${top}`);\n                            }\n                        }\n                    }\n                    else {\n                        logEvent(Enums.LogLevel.Error, \"Authentication failed. Giving up after \" + request.attemptNumber + \" attempt(s)\");\n\n                        alert(Strings.magicCodeInputCard.authenticationFailed());\n                    }\n\n                    // Exit the loop. After a LoginRequestResponse, the host app is responsible for retrying the request\n                    break;\n                }\n                else {\n                    throw new Error(\"Unhandled response type: \" + response.toString());\n                }\n            }\n        }\n    }\n\n    readonly renderedElement: HTMLElement;\n\n    hostConfig?: HostConfig;\n    channelAdapter?: ChannelAdapter;\n\n    onCardChanging?: (sender: AdaptiveApplet, card: any) => boolean;\n    onCardChanged?: (sender: AdaptiveApplet) => void;\n    onPrefetchSSOToken?: (sender: AdaptiveApplet, tokenExchangeResource: TokenExchangeResource) => void;\n    onSSOTokenNeeded?: (sender: AdaptiveApplet, request: IActivityRequest, tokenExchangeResource: TokenExchangeResource) => boolean;\n    onPrepareActivityRequest?: (sender: AdaptiveApplet, request: IActivityRequest, action: ExecuteAction) => boolean;\n    onActivityRequestSucceeded?: (sender: AdaptiveApplet, response: SuccessResponse, parsedContent: string | AdaptiveCard | undefined) => void;\n    onActivityRequestFailed?: (sender: AdaptiveApplet, response: ErrorResponse) => number;\n    onCreateSerializationContext?: (sender: AdaptiveApplet) => SerializationContext;\n    onCreateProgressOverlay?: (sender: AdaptiveApplet, request: IActivityRequest) => HTMLElement | undefined;\n    onRemoveProgressOverlay?: (sender: AdaptiveApplet, request: IActivityRequest) => void;\n    onRenderManualRefreshButton?: (sender: AdaptiveApplet) => HTMLElement | undefined;\n    onAction?: (sender: AdaptiveApplet, action: Action) => void;\n    onShowManualRefreshButton?: (sender: AdaptiveApplet) => boolean;\n    onShowAuthCodeInputDialog?: (sender: AdaptiveApplet, request: IActivityRequest) => boolean;\n    onShowSigninPrompt?: (sender: AdaptiveApplet, request: IActivityRequest, signinButton: AuthCardButton) => void;\n\n    constructor() {\n        this.renderedElement = document.createElement(\"div\");\n        this.renderedElement.className = \"aaf-cardHost\"\n        this.renderedElement.style.position = \"relative\";\n        this.renderedElement.style.display = \"flex\";\n        this.renderedElement.style.flexDirection = \"column\";\n\n        this._cardHostElement = document.createElement(\"div\");\n\n        this._refreshButtonHostElement = document.createElement(\"div\");\n        this._refreshButtonHostElement.className = \"aaf-refreshButtonHost\";    \n        this._refreshButtonHostElement.style.display = \"none\";\n\n        this.renderedElement.appendChild(this._cardHostElement);\n        this.renderedElement.appendChild(this._refreshButtonHostElement);\n    }\n\n    refreshCard() {\n        if (this._card && this._card.refresh) {\n            this.internalExecuteAction(this._card.refresh.action, ActivityRequestTrigger.Manual, 0);\n        }\n    }\n\n    setCard(payload: any) {\n        this.internalSetCard(payload, 0);\n    }\n\n    get card(): AdaptiveCard | undefined {\n        return this._card;\n    }\n}"]},"metadata":{},"sourceType":"script"}