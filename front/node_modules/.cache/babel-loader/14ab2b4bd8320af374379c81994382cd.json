{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendEventToPostActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _sendEvent = require(\"../actions/sendEvent\");\n\nvar _postActivity = _interopRequireDefault(require(\"../actions/postActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(postActivityWithEvent),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(sendEventToPostActivity),\n    _marked3 = /*#__PURE__*/_regenerator[\"default\"].mark(sendEventToPostActivitySaga);\n\nfunction postActivityWithEvent(_ref) {\n  var _ref$payload, name, value;\n\n  return _regenerator[\"default\"].wrap(function postActivityWithEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, name = _ref$payload.name, value = _ref$payload.value;\n          _context.next = 3;\n          return (0, _effects.put)((0, _postActivity[\"default\"])({\n            name: name,\n            type: 'event',\n            value: value\n          }));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendEventToPostActivity() {\n  return _regenerator[\"default\"].wrap(function sendEventToPostActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref2) {\n            var payload = _ref2.payload,\n                type = _ref2.type;\n            return type === _sendEvent.SEND_EVENT && payload.name;\n          }, postActivityWithEvent);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction sendEventToPostActivitySaga() {\n  return _regenerator[\"default\"].wrap(function sendEventToPostActivitySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(sendEventToPostActivity);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;wDAEUA;yDAUAC;yDAIeC;;AAdzB,SAAUF,qBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAAG,8BAAkCC,OAAlC,EAA6CC,IAA7C,gBAA6CA,IAA7C,EAAmDC,KAAnD,gBAAmDA,KAAnD;AAAAC;AACE,iBAAM,kBACJ,8BAAa;AACXF,gBAAI,EAAJA,IADW;AAEXG,gBAAI,EAAE,OAFK;AAGXF,iBAAK,EAALA;AAHW,WAAb,CADI,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUL,uBAAV;AAAA;AAAA;AAAA;AAAA;AAAAQ;AACE,iBAAM,wBAAU;AAAA,gBAAGL,OAAH,SAAGA,OAAH;AAAA,gBAAYI,IAAZ,SAAYA,IAAZ;AAAA,mBAAuBA,IAAI,KAAKE,qBAATF,IAAuBJ,OAAO,CAACC,IAAtD;AAAV,aAAsEL,qBAAtE,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIe,SAAUE,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAAS;AACb,iBAAM,gCAAeV,uBAAf,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["postActivityWithEvent","sendEventToPostActivity","sendEventToPostActivitySaga","_ref$payload","payload","name","value","_context","type","_context2","SEND_EVENT","_context3"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/sendEventToPostActivitySaga.js"],"sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { SEND_EVENT } from '../actions/sendEvent';\nimport postActivity from '../actions/postActivity';\nimport whileConnected from './effects/whileConnected';\n\nfunction* postActivityWithEvent({ payload: { name, value } }) {\n  yield put(\n    postActivity({\n      name,\n      type: 'event',\n      value\n    })\n  );\n}\n\nfunction* sendEventToPostActivity() {\n  yield takeEvery(({ payload, type }) => type === SEND_EVENT && payload.name, postActivityWithEvent);\n}\n\nexport default function* sendEventToPostActivitySaga() {\n  yield whileConnected(sendEventToPostActivity);\n}\n"]},"metadata":{},"sourceType":"script"}