{"ast":null,"code":"\"use strict\";\n\nvar isArray_1 = require('./util/isArray');\n\nvar isObject_1 = require('./util/isObject');\n\nvar isFunction_1 = require('./util/isFunction');\n\nvar tryCatch_1 = require('./util/tryCatch');\n\nvar errorObject_1 = require('./util/errorObject');\n\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\n\n\nvar Subscription = function () {\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  function Subscription(unsubscribe) {\n    /**\n     * A flag to indicate whether this Subscription has already been unsubscribed.\n     * @type {boolean}\n     */\n    this.closed = false;\n    this._parent = null;\n    this._parents = null;\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.unsubscribe = function () {\n    var hasErrors = false;\n    var errors;\n\n    if (this.closed) {\n      return;\n    }\n\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents,\n        _unsubscribe = _a._unsubscribe,\n        _subscriptions = _a._subscriptions;\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null; // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n\n    this._subscriptions = null;\n    var index = -1;\n    var len = _parents ? _parents.length : 0; // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n\n    while (_parent) {\n      _parent.remove(this); // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n\n\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction_1.isFunction(_unsubscribe)) {\n      var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\n      if (trial === errorObject_1.errorObject) {\n        hasErrors = true;\n        errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n      }\n    }\n\n    if (isArray_1.isArray(_subscriptions)) {\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        var sub = _subscriptions[index];\n\n        if (isObject_1.isObject(sub)) {\n          var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\n          if (trial === errorObject_1.errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            var err = errorObject_1.errorObject.e;\n\n            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n    }\n  };\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n\n\n  Subscription.prototype.add = function (teardown) {\n    if (!teardown || teardown === Subscription.EMPTY) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    var subscription = teardown;\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function'\n        /* quack quack */\n        ) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n\n        break;\n\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    var subscriptions = this._subscriptions || (this._subscriptions = []);\n    subscriptions.push(subscription);\n\n    subscription._addParent(this);\n\n    return subscription;\n  };\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n\n\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n\n  Subscription.prototype._addParent = function (parent) {\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents;\n\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  };\n\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n\n  return Subscription;\n}();\n\nexports.Subscription = Subscription;\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);\n  }, []);\n}","map":{"version":3,"mappings":"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","names":["unsubscribe","_unsubscribe","Subscription","hasErrors","errors","closed","_parent","_parents","_subscriptions","index","len","length","remove","isFunction_1","trial","tryCatch_1","call","errorObject_1","e","UnsubscriptionError_1","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","err","concat","push","teardown","EMPTY","subscription","_addParent","tmp","Error","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","exports","reduce","errs"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/Subscription.ts"],"sourcesContent":["import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n"]},"metadata":{},"sourceType":"script"}