{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _DismissIcon = _interopRequireDefault(require(\"./Toast/DismissIcon\"));\n\nvar _NotificationIcon = _interopRequireDefault(require(\"./Toast/NotificationIcon\"));\n\nvar _randomId = _interopRequireDefault(require(\"./Utils/randomId\"));\n\nvar _ScreenReaderText = _interopRequireDefault(require(\"./ScreenReaderText\"));\n\nvar _useInternalRenderMarkdownInline = _interopRequireDefault(require(\"./hooks/internal/useInternalRenderMarkdownInline\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"./hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"./hooks/internal/useStyleToEmotionObject\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useDismissNotification = _botframeworkWebchatApi.hooks.useDismissNotification,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\nvar ROOT_STYLE = {\n  display: 'flex',\n  '& .webchat__toast__text': {\n    flex: 1\n  }\n};\n\nvar BasicToast = function BasicToast(_ref) {\n  var _ref$notification = _ref.notification,\n      alt = _ref$notification.alt,\n      id = _ref$notification.id,\n      level = _ref$notification.level,\n      _ref$notification$mes = _ref$notification.message,\n      message = _ref$notification$mes === void 0 ? '' : _ref$notification$mes;\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      toastStyleSet = _useStyleSet2[0].toast;\n\n  var contentId = (0, _react.useMemo)(function () {\n    return \"webchat__toast__\".concat((0, _randomId.default)());\n  }, []);\n  var localize = useLocalizer();\n  var dismissNotification = useDismissNotification();\n  var renderMarkdownInline = (0, _useInternalRenderMarkdownInline.default)();\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var handleDismiss = (0, _react.useCallback)(function () {\n    return dismissNotification(id);\n  }, [dismissNotification, id]);\n  var html = (0, _react.useMemo)(function () {\n    return {\n      __html: renderMarkdownInline(message)\n    };\n  }, [message, renderMarkdownInline]);\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-describedby\": contentId,\n    \"aria-label\": localize('TOAST_TITLE_ALT'),\n    className: (0, _classnames.default)('webchat__toast', {\n      'webchat__toast--error': level === 'error',\n      'webchat__toast--info': level === 'info',\n      'webchat__toast--success': level === 'success',\n      'webchat__toast--warn': level === 'warn'\n    }, rootClassName, toastStyleSet + ''),\n    role: \"dialog\"\n  }, /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"webchat__toast__iconBox\"\n  }, /*#__PURE__*/_react.default.createElement(_NotificationIcon.default, {\n    className: \"webchat__toast__icon\",\n    level: level\n  })), !!alt && /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n    text: alt\n  }), /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-hidden\": !!alt,\n    className: \"webchat__toast__text\",\n    dangerouslySetInnerHTML: html,\n    id: contentId\n  }), /*#__PURE__*/_react.default.createElement(\"button\", {\n    \"aria-label\": localize('TOAST_DISMISS_BUTTON'),\n    className: \"webchat__toast__dismissButton\",\n    onClick: handleDismiss,\n    type: \"button\"\n  }, /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-hidden\": true,\n    className: \"webchat__toast__dismissButtonFocus\"\n  }, /*#__PURE__*/_react.default.createElement(_DismissIcon.default, null))));\n};\n\nBasicToast.propTypes = {\n  notification: _propTypes.default.shape({\n    alt: _propTypes.default.string,\n    id: _propTypes.default.string.isRequired,\n    level: _propTypes.default.string.isRequired,\n    message: _propTypes.default.string.isRequired\n  }).isRequired\n};\nvar _default = BasicToast;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["useDismissNotification","hooks","useLocalizer","ROOT_STYLE","display","flex","BasicToast","notification","alt","id","level","message","toastStyleSet","toast","contentId","localize","dismissNotification","renderMarkdownInline","rootClassName","handleDismiss","html","__html","_react","className","role","_NotificationIcon","_ScreenReaderText","text","dangerouslySetInnerHTML","onClick","type","_DismissIcon","propTypes","PropTypes","shape","string","isRequired"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/BasicToast.js"],"sourcesContent":["/* eslint react/forbid-dom-props: \"off\" */\n/* eslint react/no-danger: \"off\" */\n\nimport { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo } from 'react';\n\nimport DismissIcon from './Toast/DismissIcon';\nimport NotificationIcon from './Toast/NotificationIcon';\nimport randomId from './Utils/randomId';\nimport ScreenReaderText from './ScreenReaderText';\nimport useInternalRenderMarkdownInline from './hooks/internal/useInternalRenderMarkdownInline';\nimport useStyleSet from './hooks/useStyleSet';\nimport useStyleToEmotionObject from './hooks/internal/useStyleToEmotionObject';\n\nconst { useDismissNotification, useLocalizer } = hooks;\n\nconst ROOT_STYLE = {\n  display: 'flex',\n\n  '& .webchat__toast__text': {\n    flex: 1\n  }\n};\n\nconst BasicToast = ({ notification: { alt, id, level, message = '' } }) => {\n  const [{ toast: toastStyleSet }] = useStyleSet();\n  const contentId = useMemo(() => `webchat__toast__${randomId()}`, []);\n  const localize = useLocalizer();\n  const dismissNotification = useDismissNotification();\n  const renderMarkdownInline = useInternalRenderMarkdownInline();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  const handleDismiss = useCallback(() => dismissNotification(id), [dismissNotification, id]);\n  const html = useMemo(() => ({ __html: renderMarkdownInline(message) }), [message, renderMarkdownInline]);\n\n  return (\n    <div\n      aria-describedby={contentId}\n      aria-label={localize('TOAST_TITLE_ALT')}\n      className={classNames(\n        'webchat__toast',\n        {\n          'webchat__toast--error': level === 'error',\n          'webchat__toast--info': level === 'info',\n          'webchat__toast--success': level === 'success',\n          'webchat__toast--warn': level === 'warn'\n        },\n        rootClassName,\n        toastStyleSet + ''\n      )}\n      role=\"dialog\"\n    >\n      <div className=\"webchat__toast__iconBox\">\n        <NotificationIcon className=\"webchat__toast__icon\" level={level} />\n      </div>\n      {!!alt && <ScreenReaderText text={alt} />}\n      <div aria-hidden={!!alt} className=\"webchat__toast__text\" dangerouslySetInnerHTML={html} id={contentId} />\n      <button\n        aria-label={localize('TOAST_DISMISS_BUTTON')}\n        className=\"webchat__toast__dismissButton\"\n        onClick={handleDismiss}\n        type=\"button\"\n      >\n        <div aria-hidden={true} className=\"webchat__toast__dismissButtonFocus\">\n          <DismissIcon />\n        </div>\n      </button>\n    </div>\n  );\n};\n\nBasicToast.propTypes = {\n  notification: PropTypes.shape({\n    alt: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    level: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired\n  }).isRequired\n};\n\nexport default BasicToast;\n"]},"metadata":{},"sourceType":"script"}