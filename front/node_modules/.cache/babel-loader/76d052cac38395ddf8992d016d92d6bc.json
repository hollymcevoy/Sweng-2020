{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar ScalarObservable = function (_super) {\n  __extends(ScalarObservable, _super);\n\n  function ScalarObservable(value, scheduler) {\n    _super.call(this);\n\n    this.value = value;\n    this.scheduler = scheduler;\n    this._isScalar = true;\n\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  ScalarObservable.create = function (value, scheduler) {\n    return new ScalarObservable(value, scheduler);\n  };\n\n  ScalarObservable.dispatch = function (state) {\n    var done = state.done,\n        value = state.value,\n        subscriber = state.subscriber;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    this.schedule(state);\n  };\n  /** @deprecated internal use only */\n\n\n  ScalarObservable.prototype._subscribe = function (subscriber) {\n    var value = this.value;\n    var scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false,\n        value: value,\n        subscriber: subscriber\n      });\n    } else {\n      subscriber.next(value);\n\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  };\n\n  return ScalarObservable;\n}(Observable_1.Observable);\n\nexports.ScalarObservable = ScalarObservable;","map":{"version":3,"mappings":";;;;;;;;;;;;AACA,2BAA2B,eAA3B;AAIA;;;;;;;AAKA;AAAyCA;;AAwBvC,4BAAmBC,KAAnB,EAAqCC,SAArC,EAA2D;AACzDC;;AADiB;AAAkB;AAFrC,qBAAqB,IAArB;;AAIE,QAAID,SAAJ,EAAe;AACb,WAAKE,SAAL,GAAiB,KAAjB;AACD;AACF;;AA5BMC,4BAAP,UAAiBJ,KAAjB,EAA2BC,SAA3B,EAAiD;AAC/C,WAAO,IAAIG,gBAAJ,CAAqBJ,KAArB,EAA4BC,SAA5B,CAAP;AACD,GAFM;;AAIAG,8BAAP,UAAgBC,KAAhB,EAA0B;AAChB;AAAA,QAAML,mBAAN;AAAA,QAAaM,6BAAb;;AAER,QAAIC,IAAJ,EAAU;AACRD,gBAAU,CAACE,QAAX;AACA;AACD;;AAEDF,cAAU,CAACG,IAAX,CAAgBT,KAAhB;;AACA,QAAIM,UAAU,CAACI,MAAf,EAAuB;AACrB;AACD;;AAEDL,SAAK,CAACE,IAAN,GAAa,IAAb;AACO,SAAMI,QAAN,CAAeN,KAAf;AACR,GAfM;AA0BP;;;AAAqCD,oDAAWE,UAAX,EAAoC;AACvE,QAAMN,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAMC,SAAS,GAAG,KAAKA,SAAvB;;AAEA,QAAIA,SAAJ,EAAe;AACb,aAAOA,SAAS,CAACU,QAAV,CAAmBP,gBAAgB,CAACQ,QAApC,EAA8C,CAA9C,EAAiD;AACtDL,YAAI,EAAE,KADgD;AACzCP,oBADyC;AAClCM;AADkC,OAAjD,CAAP;AAGD,KAJD,MAIO;AACLA,gBAAU,CAACG,IAAX,CAAgBT,KAAhB;;AACA,UAAI,CAACM,UAAU,CAACI,MAAhB,EAAwB;AACtBJ,kBAAU,CAACE,QAAX;AACD;AACF;AACF,GAdoC;;AAevC;AA9CA,EAAyCK,uBAAzC;;AAAaC,2BAAgBV,gBAAhB","names":["__extends","value","scheduler","_super","_isScalar","ScalarObservable","state","subscriber","done","complete","next","closed","schedule","dispatch","Observable_1","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/observable/ScalarObservable.ts"],"sourcesContent":["import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}