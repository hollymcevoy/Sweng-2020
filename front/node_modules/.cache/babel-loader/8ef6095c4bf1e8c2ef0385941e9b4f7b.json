{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechConfigImpl = exports.SpeechConfig = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_2 = require(\"./Exports\");\n/**\n * Speech configuration.\n * @class SpeechConfig\n */\n\n\nvar SpeechConfig =\n/** @class */\nfunction () {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  function SpeechConfig() {}\n  /**\n   * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\n   * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n   * @member SpeechConfig.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - The subscription key.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechConfig} The speech factory\n   */\n\n\n  SpeechConfig.fromSubscription = function (subscriptionKey, region) {\n    Contracts_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_IntentRegion, region);\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    return speechImpl;\n  };\n  /**\n   * Creates an instance of the speech config with specified endpoint and subscription key.\n   * This method is intended only for users who use a non-standard service endpoint or parameters.\n   * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n   * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\n   * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\n   *              SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\n   *              and the effective language is \"de-DE\". Only the parameters that are not specified in the\n   *              endpoint URL can be set by other APIs.\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n   *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n   *       use the authorization token.\n   * @member SpeechConfig.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} endpoint - The service endpoint to connect to.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n\n\n  SpeechConfig.fromEndpoint = function (endpoint, subscriptionKey) {\n    Contracts_1.Contracts.throwIfNull(endpoint, \"endpoint\");\n    var speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return speechImpl;\n  };\n  /**\n   * Creates an instance of the speech config with specified host and subscription key.\n   * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n   * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n   * Note: To use an authorization token with fromHost, use fromHost(URL),\n   * and then set the AuthorizationToken property on the created SpeechConfig instance.\n   * Note: Added in version 1.9.0.\n   * @member SpeechConfig.fromHost\n   * @function\n   * @public\n   * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n\n\n  SpeechConfig.fromHost = function (hostName, subscriptionKey) {\n    Contracts_1.Contracts.throwIfNull(hostName, \"hostName\");\n    var speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return speechImpl;\n  };\n  /**\n   * Creates an instance of the speech factory with specified initial authorization token and region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   *       expires, the caller needs to refresh it by calling this setter with a new valid token.\n   * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\n   *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\n   *       the new token value will not apply to recognizers that have already been created. For recognizers\n   *       that have been created before, you need to set authorization token of the corresponding recognizer\n   *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member SpeechConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param {string} authorizationToken - The initial authorization token.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n\n\n  SpeechConfig.fromAuthorizationToken = function (authorizationToken, region) {\n    Contracts_1.Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\n    Contracts_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    var speechImpl = new SpeechConfigImpl();\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, region);\n    speechImpl.setProperty(Exports_2.PropertyId.SpeechServiceConnection_IntentRegion, region);\n    speechImpl.authorizationToken = authorizationToken;\n    return speechImpl;\n  };\n  /**\n   * Closes the configuration.\n   * @member SpeechConfig.prototype.close\n   * @function\n   * @public\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  SpeechConfig.prototype.close = function () {};\n\n  return SpeechConfig;\n}();\n\nexports.SpeechConfig = SpeechConfig;\n/**\n * @public\n * @class SpeechConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar SpeechConfigImpl =\n/** @class */\nfunction (_super) {\n  __extends(SpeechConfigImpl, _super);\n\n  function SpeechConfigImpl() {\n    var _this = _super.call(this) || this;\n\n    _this.privProperties = new Exports_2.PropertyCollection();\n    _this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\n\n    _this.outputFormat = Exports_2.OutputFormat.Simple;\n    return _this;\n  }\n\n  Object.defineProperty(SpeechConfigImpl.prototype, \"properties\", {\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"endPoint\", {\n    get: function () {\n      return new URL(this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"subscriptionKey\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Key);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"region\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"authorizationToken\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token);\n    },\n    set: function (value) {\n      this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceAuthorization_Token, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"speechRecognitionLanguage\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage);\n    },\n    set: function (value) {\n      this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"autoDetectSourceLanguages\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\n    },\n    set: function (value) {\n      this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"outputFormat\", {\n    get: function () {\n      return Exports_2.OutputFormat[this.privProperties.getProperty(Exports_1.OutputFormatPropertyName, undefined)];\n    },\n    set: function (value) {\n      this.privProperties.setProperty(Exports_1.OutputFormatPropertyName, Exports_2.OutputFormat[value]);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"endpointId\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId);\n    },\n    set: function (value) {\n      this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SpeechConfigImpl.prototype.setProperty = function (name, value) {\n    Contracts_1.Contracts.throwIfNull(value, \"value\");\n    this.privProperties.setProperty(name, value);\n  };\n\n  SpeechConfigImpl.prototype.getProperty = function (name, def) {\n    return this.privProperties.getProperty(name, def);\n  };\n\n  SpeechConfigImpl.prototype.setProxy = function (proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n    this.setProperty(Exports_2.PropertyId[Exports_2.PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n  };\n\n  SpeechConfigImpl.prototype.setServiceProperty = function (name, value, channel) {\n    var currentProperties = JSON.parse(this.privProperties.getProperty(Exports_1.ServicePropertiesPropertyName, \"{}\"));\n    currentProperties[name] = value;\n    this.privProperties.setProperty(Exports_1.ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n  };\n\n  SpeechConfigImpl.prototype.setProfanity = function (profanity) {\n    this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceResponse_ProfanityOption, Exports_2.ProfanityOption[profanity]);\n  };\n\n  SpeechConfigImpl.prototype.enableAudioLogging = function () {\n    this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n  };\n\n  SpeechConfigImpl.prototype.requestWordLevelTimestamps = function () {\n    this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n  };\n\n  SpeechConfigImpl.prototype.enableDictation = function () {\n    this.privProperties.setProperty(Exports_1.ForceDictationPropertyName, \"true\");\n  };\n\n  SpeechConfigImpl.prototype.clone = function () {\n    var ret = new SpeechConfigImpl();\n    ret.privProperties = this.privProperties.clone();\n    return ret;\n  };\n\n  Object.defineProperty(SpeechConfigImpl.prototype, \"speechSynthesisLanguage\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthLanguage);\n    },\n    set: function (language) {\n      this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthLanguage, language);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"speechSynthesisVoiceName\", {\n    get: function () {\n      return this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthVoice);\n    },\n    set: function (voice) {\n      this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthVoice, voice);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechConfigImpl.prototype, \"speechSynthesisOutputFormat\", {\n    get: function () {\n      return Exports_2.SpeechSynthesisOutputFormat[this.privProperties.getProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n    },\n    set: function (format) {\n      this.privProperties.setProperty(Exports_2.PropertyId.SpeechServiceConnection_SynthOutputFormat, Exports_2.SpeechSynthesisOutputFormat[format]);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SpeechConfigImpl;\n}(SpeechConfig);\n\nexports.SpeechConfigImpl = SpeechConfigImpl;","map":{"version":3,"mappings":"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","names":["SpeechConfig","subscriptionKey","region","Contracts_1","throwIfNullOrWhitespace","speechImpl","SpeechConfigImpl","setProperty","Exports_2","SpeechServiceConnection_Region","SpeechServiceConnection_IntentRegion","SpeechServiceConnection_Key","endpoint","throwIfNull","SpeechServiceConnection_Endpoint","href","undefined","hostName","SpeechServiceConnection_Host","protocol","hostname","port","authorizationToken","exports","__extends","_super","_this","privProperties","speechRecognitionLanguage","outputFormat","Simple","Object","URL","getProperty","SpeechServiceAuthorization_Token","value","SpeechServiceConnection_RecoLanguage","SpeechServiceConnection_AutoDetectSourceLanguages","Exports_1","SpeechServiceConnection_EndpointId","name","def","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","channel","currentProperties","JSON","parse","stringify","profanity","SpeechServiceResponse_ProfanityOption","SpeechServiceConnection_EnableAudioLogging","SpeechServiceResponse_RequestWordLevelTimestamps","ret","clone","SpeechServiceConnection_SynthLanguage","language","SpeechServiceConnection_SynthVoice","voice","SpeechServiceConnection_SynthOutputFormat","format"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {IStringDictionary} from \"../common/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     *              SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     *              and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     *              endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     *       the new token value will not apply to recognizers that have already been created. For recognizers\r\n     *       that have been created before, you need to set authorization token of the corresponding recognizer\r\n     *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     * @summary Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     * @summary Enable audio logging in service.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     * @summary Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     * @summary Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}