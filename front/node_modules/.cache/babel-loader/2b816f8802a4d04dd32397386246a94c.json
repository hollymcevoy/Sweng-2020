{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DialogServiceConnector = void 0;\n\nvar DialogConnectorFactory_1 = require(\"../common.speech/DialogConnectorFactory\");\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../common/Exports\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar PropertyId_1 = require(\"./PropertyId\");\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\n\n\nvar DialogServiceConnector =\n/** @class */\nfunction (_super) {\n  __extends(DialogServiceConnector, _super);\n  /**\n   * Initializes an instance of the DialogServiceConnector.\n   * @constructor\n   * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n\n\n  function DialogServiceConnector(dialogConfig, audioConfig) {\n    var _this = this;\n\n    var dialogServiceConfigImpl = dialogConfig;\n    Contracts_1.Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n    _this = _super.call(this, audioConfig, dialogServiceConfigImpl.properties, new DialogConnectorFactory_1.DialogConnectionFactory()) || this;\n    _this.isTurnComplete = true;\n    _this.privIsDisposed = false;\n    _this.privProperties = dialogServiceConfigImpl.properties.clone();\n\n    var agentConfig = _this.buildAgentConfig();\n\n    _this.privReco.agentConfig.set(agentConfig);\n\n    return _this;\n  }\n  /**\n   * Starts a connection to the service.\n   * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n   *\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n   * be notified when the connection is established.\n   * @member DialogServiceConnector.prototype.connect\n   * @function\n   * @public\n   */\n\n\n  DialogServiceConnector.prototype.connect = function (cb, err) {\n    Exports_2.marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\n  };\n  /**\n   * Closes the connection the service.\n   * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n   *\n   * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n   */\n\n\n  DialogServiceConnector.prototype.disconnect = function (cb, err) {\n    Exports_2.marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\n  };\n\n  Object.defineProperty(DialogServiceConnector.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function () {\n      return this.properties.getProperty(PropertyId_1.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function (token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(PropertyId_1.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DialogServiceConnector.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this DialogServiceConnector.\n     * @member DialogServiceConnector.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DialogServiceConnector.prototype, \"speechActivityTemplate\", {\n    /** Gets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be empty\n     */\n    get: function () {\n      return this.properties.getProperty(PropertyId_1.PropertyId.Conversation_Speech_Activity_Template);\n    },\n\n    /** Sets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be null or empty.\n     * Note: it has to be a valid Json object.\n     */\n    set: function (speechActivityTemplate) {\n      this.properties.setProperty(PropertyId_1.PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Starts recognition and stops after the first utterance is recognized.\n   * @member DialogServiceConnector.prototype.listenOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the reco has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  DialogServiceConnector.prototype.listenOnceAsync = function (cb, err) {\n    var _this = this;\n\n    if (this.isTurnComplete) {\n      Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n\n      var callbackHolder = function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var ret, e;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.privReco.connect()];\n\n              case 1:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , this.implRecognizerStop()];\n\n              case 2:\n                _a.sent();\n\n                this.isTurnComplete = false;\n                ret = new Exports_2.Deferred();\n                return [4\n                /*yield*/\n                , this.privReco.recognize(Exports_1.RecognitionMode.Conversation, ret.resolve, ret.reject)];\n\n              case 3:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , ret.promise];\n\n              case 4:\n                e = _a.sent();\n                return [4\n                /*yield*/\n                , this.implRecognizerStop()];\n\n              case 5:\n                _a.sent();\n\n                return [2\n                /*return*/\n                , e];\n            }\n          });\n        });\n      };\n\n      var retPromise = callbackHolder();\n      retPromise.catch(function () {\n        // Destroy the recognizer.\n\n        /* tslint:disable:no-empty */\n        // We've done all we can here.\n        _this.dispose(true).catch(function () {});\n      });\n      Exports_2.marshalPromiseToCallbacks(retPromise.finally(function () {\n        _this.isTurnComplete = true;\n      }), cb, err);\n    }\n  };\n\n  DialogServiceConnector.prototype.sendActivityAsync = function (activity, cb, errCb) {\n    Exports_2.marshalPromiseToCallbacks(this.privReco.sendMessage(activity), cb, errCb);\n  };\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member DialogServiceConnector.prototype.close\n   * @function\n   * @public\n   */\n\n\n  DialogServiceConnector.prototype.close = function (cb, err) {\n    Contracts_1.Contracts.throwIfDisposed(this.privIsDisposed);\n    Exports_2.marshalPromiseToCallbacks(this.dispose(true), cb, err);\n  };\n\n  DialogServiceConnector.prototype.dispose = function (disposing) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privIsDisposed) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!disposing) return [3\n            /*break*/\n            , 3];\n            this.privIsDisposed = true;\n            return [4\n            /*yield*/\n            , this.implRecognizerStop()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , _super.prototype.dispose.call(this, disposing)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DialogServiceConnector.prototype.createRecognizerConfig = function (speechConfig) {\n    return new Exports_1.RecognizerConfig(speechConfig, this.privProperties);\n  };\n\n  DialogServiceConnector.prototype.createServiceRecognizer = function (authentication, connectionFactory, audioConfig, recognizerConfig) {\n    var audioSource = audioConfig;\n    return new Exports_1.DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  };\n\n  DialogServiceConnector.prototype.buildAgentConfig = function () {\n    var communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n    return {\n      botInfo: {\n        commType: communicationType,\n        commandsCulture: undefined,\n        connectionId: this.properties.getProperty(PropertyId_1.PropertyId.Conversation_Agent_Connection_Id),\n        conversationId: this.properties.getProperty(PropertyId_1.PropertyId.Conversation_Conversation_Id, undefined),\n        fromId: this.properties.getProperty(PropertyId_1.PropertyId.Conversation_From_Id, undefined),\n        ttsAudioFormat: this.properties.getProperty(PropertyId_1.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\n      },\n      version: 0.2\n    };\n  };\n\n  return DialogServiceConnector;\n}(Exports_3.Recognizer);\n\nexports.DialogServiceConnector = DialogServiceConnector;","map":{"version":3,"mappings":"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","names":["__extends","dialogConfig","audioConfig","dialogServiceConfigImpl","Contracts_1","throwIfNull","_this","properties","DialogConnectorFactory_1","isTurnComplete","privIsDisposed","privProperties","clone","agentConfig","buildAgentConfig","privReco","set","DialogServiceConnector","cb","err","Exports_2","connect","disconnect","Object","getProperty","PropertyId_1","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","Conversation_Speech_Activity_Template","speechActivityTemplate","throwIfDisposed","callbackHolder","_a","implRecognizerStop","ret","recognize","Exports_1","Conversation","resolve","reject","promise","e","retPromise","catch","dispose","finally","activity","errCb","sendMessage","disposing","_super","call","speechConfig","authentication","connectionFactory","recognizerConfig","audioSource","communicationType","botInfo","commType","commandsCulture","undefined","connectionId","Conversation_Agent_Connection_Id","conversationId","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","SpeechServiceConnection_SynthOutputFormat","version","Exports_3","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch(() => {\r\n                // Destroy the recognizer.\r\n                /* tslint:disable:no-empty */ // We've done all we can here.\r\n                this.dispose(true).catch(() => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}