{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CertCheckAgent = void 0;\n\nvar tls = __importStar(require(\"tls\"));\n\nvar parse = __importStar(require(\"url-parse\"));\n\nvar ocsp = __importStar(require(\"../../external/ocsp/ocsp\"));\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar agent_base_1 = __importDefault(require(\"agent-base\")); // @ts-ignore\n\n\nvar async_disk_cache_1 = __importDefault(require(\"async-disk-cache\"));\n\nvar https_proxy_agent_1 = __importDefault(require(\"https-proxy-agent\"));\n\nvar net = __importStar(require(\"net\"));\n\nvar OCSPEvents_1 = require(\"../common/OCSPEvents\");\n\nvar CertCheckAgent =\n/** @class */\nfunction () {\n  function CertCheckAgent(proxyInfo) {\n    if (!!proxyInfo) {\n      this.privProxyInfo = proxyInfo;\n    } // Initialize this here to allow tests to set the env variable before the cache is constructed.\n\n\n    if (!CertCheckAgent.privDiskCache) {\n      CertCheckAgent.privDiskCache = new async_disk_cache_1.default(\"microsoft-cognitiveservices-speech-sdk-cache\", {\n        supportBuffer: true,\n        location: typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined\n      });\n    }\n  } // Test hook to force the disk cache to be recreated.\n\n\n  CertCheckAgent.forceReinitDiskCache = function () {\n    CertCheckAgent.privDiskCache = undefined;\n    CertCheckAgent.privMemCache = {};\n  };\n\n  CertCheckAgent.prototype.GetAgent = function (disableStapling) {\n    var agent = new agent_base_1.default.Agent(this.CreateConnection);\n\n    if (this.privProxyInfo !== undefined && this.privProxyInfo.HostName !== undefined && this.privProxyInfo.Port > 0) {\n      var proxyName = \"privProxyInfo\";\n      agent[proxyName] = this.privProxyInfo;\n    }\n\n    return agent;\n  };\n\n  CertCheckAgent.GetProxyAgent = function (proxyInfo) {\n    var httpProxyOptions = {\n      host: proxyInfo.HostName,\n      port: proxyInfo.Port\n    };\n\n    if (!!proxyInfo.UserName) {\n      httpProxyOptions.headers = {\n        \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\")\n      };\n    } else {\n      httpProxyOptions.headers = {};\n    }\n\n    httpProxyOptions.headers.requestOCSP = \"true\";\n    var httpProxyAgent = new https_proxy_agent_1.default(httpProxyOptions);\n    return httpProxyAgent;\n  };\n\n  CertCheckAgent.OCSPCheck = function (socketPromise, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ocspRequest, stapling, resolved, socket, tlsSocket;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resolved = false;\n            return [4\n            /*yield*/\n            , socketPromise];\n\n          case 1:\n            socket = _a.sent();\n            socket.cork();\n            tlsSocket = socket;\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              socket.on(\"OCSPResponse\", function (data) {\n                if (!!data) {\n                  _this.onEvent(new Exports_1.OCSPStapleReceivedEvent());\n\n                  stapling = data;\n                }\n              });\n              socket.on(\"error\", function (error) {\n                if (!resolved) {\n                  resolved = true;\n                  socket.destroy();\n                  reject(error);\n                }\n              });\n              tlsSocket.on(\"secure\", function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var peer, issuer, sig, cacheEntry, e_1;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        peer = tlsSocket.getPeerCertificate(true);\n                        _a.label = 1;\n\n                      case 1:\n                        _a.trys.push([1, 6,, 7]);\n\n                        return [4\n                        /*yield*/\n                        , this.GetIssuer(peer)];\n\n                      case 2:\n                        issuer = _a.sent(); // We always need a request to verify the response.\n\n                        ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\n                        sig = ocspRequest.id.toString(\"hex\");\n                        if (!!stapling) return [3\n                        /*break*/\n                        , 4];\n                        return [4\n                        /*yield*/\n                        , CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo)];\n\n                      case 3:\n                        cacheEntry = _a.sent();\n                        stapling = cacheEntry;\n                        _a.label = 4;\n\n                      case 4:\n                        return [4\n                        /*yield*/\n                        , this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo)];\n\n                      case 5:\n                        _a.sent();\n\n                        socket.uncork();\n                        resolved = true;\n                        resolve(socket);\n                        return [3\n                        /*break*/\n                        , 7];\n\n                      case 6:\n                        e_1 = _a.sent();\n                        socket.destroy();\n                        resolved = true;\n                        reject(e_1);\n                        return [3\n                        /*break*/\n                        , 7];\n\n                      case 7:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.GetIssuer = function (peer) {\n    if (peer.issuerCertificate) {\n      return Promise.resolve(peer.issuerCertificate);\n    }\n\n    return new Promise(function (resolve, reject) {\n      var ocspAgent = new ocsp.Agent({});\n      ocspAgent.fetchIssuer(peer, null, function (error, value) {\n        if (!!error) {\n          reject(error);\n          return;\n        }\n\n        resolve(value);\n      });\n    });\n  };\n\n  CertCheckAgent.GetResponseFromCache = function (signature, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedResponse, diskCacheResponse, error_1, cachedOcspResponse, tbsData, cachedStartTime, cachedNextTime, minUpdate;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedResponse = CertCheckAgent.privMemCache[signature];\n\n            if (!!cachedResponse) {\n              this.onEvent(new Exports_1.OCSPMemoryCacheHitEvent(signature));\n            }\n\n            if (!!cachedResponse) return [3\n            /*break*/\n            , 4];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , CertCheckAgent.privDiskCache.get(signature)];\n\n          case 2:\n            diskCacheResponse = _a.sent();\n\n            if (!!diskCacheResponse.isCached) {\n              CertCheckAgent.onEvent(new Exports_1.OCSPDiskCacheHitEvent(signature));\n              CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n              cachedResponse = diskCacheResponse.value;\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _a.sent();\n            cachedResponse = null;\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            if (!cachedResponse) {\n              return [2\n              /*return*/\n              , cachedResponse];\n            }\n\n            try {\n              cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\n              tbsData = cachedOcspResponse.value.tbsResponseData;\n\n              if (tbsData.responses.length < 1) {\n                this.onEvent(new Exports_1.OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n                return [2\n                /*return*/\n                ];\n              }\n\n              cachedStartTime = tbsData.responses[0].thisUpdate;\n              cachedNextTime = tbsData.responses[0].nextUpdate;\n\n              if (cachedNextTime < Date.now() + this.testTimeOffset - 60000) {\n                // Cached entry has expired.\n                this.onEvent(new Exports_1.OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n                cachedResponse = null;\n              } else {\n                minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n\n                if (cachedNextTime - (Date.now() + this.testTimeOffset) < minUpdate) {\n                  this.onEvent(new Exports_1.OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n                  this.UpdateCache(ocspRequest, proxyInfo).catch(function (error) {\n                    // Well, not much we can do here.\n                    _this.onEvent(new OCSPEvents_1.OCSPCacheUpdateErrorEvent(signature, error.toString()));\n                  });\n                } else {\n                  this.onEvent(new Exports_1.OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n                }\n              }\n            } catch (error) {\n              this.onEvent(new Exports_1.OCSPCacheFetchErrorEvent(signature, error));\n              cachedResponse = null;\n            }\n\n            if (!cachedResponse) {\n              this.onEvent(new Exports_1.OCSPCacheMissEvent(signature));\n            }\n\n            return [2\n            /*return*/\n            , cachedResponse];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.VerifyOCSPResponse = function (cacheValue, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ocspResponse, sig;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ocspResponse = cacheValue;\n            sig = ocspRequest.certID.toString(\"hex\");\n            if (!!ocspResponse) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo)];\n\n          case 1:\n            ocspResponse = _a.sent();\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              ocsp.verify({\n                request: ocspRequest,\n                response: ocspResponse\n              }, function (error, result) {\n                if (!!error) {\n                  CertCheckAgent.onEvent(new Exports_1.OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error)); // Bad Cached Value? One more try without the cache.\n\n                  if (!!cacheValue) {\n                    _this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(function () {\n                      resolve();\n                    }, function (error) {\n                      reject(error);\n                    });\n                  } else {\n                    reject(error);\n                  }\n                } else {\n                  if (!cacheValue) {\n                    CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n                  }\n\n                  resolve();\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.UpdateCache = function (req, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signature, rawResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            signature = req.id.toString(\"hex\");\n            this.onEvent(new Exports_1.OCSPCacheUpdateNeededEvent(signature));\n            return [4\n            /*yield*/\n            , this.GetOCSPResponse(req, proxyInfo)];\n\n          case 1:\n            rawResponse = _a.sent();\n            this.StoreCacheEntry(signature, rawResponse);\n            this.onEvent(new Exports_1.OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CertCheckAgent.StoreCacheEntry = function (sig, rawResponse) {\n    this.StoreMemoryCacheEntry(sig, rawResponse);\n    this.StoreDiskCacheEntry(sig, rawResponse);\n  };\n\n  CertCheckAgent.StoreMemoryCacheEntry = function (sig, rawResponse) {\n    this.privMemCache[sig] = rawResponse;\n    this.onEvent(new Exports_1.OCSPMemoryCacheStoreEvent(sig));\n  };\n\n  CertCheckAgent.StoreDiskCacheEntry = function (sig, rawResponse) {\n    var _this = this;\n\n    this.privDiskCache.set(sig, rawResponse).then(function () {\n      _this.onEvent(new Exports_1.OCSPDiskCacheStoreEvent(sig));\n    });\n  };\n\n  CertCheckAgent.GetOCSPResponse = function (req, proxyInfo) {\n    var _this = this;\n\n    var ocspMethod = \"1.3.6.1.5.5.7.48.1\";\n    var options = {};\n\n    if (!!proxyInfo) {\n      var agent = CertCheckAgent.GetProxyAgent(proxyInfo);\n      options.agent = agent;\n    }\n\n    return new Promise(function (resolve, reject) {\n      ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, function (error, uri) {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        var parsedUri = parse.default(uri);\n        parsedUri.path = parsedUri.pathname;\n        options = __assign(__assign({}, options), parsedUri);\n        ocsp.utils.getResponse(options, req.data, function (error, raw) {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          _this.onEvent(new Exports_1.OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\n\n          resolve(raw);\n        });\n      });\n    });\n  };\n\n  CertCheckAgent.prototype.CreateConnection = function (request, options) {\n    var enableOCSP = typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\" && options.secureEndpoint;\n    var socketPromise;\n    options = __assign(__assign({}, options), {\n      requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n      servername: options.host\n    });\n\n    if (!!this.privProxyInfo) {\n      var httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n      var baseAgent_1 = httpProxyAgent;\n      socketPromise = new Promise(function (resolve, reject) {\n        baseAgent_1.callback(request, options, function (error, socket) {\n          if (!!error) {\n            reject(error);\n          } else {\n            resolve(socket);\n          }\n        });\n      });\n    } else {\n      if (!!options.secureEndpoint) {\n        socketPromise = Promise.resolve(tls.connect(options));\n      } else {\n        socketPromise = Promise.resolve(net.connect(options));\n      }\n    }\n\n    if (!!enableOCSP) {\n      return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n    } else {\n      return socketPromise;\n    }\n  }; // Test hook to enable forcing expiration / refresh to happen.\n\n\n  CertCheckAgent.testTimeOffset = 0; // Test hook to disable stapling for cache testing.\n\n  CertCheckAgent.forceDisableOCSPStapling = false; // An in memory cache for recived responses.\n\n  CertCheckAgent.privMemCache = {};\n\n  CertCheckAgent.onEvent = function (event) {\n    Exports_1.Events.instance.onEvent(event);\n  };\n\n  return CertCheckAgent;\n}();\n\nexports.CertCheckAgent = CertCheckAgent;","map":{"version":3,"mappings":"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","names":["proxyInfo","privProxyInfo","CertCheckAgent","privDiskCache","async_disk_cache_1","supportBuffer","location","process","env","SPEECH_OCSP_CACHE_ROOT","undefined","privMemCache","disableStapling","agent","agent_base_1","Agent","CreateConnection","HostName","Port","proxyName","httpProxyOptions","host","port","UserName","headers","Buffer","Password","toString","requestOCSP","httpProxyAgent","https_proxy_agent_1","socketPromise","resolved","socket","_a","cork","tlsSocket","Promise","resolve","reject","on","data","_this","onEvent","Exports_1","stapling","error","destroy","peer","getPeerCertificate","GetIssuer","issuer","ocspRequest","ocsp","request","generate","raw","sig","id","GetResponseFromCache","cacheEntry","VerifyOCSPResponse","uncork","e_1","issuerCertificate","ocspAgent","fetchIssuer","value","signature","cachedResponse","get","diskCacheResponse","isCached","StoreMemoryCacheEntry","cachedOcspResponse","utils","parseResponse","tbsData","tbsResponseData","responses","length","cachedStartTime","thisUpdate","cachedNextTime","nextUpdate","Date","now","testTimeOffset","minUpdate","Math","min","UpdateCache","catch","OCSPEvents_1","cacheValue","ocspResponse","certID","GetOCSPResponse","verify","response","result","then","StoreCacheEntry","req","rawResponse","StoreDiskCacheEntry","set","ocspMethod","options","GetProxyAgent","getAuthorityInfo","cert","uri","parsedUri","parse","default","path","pathname","getResponse","enableOCSP","NODE_TLS_REJECT_UNAUTHORIZED","SPEECH_CONDUCT_OCSP_CHECK","secureEndpoint","forceDisableOCSPStapling","servername","baseAgent_1","callback","tls","connect","net","OCSPCheck","event","instance","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/CertChecks.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as http from \"http\";\r\nimport * as tls from \"tls\";\r\nimport * as parse from \"url-parse\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport {\r\n    Events,\r\n    OCSPCacheEntryExpiredEvent,\r\n    OCSPCacheEntryNeedsRefreshEvent,\r\n    OCSPCacheFetchErrorEvent,\r\n    OCSPCacheHitEvent,\r\n    OCSPCacheMissEvent,\r\n    OCSPCacheUpdatehCompleteEvent,\r\n    OCSPCacheUpdateNeededEvent,\r\n    OCSPDiskCacheHitEvent,\r\n    OCSPDiskCacheStoreEvent,\r\n    OCSPEvent,\r\n    OCSPMemoryCacheHitEvent,\r\n    OCSPMemoryCacheStoreEvent,\r\n    OCSPResponseRetrievedEvent,\r\n    OCSPStapleReceivedEvent,\r\n    OCSPVerificationFailedEvent,\r\n} from \"../common/Exports\";\r\nimport { IStringDictionary } from \"../common/IDictionary\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\nimport Agent from \"agent-base\";\r\n\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\n\r\nexport class CertCheckAgent {\r\n\r\n    // Test hook to enable forcing expiration / refresh to happen.\r\n    public static testTimeOffset: number = 0;\r\n\r\n    // Test hook to disable stapling for cache testing.\r\n    public static forceDisableOCSPStapling: boolean = false;\r\n\r\n    // An in memory cache for recived responses.\r\n    private static privMemCache: IStringDictionary<Buffer> = {};\r\n\r\n    // The on disk cache.\r\n    private static privDiskCache: Cache;\r\n\r\n    private privProxyInfo: ProxyInfo;\r\n\r\n    constructor(proxyInfo?: ProxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n\r\n    // Test hook to force the disk cache to be recreated.\r\n    public static forceReinitDiskCache(): void {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n\r\n    public GetAgent(disableStapling?: boolean): http.Agent {\r\n        const agent: any = new Agent.Agent(this.CreateConnection);\r\n\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName: string = \"privProxyInfo\";\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n\r\n        return agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\r\n        let ocspRequest: ocsp.Request;\r\n        let stapling: Buffer;\r\n        let resolved: boolean = false;\r\n\r\n        const socket: net.Socket = await socketPromise;\r\n        socket.cork();\r\n\r\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\r\n\r\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\r\n                if (!!data) {\r\n                    this.onEvent(new OCSPStapleReceivedEvent());\r\n                    stapling = data;\r\n                }\r\n            });\r\n\r\n            socket.on(\"error\", (error: Error) => {\r\n                if (!resolved) {\r\n                    resolved = true;\r\n                    socket.destroy();\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            tlsSocket.on(\"secure\", async () => {\r\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n                try {\r\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\r\n\r\n                    // We always need a request to verify the response.\r\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n\r\n                    // Do we have a result for this certificate in our memory cache?\r\n                    const sig: string = ocspRequest.id.toString(\"hex\");\r\n\r\n                    // Stapled response trumps cached response.\r\n                    if (!stapling) {\r\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                        stapling = cacheEntry;\r\n                    }\r\n\r\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n\r\n                    socket.uncork();\r\n                    resolved = true;\r\n                    resolve(socket);\r\n                } catch (e) {\r\n                    socket.destroy();\r\n                    resolved = true;\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n\r\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void) => {\r\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\r\n\r\n        if (!!cachedResponse) {\r\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n        }\r\n\r\n        // Do we have a result for this certificate on disk in %TMP%?\r\n        if (!cachedResponse) {\r\n            try {\r\n                const diskCacheResponse: any = await CertCheckAgent.privDiskCache.get(signature);\r\n                if (!!diskCacheResponse.isCached) {\r\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                    cachedResponse = diskCacheResponse.value;\r\n                }\r\n            } catch (error) {\r\n                cachedResponse = null;\r\n            }\r\n        }\r\n\r\n        if (!cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        try {\r\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\r\n            const tbsData = cachedOcspResponse.value.tbsResponseData;\r\n            if (tbsData.responses.length < 1) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                return;\r\n            }\r\n\r\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\r\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\r\n\r\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                // Cached entry has expired.\r\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                cachedResponse = null;\r\n            } else {\r\n                // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                // background an update to the cache.\r\n\r\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n\r\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string) => {\r\n                        // Well, not much we can do here.\r\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                    });\r\n                } else {\r\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\r\n            cachedResponse = null;\r\n        }\r\n        if (!cachedResponse) {\r\n            this.onEvent(new OCSPCacheMissEvent(signature));\r\n        }\r\n        return cachedResponse;\r\n    }\r\n\r\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        let ocspResponse: Buffer = cacheValue;\r\n        const sig: string = ocspRequest.certID.toString(\"hex\");\r\n\r\n        // Do we have a valid response?\r\n        if (!ocspResponse) {\r\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n        }\r\n\r\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void) => {\r\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string, result: any): void => {\r\n                if (!!error) {\r\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n\r\n                    // Bad Cached Value? One more try without the cache.\r\n                    if (!!cacheValue) {\r\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\r\n                            resolve();\r\n                        }, (error: Error) => {\r\n                            reject(error);\r\n                        });\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                } else {\r\n                    if (!cacheValue) {\r\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        const signature: string = req.id.toString(\"hex\");\r\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n\r\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\r\n        this.StoreCacheEntry(signature, rawResponse);\r\n        this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\r\n\r\n    }\r\n\r\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n\r\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n\r\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privDiskCache.set(sig, rawResponse).then(() => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n\r\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n\r\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\r\n        let options: http.RequestOptions = {};\r\n\r\n        if (!!proxyInfo) {\r\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void) => {\r\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error: string, uri: string): void => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                const parsedUri: {[k: string]: any} = parse.default(uri);\r\n                parsedUri.path = parsedUri.pathname;\r\n                options = { ...options, ...parsedUri };\r\n\r\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static onEvent = (event: OCSPEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket) => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        } else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}