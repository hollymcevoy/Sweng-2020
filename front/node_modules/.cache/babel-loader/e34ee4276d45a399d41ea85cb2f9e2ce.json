{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusAccessKeyEffect;\n\nvar _react = require(\"react\");\n\nvar _useContext = _interopRequireDefault(require(\"./internal/useContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction removeInline(array, item) {\n  var index = array.indexOf(item);\n  ~index && array.splice(index, 1);\n}\n\nfunction useFocusAccessKeyEffect(key, ref) {\n  if (key && typeof key !== 'string') {\n    throw new Error('useFocusAccessKeyEffect: If defined, \"key\" must be of type \"string\".');\n  } else if (!ref || !('current' in ref)) {\n    throw new Error('useFocusAccessKeyEffect: \"ref\" must be defined and has \"current\" property.');\n  }\n\n  var context = (0, _useContext.default)();\n  (0, _react.useEffect)(function () {\n    if (key) {\n      var entry = {\n        keys: key.split(/[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+/g),\n        ref: ref\n      };\n      context.focii.push(entry);\n      return function () {\n        return removeInline(context.focii, entry);\n      };\n    }\n  }, [context, key, ref]);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAEA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AACjC,MAAMC,KAAK,GAAGF,KAAK,CAACG,OAANH,CAAcC,IAAdD,CAAd;AAEA,GAACE,KAAD,IAAUF,KAAK,CAACI,MAANJ,CAAaE,KAAbF,EAAoB,CAApBA,CAAV;AACD;;AAEc,SAASK,uBAAT,CAAiCC,GAAjC,EAAsCC,GAAtC,EAA2C;AACxD,MAAID,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;AAClC,UAAM,IAAIE,KAAJ,CAAU,sEAAV,CAAN;AADF,SAEO,IAAI,CAACD,GAAD,IAAQ,EAAE,aAAaA,GAAf,CAAZ,EAAiC;AACtC,UAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAED,MAAMC,OAAO,GAAG,0BAAhB;AAEA,wBAAU,YAAM;AACd,QAAIH,GAAJ,EAAS;AACP,UAAMI,KAAK,GAAG;AAAEC,YAAI,EAAEL,GAAG,CAACM,KAAJN,CAAU,uEAAVA,CAAR;AAA4BC,WAAG,EAAHA;AAA5B,OAAd;AAEAE,aAAO,CAACI,KAARJ,CAAcK,IAAdL,CAAmBC,KAAnBD;AAEA,aAAO;AAAA,eAAMV,YAAY,CAACU,OAAO,CAACI,KAAT,EAAgBH,KAAhB,CAAlB;AAAP;AACD;AAPH,KAQG,CAACD,OAAD,EAAUH,GAAV,EAAeC,GAAf,CARH;AASD","names":["removeInline","array","item","index","indexOf","splice","useFocusAccessKeyEffect","key","ref","Error","context","entry","keys","split","focii","push"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Utils/AccessKeySink/useFocusAccessKeyEffect.js"],"sourcesContent":["import { useEffect } from 'react';\n\nimport useAccessKeySinkContext from './internal/useContext';\n\nfunction removeInline(array, item) {\n  const index = array.indexOf(item);\n\n  ~index && array.splice(index, 1);\n}\n\nexport default function useFocusAccessKeyEffect(key, ref) {\n  if (key && typeof key !== 'string') {\n    throw new Error('useFocusAccessKeyEffect: If defined, \"key\" must be of type \"string\".');\n  } else if (!ref || !('current' in ref)) {\n    throw new Error('useFocusAccessKeyEffect: \"ref\" must be defined and has \"current\" property.');\n  }\n\n  const context = useAccessKeySinkContext();\n\n  useEffect(() => {\n    if (key) {\n      const entry = { keys: key.split(/\\s+/gu), ref };\n\n      context.focii.push(entry);\n\n      return () => removeInline(context.focii, entry);\n    }\n  }, [context, key, ref]);\n}\n"]},"metadata":{},"sourceType":"script"}