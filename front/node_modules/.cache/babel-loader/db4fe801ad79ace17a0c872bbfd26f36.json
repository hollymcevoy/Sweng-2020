{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = findLastIndex;\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction findLastIndex(array, predicate) {\n  var index = _toConsumableArray(array).reverse().findIndex(predicate);\n\n  if (~index) {\n    var _ref = array || [],\n        length = _ref.length;\n\n    return length - index - 1;\n  }\n\n  return index;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAe,SAASA,aAAT,CAA0BC,KAA1B,EAA+CC,SAA/C,EAAwG;AACrH,MAAMC,KAAK,GAAGC,mBAAIH,KAAJ,EAAWI,OAAX,GAAqBC,SAArB,CAA+BJ,SAA/B,CAAd;;AAEA,MAAI,CAACC,KAAL,EAAY;AACV,eAAmBF,KAAK,IAAI,EAA5B;AAAA,QAAQM,MAAR,QAAQA,MAAR;;AAEA,WAAOA,MAAM,GAAGJ,KAATI,GAAiB,CAAxB;AACD;;AAED,SAAOJ,KAAP;AACD","names":["findLastIndex","array","predicate","index","_toConsumableArray","reverse","findIndex","length"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-api/lib/src/utils/findLastIndex.ts"],"sourcesContent":["export default function findLastIndex<T>(array: readonly T[], predicate: (value: T, index: number) => boolean): number {\n  const index = [...array].reverse().findIndex(predicate);\n\n  if (~index) {\n    const { length } = array || [];\n\n    return length - index - 1;\n  }\n\n  return index;\n}\n"]},"metadata":{},"sourceType":"script"}