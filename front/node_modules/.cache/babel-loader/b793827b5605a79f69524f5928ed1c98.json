{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.connectSuggestedAction = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _AccessibleButton = _interopRequireDefault(require(\"../Utils/AccessibleButton\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _useFocus = _interopRequireDefault(require(\"../hooks/useFocus\"));\n\nvar _useFocusAccessKeyEffect = _interopRequireDefault(require(\"../Utils/AccessKeySink/useFocusAccessKeyEffect\"));\n\nvar _useFocusVisible3 = _interopRequireDefault(require(\"../hooks/internal/useFocusVisible\"));\n\nvar _useLocalizeAccessKey = _interopRequireDefault(require(\"../hooks/internal/useLocalizeAccessKey\"));\n\nvar _useScrollToEnd = _interopRequireDefault(require(\"../hooks/useScrollToEnd\"));\n\nvar _useSuggestedActionsAccessKey = _interopRequireDefault(require(\"../hooks/internal/useSuggestedActionsAccessKey\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useDirection = _botframeworkWebchatApi.hooks.useDirection,\n    useDisabled = _botframeworkWebchatApi.hooks.useDisabled,\n    usePerformCardAction = _botframeworkWebchatApi.hooks.usePerformCardAction,\n    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions,\n    useSuggestedActions = _botframeworkWebchatApi.hooks.useSuggestedActions;\nvar ROOT_STYLE = {\n  '&.webchat__suggested-action': {\n    display: 'flex',\n    overflow: 'hidden' // Prevent image from leaking; object-fit does not work with IE11\n\n  }\n};\n\nvar connectSuggestedAction = function connectSuggestedAction() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {\n    var clearSuggestedActions = _ref.clearSuggestedActions,\n        disabled = _ref.disabled,\n        language = _ref.language,\n        onCardAction = _ref.onCardAction;\n    var displayText = _ref2.displayText,\n        text = _ref2.text,\n        type = _ref2.type,\n        value = _ref2.value;\n    return {\n      click: function click() {\n        onCardAction({\n          displayText: displayText,\n          text: text,\n          type: type,\n          value: value\n        });\n        type === 'openUrl' && clearSuggestedActions();\n      },\n      disabled: disabled,\n      language: language\n    };\n  }].concat(selectors));\n};\n\nexports.connectSuggestedAction = connectSuggestedAction;\n\nvar SuggestedAction = function SuggestedAction(_ref3) {\n  var buttonText = _ref3.buttonText,\n      className = _ref3.className,\n      displayText = _ref3.displayText,\n      image = _ref3.image,\n      imageAlt = _ref3.imageAlt,\n      text = _ref3.text,\n      textClassName = _ref3.textClassName,\n      type = _ref3.type,\n      value = _ref3.value;\n\n  var _useSuggestedActions = useSuggestedActions(),\n      _useSuggestedActions2 = _slicedToArray(_useSuggestedActions, 2),\n      _ = _useSuggestedActions2[0],\n      setSuggestedActions = _useSuggestedActions2[1];\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      suggestedActionsStackedLayoutButtonTextWrap = _useStyleOptions2[0].suggestedActionsStackedLayoutButtonTextWrap;\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      suggestedActionStyleSet = _useStyleSet2[0].suggestedAction;\n\n  var _useSuggestedActionsA = (0, _useSuggestedActionsAccessKey.default)(),\n      _useSuggestedActionsA2 = _slicedToArray(_useSuggestedActionsA, 1),\n      accessKey = _useSuggestedActionsA2[0];\n\n  var _useDirection = useDirection(),\n      _useDirection2 = _slicedToArray(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  var _useDisabled = useDisabled(),\n      _useDisabled2 = _slicedToArray(_useDisabled, 1),\n      disabled = _useDisabled2[0];\n\n  var focus = (0, _useFocus.default)();\n  var focusRef = (0, _react.useRef)();\n  var localizeAccessKey = (0, _useLocalizeAccessKey.default)();\n  var performCardAction = usePerformCardAction();\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var scrollToEnd = (0, _useScrollToEnd.default)();\n\n  var _useFocusVisible = (0, _useFocusVisible3.default)(focusRef),\n      _useFocusVisible2 = _slicedToArray(_useFocusVisible, 1),\n      focusVisible = _useFocusVisible2[0];\n\n  var handleClick = (0, _react.useCallback)(function (_ref4) {\n    var target = _ref4.target; // TODO: [P3] #XXX We should not destruct DirectLineCardAction into React props and pass them in. It makes typings difficult.\n    //       Instead, we should pass a \"cardAction\" props.\n\n    performCardAction({\n      displayText: displayText,\n      text: text,\n      type: type,\n      value: value\n    }, {\n      target: target\n    }); // Since \"openUrl\" action do not submit, the suggested action buttons do not hide after click.\n\n    type === 'openUrl' && setSuggestedActions([]);\n    focus('sendBoxWithoutKeyboard');\n    scrollToEnd();\n  }, [displayText, focus, performCardAction, scrollToEnd, setSuggestedActions, text, type, value]);\n  (0, _useFocusAccessKeyEffect.default)(accessKey, focusRef);\n  return /*#__PURE__*/_react.default.createElement(_AccessibleButton.default, _extends({}, accessKey ? {\n    'aria-keyshortcuts': localizeAccessKey(accessKey)\n  } : {}, {\n    className: (0, _classnames.default)('webchat__suggested-action', {\n      'webchat__suggested-action--focus-visible': focusVisible,\n      'webchat__suggested-action--rtl': direction === 'rtl',\n      'webchat__suggested-action--wrapping': suggestedActionsStackedLayoutButtonTextWrap\n    }, rootClassName, suggestedActionStyleSet + '', (className || '') + ''),\n    disabled: disabled,\n    onClick: handleClick,\n    ref: focusRef,\n    type: \"button\"\n  }), image && /*#__PURE__*/_react.default.createElement(\"img\", {\n    alt: imageAlt,\n    className: (0, _classnames.default)('webchat__suggested-action__image', direction === 'rtl' && 'webchat__suggested-action__image--rtl'),\n    src: image\n  }), /*#__PURE__*/_react.default.createElement(\"span\", {\n    className: (0, _classnames.default)('webchat__suggested-action__text', (textClassName || '') + '')\n  }, buttonText), /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"webchat__suggested-action__keyboard-focus-indicator\"\n  }));\n};\n\nSuggestedAction.defaultProps = {\n  className: '',\n  displayText: '',\n  image: '',\n  imageAlt: undefined,\n  text: '',\n  textClassName: '',\n  type: undefined,\n  value: undefined\n};\nSuggestedAction.propTypes = {\n  buttonText: _propTypes.default.string.isRequired,\n  className: _propTypes.default.string,\n  displayText: _propTypes.default.string,\n  image: _propTypes.default.string,\n  imageAlt: _propTypes.default.string,\n  text: _propTypes.default.string,\n  textClassName: _propTypes.default.string,\n  // TypeScript class is not mappable to PropTypes.\n  // @ts-ignore\n  type: _propTypes.default.string,\n  value: _propTypes.default.any\n};\nvar _default = SuggestedAction;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["useDirection","hooks","useDisabled","usePerformCardAction","useStyleOptions","useSuggestedActions","ROOT_STYLE","display","overflow","connectSuggestedAction","selectors","arguments","connectToWebChat","clearSuggestedActions","disabled","language","onCardAction","displayText","text","type","value","click","SuggestedAction","buttonText","className","image","imageAlt","textClassName","_","setSuggestedActions","suggestedActionsStackedLayoutButtonTextWrap","suggestedActionStyleSet","suggestedAction","accessKey","direction","focus","focusRef","localizeAccessKey","performCardAction","rootClassName","scrollToEnd","focusVisible","handleClick","target","_react","_AccessibleButton","onClick","ref","alt","src","defaultProps","undefined","propTypes","PropTypes","string","isRequired","any"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/SendBox/SuggestedAction.tsx"],"sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { MouseEventHandler, useCallback, useRef, VFC } from 'react';\n\nimport AccessibleButton from '../Utils/AccessibleButton';\nimport connectToWebChat from '../connectToWebChat';\nimport useFocus from '../hooks/useFocus';\nimport useFocusAccessKeyEffect from '../Utils/AccessKeySink/useFocusAccessKeyEffect';\nimport useFocusVisible from '../hooks/internal/useFocusVisible';\nimport useLocalizeAccessKey from '../hooks/internal/useLocalizeAccessKey';\nimport useScrollToEnd from '../hooks/useScrollToEnd';\nimport useSuggestedActionsAccessKey from '../hooks/internal/useSuggestedActionsAccessKey';\nimport useStyleSet from '../hooks/useStyleSet';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\nimport { DirectLineCardAction } from 'botframework-webchat-core';\n\nconst { useDirection, useDisabled, usePerformCardAction, useStyleOptions, useSuggestedActions } = hooks;\n\nconst ROOT_STYLE = {\n  '&.webchat__suggested-action': {\n    display: 'flex',\n    overflow: 'hidden' // Prevent image from leaking; object-fit does not work with IE11\n  }\n};\n\nconst connectSuggestedAction = (...selectors) =>\n  connectToWebChat(\n    ({ clearSuggestedActions, disabled, language, onCardAction }, { displayText, text, type, value }) => ({\n      click: () => {\n        onCardAction({ displayText, text, type, value });\n        type === 'openUrl' && clearSuggestedActions();\n      },\n      disabled,\n      language\n    }),\n    ...selectors\n  );\n\ntype SuggestedActionProps = {\n  buttonText: string;\n  className?: string;\n  displayText?: string;\n  image?: string;\n  imageAlt?: string;\n  text?: string;\n  textClassName?: string;\n  type?:\n    | 'call'\n    | 'downloadFile'\n    | 'imBack'\n    | 'messageBack'\n    | 'openUrl'\n    | 'playAudio'\n    | 'playVideo'\n    | 'postBack'\n    | 'showImage'\n    | 'signin';\n  value?: any;\n};\n\nconst SuggestedAction: VFC<SuggestedActionProps> = ({\n  buttonText,\n  className,\n  displayText,\n  image,\n  imageAlt,\n  text,\n  textClassName,\n  type,\n  value\n}) => {\n  const [_, setSuggestedActions] = useSuggestedActions();\n  const [{ suggestedActionsStackedLayoutButtonTextWrap }] = useStyleOptions();\n  const [{ suggestedAction: suggestedActionStyleSet }] = useStyleSet();\n  const [accessKey] = useSuggestedActionsAccessKey();\n  const [direction] = useDirection();\n  const [disabled] = useDisabled();\n  const focus = useFocus();\n  const focusRef = useRef();\n  const localizeAccessKey = useLocalizeAccessKey();\n  const performCardAction = usePerformCardAction();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n  const scrollToEnd = useScrollToEnd();\n\n  const [focusVisible] = useFocusVisible(focusRef);\n\n  const handleClick = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    ({ target }) => {\n      // TODO: [P3] #XXX We should not destruct DirectLineCardAction into React props and pass them in. It makes typings difficult.\n      //       Instead, we should pass a \"cardAction\" props.\n      performCardAction({ displayText, text, type, value } as DirectLineCardAction, { target });\n\n      // Since \"openUrl\" action do not submit, the suggested action buttons do not hide after click.\n      type === 'openUrl' && setSuggestedActions([]);\n\n      focus('sendBoxWithoutKeyboard');\n      scrollToEnd();\n    },\n    [displayText, focus, performCardAction, scrollToEnd, setSuggestedActions, text, type, value]\n  );\n\n  useFocusAccessKeyEffect(accessKey, focusRef);\n\n  return (\n    <AccessibleButton\n      {...(accessKey ? { 'aria-keyshortcuts': localizeAccessKey(accessKey) } : {})}\n      className={classNames(\n        'webchat__suggested-action',\n        {\n          'webchat__suggested-action--focus-visible': focusVisible,\n          'webchat__suggested-action--rtl': direction === 'rtl',\n          'webchat__suggested-action--wrapping': suggestedActionsStackedLayoutButtonTextWrap\n        },\n        rootClassName,\n        suggestedActionStyleSet + '',\n        (className || '') + ''\n      )}\n      disabled={disabled}\n      onClick={handleClick}\n      ref={focusRef}\n      type=\"button\"\n    >\n      {image && (\n        <img\n          alt={imageAlt}\n          className={classNames(\n            'webchat__suggested-action__image',\n            direction === 'rtl' && 'webchat__suggested-action__image--rtl'\n          )}\n          src={image}\n        />\n      )}\n      <span className={classNames('webchat__suggested-action__text', (textClassName || '') + '')}>{buttonText}</span>\n      <div className=\"webchat__suggested-action__keyboard-focus-indicator\" />\n    </AccessibleButton>\n  );\n};\n\nSuggestedAction.defaultProps = {\n  className: '',\n  displayText: '',\n  image: '',\n  imageAlt: undefined,\n  text: '',\n  textClassName: '',\n  type: undefined,\n  value: undefined\n};\n\nSuggestedAction.propTypes = {\n  buttonText: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  displayText: PropTypes.string,\n  image: PropTypes.string,\n  imageAlt: PropTypes.string,\n  text: PropTypes.string,\n  textClassName: PropTypes.string,\n  // TypeScript class is not mappable to PropTypes.\n  // @ts-ignore\n  type: PropTypes.string,\n  value: PropTypes.any\n};\n\nexport default SuggestedAction;\n\nexport { connectSuggestedAction };\n"]},"metadata":{},"sourceType":"script"}