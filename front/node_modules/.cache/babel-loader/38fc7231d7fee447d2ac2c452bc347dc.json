{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationTranscriber = void 0;\n\nvar Exports_1 = require(\"../../common.speech/Exports\");\n\nvar Exports_2 = require(\"../../common/Exports\");\n\nvar Contracts_1 = require(\"../Contracts\");\n\nvar Exports_3 = require(\"../Exports\");\n\nvar ConversationTranscriber =\n/** @class */\nfunction () {\n  /**\n   * ConversationTranscriber constructor.\n   * @constructor\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  function ConversationTranscriber(audioConfig) {\n    this.privAudioConfig = audioConfig;\n    this.privProperties = new Exports_3.PropertyCollection();\n    this.privRecognizer = undefined;\n    this.privDisposedRecognizer = false;\n  }\n  /**\n   * @param {Conversation} converation - conversation to be recognized\n   */\n\n\n  ConversationTranscriber.prototype.joinConversationAsync = function (conversation, cb, err) {\n    var conversationImpl = conversation;\n    Contracts_1.Contracts.throwIfNullOrUndefined(conversationImpl, \"Conversation\"); // ref the conversation object\n    // create recognizer and subscribe to recognizer events\n\n    this.privRecognizer = new Exports_1.TranscriberRecognizer(conversation.config, this.privAudioConfig);\n    Contracts_1.Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\n    this.privRecognizer.connectCallbacks(this);\n    Exports_2.marshalPromiseToCallbacks(conversationImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\n  };\n\n  Object.defineProperty(ConversationTranscriber.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member ConversationTranscriber.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function () {\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member ConversationTranscriber.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function (token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationTranscriber.prototype, \"speechRecognitionLanguage\", {\n    /**\n     * Gets the spoken language of recognition.\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n    get: function () {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_RecoLanguage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationTranscriber.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this ConversationTranscriber.\n     * @member ConversationTranscriber.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this ConversationTranscriber.\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Starts conversation transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member ConversationTranscriber.prototype.startTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n  ConversationTranscriber.prototype.startTranscribingAsync = function (cb, err) {\n    this.privRecognizer.startContinuousRecognitionAsync(cb, err);\n  };\n  /**\n   * Starts conversation transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member ConversationTranscriber.prototype.stopTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  ConversationTranscriber.prototype.stopTranscribingAsync = function (cb, err) {\n    this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\n  };\n  /**\n   * Leave the current conversation. After this is called, you will no longer receive any events.\n   */\n\n\n  ConversationTranscriber.prototype.leaveConversationAsync = function (cb, err) {\n    var _this = this;\n\n    this.privRecognizer.disconnectCallbacks();\n    Exports_2.marshalPromiseToCallbacks(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    }(), cb, err);\n  };\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member ConversationTranscriber.prototype.close\n   * @function\n   * @public\n   */\n\n\n  ConversationTranscriber.prototype.close = function (cb, errorCb) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    Exports_2.marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  };\n  /**\n   * Disposes any resources held by the object.\n   * @member ConversationTranscriber.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n\n\n  ConversationTranscriber.prototype.dispose = function (disposing) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (this.privDisposedRecognizer) {\n          return [2\n          /*return*/\n          ];\n        }\n\n        if (disposing) {\n          this.privDisposedRecognizer = true;\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return ConversationTranscriber;\n}();\n\nexports.ConversationTranscriber = ConversationTranscriber;","map":{"version":3,"mappings":"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","names":["audioConfig","privAudioConfig","privProperties","Exports_3","privRecognizer","undefined","privDisposedRecognizer","ConversationTranscriber","conversation","cb","err","conversationImpl","Contracts_1","throwIfNullOrUndefined","Exports_1","config","connectCallbacks","Exports_2","connectTranscriberRecognizer","Object","properties","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","throwIfDisposed","SpeechServiceConnection_RecoLanguage","startContinuousRecognitionAsync","stopContinuousRecognitionAsync","disconnectCallbacks","errorCb","dispose","disposing","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs,\r\n} from \"../Exports\";\r\nimport {\r\n    ConversationHandler,\r\n    ConversationImpl,\r\n    ConversationTranscriptionHandler,\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport class ConversationTranscriber implements ConversationTranscriptionHandler {\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n    protected privAudioConfig: AudioConfig;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: ConversationHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * @param {Conversation} converation - conversation to be recognized\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, cb?: Callback, err?: Callback): void {\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNullOrUndefined(conversationImpl, \"Conversation\");\r\n\r\n        // ref the conversation object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(conversation.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(conversationImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n     /**\r\n      * The event recognized signals that a final conversation transcription result is received.\r\n      * @member ConversationTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate conversation transcription result is received.\r\n      * @member ConversationTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member ConversationTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member ConversationTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this ConversationTranscriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this ConversationTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current conversation. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}