{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useTrackEvent;\n\nvar _react = require(\"react\");\n\nvar _createCustomEvent = _interopRequireDefault(require(\"../utils/createCustomEvent\"));\n\nvar _isObject = _interopRequireDefault(require(\"../utils/isObject\"));\n\nvar _useReadTelemetryDimensions = _interopRequireDefault(require(\"./internal/useReadTelemetryDimensions\"));\n\nvar _useWebChatAPIContext2 = _interopRequireDefault(require(\"./internal/useWebChatAPIContext\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isNonNegativeFiniteNumberOrString(value) {\n  return typeof value === 'number' && isFinite(value) && value >= 0 || typeof value === 'string';\n}\n\nfunction useTrackEvent() {\n  var _useWebChatAPIContext = (0, _useWebChatAPIContext2.default)(),\n      onTelemetry = _useWebChatAPIContext.onTelemetry;\n\n  var readTelemetryDimensions = (0, _useReadTelemetryDimensions.default)();\n  var trackEvent = (0, _react.useCallback)(function (level, name, data) {\n    if (!name || typeof name !== 'string') {\n      return console.warn('botframework-webchat: \"name\" passed to \"useTrackEvent\" hook must be a string.');\n    }\n\n    if (typeof data !== 'undefined') {\n      if ((0, _isObject.default)(data)) {\n        if (!Object.values(data).every(function (value) {\n          return isNonNegativeFiniteNumberOrString(value);\n        })) {\n          return console.warn('botframework-webchat: Every value in \"data\" map passed to \"useTrackEvent\" hook must be a non-negative finite number or string.');\n        }\n      } else if (!isNonNegativeFiniteNumberOrString(data)) {\n        return console.warn('botframework-webchat: \"data\" passed to \"useTrackEvent\" hook must be a non-negative finite number or string.');\n      }\n    }\n\n    onTelemetry && onTelemetry((0, _createCustomEvent.default)('event', {\n      data: data,\n      dimensions: readTelemetryDimensions(),\n      level: level,\n      name: name\n    }));\n  }, [onTelemetry, readTelemetryDimensions]);\n  return (0, _react.useMemo)(function () {\n    var info = trackEvent.bind(null, 'info');\n    info.debug = trackEvent.bind(null, 'debug');\n    info.error = trackEvent.bind(null, 'error');\n    info.info = info;\n    info.warn = trackEvent.bind(null, 'warn');\n    return info;\n  }, [trackEvent]);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEA,SAASA,iCAAT,CAA2CC,KAA3C,EAAkD;AAChD,SAAQ,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,QAAQ,CAACD,KAAD,CAArC,IAAgDA,KAAK,IAAI,CAAzD,IAA+D,OAAOA,KAAP,KAAiB,QAAxF;AACD;;AAUc,SAASE,aAAT,GAA6C;AAC1D,8BAAwB,qCAAxB;AAAA,MAAQC,WAAR,yBAAQA,WAAR;;AACA,MAAMC,uBAAuB,GAAG,0CAAhC;AAEA,MAAMC,UAAU,GAAG,wBACjB,UAACC,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAuB;AACrB,QAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,aAAOE,OAAO,CAACC,IAARD,CAAa,+EAAbA,CAAP;AACD;;AAED,QAAI,OAAOD,IAAP,KAAgB,WAApB,EAAiC;AAC/B,UAAI,uBAASA,IAAT,CAAJ,EAAoB;AAClB,YAAI,CAACG,MAAM,CAACC,MAAPD,CAAcH,IAAdG,EAAoBE,KAApBF,CAA0B,iBAAK;AAAA,iBAAIZ,iCAAiC,CAACC,KAAD,CAArC;AAA/B,UAAL,EAAmF;AACjF,iBAAOS,OAAO,CAACC,IAARD,CACL,gIADKA,CAAP;AAGD;AALH,aAMO,IAAI,CAACV,iCAAiC,CAACS,IAAD,CAAtC,EAA8C;AACnD,eAAOC,OAAO,CAACC,IAARD,CACL,6GADKA,CAAP;AAGD;AACF;;AAEDN,eAAW,IACTA,WAAW,CAAC,gCAAkB,OAAlB,EAA2B;AAAEK,UAAI,EAAJA,IAAF;AAAQM,gBAAU,EAAEV,uBAAuB,EAA3C;AAA+CE,WAAK,EAALA,KAA/C;AAAsDC,UAAI,EAAJA;AAAtD,KAA3B,CAAD,CADbJ;AApBe,KAuBjB,CAACA,WAAD,EAAcC,uBAAd,CAvBiB,CAAnB;AA0BA,SAAO,oBAAQ,YAAM;AACnB,QAAMW,IAAwB,GAAGV,UAAU,CAACW,IAAXX,CAAgB,IAAhBA,EAAsB,MAAtBA,CAAjC;AAEAU,QAAI,CAACE,KAALF,GAAaV,UAAU,CAACW,IAAXX,CAAgB,IAAhBA,EAAsB,OAAtBA,CAAbU;AACAA,QAAI,CAACG,KAALH,GAAaV,UAAU,CAACW,IAAXX,CAAgB,IAAhBA,EAAsB,OAAtBA,CAAbU;AACAA,QAAI,CAACA,IAALA,GAAYA,IAAZA;AACAA,QAAI,CAACL,IAALK,GAAYV,UAAU,CAACW,IAAXX,CAAgB,IAAhBA,EAAsB,MAAtBA,CAAZU;AAEA,WAAOA,IAAP;AARK,KASJ,CAACV,UAAD,CATI,CAAP;AAUD","names":["isNonNegativeFiniteNumberOrString","value","isFinite","useTrackEvent","onTelemetry","readTelemetryDimensions","trackEvent","level","name","data","console","warn","Object","values","every","dimensions","info","bind","debug","error"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-api/lib/src/hooks/useTrackEvent.ts"],"sourcesContent":["import { useCallback, useMemo } from 'react';\n\nimport createCustomEvent from '../utils/createCustomEvent';\nimport isObject from '../utils/isObject';\nimport useReadTelemetryDimensions from './internal/useReadTelemetryDimensions';\nimport useWebChatAPIContext from './internal/useWebChatAPIContext';\n\nfunction isNonNegativeFiniteNumberOrString(value) {\n  return (typeof value === 'number' && isFinite(value) && value >= 0) || typeof value === 'string';\n}\n\ntype TrackEventFunction = {\n  (name: string, data: any): void;\n  debug: (name: string, data: any) => void;\n  error: (name: string, data: any) => void;\n  info: (name: string, data: any) => void;\n  warn: (name: string, data: any) => void;\n};\n\nexport default function useTrackEvent(): TrackEventFunction {\n  const { onTelemetry } = useWebChatAPIContext();\n  const readTelemetryDimensions = useReadTelemetryDimensions();\n\n  const trackEvent = useCallback(\n    (level, name, data) => {\n      if (!name || typeof name !== 'string') {\n        return console.warn('botframework-webchat: \"name\" passed to \"useTrackEvent\" hook must be a string.');\n      }\n\n      if (typeof data !== 'undefined') {\n        if (isObject(data)) {\n          if (!Object.values(data).every(value => isNonNegativeFiniteNumberOrString(value))) {\n            return console.warn(\n              'botframework-webchat: Every value in \"data\" map passed to \"useTrackEvent\" hook must be a non-negative finite number or string.'\n            );\n          }\n        } else if (!isNonNegativeFiniteNumberOrString(data)) {\n          return console.warn(\n            'botframework-webchat: \"data\" passed to \"useTrackEvent\" hook must be a non-negative finite number or string.'\n          );\n        }\n      }\n\n      onTelemetry &&\n        onTelemetry(createCustomEvent('event', { data, dimensions: readTelemetryDimensions(), level, name }));\n    },\n    [onTelemetry, readTelemetryDimensions]\n  );\n\n  return useMemo(() => {\n    const info: TrackEventFunction = trackEvent.bind(null, 'info');\n\n    info.debug = trackEvent.bind(null, 'debug');\n    info.error = trackEvent.bind(null, 'error');\n    info.info = info;\n    info.warn = trackEvent.bind(null, 'warn');\n\n    return info;\n  }, [trackEvent]);\n}\n"]},"metadata":{},"sourceType":"script"}