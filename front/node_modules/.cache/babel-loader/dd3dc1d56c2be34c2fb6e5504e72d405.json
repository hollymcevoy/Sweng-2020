{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _SpeechSynthesisVoice = _interopRequireDefault(require(\"./SpeechSynthesisVoice\"));\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\n\nfunction fetchCustomVoices(_x) {\n  return _fetchCustomVoices.apply(this, arguments);\n}\n\nfunction _fetchCustomVoices() {\n  _fetchCustomVoices = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref) {\n    var customVoiceHostname, deploymentId, region, subscriptionKey, hostname, res;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            customVoiceHostname = _ref.customVoiceHostname, deploymentId = _ref.deploymentId, region = _ref.region, subscriptionKey = _ref.subscriptionKey;\n            hostname = customVoiceHostname || \"\".concat(region, \".customvoice.api.speech.microsoft.com\"); // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n\n            _context.next = 4;\n            return fetch(\"https://\".concat(encodeURI(hostname), \"/api/texttospeech/v2.0/endpoints/\").concat(encodeURIComponent(deploymentId)), {\n              headers: {\n                accept: 'application/json',\n                'ocp-apim-subscription-key': subscriptionKey\n              }\n            });\n\n          case 4:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error('Failed to fetch custom voices');\n\n          case 7:\n            return _context.abrupt(\"return\", res.json());\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchCustomVoices.apply(this, arguments);\n}\n\nfunction _default(_x2) {\n  return _ref3.apply(this, arguments);\n}\n\nfunction _ref3() {\n  _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref2) {\n    var customVoiceHostname, deploymentId, region, subscriptionKey, _yield$fetchCustomVoi, models;\n\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            customVoiceHostname = _ref2.customVoiceHostname, deploymentId = _ref2.deploymentId, region = _ref2.region, subscriptionKey = _ref2.subscriptionKey;\n            _context2.next = 3;\n            return fetchCustomVoices({\n              customVoiceHostname: customVoiceHostname,\n              deploymentId: deploymentId,\n              region: region,\n              subscriptionKey: subscriptionKey\n            });\n\n          case 3:\n            _yield$fetchCustomVoi = _context2.sent;\n            models = _yield$fetchCustomVoi.models;\n            return _context2.abrupt(\"return\", models.map(function (_ref4) {\n              var gender = _ref4.properties.Gender,\n                  lang = _ref4.locale,\n                  voiceURI = _ref4.name;\n              return new _SpeechSynthesisVoice.default({\n                gender: gender,\n                lang: lang,\n                voiceURI: voiceURI\n              });\n            }).sort(function (_ref5, _ref6) {\n              var x = _ref5.name;\n              var y = _ref6.name;\n              return x > y ? 1 : x < y ? -1 : 0;\n            }));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _ref3.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAEA;AAFA;;;SAIeA,kB;;;;;+FAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCC,+BAAnC,QAAmCA,qBAAqBC,YAAxD,QAAwDA,YAArBD,EAAmCE,MAAtE,QAAsEA,MAAnCF,EAA2CG,eAA9E,QAA8EA,eAA3CH;AAC3BI,oBADR,GACmBJ,mBAAmB,cAAQE,MAAR,0CAA9BE,CADR,CAGE;;AAHFC;AAAA,mBAIoBC,KAAK,mBACTC,SAAS,CAACH,QAAD,CADA,8CACgDI,kBAAkB,CAACP,YAAD,CADlE,GAErB;AACEQ,qBAAO,EAAE;AACPC,sBAAM,EAAE,kBADD;AAEP,6CAA6BP;AAFtB;AADX,aAFqB,CAJzB;;AAAA;AAIQQ,eAJR,gBAIQA;;AAJR,gBAcOA,GAAG,CAACC,EAdX;AAAAP;AAAA;AAAA;;AAAA,kBAeU,IAAIQ,KAAJ,CAAU,+BAAV,CAfV;;AAAA;AAAA,6CAkBSF,GAAG,CAACG,IAAJH,EAlBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;kFAqBe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBX,+BAAjB,SAAiBA,qBAAqBC,YAAtC,SAAsCA,YAArBD,EAAmCE,MAApD,SAAoDA,MAAnCF,EAA2CG,eAA5D,SAA4DA,eAA3CH;AAAjBe;AAAA,mBACYhB,iBAAiB,CAAC;AAAEC,iCAAmB,EAAnBA,mBAAF;AAAuBC,0BAAY,EAAZA,YAAvB;AAAqCC,oBAAM,EAANA,MAArC;AAA6CC,6BAAe,EAAfA;AAA7C,aAAD,CAD7B;;AAAA;AAAAa;AACLC,kBADK,yBACLA;AADK,8CAGNA,MAAM,CACVC,GADID,CAEH;AAAA,kBAAyBE,MAAzB,SAAGC,UAAH,CAAiBC,MAAjB;AAAA,kBAA2CC,IAA3C,SAAmCC,MAAnC;AAAA,kBAAuDC,QAAvD,SAAiDC,IAAjD;AAAA,qBACE,IAAIC,6BAAJ,CAAyB;AAAEP,sBAAM,EAANA,MAAF;AAAUG,oBAAI,EAAJA,IAAV;AAAgBE,wBAAQ,EAARA;AAAhB,eAAzB,CADF;AAFG,eAKJG,IALIV,CAKC;AAAA,kBAASW,CAAT,SAAGH,IAAH;AAAA,kBAAsBI,CAAtB,SAAgBJ,IAAhB;AAAA,qBAA+BG,CAAC,GAAGC,CAAJD,GAAQ,CAARA,GAAYA,CAAC,GAAGC,CAAJD,GAAQ,CAAC,CAATA,GAAa,CAAxD;AALD,cAHM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["fetchCustomVoices","customVoiceHostname","deploymentId","region","subscriptionKey","hostname","_context","fetch","encodeURI","encodeURIComponent","headers","accept","res","ok","Error","json","_context2","_yield$fetchCustomVoi","models","map","gender","properties","Gender","lang","locale","voiceURI","name","SpeechSynthesisVoice","sort","x","y"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchCustomVoices.js"],"sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${ region }.customvoice.api.speech.microsoft.com`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${ encodeURI(hostname) }/api/texttospeech/v2.0/endpoints/${ encodeURIComponent(deploymentId) }`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n"]},"metadata":{},"sourceType":"script"}