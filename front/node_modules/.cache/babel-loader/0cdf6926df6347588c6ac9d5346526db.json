{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.List = void 0;\n\nvar Error_1 = require(\"./Error\");\n\nvar List =\n/** @class */\nfunction () {\n  function List(list) {\n    var _this = this;\n\n    this.privSubscriptionIdCounter = 0;\n    this.privAddSubscriptions = {};\n    this.privRemoveSubscriptions = {};\n    this.privDisposedSubscriptions = {};\n    this.privDisposeReason = null;\n\n    this.get = function (itemIndex) {\n      _this.throwIfDisposed();\n\n      return _this.privList[itemIndex];\n    };\n\n    this.first = function () {\n      return _this.get(0);\n    };\n\n    this.last = function () {\n      return _this.get(_this.length() - 1);\n    };\n\n    this.add = function (item) {\n      _this.throwIfDisposed();\n\n      _this.insertAt(_this.privList.length, item);\n    };\n\n    this.insertAt = function (index, item) {\n      _this.throwIfDisposed();\n\n      if (index === 0) {\n        _this.privList.unshift(item);\n      } else if (index === _this.privList.length) {\n        _this.privList.push(item);\n      } else {\n        _this.privList.splice(index, 0, item);\n      }\n\n      _this.triggerSubscriptions(_this.privAddSubscriptions);\n    };\n\n    this.removeFirst = function () {\n      _this.throwIfDisposed();\n\n      return _this.removeAt(0);\n    };\n\n    this.removeLast = function () {\n      _this.throwIfDisposed();\n\n      return _this.removeAt(_this.length() - 1);\n    };\n\n    this.removeAt = function (index) {\n      _this.throwIfDisposed();\n\n      return _this.remove(index, 1)[0];\n    };\n\n    this.remove = function (index, count) {\n      _this.throwIfDisposed();\n\n      var removedElements = _this.privList.splice(index, count);\n\n      _this.triggerSubscriptions(_this.privRemoveSubscriptions);\n\n      return removedElements;\n    };\n\n    this.clear = function () {\n      _this.throwIfDisposed();\n\n      _this.remove(0, _this.length());\n    };\n\n    this.length = function () {\n      _this.throwIfDisposed();\n\n      return _this.privList.length;\n    };\n\n    this.onAdded = function (addedCallback) {\n      _this.throwIfDisposed();\n\n      var subscriptionId = _this.privSubscriptionIdCounter++;\n      _this.privAddSubscriptions[subscriptionId] = addedCallback;\n      return {\n        detach: function () {\n          delete _this.privAddSubscriptions[subscriptionId];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.onRemoved = function (removedCallback) {\n      _this.throwIfDisposed();\n\n      var subscriptionId = _this.privSubscriptionIdCounter++;\n      _this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n      return {\n        detach: function () {\n          delete _this.privRemoveSubscriptions[subscriptionId];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.onDisposed = function (disposedCallback) {\n      _this.throwIfDisposed();\n\n      var subscriptionId = _this.privSubscriptionIdCounter++;\n      _this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n      return {\n        detach: function () {\n          delete _this.privDisposedSubscriptions[subscriptionId];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.join = function (seperator) {\n      _this.throwIfDisposed();\n\n      return _this.privList.join(seperator);\n    };\n\n    this.toArray = function () {\n      var cloneCopy = Array();\n\n      _this.privList.forEach(function (val) {\n        cloneCopy.push(val);\n      });\n\n      return cloneCopy;\n    };\n\n    this.any = function (callback) {\n      _this.throwIfDisposed();\n\n      if (callback) {\n        return _this.where(callback).length() > 0;\n      } else {\n        return _this.length() > 0;\n      }\n    };\n\n    this.all = function (callback) {\n      _this.throwIfDisposed();\n\n      return _this.where(callback).length() === _this.length();\n    };\n\n    this.forEach = function (callback) {\n      _this.throwIfDisposed();\n\n      for (var i = 0; i < _this.length(); i++) {\n        callback(_this.privList[i], i);\n      }\n    };\n\n    this.select = function (callback) {\n      _this.throwIfDisposed();\n\n      var selectList = [];\n\n      for (var i = 0; i < _this.privList.length; i++) {\n        selectList.push(callback(_this.privList[i], i));\n      }\n\n      return new List(selectList);\n    };\n\n    this.where = function (callback) {\n      _this.throwIfDisposed();\n\n      var filteredList = new List();\n\n      for (var i = 0; i < _this.privList.length; i++) {\n        if (callback(_this.privList[i], i)) {\n          filteredList.add(_this.privList[i]);\n        }\n      }\n\n      return filteredList;\n    };\n\n    this.orderBy = function (compareFn) {\n      _this.throwIfDisposed();\n\n      var clonedArray = _this.toArray();\n\n      var orderedArray = clonedArray.sort(compareFn);\n      return new List(orderedArray);\n    };\n\n    this.orderByDesc = function (compareFn) {\n      _this.throwIfDisposed();\n\n      return _this.orderBy(function (a, b) {\n        return compareFn(b, a);\n      });\n    };\n\n    this.clone = function () {\n      _this.throwIfDisposed();\n\n      return new List(_this.toArray());\n    };\n\n    this.concat = function (list) {\n      _this.throwIfDisposed();\n\n      return new List(_this.privList.concat(list.toArray()));\n    };\n\n    this.concatArray = function (array) {\n      _this.throwIfDisposed();\n\n      return new List(_this.privList.concat(array));\n    };\n\n    this.isDisposed = function () {\n      return _this.privList == null;\n    };\n\n    this.dispose = function (reason) {\n      if (!_this.isDisposed()) {\n        _this.privDisposeReason = reason;\n        _this.privList = null;\n        _this.privAddSubscriptions = null;\n        _this.privRemoveSubscriptions = null;\n\n        _this.triggerSubscriptions(_this.privDisposedSubscriptions);\n      }\n    };\n\n    this.throwIfDisposed = function () {\n      if (_this.isDisposed()) {\n        throw new Error_1.ObjectDisposedError(\"List\", _this.privDisposeReason);\n      }\n    };\n\n    this.triggerSubscriptions = function (subscriptions) {\n      if (subscriptions) {\n        for (var subscriptionId in subscriptions) {\n          if (subscriptionId) {\n            subscriptions[subscriptionId]();\n          }\n        }\n      }\n    };\n\n    this.privList = []; // copy the list rather than taking as is.\n\n    if (list) {\n      for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n        var item = list_1[_i];\n        this.privList.push(item);\n      }\n    }\n  }\n\n  return List;\n}();\n\nexports.List = List;","map":{"version":3,"mappings":"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","names":["list","itemIndex","_this","throwIfDisposed","privList","get","length","item","insertAt","index","unshift","push","splice","triggerSubscriptions","privAddSubscriptions","removeAt","remove","count","removedElements","privRemoveSubscriptions","addedCallback","subscriptionId","privSubscriptionIdCounter","detach","Promise","resolve","removedCallback","disposedCallback","privDisposedSubscriptions","seperator","join","cloneCopy","Array","forEach","val","callback","where","i","selectList","List","filteredList","add","compareFn","clonedArray","toArray","orderedArray","sort","orderBy","a","b","concat","array","reason","isDisposed","privDisposeReason","Error_1","subscriptions","_i","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get = (itemIndex: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first = (): TItem => {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last = (): TItem => {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add = (item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt = (index: number, item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt = (index: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove = (index: number, count: number): TItem[] => {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear = (): void => {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded = (addedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join = (seperator?: string): string => {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all = (callback: (item: TItem) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public clone = (): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat = (list: List<TItem>): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray = (array: TItem[]): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose = (reason?: string): void => {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed = (): void => {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}