{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = patchOptions;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _resolveFunctionOrReturnValue = _interopRequireDefault(require(\"./resolveFunctionOrReturnValue\"));\n\nvar _excluded = [\"authorizationToken\", \"credentials\", \"looseEvent\", \"looseEvents\", \"region\", \"subscriptionKey\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar shouldWarnOnSubscriptionKey = true;\n\nfunction patchOptions() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var authorizationToken = _ref.authorizationToken,\n      credentials = _ref.credentials,\n      looseEvent = _ref.looseEvent,\n      looseEvents = _ref.looseEvents,\n      _ref$region = _ref.region,\n      region = _ref$region === void 0 ? 'westus' : _ref$region,\n      subscriptionKey = _ref.subscriptionKey,\n      otherOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn('web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.');\n\n      credentials = /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n          return _regenerator.default.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!authorizationToken) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return (0, _resolveFunctionOrReturnValue.default)(authorizationToken);\n\n                case 3:\n                  _context.t1 = _context.sent;\n                  _context.t2 = region;\n                  _context.t0 = {\n                    authorizationToken: _context.t1,\n                    region: _context.t2\n                  };\n                  _context.next = 13;\n                  break;\n\n                case 8:\n                  _context.t3 = region;\n                  _context.next = 11;\n                  return (0, _resolveFunctionOrReturnValue.default)(subscriptionKey);\n\n                case 11:\n                  _context.t4 = _context.sent;\n                  _context.t0 = {\n                    region: _context.t3,\n                    subscriptionKey: _context.t4\n                  };\n\n                case 13:\n                  return _context.abrupt(\"return\", _context.t0);\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function credentials() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    }\n  }\n\n  return _objectSpread(_objectSpread({}, otherOptions), {}, {\n    fetchCredentials: function () {\n      var _fetchCredentials = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _yield$resolveFunctio, authorizationToken, customVoiceHostname, region, speechRecognitionHostname, speechSynthesisHostname, subscriptionKey, resolvedCredentials;\n\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _resolveFunctionOrReturnValue.default)(credentials);\n\n              case 2:\n                _yield$resolveFunctio = _context2.sent;\n                authorizationToken = _yield$resolveFunctio.authorizationToken;\n                customVoiceHostname = _yield$resolveFunctio.customVoiceHostname;\n                region = _yield$resolveFunctio.region;\n                speechRecognitionHostname = _yield$resolveFunctio.speechRecognitionHostname;\n                speechSynthesisHostname = _yield$resolveFunctio.speechSynthesisHostname;\n                subscriptionKey = _yield$resolveFunctio.subscriptionKey;\n\n                if (!(!authorizationToken && !subscriptionKey || authorizationToken && subscriptionKey)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.');\n\n              case 13:\n                if (!(!region && !(speechRecognitionHostname && speechSynthesisHostname))) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.');\n\n              case 17:\n                if (!(region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname))) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.');\n\n              case 21:\n                if (!authorizationToken) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                if (!(typeof authorizationToken !== 'string')) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n\n              case 24:\n                _context2.next = 28;\n                break;\n\n              case 26:\n                if (!(typeof subscriptionKey !== 'string')) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n\n              case 28:\n                if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n                  console.warn('web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.');\n                  shouldWarnOnSubscriptionKey = false;\n                }\n\n                resolvedCredentials = authorizationToken ? {\n                  authorizationToken: authorizationToken\n                } : {\n                  subscriptionKey: subscriptionKey\n                };\n\n                if (region) {\n                  resolvedCredentials.region = region;\n                } else {\n                  resolvedCredentials.customVoiceHostname = customVoiceHostname;\n                  resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n                  resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n                }\n\n                return _context2.abrupt(\"return\", resolvedCredentials);\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fetchCredentials() {\n        return _fetchCredentials.apply(this, arguments);\n      }\n\n      return fetchCredentials;\n    }(),\n    looseEvents: looseEvents\n  });\n}","map":{"version":3,"mappings":"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","names":["shouldWarnOnSubscriptionKey","patchOptions","authorizationToken","credentials","looseEvent","looseEvents","region","subscriptionKey","otherOptions","console","warn","Error","_context","fetchCredentials","_context2","_yield$resolveFunctio","customVoiceHostname","speechRecognitionHostname","speechSynthesisHostname","resolvedCredentials"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/web-speech-cognitive-services/src/SpeechServices/patchOptions.js"],"sourcesContent":["import resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nlet shouldWarnOnSubscriptionKey = true;\n\nexport default function patchOptions({\n  authorizationToken,\n  credentials,\n  looseEvent,\n  looseEvents,\n  region = 'westus',\n  subscriptionKey,\n  ...otherOptions\n} = {}) {\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn(\n        'web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.'\n      );\n\n      credentials = async () =>\n        authorizationToken\n          ? { authorizationToken: await resolveFunctionOrReturnValue(authorizationToken), region }\n          : { region, subscriptionKey: await resolveFunctionOrReturnValue(subscriptionKey) };\n    }\n  }\n\n  return {\n    ...otherOptions,\n    fetchCredentials: async () => {\n      const {\n        authorizationToken,\n        customVoiceHostname,\n        region,\n        speechRecognitionHostname,\n        speechSynthesisHostname,\n        subscriptionKey\n      } = await resolveFunctionOrReturnValue(credentials);\n\n      if ((!authorizationToken && !subscriptionKey) || (authorizationToken && subscriptionKey)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.'\n        );\n      } else if (!region && !(speechRecognitionHostname && speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.'\n        );\n      } else if (region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.'\n        );\n      } else if (authorizationToken) {\n        if (typeof authorizationToken !== 'string') {\n          throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n        }\n      } else if (typeof subscriptionKey !== 'string') {\n        throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n      }\n\n      if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      const resolvedCredentials = authorizationToken ? { authorizationToken } : { subscriptionKey };\n\n      if (region) {\n        resolvedCredentials.region = region;\n      } else {\n        resolvedCredentials.customVoiceHostname = customVoiceHostname;\n        resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n        resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n      }\n\n      return resolvedCredentials;\n    },\n    looseEvents\n  };\n}\n"]},"metadata":{},"sourceType":"script"}