{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n/* eslint object-shorthand: \"off\" */\n\n/* eslint prefer-destructuring: \"off\" */\n\n/* eslint prefer-arrow-callback: \"off\" */\n// This file is the entrypoint of Web Worker and is minimally transpiled through Babel.\n// Do not include any dependencies here because they will not be bundled.\n// This file will also get loaded by IE11, please make sure you hand-transpile it correctly.\n\nfunction _default() {\n  function blobToDataURL(blob) {\n    return new Promise(function (resolve, reject) {\n      const reader = new FileReader();\n\n      reader.onerror = function (event) {\n        reject(event.error || new Error(event.message));\n      };\n\n      reader.onloadend = function () {\n        resolve(reader.result);\n      };\n\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function keepAspectRatio(width, height, maxWidth, maxHeight) {\n    if (width < maxWidth && height < maxHeight) {\n      // Photo is smaller than both maximum dimensions, take it as-is\n      return {\n        height: height,\n        width: width\n      };\n    }\n\n    const aspectRatio = width / height;\n\n    if (aspectRatio > maxWidth / maxHeight) {\n      // Photo is wider than maximum dimension, downscale it based on maxWidth.\n      return {\n        height: maxWidth / aspectRatio,\n        width: maxWidth\n      };\n    } // Photo is taller than maximum dimension, downscale it based on maxHeight.\n\n\n    return {\n      height: maxHeight,\n      width: maxHeight * aspectRatio\n    };\n  }\n\n  onmessage = function (event) {\n    const data = event.data;\n    const arrayBuffer = data.arrayBuffer;\n    const maxHeight = data.maxHeight;\n    const maxWidth = data.maxWidth;\n    const type = data.type;\n    const quality = data.quality;\n    const port = event.ports[0];\n    return Promise.resolve().then(function () {\n      return createImageBitmap(new Blob([arrayBuffer], {\n        resizeQuality: 'high'\n      }));\n    }).then(function (imageBitmap) {\n      const dimension = keepAspectRatio(imageBitmap.width, imageBitmap.height, maxWidth, maxHeight);\n      const height = dimension.height;\n      const width = dimension.width;\n      const offscreenCanvas = new OffscreenCanvas(width, height);\n      const context = offscreenCanvas.getContext('2d');\n      context.drawImage(imageBitmap, 0, 0, width, height); // Firefox quirks: 68.0.1 call named OffscreenCanvas.convertToBlob as OffscreenCanvas.toBlob.\n\n      const convertToBlob = (offscreenCanvas.convertToBlob || offscreenCanvas.toBlob).bind(offscreenCanvas);\n      return convertToBlob({\n        type: type,\n        quality: quality\n      });\n    }).then(function (blob) {\n      return blobToDataURL(blob);\n    }).then(function (dataURL) {\n      return port.postMessage({\n        result: dataURL\n      });\n    }).catch(function (err) {\n      console.error(err);\n      port.postMessage({\n        error: {\n          message: err.message,\n          stack: err.stack\n        }\n      });\n    });\n  };\n\n  postMessage('ready');\n}","map":{"version":3,"mappings":"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","names":["blobToDataURL","blob","Promise","resolve","reject","reader","FileReader","onerror","event","error","Error","message","onloadend","result","readAsDataURL","keepAspectRatio","width","height","maxWidth","maxHeight","aspectRatio","onmessage","data","arrayBuffer","type","quality","port","ports","then","createImageBitmap","Blob","resizeQuality","imageBitmap","dimension","offscreenCanvas","OffscreenCanvas","context","getContext","drawImage","convertToBlob","toBlob","bind","dataURL","postMessage","catch","err","console","stack"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Utils/downscaleImageToDataURL/downscaleImageToDataURLUsingWorker.worker.js"],"sourcesContent":["/* eslint object-shorthand: \"off\" */\n/* eslint prefer-destructuring: \"off\" */\n/* eslint prefer-arrow-callback: \"off\" */\n\n// This file is the entrypoint of Web Worker and is minimally transpiled through Babel.\n// Do not include any dependencies here because they will not be bundled.\n\n// This file will also get loaded by IE11, please make sure you hand-transpile it correctly.\n\nexport default function () {\n  function blobToDataURL(blob) {\n    return new Promise(function (resolve, reject) {\n      const reader = new FileReader();\n\n      reader.onerror = function (event) {\n        reject(event.error || new Error(event.message));\n      };\n\n      reader.onloadend = function () {\n        resolve(reader.result);\n      };\n\n      reader.readAsDataURL(blob);\n    });\n  }\n\n  function keepAspectRatio(width, height, maxWidth, maxHeight) {\n    if (width < maxWidth && height < maxHeight) {\n      // Photo is smaller than both maximum dimensions, take it as-is\n      return {\n        height: height,\n        width: width\n      };\n    }\n\n    const aspectRatio = width / height;\n\n    if (aspectRatio > maxWidth / maxHeight) {\n      // Photo is wider than maximum dimension, downscale it based on maxWidth.\n      return {\n        height: maxWidth / aspectRatio,\n        width: maxWidth\n      };\n    }\n\n    // Photo is taller than maximum dimension, downscale it based on maxHeight.\n    return {\n      height: maxHeight,\n      width: maxHeight * aspectRatio\n    };\n  }\n\n  onmessage = function (event) {\n    const data = event.data;\n    const arrayBuffer = data.arrayBuffer;\n    const maxHeight = data.maxHeight;\n    const maxWidth = data.maxWidth;\n    const type = data.type;\n    const quality = data.quality;\n    const port = event.ports[0];\n\n    return Promise.resolve()\n      .then(function () {\n        return createImageBitmap(new Blob([arrayBuffer], { resizeQuality: 'high' }));\n      })\n      .then(function (imageBitmap) {\n        const dimension = keepAspectRatio(imageBitmap.width, imageBitmap.height, maxWidth, maxHeight);\n        const height = dimension.height;\n        const width = dimension.width;\n        const offscreenCanvas = new OffscreenCanvas(width, height);\n        const context = offscreenCanvas.getContext('2d');\n\n        context.drawImage(imageBitmap, 0, 0, width, height);\n\n        // Firefox quirks: 68.0.1 call named OffscreenCanvas.convertToBlob as OffscreenCanvas.toBlob.\n        const convertToBlob = (offscreenCanvas.convertToBlob || offscreenCanvas.toBlob).bind(offscreenCanvas);\n\n        return convertToBlob({ type: type, quality: quality });\n      })\n      .then(function (blob) {\n        return blobToDataURL(blob);\n      })\n      .then(function (dataURL) {\n        return port.postMessage({ result: dataURL });\n      })\n      .catch(function (err) {\n        console.error(err);\n\n        port.postMessage({\n          error: {\n            message: err.message,\n            stack: err.stack\n          }\n        });\n      });\n  };\n\n  postMessage('ready');\n}\n"]},"metadata":{},"sourceType":"script"}