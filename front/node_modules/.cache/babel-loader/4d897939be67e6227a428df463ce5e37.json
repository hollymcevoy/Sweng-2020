{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = intersectionOf;\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\n * Intersects 2 or more arrays and return an array of values which are common to all of them.\n */\n\n\nfunction intersectionOf(arg0) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return args.reduce(function (interim, arg) {\n    return interim.reduce(function (intersection, item) {\n      arg.includes(item) && intersection.push(item);\n      return intersection;\n    }, []);\n  }, _toConsumableArray(arg0));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;AACe,SAASA,cAAT,CAA2BC,IAA3B,EAAwF;AAAA,oCAAtCC,IAAsC;AAAtCA,QAAsC,UAAtCA,GAAsCC,eAAtCD;AAAsC;;AACrG,SAAOA,IAAI,CAACE,MAALF,CACL,UAACG,OAAD,EAAeC,GAAf;AAAA,WACED,OAAO,CAACD,MAARC,CAAe,UAACE,YAAD,EAAoBC,IAApB,EAAgC;AAC7CF,SAAG,CAACG,QAAJH,CAAaE,IAAbF,KAAsBC,YAAY,CAACG,IAAbH,CAAkBC,IAAlBD,CAAtBD;AAEA,aAAOC,YAAP;AAHF,OAIG,EAJHF,CADF;AADK,wBAODJ,IAPC,EAAP;AASD","names":["intersectionOf","arg0","args","arguments","reduce","interim","arg","intersection","item","includes","push"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Utils/intersectionOf.ts"],"sourcesContent":["/**\n * Intersects 2 or more arrays and return an array of values which are common to all of them.\n */\nexport default function intersectionOf<T>(arg0: readonly T[], ...args: readonly (readonly T[])[]): T[] {\n  return args.reduce<T[]>(\n    (interim: T[], arg: readonly T[]) =>\n      interim.reduce((intersection: T[], item: T) => {\n        arg.includes(item) && intersection.push(item);\n\n        return intersection;\n      }, []),\n    [...arg0]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}