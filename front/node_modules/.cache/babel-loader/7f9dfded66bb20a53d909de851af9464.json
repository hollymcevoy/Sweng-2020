{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _mathRandom = _interopRequireDefault(require(\"math-random\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _LiveRegionTwinComposer = _interopRequireDefault(require(\"../providers/LiveRegionTwin/LiveRegionTwinComposer\"));\n\nvar _ScreenReaderActivity = _interopRequireDefault(require(\"../ScreenReaderActivity\"));\n\nvar _tabbableElements = _interopRequireDefault(require(\"../Utils/tabbableElements\"));\n\nvar _useActivityTreeWithRenderer = _interopRequireDefault(require(\"../providers/ActivityTree/useActivityTreeWithRenderer\"));\n\nvar _useQueueStaticElement = _interopRequireDefault(require(\"../providers/LiveRegionTwin/useQueueStaticElement\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,\n    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;\nvar ROOT_STYLE = {\n  '&.webchat__live-region-transcript': {\n    '& .webchat__live-region-transcript__interactive_note': {\n      color: 'transparent',\n      height: 1,\n      overflow: 'hidden',\n      position: 'absolute',\n      top: 0,\n      whiteSpace: 'nowrap',\n      width: 1\n    }\n  }\n};\n/**\n * Checks if the rendering activity is presentational or not. Returns `true` if presentational, otherwise, `false`.\n *\n * Presentational activity, will be rendered visually but not going through screen reader.\n */\n\nfunction isPresentational(activity) {\n  var _channelData$messageB, _activity$attachments;\n\n  var channelData = activity.channelData; // \"Fallback text\" includes both message text and narratives for attachments.\n  // Emptying out \"fallback text\" essentially mute for both message and attachments.\n\n  var fallbackText = channelData === null || channelData === void 0 ? void 0 : channelData['webchat:fallback-text'];\n\n  if (typeof fallbackText === 'string') {\n    return !fallbackText;\n  } // If there are \"displayText\" (MessageBack), \"text\", or any attachments, there are something to narrate.\n\n\n  return !(channelData !== null && channelData !== void 0 && (_channelData$messageB = channelData.messageBack) !== null && _channelData$messageB !== void 0 && _channelData$messageB.displayText || activity.text || (_activity$attachments = activity.attachments) !== null && _activity$attachments !== void 0 && _activity$attachments.length);\n}\n\nvar LiveRegionTranscriptCore = function LiveRegionTranscriptCore(_ref) {\n  var activityElementMapRef = _ref.activityElementMapRef;\n\n  var _useActivityTreeWithR = (0, _useActivityTreeWithRenderer.default)({\n    flat: true\n  }),\n      _useActivityTreeWithR2 = _slicedToArray(_useActivityTreeWithR, 1),\n      flattenedActivityTree = _useActivityTreeWithR2[0];\n\n  var getKeyByActivity = useGetKeyByActivity();\n  var localize = useLocalizer();\n  var queueStaticElement = (0, _useQueueStaticElement.default)();\n  var liveRegionInteractiveLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_LABEL_ALT');\n  var liveRegionInteractiveWithLinkLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_WITH_LINKS_LABEL_ALT');\n  var renderingActivities = (0, _react.useMemo)(function () {\n    return Object.freeze(flattenedActivityTree.reduce(function (intermediate, _ref2) {\n      var activity = _ref2.activity;\n      return intermediate.set(getKeyByActivity(activity), activity);\n    }, new Map()));\n  }, [flattenedActivityTree, getKeyByActivity]);\n  var prevRenderingActivitiesRef = (0, _react.useRef)();\n  (0, _react.useEffect)(function () {\n    var prevRenderingActivities = prevRenderingActivitiesRef.current;\n    var appendedActivities = []; // Bottom-up, find activities which are recently appended (i.e. new activity will have a new key).\n    // We only consider new activities added to the bottom of the chat history.\n    // Based on how `aria-relevant=\"additions\"` works, activities that are updated, deleted, or reordered, should be ignored.\n\n    var _iterator = _createForOfIteratorHelper(Array.from(renderingActivities.entries()).reverse()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            activity = _step$value[1];\n\n        if (prevRenderingActivities !== null && prevRenderingActivities !== void 0 && prevRenderingActivities.has(key)) {\n          break;\n        }\n\n        appendedActivities.unshift({\n          activity: activity,\n          key: key\n        });\n        isPresentational(activity) || queueStaticElement( /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {\n          activity: activity\n        }));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var hasNewLink = appendedActivities.some(function (_ref3) {\n      var _activityElementMapRe;\n\n      var key = _ref3.key;\n      return (_activityElementMapRe = activityElementMapRef.current.get(key)) === null || _activityElementMapRe === void 0 ? void 0 : _activityElementMapRe.querySelector('a');\n    });\n    var hasNewWidget = appendedActivities.some(function (_ref4) {\n      var _activityElementMapRe2;\n\n      var key = _ref4.key;\n      return !!(0, _tabbableElements.default)((_activityElementMapRe2 = activityElementMapRef.current.get(key)) === null || _activityElementMapRe2 === void 0 ? void 0 : _activityElementMapRe2.querySelector('.webchat__basic-transcript__activity-body')).length;\n    });\n\n    if (hasNewLink || hasNewWidget) {\n      // eslint-disable-next-line no-magic-numbers\n      var labelId = \"webchat__live-region-transcript__interactive_note--\".concat((0, _mathRandom.default)().toString(36).substr(2, 5));\n      queueStaticElement(\n      /*#__PURE__*/\n      // Inside ARIA live region:\n      // - Edge + Narrator:\n      //   - It read if `aria-labelledby` or `aria-label` is set;\n      //   - It read nothing if `aria-labelledby` or `aria-label` are not set (in this case, it read \"note\").\n      // - Safari + VoiceOver and Chrome + NVDA:\n      //   - They read its content and ignore `aria-labelledby` or `aria-label`\n      //   - They will not read if it is simply <div aria-label=\"Something\" /> without content (self-closing tag).\n      // For best compatibility, we need both `aria-labelledby` and contented <div>.\n      _react.default.createElement(\"div\", {\n        \"aria-atomic\": \"true\",\n        \"aria-labelledby\": labelId,\n        className: \"webchat__live-region-transcript__interactive_note\",\n        role: \"note\"\n      }, /*#__PURE__*/_react.default.createElement(\"span\", {\n        id: labelId\n      }, hasNewLink ? liveRegionInteractiveWithLinkLabelAlt : liveRegionInteractiveLabelAlt)));\n    }\n\n    prevRenderingActivitiesRef.current = renderingActivities;\n  }, [activityElementMapRef, getKeyByActivity, liveRegionInteractiveLabelAlt, liveRegionInteractiveWithLinkLabelAlt, prevRenderingActivitiesRef, queueStaticElement, renderingActivities]);\n  return null;\n};\n\nvar LiveRegionTranscript = function LiveRegionTranscript(_ref5) {\n  var activityElementMapRef = _ref5.activityElementMapRef;\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      internalLiveRegionFadeAfter = _useStyleOptions2[0].internalLiveRegionFadeAfter;\n\n  var localize = useLocalizer();\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');\n  return /*#__PURE__*/_react.default.createElement(_LiveRegionTwinComposer.default, {\n    \"aria-roledescription\": transcriptRoleDescription,\n    className: (0, _classnames.default)('webchat__live-region-transcript', rootClassName),\n    fadeAfter: internalLiveRegionFadeAfter,\n    role: \"log\"\n  }, /*#__PURE__*/_react.default.createElement(LiveRegionTranscriptCore, {\n    activityElementMapRef: activityElementMapRef\n  }));\n};\n\nLiveRegionTranscript.propTypes = {\n  // PropTypes cannot be fully expressed in TypeScript.\n  // @ts-ignore\n  activityElementMapRef: _propTypes.default.shape({\n    current: _propTypes.default.instanceOf(Map)\n  }).isRequired\n};\nvar _default = LiveRegionTranscript;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["useGetKeyByActivity","hooks","useLocalizer","useStyleOptions","ROOT_STYLE","color","height","overflow","position","top","whiteSpace","width","isPresentational","activity","channelData","fallbackText","messageBack","displayText","text","attachments","_activity$attachments","length","LiveRegionTranscriptCore","activityElementMapRef","flat","flattenedActivityTree","getKeyByActivity","localize","queueStaticElement","liveRegionInteractiveLabelAlt","liveRegionInteractiveWithLinkLabelAlt","renderingActivities","Object","freeze","reduce","intermediate","set","Map","prevRenderingActivitiesRef","prevRenderingActivities","current","appendedActivities","Array","from","entries","reverse","key","has","unshift","_react","_ScreenReaderActivity","_iterator","hasNewLink","some","get","_activityElementMapRe","querySelector","hasNewWidget","_activityElementMapRe2","labelId","toString","substr","className","role","id","LiveRegionTranscript","internalLiveRegionFadeAfter","rootClassName","transcriptRoleDescription","_LiveRegionTwinComposer","fadeAfter","propTypes","PropTypes","shape","instanceOf","isRequired"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Transcript/LiveRegionTranscript.tsx"],"sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport PropTypes from 'prop-types';\nimport random from 'math-random';\nimport React, { useEffect, useMemo, useRef } from 'react';\n\nimport type { DirectLineActivity } from 'botframework-webchat-core';\nimport type { FC, RefObject, VFC } from 'react';\n\nimport LiveRegionTwinComposer from '../providers/LiveRegionTwin/LiveRegionTwinComposer';\nimport ScreenReaderActivity from '../ScreenReaderActivity';\nimport tabbableElements from '../Utils/tabbableElements';\nimport useActivityTreeWithRenderer from '../providers/ActivityTree/useActivityTreeWithRenderer';\nimport useQueueStaticElement from '../providers/LiveRegionTwin/useQueueStaticElement';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\n\nimport type { ActivityElementMap } from './types';\nimport classNames from 'classnames';\n\nconst { useGetKeyByActivity, useLocalizer, useStyleOptions } = hooks;\n\nconst ROOT_STYLE = {\n  '&.webchat__live-region-transcript': {\n    '& .webchat__live-region-transcript__interactive_note': {\n      color: 'transparent',\n      height: 1,\n      overflow: 'hidden',\n      position: 'absolute',\n      top: 0,\n      whiteSpace: 'nowrap',\n      width: 1\n    }\n  }\n};\n\n/**\n * Checks if the rendering activity is presentational or not. Returns `true` if presentational, otherwise, `false`.\n *\n * Presentational activity, will be rendered visually but not going through screen reader.\n */\nfunction isPresentational(activity: DirectLineActivity): boolean {\n  const { channelData }: { attachments?: []; channelData?: { messageBack?: { displayText?: string } }; text?: string } =\n    activity;\n\n  // \"Fallback text\" includes both message text and narratives for attachments.\n  // Emptying out \"fallback text\" essentially mute for both message and attachments.\n  const fallbackText = channelData?.['webchat:fallback-text'];\n\n  if (typeof fallbackText === 'string') {\n    return !fallbackText;\n  }\n\n  // If there are \"displayText\" (MessageBack), \"text\", or any attachments, there are something to narrate.\n  return !(channelData?.messageBack?.displayText || activity.text || activity.attachments?.length);\n}\n\ntype RenderingActivities = Map<string, DirectLineActivity>;\n\ntype LiveRegionTranscriptCoreProps = {\n  activityElementMapRef: RefObject<ActivityElementMap>;\n};\n\nconst LiveRegionTranscriptCore: FC<LiveRegionTranscriptCoreProps> = ({ activityElementMapRef }) => {\n  const [flattenedActivityTree] = useActivityTreeWithRenderer({ flat: true });\n  const getKeyByActivity = useGetKeyByActivity();\n  const localize = useLocalizer();\n  const queueStaticElement = useQueueStaticElement();\n\n  const liveRegionInteractiveLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_LABEL_ALT');\n  const liveRegionInteractiveWithLinkLabelAlt = localize('TRANSCRIPT_LIVE_REGION_INTERACTIVE_WITH_LINKS_LABEL_ALT');\n\n  const renderingActivities = useMemo<Readonly<RenderingActivities>>(\n    () =>\n      Object.freeze(\n        flattenedActivityTree.reduce<RenderingActivities>(\n          (intermediate, { activity }) => intermediate.set(getKeyByActivity(activity), activity),\n          new Map<string, DirectLineActivity>()\n        )\n      ),\n    [flattenedActivityTree, getKeyByActivity]\n  );\n\n  const prevRenderingActivitiesRef = useRef<Readonly<RenderingActivities>>();\n\n  useEffect(() => {\n    const { current: prevRenderingActivities } = prevRenderingActivitiesRef;\n    const appendedActivities: { activity: DirectLineActivity; key: string }[] = [];\n\n    // Bottom-up, find activities which are recently appended (i.e. new activity will have a new key).\n    // We only consider new activities added to the bottom of the chat history.\n    // Based on how `aria-relevant=\"additions\"` works, activities that are updated, deleted, or reordered, should be ignored.\n    for (const [key, activity] of Array.from(renderingActivities.entries()).reverse()) {\n      if (prevRenderingActivities?.has(key)) {\n        break;\n      }\n\n      appendedActivities.unshift({ activity, key });\n\n      isPresentational(activity) || queueStaticElement(<ScreenReaderActivity activity={activity} />);\n    }\n\n    const hasNewLink = appendedActivities.some(({ key }) => activityElementMapRef.current.get(key)?.querySelector('a'));\n\n    const hasNewWidget = appendedActivities.some(\n      ({ key }) =>\n        !!tabbableElements(\n          activityElementMapRef.current.get(key)?.querySelector('.webchat__basic-transcript__activity-body')\n        ).length\n    );\n\n    if (hasNewLink || hasNewWidget) {\n      // eslint-disable-next-line no-magic-numbers\n      const labelId = `webchat__live-region-transcript__interactive_note--${random().toString(36).substr(2, 5)}`;\n\n      queueStaticElement(\n        // Inside ARIA live region:\n        // - Edge + Narrator:\n        //   - It read if `aria-labelledby` or `aria-label` is set;\n        //   - It read nothing if `aria-labelledby` or `aria-label` are not set (in this case, it read \"note\").\n        // - Safari + VoiceOver and Chrome + NVDA:\n        //   - They read its content and ignore `aria-labelledby` or `aria-label`\n        //   - They will not read if it is simply <div aria-label=\"Something\" /> without content (self-closing tag).\n        // For best compatibility, we need both `aria-labelledby` and contented <div>.\n        <div\n          aria-atomic=\"true\"\n          aria-labelledby={labelId}\n          className=\"webchat__live-region-transcript__interactive_note\"\n          role=\"note\"\n        >\n          {/* \"id\" is required for \"aria-activedescendant\" */}\n          {/* eslint-disable-next-line react/forbid-dom-props */}\n          <span id={labelId}>{hasNewLink ? liveRegionInteractiveWithLinkLabelAlt : liveRegionInteractiveLabelAlt}</span>\n        </div>\n      );\n    }\n\n    prevRenderingActivitiesRef.current = renderingActivities;\n  }, [\n    activityElementMapRef,\n    getKeyByActivity,\n    liveRegionInteractiveLabelAlt,\n    liveRegionInteractiveWithLinkLabelAlt,\n    prevRenderingActivitiesRef,\n    queueStaticElement,\n    renderingActivities\n  ]);\n\n  return null;\n};\n\ntype LiveRegionTranscriptProps = {\n  activityElementMapRef: RefObject<ActivityElementMap>;\n};\n\nconst LiveRegionTranscript: VFC<LiveRegionTranscriptProps> = ({ activityElementMapRef }) => {\n  const [{ internalLiveRegionFadeAfter }] = useStyleOptions();\n  const localize = useLocalizer();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  const transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');\n\n  return (\n    <LiveRegionTwinComposer\n      aria-roledescription={transcriptRoleDescription}\n      className={classNames('webchat__live-region-transcript', rootClassName)}\n      fadeAfter={internalLiveRegionFadeAfter}\n      role=\"log\"\n    >\n      <LiveRegionTranscriptCore activityElementMapRef={activityElementMapRef} />\n    </LiveRegionTwinComposer>\n  );\n};\n\nLiveRegionTranscript.propTypes = {\n  // PropTypes cannot be fully expressed in TypeScript.\n  // @ts-ignore\n  activityElementMapRef: PropTypes.shape({\n    current: PropTypes.instanceOf(Map)\n  }).isRequired\n};\n\nexport default LiveRegionTranscript;\n"]},"metadata":{},"sourceType":"script"}