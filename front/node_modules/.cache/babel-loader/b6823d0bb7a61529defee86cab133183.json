{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = navigableEvent; // Navigable event means the end-user is focusing on an inputtable element, but it is okay to capture the arrow keys.\n// For example, if the end-user is on <button>, we can capture the arrow keys.\n// We can also capture arrow keys when the user is on a <textarea> without contents.\n// eslint-disable-next-line complexity\n\nfunction navigableEvent(event) {\n  var altKey = event.altKey,\n      target = event.target,\n      tagName = event.target.tagName;\n  var autocompleteAttribute = target.getAttribute('autocomplete');\n  var autocomplete = autocompleteAttribute && autocompleteAttribute !== 'off'; // Generally, we allow up/down arrow keys on all elements captured here, except those handled by the user agent.\n  // For example, if it is on <select>, we will ignore up/down arrow keys. Also true for textbox with autocomplete.\n  // For some elements, user agent doesn't handle arrow keys when ALT key is held, so we can still handle ALT + UP/DOWN keys.\n  // For example, user agent ignores ALT + UP/DOWN on <input type=\"text\"> with content.\n  // Counter-example: user agent continues to handle ALT + UP/DOWN on <input type=\"number\">.\n\n  if (tagName === 'INPUT') {\n    var list = target.list,\n        type = target.type,\n        value = target.value; // These are buttons, up/down arrow keys are not handled by the user agent.\n\n    if (type === 'button' || type === 'checkbox' || type === 'file' || type === 'image' || type === 'radio' || type === 'reset' || type === 'submit') {\n      return true;\n    } else if (type === 'email' || type === 'password' || type === 'search' || type === 'tel' || type === 'text' || type === 'url') {\n      if (autocomplete || list) {\n        // \"autocomplete\" and \"list\" are comboboxes. Up/down arrow keys may be handled by the user agent.\n        return true;\n      } else if (altKey || !value) {\n        // If the input has content, user agent will handle up/down arrow and it work similar to HOME/END keys.\n        // \"altKey\" can be used; user agent ignores ALT + UP/DOWN.\n        return true;\n      }\n    }\n  } else if (tagName === 'SELECT') {\n    // User agent handles up/down arrow keys for dropdown list.\n    return false;\n  } else if (tagName === 'TEXTAREA') {\n    if (!autocomplete && (altKey || !target.value)) {\n      // User agent handles up/down arrow keys for multiline text box if it has content or is auto-complete.\n      return true;\n    }\n  } else if (target.getAttribute('contenteditable') === 'true') {\n    if (altKey || !target.innerHTML) {\n      // \"contenteditable\" element works like <textarea> minus \"autocomplete\".\n      return true;\n    }\n  } else {\n    return true;\n  }\n}","map":{"version":3,"mappings":";;;;;kCAAA;AACA;AACA;AACA;;AACe,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAC5C,MACEC,MADF,GAIID,KAJJ,CACEC,MADF;AAAA,MAEEC,MAFF,GAIIF,KAJJ,CAEEE,MAFF;AAAA,MAGYC,OAHZ,GAIIH,KAJJ,CAGEE,MACEF,CADQG,OAHZ;AAMA,MAAMC,qBAAqB,GAAGF,MAAM,CAACG,YAAPH,CAAoB,cAApBA,CAA9B;AACA,MAAMI,YAAY,GAAGF,qBAAqB,IAAIA,qBAAqB,KAAK,KAAxE,CAR4C,CAU5C;AACA;AAEA;AACA;AACA;;AACA,MAAID,OAAO,KAAK,OAAhB,EAAyB;AACvB,QAAQI,IAAR,GAA8BL,MAA9B,CAAQK,IAAR;AAAA,QAAcC,IAAd,GAA8BN,MAA9B,CAAcM,IAAd;AAAA,QAAoBC,KAApB,GAA8BP,MAA9B,CAAoBO,KAApB,CADuB,CAGvB;;AACA,QACED,IAAI,KAAK,QAATA,IACAA,IAAI,KAAK,UADTA,IAEAA,IAAI,KAAK,MAFTA,IAGAA,IAAI,KAAK,OAHTA,IAIAA,IAAI,KAAK,OAJTA,IAKAA,IAAI,KAAK,OALTA,IAMAA,IAAI,KAAK,QAPX,EAQE;AACA,aAAO,IAAP;AATF,WAUO,IACLA,IAAI,KAAK,OAATA,IACAA,IAAI,KAAK,UADTA,IAEAA,IAAI,KAAK,QAFTA,IAGAA,IAAI,KAAK,KAHTA,IAIAA,IAAI,KAAK,MAJTA,IAKAA,IAAI,KAAK,KANJ,EAOL;AACA,UAAIF,YAAY,IAAIC,IAApB,EAA0B;AACxB;AACA,eAAO,IAAP;AAFF,aAGO,IAAIN,MAAM,IAAI,CAACQ,KAAf,EAAsB;AAC3B;AACA;AACA,eAAO,IAAP;AACD;AACF;AA9BH,SA+BO,IAAIN,OAAO,KAAK,QAAhB,EAA0B;AAC/B;AACA,WAAO,KAAP;AAFK,SAGA,IAAIA,OAAO,KAAK,UAAhB,EAA4B;AACjC,QAAI,CAACG,YAAD,KAAkBL,MAAM,IAAI,CAACC,MAAM,CAACO,KAApC,CAAJ,EAAgD;AAC9C;AACA,aAAO,IAAP;AACD;AAJI,SAKA,IAAIP,MAAM,CAACG,YAAPH,CAAoB,iBAApBA,MAA2C,MAA/C,EAAuD;AAC5D,QAAID,MAAM,IAAI,CAACC,MAAM,CAACQ,SAAtB,EAAiC;AAC/B;AACA,aAAO,IAAP;AACD;AAJI,SAKA;AACL,WAAO,IAAP;AACD;AACF","names":["navigableEvent","event","altKey","target","tagName","autocompleteAttribute","getAttribute","autocomplete","list","type","value","innerHTML"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Utils/TypeFocusSink/navigableEvent.js"],"sourcesContent":["// Navigable event means the end-user is focusing on an inputtable element, but it is okay to capture the arrow keys.\n// For example, if the end-user is on <button>, we can capture the arrow keys.\n// We can also capture arrow keys when the user is on a <textarea> without contents.\n// eslint-disable-next-line complexity\nexport default function navigableEvent(event) {\n  const {\n    altKey,\n    target,\n    target: { tagName }\n  } = event;\n\n  const autocompleteAttribute = target.getAttribute('autocomplete');\n  const autocomplete = autocompleteAttribute && autocompleteAttribute !== 'off';\n\n  // Generally, we allow up/down arrow keys on all elements captured here, except those handled by the user agent.\n  // For example, if it is on <select>, we will ignore up/down arrow keys. Also true for textbox with autocomplete.\n\n  // For some elements, user agent doesn't handle arrow keys when ALT key is held, so we can still handle ALT + UP/DOWN keys.\n  // For example, user agent ignores ALT + UP/DOWN on <input type=\"text\"> with content.\n  // Counter-example: user agent continues to handle ALT + UP/DOWN on <input type=\"number\">.\n  if (tagName === 'INPUT') {\n    const { list, type, value } = target;\n\n    // These are buttons, up/down arrow keys are not handled by the user agent.\n    if (\n      type === 'button' ||\n      type === 'checkbox' ||\n      type === 'file' ||\n      type === 'image' ||\n      type === 'radio' ||\n      type === 'reset' ||\n      type === 'submit'\n    ) {\n      return true;\n    } else if (\n      type === 'email' ||\n      type === 'password' ||\n      type === 'search' ||\n      type === 'tel' ||\n      type === 'text' ||\n      type === 'url'\n    ) {\n      if (autocomplete || list) {\n        // \"autocomplete\" and \"list\" are comboboxes. Up/down arrow keys may be handled by the user agent.\n        return true;\n      } else if (altKey || !value) {\n        // If the input has content, user agent will handle up/down arrow and it work similar to HOME/END keys.\n        // \"altKey\" can be used; user agent ignores ALT + UP/DOWN.\n        return true;\n      }\n    }\n  } else if (tagName === 'SELECT') {\n    // User agent handles up/down arrow keys for dropdown list.\n    return false;\n  } else if (tagName === 'TEXTAREA') {\n    if (!autocomplete && (altKey || !target.value)) {\n      // User agent handles up/down arrow keys for multiline text box if it has content or is auto-complete.\n      return true;\n    }\n  } else if (target.getAttribute('contenteditable') === 'true') {\n    if (altKey || !target.innerHTML) {\n      // \"contenteditable\" element works like <textarea> minus \"autocomplete\".\n      return true;\n    }\n  } else {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}