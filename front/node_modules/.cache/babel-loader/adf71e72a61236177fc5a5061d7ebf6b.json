{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\n\n\nfunction retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nexports.retryWhen = retryWhen;\n\nvar RetryWhenOperator = function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n\n  return RetryWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar RetryWhenSubscriber = function (_super) {\n  __extends(RetryWhenSubscriber, _super);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    _super.call(this, destination);\n\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject_1.Subject();\n        retries = tryCatch_1.tryCatch(this.notifier)(errors);\n\n        if (retries === errorObject_1.errorObject) {\n          return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n        }\n\n        retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        errors = _a.errors,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  };\n\n  RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _a = this,\n        errors = _a.errors,\n        retries = _a.retries,\n        retriesSubscription = _a.retriesSubscription;\n\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    this.source.subscribe(this);\n  };\n\n  return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"mappings":";;;;;;;;;;;;AAGA,wBAAwB,YAAxB;;AAEA,yBAAyB,kBAAzB;;AACA,4BAA4B,qBAA5B;;AAEA,gCAAgC,oBAAhC;;AAEA,kCAAkC,2BAAlC;AAIA;;;;;;;;;;;;;;;;AAcA,mBAA6BA,QAA7B,EAAmF;AACjF,SAAO,UAACC,MAAD,EAAsB;AAAK,iBAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBH,QAAtB,EAAgCC,MAAhC,CAAZ;AAAoD,GAAtF;AACD;;AAFeG,oBAASC,SAAT;;AAIhB;AACE,6BAAsBL,QAAtB,EACmBC,MADnB,EACwC;AADlB;AACH;AAClB;;AAEDE,+CAAKG,UAAL,EAAgCL,MAAhC,EAA2C;AACzC,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKN,QAAzC,EAAmD,KAAKC,MAAxD,CAAjB,CAAP;AACD,GAFD;;AAGF;AAAC,CARD;AAUA;;;;;;;AAKA;AAAwCQ;;AAMtC,+BAAYC,WAAZ,EACoBV,QADpB,EAEoBC,MAFpB,EAEyC;AACvCU,sBAAMD,WAAN;;AAFkB;AACA;AAEnB;;AAEDF,kDAAMI,GAAN,EAAc;AACZ,QAAI,CAAC,KAAKC,SAAV,EAAqB;AAEnB,UAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIC,OAAO,GAAQ,KAAKA,OAAxB;AACA,UAAIC,mBAAmB,GAAG,KAAKA,mBAA/B;;AAEA,UAAI,CAACD,OAAL,EAAc;AACZD,cAAM,GAAG,IAAIG,iBAAJ,EAAT;AACAF,eAAO,GAAGG,oBAAS,KAAKlB,QAAd,EAAwBc,MAAxB,CAAV;;AACA,YAAIC,OAAO,KAAKI,yBAAhB,EAA6B;AAC3B,iBAAOR,iBAAMS,KAAN,CAAWC,IAAX,CAAW,IAAX,EAAYF,0BAAYG,CAAxB,CAAP;AACD;;AACDN,2BAAmB,GAAGO,sCAAkB,IAAlB,EAAwBR,OAAxB,CAAtB;AACD,OAPD,MAOO;AACL,aAAKD,MAAL,GAAc,IAAd;AACA,aAAKE,mBAAL,GAA2B,IAA3B;AACD;;AAED,WAAKQ,sBAAL;;AAEA,WAAKV,MAAL,GAAcA,MAAd;AACA,WAAKC,OAAL,GAAeA,OAAf;AACA,WAAKC,mBAAL,GAA2BA,mBAA3B;AAEAF,YAAM,CAACW,IAAP,CAAYb,GAAZ;AACD;AACF,GA3BD;AA6BA;;;AAAqCJ;AACnC;AAAA,QAAQM,kBAAR;AAAA,QAAgBE,4CAAhB;;AACA,QAAIF,MAAJ,EAAY;AACVA,YAAM,CAACY,WAAP;AACA,WAAKZ,MAAL,GAAc,IAAd;AACD;;AACD,QAAIE,mBAAJ,EAAyB;AACvBA,yBAAmB,CAACU,WAApB;AACA,WAAKV,mBAAL,GAA2B,IAA3B;AACD;;AACD,SAAKD,OAAL,GAAe,IAAf;AACD,GAXoC;;AAarCP,uDAAWmB,UAAX,EAA0BC,UAA1B,EACWC,UADX,EAC+BC,UAD/B,EAEWC,QAFX,EAE0C;AACxC;AAAA,QAAQjB,kBAAR;AAAA,QAAgBC,oBAAhB;AAAA,QAAyBC,4CAAzB;;AACA,SAAKF,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,mBAAL,GAA2B,IAA3B;;AAEA,SAAKQ,sBAAL;;AAEA,SAAKV,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AAEA,SAAKf,MAAL,CAAYM,SAAZ,CAAsB,IAAtB;AACD,GAfD;;AAgBF;AAtEA,EAAwCyB,iCAAxC","names":["notifier","source","lift","RetryWhenOperator","exports","retryWhen","subscriber","subscribe","RetryWhenSubscriber","__extends","destination","_super","err","isStopped","errors","retries","retriesSubscription","Subject_1","tryCatch_1","errorObject_1","error","call","e","subscribeToResult_1","_unsubscribeAndRecycle","next","unsubscribe","outerValue","innerValue","outerIndex","innerIndex","innerSub","OuterSubscriber_1"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/src/operators/retryWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}