{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _mathRandom = _interopRequireDefault(require(\"math-random\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _scrollIntoViewWithBlockNearest = _interopRequireDefault(require(\"../../Utils/scrollIntoViewWithBlockNearest\"));\n\nvar _Context = _interopRequireDefault(require(\"./private/Context\"));\n\nvar _useActivityTreeWithRenderer = _interopRequireDefault(require(\"../ActivityTree/useActivityTreeWithRenderer\"));\n\nvar _usePrevious = _interopRequireDefault(require(\"../../hooks/internal/usePrevious\"));\n\nvar _useStateRef3 = _interopRequireDefault(require(\"../../hooks/internal/useStateRef\"));\n\nvar _useValueRef = _interopRequireDefault(require(\"../../hooks/internal/useValueRef\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity;\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nfunction uniqueId() {\n  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n  return (0, _mathRandom.default)() // eslint-disable-next-line no-magic-numbers\n  .toString(36) // eslint-disable-next-line no-magic-numbers\n  .substring(2, 2 + count);\n}\n\nvar TranscriptFocusComposer = function TranscriptFocusComposer(_ref) {\n  var _containerRef$current;\n\n  var children = _ref.children,\n      containerRef = _ref.containerRef;\n\n  var _useActivityTreeWithR = (0, _useActivityTreeWithRenderer.default)({\n    flat: true\n  }),\n      _useActivityTreeWithR2 = _slicedToArray(_useActivityTreeWithR, 1),\n      flattenedActivityTree = _useActivityTreeWithR2[0];\n\n  var _useStateRef = (0, _useStateRef3.default)(),\n      _useStateRef2 = _slicedToArray(_useStateRef, 3),\n      _ = _useStateRef2[0],\n      setRawFocusedActivityKey = _useStateRef2[1],\n      rawFocusedActivityKeyRef = _useStateRef2[2];\n\n  var getKeyByActivity = useGetKeyByActivity(); // As we need to use IDREF for `aria-activedescendant`,\n  // this prefix will differentiate multiple instances of transcript on the same page.\n  // eslint-disable-next-line no-magic-numbers\n\n  var prefix = (0, _react.useMemo)(function () {\n    return uniqueId(3);\n  }, []);\n  var getDescendantIdByActivityKey = (0, _react.useCallback)(function (activityKey) {\n    return activityKey && \"webchat__transcript-focus-\".concat(prefix, \"__activity-\").concat(activityKey);\n  }, [prefix]);\n  var renderingActivityKeys = (0, _react.useMemo)(function () {\n    return Object.freeze(flattenedActivityTree.map(function (_ref2) {\n      var activity = _ref2.activity;\n      return getKeyByActivity(activity);\n    }));\n  }, [flattenedActivityTree, getKeyByActivity]);\n  var renderingActivityKeysRef = (0, _useValueRef.default)(renderingActivityKeys); // While the transcript or any descendants are not focused, if the transcript is updated, reset the user-selected active descendant.\n  // This will assume the last activity, if any, will be the active descendant.\n\n  var prevRenderingActivityKeys = (0, _usePrevious.default)(renderingActivityKeys);\n\n  if (renderingActivityKeys !== prevRenderingActivityKeys && !((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(document.activeElement))) {\n    rawFocusedActivityKeyRef.current = undefined;\n  }\n\n  var rawFocusedActivityKey = rawFocusedActivityKeyRef.current;\n  var focusedActivityKey = (0, _react.useMemo)(function () {\n    return renderingActivityKeys.includes(rawFocusedActivityKey) ? rawFocusedActivityKey : last(renderingActivityKeys);\n  }, [renderingActivityKeys, rawFocusedActivityKey]);\n  var focusedActivityKeyRef = (0, _useValueRef.default)(focusedActivityKey);\n  var activeDescendantId = (0, _react.useMemo)(function () {\n    return getDescendantIdByActivityKey(focusedActivityKey);\n  }, [getDescendantIdByActivityKey, focusedActivityKey]);\n  var focusByActivityKey = (0, _react.useCallback)(function (activityKey) {\n    var withFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (activityKey === false) {\n      // `false` means set it to nothing.\n      setRawFocusedActivityKey(undefined);\n    } else if (activityKey === true) {\n      // `true` means set to something if it is not set.\n      setRawFocusedActivityKey(function (key) {\n        return key || focusedActivityKeyRef.current;\n      });\n    } else if (activityKey) {\n      setRawFocusedActivityKey(activityKey);\n    }\n\n    if (withFocus) {\n      var _containerRef$current2;\n\n      (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.focus();\n\n      var _activeDescendantId = getDescendantIdByActivityKey(activityKey === false ? // If \"activityKey\" is false, it means \"focus nothing and reset it to the last activity\".\n      last(renderingActivityKeysRef.current) : activityKey && activityKey !== true ? // If \"activity\" is not \"undefined\" and not \"true\", it means \"focus on this activity\".\n      activityKey : // If \"activityKey\" is \"undefined\", it means \"don't modify the focus\".\n      // If \"activityKey\" is \"true\", it means \"try to focus on anything\".\n      rawFocusedActivityKeyRef.current);\n\n      var activeDescendantElement = _activeDescendantId && document.getElementById(_activeDescendantId); // Don't scroll active descendant into view if the focus is already inside it.\n      // Otherwise, given the focus is on the send box, clicking on any <input> inside the Adaptive Cards may cause the view to move.\n      // This UX is not desirable because click should not cause scroll.\n\n\n      if (activeDescendantElement && !activeDescendantElement.contains(document.activeElement)) {\n        (0, _scrollIntoViewWithBlockNearest.default)(activeDescendantElement);\n      }\n    }\n  }, [getDescendantIdByActivityKey, containerRef, focusedActivityKeyRef, renderingActivityKeysRef, rawFocusedActivityKeyRef, setRawFocusedActivityKey]);\n  var focusRelativeActivity = (0, _react.useCallback)(function (delta) {\n    var orderedActivityKeys = renderingActivityKeysRef.current;\n\n    if (isNaN(delta) || !orderedActivityKeys.length) {\n      return focusByActivityKey(false, true);\n    }\n\n    var focusedActivityKey = focusedActivityKeyRef.current;\n    var index = orderedActivityKeys.indexOf(focusedActivityKey);\n    var nextIndex = ~index ? Math.max(0, Math.min(orderedActivityKeys.length - 1, index + delta)) : orderedActivityKeys.length - 1;\n    focusByActivityKey(orderedActivityKeys[+nextIndex], true);\n  }, [focusedActivityKeyRef, renderingActivityKeysRef, focusByActivityKey]);\n  var contextValue = (0, _react.useMemo)(function () {\n    return {\n      activeDescendantIdState: Object.freeze([activeDescendantId]),\n      getDescendantIdByActivityKey: getDescendantIdByActivityKey,\n      focusByActivityKey: focusByActivityKey,\n      focusedActivityKeyState: Object.freeze([focusedActivityKey]),\n      focusedExplicitlyState: Object.freeze([!!rawFocusedActivityKey]),\n      focusRelativeActivity: focusRelativeActivity\n    };\n  }, [activeDescendantId, getDescendantIdByActivityKey, focusByActivityKey, focusedActivityKey, focusRelativeActivity, rawFocusedActivityKey]);\n  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {\n    value: contextValue\n  }, children);\n};\n\nTranscriptFocusComposer.propTypes = {\n  // PropTypes is not fully compatible with TypeScript.\n  // @ts-ignore\n  containerRef: _propTypes.default.shape({\n    current: _propTypes.default.instanceOf(HTMLElement)\n  }).isRequired\n};\nvar _default = TranscriptFocusComposer;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["useGetKeyByActivity","hooks","last","array","length","uniqueId","count","Infinity","toString","substring","TranscriptFocusComposer","children","containerRef","flat","flattenedActivityTree","_","setRawFocusedActivityKey","rawFocusedActivityKeyRef","getKeyByActivity","prefix","getDescendantIdByActivityKey","activityKey","renderingActivityKeys","Object","freeze","map","activity","renderingActivityKeysRef","prevRenderingActivityKeys","current","_containerRef$current","contains","document","activeElement","undefined","rawFocusedActivityKey","focusedActivityKey","includes","focusedActivityKeyRef","activeDescendantId","focusByActivityKey","withFocus","key","focus","activeDescendantElement","getElementById","focusRelativeActivity","delta","orderedActivityKeys","isNaN","index","indexOf","nextIndex","Math","max","min","contextValue","activeDescendantIdState","focusedActivityKeyState","focusedExplicitlyState","_react","_Context","Provider","value","propTypes","PropTypes","shape","instanceOf","HTMLElement","isRequired"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/providers/TranscriptFocus/TranscriptFocusComposer.tsx"],"sourcesContent":["import { hooks } from 'botframework-webchat-api';\nimport PropTypes from 'prop-types';\nimport random from 'math-random';\nimport React, { useCallback, useMemo } from 'react';\n\nimport type { FC, MutableRefObject } from 'react';\n\nimport scrollIntoViewWithBlockNearest from '../../Utils/scrollIntoViewWithBlockNearest';\nimport TranscriptFocusContext from './private/Context';\nimport useActivityTreeWithRenderer from '../ActivityTree/useActivityTreeWithRenderer';\nimport usePrevious from '../../hooks/internal/usePrevious';\nimport useStateRef from '../../hooks/internal/useStateRef';\nimport useValueRef from '../../hooks/internal/useValueRef';\n\nimport type { TranscriptFocusContextType } from './private/Context';\n\nconst { useGetKeyByActivity } = hooks;\n\ntype TranscriptFocusComposerProps = {\n  containerRef: MutableRefObject<HTMLElement>;\n};\n\nfunction last<T>(array: ArrayLike<T>) {\n  return array[array.length - 1];\n}\n\nfunction uniqueId(count = Infinity) {\n  return (\n    random()\n      // eslint-disable-next-line no-magic-numbers\n      .toString(36)\n      // eslint-disable-next-line no-magic-numbers\n      .substring(2, 2 + count)\n  );\n}\n\nconst TranscriptFocusComposer: FC<TranscriptFocusComposerProps> = ({ children, containerRef }) => {\n  const [flattenedActivityTree] = useActivityTreeWithRenderer({ flat: true });\n  const [_, setRawFocusedActivityKey, rawFocusedActivityKeyRef] = useStateRef<string | undefined>();\n  const getKeyByActivity = useGetKeyByActivity();\n\n  // As we need to use IDREF for `aria-activedescendant`,\n  // this prefix will differentiate multiple instances of transcript on the same page.\n  // eslint-disable-next-line no-magic-numbers\n  const prefix = useMemo<string>(() => uniqueId(3), []);\n\n  const getDescendantIdByActivityKey: (activityKey?: string) => string | undefined = useCallback(\n    (activityKey?: string) => activityKey && `webchat__transcript-focus-${prefix}__activity-${activityKey}`,\n    [prefix]\n  );\n\n  const renderingActivityKeys = useMemo<readonly string[]>(\n    () => Object.freeze(flattenedActivityTree.map(({ activity }) => getKeyByActivity(activity))),\n    [flattenedActivityTree, getKeyByActivity]\n  );\n\n  const renderingActivityKeysRef = useValueRef<readonly string[]>(renderingActivityKeys);\n\n  // While the transcript or any descendants are not focused, if the transcript is updated, reset the user-selected active descendant.\n  // This will assume the last activity, if any, will be the active descendant.\n  const prevRenderingActivityKeys = usePrevious(renderingActivityKeys);\n\n  if (renderingActivityKeys !== prevRenderingActivityKeys && !containerRef.current?.contains(document.activeElement)) {\n    rawFocusedActivityKeyRef.current = undefined;\n  }\n\n  const { current: rawFocusedActivityKey } = rawFocusedActivityKeyRef;\n\n  const focusedActivityKey = useMemo<string>(\n    () => (renderingActivityKeys.includes(rawFocusedActivityKey) ? rawFocusedActivityKey : last(renderingActivityKeys)),\n    [renderingActivityKeys, rawFocusedActivityKey]\n  );\n\n  const focusedActivityKeyRef = useValueRef(focusedActivityKey);\n\n  const activeDescendantId = useMemo<string>(\n    () => getDescendantIdByActivityKey(focusedActivityKey),\n    [getDescendantIdByActivityKey, focusedActivityKey]\n  );\n\n  const focusByActivityKey = useCallback<\n    (activityKey: boolean | string | undefined, withFocus: boolean | undefined) => void\n  >(\n    (activityKey: boolean | string | undefined, withFocus: boolean | undefined = true) => {\n      if (activityKey === false) {\n        // `false` means set it to nothing.\n        setRawFocusedActivityKey(undefined);\n      } else if (activityKey === true) {\n        // `true` means set to something if it is not set.\n        setRawFocusedActivityKey(key => key || focusedActivityKeyRef.current);\n      } else if (activityKey) {\n        setRawFocusedActivityKey(activityKey);\n      }\n\n      if (withFocus) {\n        containerRef.current?.focus();\n\n        const activeDescendantId = getDescendantIdByActivityKey(\n          activityKey === false\n            ? // If \"activityKey\" is false, it means \"focus nothing and reset it to the last activity\".\n              last(renderingActivityKeysRef.current)\n            : activityKey && activityKey !== true\n            ? // If \"activity\" is not \"undefined\" and not \"true\", it means \"focus on this activity\".\n              activityKey\n            : // If \"activityKey\" is \"undefined\", it means \"don't modify the focus\".\n              // If \"activityKey\" is \"true\", it means \"try to focus on anything\".\n              rawFocusedActivityKeyRef.current\n        );\n\n        const activeDescendantElement = activeDescendantId && document.getElementById(activeDescendantId);\n\n        // Don't scroll active descendant into view if the focus is already inside it.\n        // Otherwise, given the focus is on the send box, clicking on any <input> inside the Adaptive Cards may cause the view to move.\n        // This UX is not desirable because click should not cause scroll.\n        if (activeDescendantElement && !activeDescendantElement.contains(document.activeElement)) {\n          scrollIntoViewWithBlockNearest(activeDescendantElement);\n        }\n      }\n    },\n    [\n      getDescendantIdByActivityKey,\n      containerRef,\n      focusedActivityKeyRef,\n      renderingActivityKeysRef,\n      rawFocusedActivityKeyRef,\n      setRawFocusedActivityKey\n    ]\n  );\n\n  const focusRelativeActivity = useCallback(\n    (delta: number) => {\n      const { current: orderedActivityKeys } = renderingActivityKeysRef;\n\n      if (isNaN(delta) || !orderedActivityKeys.length) {\n        return focusByActivityKey(false, true);\n      }\n\n      const { current: focusedActivityKey } = focusedActivityKeyRef;\n\n      const index = orderedActivityKeys.indexOf(focusedActivityKey);\n      const nextIndex = ~index\n        ? Math.max(0, Math.min(orderedActivityKeys.length - 1, index + delta))\n        : orderedActivityKeys.length - 1;\n\n      focusByActivityKey(orderedActivityKeys[+nextIndex], true);\n    },\n    [focusedActivityKeyRef, renderingActivityKeysRef, focusByActivityKey]\n  );\n\n  const contextValue = useMemo<TranscriptFocusContextType>(\n    () => ({\n      activeDescendantIdState: Object.freeze([activeDescendantId]) as readonly [string],\n      getDescendantIdByActivityKey,\n      focusByActivityKey,\n      focusedActivityKeyState: Object.freeze([focusedActivityKey]) as readonly [string],\n      focusedExplicitlyState: Object.freeze([!!rawFocusedActivityKey]) as readonly [boolean],\n      focusRelativeActivity\n    }),\n    [\n      activeDescendantId,\n      getDescendantIdByActivityKey,\n      focusByActivityKey,\n      focusedActivityKey,\n      focusRelativeActivity,\n      rawFocusedActivityKey\n    ]\n  );\n\n  return <TranscriptFocusContext.Provider value={contextValue}>{children}</TranscriptFocusContext.Provider>;\n};\n\nTranscriptFocusComposer.propTypes = {\n  // PropTypes is not fully compatible with TypeScript.\n  // @ts-ignore\n  containerRef: PropTypes.shape({\n    current: PropTypes.instanceOf(HTMLElement)\n  }).isRequired\n};\n\nexport default TranscriptFocusComposer;\n"]},"metadata":{},"sourceType":"script"}