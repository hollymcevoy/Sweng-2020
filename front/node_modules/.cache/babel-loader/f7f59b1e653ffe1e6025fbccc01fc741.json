{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Strings = void 0;\n\nvar Strings =\n/** @class */\nfunction () {\n  function Strings() {}\n\n  Strings.errors = {\n    unknownElementType: function (typeName) {\n      return \"Unknown element type \\\"\" + typeName + \"\\\". Fallback will be used if present.\";\n    },\n    unknownActionType: function (typeName) {\n      return \"Unknown action type \\\"\" + typeName + \"\\\". Fallback will be used if present.\";\n    },\n    elementTypeNotAllowed: function (typeName) {\n      return \"Element type \\\"\" + typeName + \"\\\" is not allowed in this context.\";\n    },\n    actionTypeNotAllowed: function (typeName) {\n      return \"Action type \\\"\" + typeName + \"\\\" is not allowed in this context.\";\n    },\n    invalidPropertyValue: function (value, propertyName) {\n      return \"Invalid value \\\"\" + value + \"\\\" for property \\\"\" + propertyName + \"\\\".\";\n    },\n    showCardMustHaveCard: function () {\n      return \"\\\"An Action.ShowCard must have its \\\"card\\\" property set to a valid AdaptiveCard object.\";\n    },\n    invalidColumnWidth: function (invalidWidth) {\n      return \"Invalid column width \\\"\" + invalidWidth + \"\\\" - defaulting to \\\"auto\\\".\";\n    },\n    invalidCardVersion: function (defaultingToVersion) {\n      return \"Invalid card version. Defaulting to \\\"\" + defaultingToVersion + \"\\\".\";\n    },\n    invalidVersionString: function (versionString) {\n      return \"Invalid version string \\\"\" + versionString + \"\\\".\";\n    },\n    propertyValueNotSupported: function (value, propertyName, supportedInVersion, versionUsed) {\n      return \"Value \\\"\" + value + \"\\\" for property \\\"\" + propertyName + \"\\\" is supported in version \" + supportedInVersion + \", but you are using version \" + versionUsed + \".\";\n    },\n    propertyNotSupported: function (propertyName, supportedInVersion, versionUsed) {\n      return \"Property \\\"\" + propertyName + \"\\\" is supported in version \" + supportedInVersion + \", but you are using version \" + versionUsed + \".\";\n    },\n    indexOutOfRange: function (index) {\n      return \"Index out of range (\" + index + \").\";\n    },\n    elementCannotBeUsedAsInline: function () {\n      return \"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\";\n    },\n    inlineAlreadyParented: function () {\n      return \"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\";\n    },\n    interactivityNotAllowed: function () {\n      return \"Interactivity is not allowed.\";\n    },\n    inputsMustHaveUniqueId: function () {\n      return \"All inputs must have a unique Id.\";\n    },\n    choiceSetMustHaveAtLeastOneChoice: function () {\n      return \"An Input.ChoiceSet must have at least one choice defined.\";\n    },\n    choiceSetChoicesMustHaveTitleAndValue: function () {\n      return \"All choices in an Input.ChoiceSet must have their title and value properties set.\";\n    },\n    propertyMustBeSet: function (propertyName) {\n      return \"Property \\\"\" + propertyName + \"\\\" must be set.\";\n    },\n    actionHttpHeadersMustHaveNameAndValue: function () {\n      return \"All headers of an Action.Http must have their name and value properties set.\";\n    },\n    tooManyActions: function (maximumActions) {\n      return \"Maximum number of actions exceeded (\" + maximumActions + \").\";\n    },\n    columnAlreadyBelongsToAnotherSet: function () {\n      return \"This column already belongs to another ColumnSet.\";\n    },\n    invalidCardType: function () {\n      return \"Invalid or missing card type. Make sure the card's type property is set to \\\"AdaptiveCard\\\".\";\n    },\n    unsupportedCardVersion: function (version, maxSupportedVersion) {\n      return \"The specified card version (\" + version + \") is not supported. The maximum supported card version is \" + maxSupportedVersion + \".\";\n    },\n    duplicateId: function (id) {\n      return \"Duplicate Id \\\"\" + id + \"\\\".\";\n    },\n    markdownProcessingNotEnabled: function () {\n      return \"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\";\n    },\n    processMarkdownEventRemoved: function () {\n      return \"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\";\n    },\n    elementAlreadyParented: function () {\n      return \"The element already belongs to another container.\";\n    },\n    actionAlreadyParented: function () {\n      return \"The action already belongs to another element.\";\n    },\n    elementTypeNotStandalone: function (typeName) {\n      return \"Elements of type \" + typeName + \" cannot be used as standalone elements.\";\n    }\n  };\n  Strings.magicCodeInputCard = {\n    tryAgain: function () {\n      return \"That didn't work... let's try again.\";\n    },\n    pleaseLogin: function () {\n      return \"Please login in the popup. You will obtain a magic code. Paste that code below and select \\\"Submit\\\"\";\n    },\n    enterMagicCode: function () {\n      return \"Enter magic code\";\n    },\n    pleaseEnterMagicCodeYouReceived: function () {\n      return \"Please enter the magic code you received.\";\n    },\n    submit: function () {\n      return \"Submit\";\n    },\n    cancel: function () {\n      return \"Cancel\";\n    },\n    somethingWentWrong: function () {\n      return \"Something went wrong. This action can't be handled.\";\n    },\n    authenticationFailed: function () {\n      return \"Authentication failed.\";\n    }\n  };\n  Strings.runtime = {\n    automaticRefreshPaused: function () {\n      return \"Automatic refresh paused.\";\n    },\n    clckToRestartAutomaticRefresh: function () {\n      return \"Click to restart.\";\n    },\n    refreshThisCard: function () {\n      return \"Refresh this card\";\n    }\n  };\n  Strings.hints = {\n    dontUseWeightedAndStrecthedColumnsInSameSet: function () {\n      return \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\";\n    }\n  };\n  Strings.defaults = {\n    inlineActionTitle: function () {\n      return \"Inline Action\";\n    },\n    overflowButtonText: function () {\n      return \"...\";\n    },\n    mediaPlayerAriaLabel: function () {\n      return \"Media content\";\n    },\n    mediaPlayerPlayMedia: function () {\n      return \"Play media\";\n    }\n  };\n  return Strings;\n}();\n\nexports.Strings = Strings;","map":{"version":3,"mappings":"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","names":["Strings","unknownElementType","typeName","unknownActionType","elementTypeNotAllowed","actionTypeNotAllowed","invalidPropertyValue","value","propertyName","showCardMustHaveCard","invalidColumnWidth","invalidWidth","invalidCardVersion","defaultingToVersion","invalidVersionString","versionString","propertyValueNotSupported","supportedInVersion","versionUsed","propertyNotSupported","indexOutOfRange","index","elementCannotBeUsedAsInline","inlineAlreadyParented","interactivityNotAllowed","inputsMustHaveUniqueId","choiceSetMustHaveAtLeastOneChoice","choiceSetChoicesMustHaveTitleAndValue","propertyMustBeSet","actionHttpHeadersMustHaveNameAndValue","tooManyActions","maximumActions","columnAlreadyBelongsToAnotherSet","invalidCardType","unsupportedCardVersion","version","maxSupportedVersion","duplicateId","id","markdownProcessingNotEnabled","processMarkdownEventRemoved","elementAlreadyParented","actionAlreadyParented","elementTypeNotStandalone","tryAgain","pleaseLogin","enterMagicCode","pleaseEnterMagicCodeYouReceived","submit","cancel","somethingWentWrong","authenticationFailed","automaticRefreshPaused","clckToRestartAutomaticRefresh","refreshThisCard","dontUseWeightedAndStrecthedColumnsInSameSet","inlineActionTitle","overflowButtonText","mediaPlayerAriaLabel","mediaPlayerPlayMedia","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/adaptivecards/src/strings.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport class Strings {\n    static readonly errors = {\n        unknownElementType: (typeName: string) => `Unknown element type \"${typeName}\". Fallback will be used if present.`,\n        unknownActionType: (typeName: string) => `Unknown action type \"${typeName}\". Fallback will be used if present.`,\n        elementTypeNotAllowed: (typeName: string) => `Element type \"${typeName}\" is not allowed in this context.`,\n        actionTypeNotAllowed: (typeName: string) => `Action type \"${typeName}\" is not allowed in this context.`,\n        invalidPropertyValue: (value: any, propertyName: string) => `Invalid value \"${value}\" for property \"${propertyName}\".`,\n        showCardMustHaveCard: () => `\"An Action.ShowCard must have its \"card\" property set to a valid AdaptiveCard object.`,\n        invalidColumnWidth: (invalidWidth: string) => `Invalid column width \"${invalidWidth}\" - defaulting to \"auto\".`,\n        invalidCardVersion: (defaultingToVersion: string) => `Invalid card version. Defaulting to \"${defaultingToVersion}\".`,\n        invalidVersionString: (versionString: string) => `Invalid version string \"${versionString}\".`,\n        propertyValueNotSupported: (value: any, propertyName: string, supportedInVersion: string, versionUsed: string) => `Value \"${value}\" for property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\n        propertyNotSupported: (propertyName: string, supportedInVersion: string, versionUsed: string) => `Property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\n        indexOutOfRange: (index: number) => `Index out of range (${index}).`,\n        elementCannotBeUsedAsInline: () => \"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\",\n        inlineAlreadyParented: () => \"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\",\n        interactivityNotAllowed: () => \"Interactivity is not allowed.\",\n        inputsMustHaveUniqueId: () => \"All inputs must have a unique Id.\",\n        choiceSetMustHaveAtLeastOneChoice: () => \"An Input.ChoiceSet must have at least one choice defined.\",\n        choiceSetChoicesMustHaveTitleAndValue: () => \"All choices in an Input.ChoiceSet must have their title and value properties set.\",\n        propertyMustBeSet: (propertyName: string) => `Property \"${propertyName}\" must be set.`,\n        actionHttpHeadersMustHaveNameAndValue: () => \"All headers of an Action.Http must have their name and value properties set.\",\n        tooManyActions: (maximumActions: number) => `Maximum number of actions exceeded (${maximumActions}).`,\n        columnAlreadyBelongsToAnotherSet: () => \"This column already belongs to another ColumnSet.\",\n        invalidCardType: () => `Invalid or missing card type. Make sure the card's type property is set to \"AdaptiveCard\".`,\n        unsupportedCardVersion: (version: string, maxSupportedVersion: string) => `The specified card version (${version}) is not supported. The maximum supported card version is ${maxSupportedVersion}.`,\n        duplicateId: (id: string) => `Duplicate Id \"${id}\".`,\n        markdownProcessingNotEnabled: () => \"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\",\n        processMarkdownEventRemoved: () => \"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\",\n        elementAlreadyParented: () => \"The element already belongs to another container.\",\n        actionAlreadyParented: () => \"The action already belongs to another element.\",\n        elementTypeNotStandalone: (typeName: string) => `Elements of type ${typeName} cannot be used as standalone elements.`\n    };\n    static readonly magicCodeInputCard = {\n        tryAgain: () => \"That didn't work... let's try again.\",\n        pleaseLogin: () => \"Please login in the popup. You will obtain a magic code. Paste that code below and select \\\"Submit\\\"\",\n        enterMagicCode: () => \"Enter magic code\",\n        pleaseEnterMagicCodeYouReceived: () => \"Please enter the magic code you received.\",\n        submit: () => \"Submit\",\n        cancel: () => \"Cancel\",\n        somethingWentWrong: () => \"Something went wrong. This action can't be handled.\",\n        authenticationFailed: () => \"Authentication failed.\"\n    };\n    static readonly runtime = {\n        automaticRefreshPaused: () => \"Automatic refresh paused.\",\n        clckToRestartAutomaticRefresh: () => \"Click to restart.\",\n        refreshThisCard: () => \"Refresh this card\"\n    };\n    static readonly hints = {\n        dontUseWeightedAndStrecthedColumnsInSameSet: () => \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\"\n    };\n    static readonly defaults = {\n        inlineActionTitle: () => \"Inline Action\",\n        overflowButtonText: () => \"...\",\n        mediaPlayerAriaLabel: () => \"Media content\",\n        mediaPlayerPlayMedia: () => \"Play media\"\n    };\n}\n"]},"metadata":{},"sourceType":"script"}