{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useStateRef;\n\nvar _react = require(\"react\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction useStateRef(initialValue) {\n  var _useState = (0, _react.useState)(),\n      _useState2 = _slicedToArray(_useState, 2),\n      _ = _useState2[0],\n      forceRender = _useState2[1];\n\n  var valueRef = (0, _react.useRef)(initialValue);\n  var setter = (0, _react.useCallback)(function (value) {\n    var current = valueRef.current;\n    value = value instanceof Function ? value(current) : value;\n\n    if (current !== value) {\n      valueRef.current = value;\n      forceRender({});\n    }\n  }, [forceRender, valueRef]);\n  return Object.freeze([valueRef.current, setter, valueRef]);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIe,SAASA,WAAT,CACbC,YADa,EAEmD;AAChE,kBAAyB,sBAAzB;AAAA;AAAA,MAAOC,CAAP;AAAA,MAAUC,WAAV;;AACA,MAAMC,QAA6B,GAAG,mBAAUH,YAAV,CAAtC;AAEA,MAAMI,MAAmC,GAAG,wBAC1C,UAACC,KAAD,EAA8B;AAC5B,QAAQC,OAAR,GAAoBH,QAApB,CAAQG,OAAR;AAEAD,SAAK,GAAGA,KAAK,YAAYE,QAAjBF,GAA4BA,KAAK,CAACC,OAAD,CAAjCD,GAA6CA,KAArDA;;AAEA,QAAIC,OAAO,KAAKD,KAAhB,EAAuB;AACrBF,cAAQ,CAACG,OAATH,GAAmBE,KAAnBF;AAEAD,iBAAW,CAAC,EAAD,CAAXA;AACD;AAVuC,KAY1C,CAACA,WAAD,EAAcC,QAAd,CAZ0C,CAA5C;AAeA,SAAOK,MAAM,CAACC,MAAPD,CAAc,CAACL,QAAQ,CAACG,OAAV,EAAmBF,MAAnB,EAA2BD,QAA3B,CAAdK,CAAP;AAKD","names":["useStateRef","initialValue","_","forceRender","valueRef","setter","value","current","Function","Object","freeze"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/hooks/internal/useStateRef.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nimport type { Dispatch, MutableRefObject, SetStateAction } from 'react';\n\nexport default function useStateRef<T>(\n  initialValue?: T\n): readonly [T, Dispatch<SetStateAction<T>>, MutableRefObject<T>] {\n  const [_, forceRender] = useState<{}>();\n  const valueRef: MutableRefObject<T> = useRef<T>(initialValue);\n\n  const setter: Dispatch<SetStateAction<T>> = useCallback(\n    (value: SetStateAction<T>) => {\n      const { current } = valueRef;\n\n      value = value instanceof Function ? value(current) : value;\n\n      if (current !== value) {\n        valueRef.current = value;\n\n        forceRender({});\n      }\n    },\n    [forceRender, valueRef]\n  );\n\n  return Object.freeze([valueRef.current, setter, valueRef]) as readonly [\n    T,\n    Dispatch<SetStateAction<T>>,\n    MutableRefObject<T>\n  ];\n}\n"]},"metadata":{},"sourceType":"script"}