{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime2 = require(\"@babel/runtime/regenerator\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = observeActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _simpleUpdateIn = _interopRequireDefault(require(\"simple-update-in\"));\n\nvar _observeEach = _interopRequireDefault(require(\"./effects/observeEach\"));\n\nvar _queueIncomingActivity = _interopRequireDefault(require(\"../actions/queueIncomingActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivity),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(observeActivitySaga);\n\nvar PASSTHRU_FN = function PASSTHRU_FN(value) {\n  return value;\n};\n\nfunction patchActivityWithFromRole(activity, userID) {\n  // Some activities, such as \"ConversationUpdate\", does not have \"from\" defined.\n  // And although \"role\" is defined in Direct Line spec, it was not sent over the wire.\n  // We normalize the activity here to simplify null-check and logic later.\n  // Patch activity.from.role to make sure its either \"bot\", \"user\", or \"channel\"\n  if (!activity.from) {\n    activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n      return 'channel';\n    });\n  } else if (!activity.from.role) {\n    if (activity.from.id === userID) {\n      activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n        return 'user';\n      });\n    } else if (activity.from.id) {\n      activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n        return 'bot';\n      });\n    } else {\n      activity = (0, _simpleUpdateIn[\"default\"])(activity, ['from', 'role'], function () {\n        return 'channel';\n      });\n    }\n  }\n\n  return activity;\n}\n\nfunction patchNullAsUndefined(activity) {\n  // These fields are known used in Web Chat and in any cases, they should not be null, but undefined.\n  // The only field omitted is \"value\", as it could be null purposefully.\n  return ['attachmentLayout', 'attachments', 'channelData', 'conversation', 'entities', 'from', 'inputHint', 'locale', 'name', 'recipient', 'speak', 'suggestedActions', 'text', 'textFormat', 'timestamp', 'type'].reduce(function (activity, name) {\n    var value = activity[name];\n    return (0, _simpleUpdateIn[\"default\"])(activity, [name], typeof value === 'undefined' || value === null ? undefined : PASSTHRU_FN);\n  }, activity);\n}\n\nfunction observeActivity(_ref) {\n  var directLine, userID;\n  return _regenerator[\"default\"].wrap(function observeActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          directLine = _ref.directLine, userID = _ref.userID;\n          _context2.next = 3;\n          return (0, _observeEach[\"default\"])(directLine.activity$, /*#__PURE__*/_regenerator[\"default\"].mark(function observeActivity(activity) {\n            return _regenerator[\"default\"].wrap(function observeActivity$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    activity = patchNullAsUndefined(activity);\n                    activity = patchActivityWithFromRole(activity, userID);\n                    _context.next = 4;\n                    return (0, _effects.put)((0, _queueIncomingActivity[\"default\"])(activity));\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, observeActivity);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction observeActivitySaga() {\n  return _regenerator[\"default\"].wrap(function observeActivitySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(observeActivity);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;qDAqDUA;sDASeC;;AA5DzB,IAAMC,WAAW,GAAG,SAAdA,WAAc,QAAK;AAAA,SAAIC,KAAJ;AAAzB;;AAEA,SAASC,yBAAT,CAAmCC,QAAnC,EAA6CC,MAA7C,EAAqD;AACnD;AACA;AACA;AAEA;AACA,MAAI,CAACD,QAAQ,CAACE,IAAd,EAAoB;AAClBF,YAAQ,GAAG,gCAASA,QAAT,EAAmB,CAAC,MAAD,EAAS,MAAT,CAAnB,EAAqC;AAAA,aAAM,SAAN;AAArC,MAAXA;AADF,SAEO,IAAI,CAACA,QAAQ,CAACE,IAATF,CAAcG,IAAnB,EAAyB;AAC9B,QAAIH,QAAQ,CAACE,IAATF,CAAcI,EAAdJ,KAAqBC,MAAzB,EAAiC;AAC/BD,cAAQ,GAAG,gCAASA,QAAT,EAAmB,CAAC,MAAD,EAAS,MAAT,CAAnB,EAAqC;AAAA,eAAM,MAAN;AAArC,QAAXA;AADF,WAEO,IAAIA,QAAQ,CAACE,IAATF,CAAcI,EAAlB,EAAsB;AAC3BJ,cAAQ,GAAG,gCAASA,QAAT,EAAmB,CAAC,MAAD,EAAS,MAAT,CAAnB,EAAqC;AAAA,eAAM,KAAN;AAArC,QAAXA;AADK,WAEA;AACLA,cAAQ,GAAG,gCAASA,QAAT,EAAmB,CAAC,MAAD,EAAS,MAAT,CAAnB,EAAqC;AAAA,eAAM,SAAN;AAArC,QAAXA;AACD;AACF;;AAED,SAAOA,QAAP;AACD;;AAED,SAASK,oBAAT,CAA8BL,QAA9B,EAAwC;AACtC;AACA;AAEA,SAAO,CACL,kBADK,EAEL,aAFK,EAGL,aAHK,EAIL,cAJK,EAKL,UALK,EAML,MANK,EAOL,WAPK,EAQL,QARK,EASL,MATK,EAUL,WAVK,EAWL,OAXK,EAYL,kBAZK,EAaL,MAbK,EAcL,YAdK,EAeL,WAfK,EAgBL,MAhBK,EAiBLM,MAjBK,CAiBE,UAACN,QAAD,EAAWO,IAAX,EAAoB;AAC3B,QAAgBT,KAAhB,GAA0BE,QAA1B,CAASO,IAAT;AAEA,WAAO,gCAASP,QAAT,EAAmB,CAACO,IAAD,CAAnB,EAA2B,OAAOT,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA1C,GAAiDU,SAAjD,GAA6DX,WAAxF,CAAP;AApBK,KAqBJG,QArBI,CAAP;AAsBD;;AAED,SAAUL,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4Bc,oBAA5B,QAA4BA,YAAYR,MAAxC,QAAwCA,MAAZQ;AAA5BC;AACE,iBAAM,6BAAYD,UAAU,CAACE,SAAvB,4CAAkC,SAAUhB,eAAV,CAA0BK,QAA1B;AAAA;AAAA;AAAA;AAAA;AACtCA,4BAAQ,GAAGK,oBAAoB,CAACL,QAAD,CAA/BA;AACAA,4BAAQ,GAAGD,yBAAyB,CAACC,QAAD,EAAWC,MAAX,CAApCD;AAFsCY;AAItC,2BAAM,kBAAI,uCAAsBZ,QAAtB,CAAJ,CAAN;;AAJsC;AAAA;AAAA;AAAA;AAAA;AAAA,eAAUL,eAAV;AAAlC,aAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASe,SAAUC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAAiB;AACb,iBAAM,gCAAelB,eAAf,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["observeActivity","observeActivitySaga","PASSTHRU_FN","value","patchActivityWithFromRole","activity","userID","from","role","id","patchNullAsUndefined","reduce","name","undefined","directLine","_context2","activity$","_context","_context3"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/observeActivitySaga.js"],"sourcesContent":["import { put } from 'redux-saga/effects';\nimport updateIn from 'simple-update-in';\n\nimport observeEach from './effects/observeEach';\nimport queueIncomingActivity from '../actions/queueIncomingActivity';\nimport whileConnected from './effects/whileConnected';\n\nconst PASSTHRU_FN = value => value;\n\nfunction patchActivityWithFromRole(activity, userID) {\n  // Some activities, such as \"ConversationUpdate\", does not have \"from\" defined.\n  // And although \"role\" is defined in Direct Line spec, it was not sent over the wire.\n  // We normalize the activity here to simplify null-check and logic later.\n\n  // Patch activity.from.role to make sure its either \"bot\", \"user\", or \"channel\"\n  if (!activity.from) {\n    activity = updateIn(activity, ['from', 'role'], () => 'channel');\n  } else if (!activity.from.role) {\n    if (activity.from.id === userID) {\n      activity = updateIn(activity, ['from', 'role'], () => 'user');\n    } else if (activity.from.id) {\n      activity = updateIn(activity, ['from', 'role'], () => 'bot');\n    } else {\n      activity = updateIn(activity, ['from', 'role'], () => 'channel');\n    }\n  }\n\n  return activity;\n}\n\nfunction patchNullAsUndefined(activity) {\n  // These fields are known used in Web Chat and in any cases, they should not be null, but undefined.\n  // The only field omitted is \"value\", as it could be null purposefully.\n\n  return [\n    'attachmentLayout',\n    'attachments',\n    'channelData',\n    'conversation',\n    'entities',\n    'from',\n    'inputHint',\n    'locale',\n    'name',\n    'recipient',\n    'speak',\n    'suggestedActions',\n    'text',\n    'textFormat',\n    'timestamp',\n    'type'\n  ].reduce((activity, name) => {\n    const { [name]: value } = activity;\n\n    return updateIn(activity, [name], typeof value === 'undefined' || value === null ? undefined : PASSTHRU_FN);\n  }, activity);\n}\n\nfunction* observeActivity({ directLine, userID }) {\n  yield observeEach(directLine.activity$, function* observeActivity(activity) {\n    activity = patchNullAsUndefined(activity);\n    activity = patchActivityWithFromRole(activity, userID);\n\n    yield put(queueIncomingActivity(activity));\n  });\n}\n\nexport default function* observeActivitySaga() {\n  yield whileConnected(observeActivity);\n}\n"]},"metadata":{},"sourceType":"script"}