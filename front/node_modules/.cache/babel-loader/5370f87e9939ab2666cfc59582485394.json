{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _activityAltText = _interopRequireDefault(require(\"./Utils/activityAltText\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"./hooks/internal/useStyleToEmotionObject\"));\n\nvar _useRenderMarkdownAsHTML = _interopRequireDefault(require(\"./hooks/useRenderMarkdownAsHTML\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useAvatarForBot = _botframeworkWebchatApi.hooks.useAvatarForBot,\n    useCreateAttachmentForScreenReaderRenderer = _botframeworkWebchatApi.hooks.useCreateAttachmentForScreenReaderRenderer,\n    useDateFormatter = _botframeworkWebchatApi.hooks.useDateFormatter,\n    useGetKeyByActivity = _botframeworkWebchatApi.hooks.useGetKeyByActivity,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer;\nvar ROOT_STYLE = {\n  '&.webchat__screen-reader-activity': {\n    color: 'transparent',\n    height: 1,\n    opacity: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    top: 0,\n    whiteSpace: 'nowrap',\n    width: 1\n  }\n};\nvar ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {\n  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',\n  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',\n  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',\n  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',\n  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'\n};\n\nvar ScreenReaderAttachments = function ScreenReaderAttachments(_ref) {\n  var activity = _ref.activity,\n      renderAttachments = _ref.renderAttachments;\n  var _activity$attachments = activity.attachments,\n      attachments = _activity$attachments === void 0 ? [] : _activity$attachments;\n  var createAttachmentForScreenReaderRenderer = useCreateAttachmentForScreenReaderRenderer();\n  var localizeWithPlural = useLocalizer({\n    plural: true\n  });\n  var attachmentForScreenReaderRenderers = renderAttachments ? attachments.map(function (attachment) {\n    return createAttachmentForScreenReaderRenderer({\n      activity: activity,\n      attachment: attachment\n    });\n  }).filter(function (render) {\n    return render;\n  }) : [];\n  var numGenericAttachments = attachments.length - attachmentForScreenReaderRenderers.length;\n  var numAttachmentsAlt = !!numGenericAttachments && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numGenericAttachments);\n  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, !!attachmentForScreenReaderRenderers.length && /*#__PURE__*/_react.default.createElement(\"ul\", null, attachmentForScreenReaderRenderers.map(function (render, index) {\n    return (\n      /*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      _react.default.createElement(\"li\", {\n        key: index\n      }, render())\n    );\n  })), numAttachmentsAlt && /*#__PURE__*/_react.default.createElement(\"p\", null, numAttachmentsAlt));\n};\n\nScreenReaderAttachments.propTypes = {\n  activity: _propTypes.default.shape({\n    attachments: _propTypes.default.array\n  }).isRequired,\n  renderAttachments: _propTypes.default.bool.isRequired\n}; // When \"renderAttachments\" is false, we will not render the content of attachments.\n// That means, it will only render \"2 attachments\", instead of \"image attachment\".\n// This is used in the visual transcript, where we render \"Press ENTER to interact.\"\n\nvar ScreenReaderActivity = function ScreenReaderActivity(_ref2) {\n  var activity = _ref2.activity,\n      children = _ref2.children,\n      id = _ref2.id,\n      renderAttachments = _ref2.renderAttachments;\n\n  var _useAvatarForBot = useAvatarForBot(),\n      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),\n      botInitials = _useAvatarForBot2[0].initials;\n\n  var formatDate = useDateFormatter();\n  var getKeyByActivity = useGetKeyByActivity();\n  var localize = useLocalizer();\n  var renderMarkdownAsHTML = (0, _useRenderMarkdownAsHTML.default)();\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var textAlt = (0, _react.useMemo)(function () {\n    return (0, _activityAltText.default)(activity, renderMarkdownAsHTML);\n  }, [activity, renderMarkdownAsHTML]);\n  var _activity$channelData = activity.channelData;\n  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;\n  var fallbackText = _activity$channelData['webchat:fallback-text'],\n      _activity$from = activity.from;\n  _activity$from = _activity$from === void 0 ? {} : _activity$from;\n  var role = _activity$from.role,\n      timestamp = activity.timestamp;\n  var fromUser = role === 'user';\n  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')).replace(/[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]{2,}/g, ' ');\n  var timestampAlt = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(timestamp));\n  var labelId = (0, _react.useMemo)(function () {\n    return \"webchat__screen-reader-activity__label-\".concat(getKeyByActivity(activity));\n  }, [activity, getKeyByActivity]);\n  return /*#__PURE__*/_react.default.createElement(\"article\", {\n    \"aria-atomic\": true // Narrator requires the \"aria-labelledby\" attribute, otherwise, it will only read \"aria-roledescription\".\n    // However, iOS VoiceOver and NVDA both ignore the \"aria-labelledby\" and read out the whole content, including timestamp.\n    ,\n    \"aria-labelledby\": labelId,\n    \"aria-roledescription\": \"message\",\n    className: (0, _classnames.default)('webchat__screen-reader-activity', rootClassName) // \"id\" attribute is used by `aria-labelledby`.\n    // eslint-disable-next-line react/forbid-dom-props\n    ,\n    id: id\n  }, /*#__PURE__*/_react.default.createElement(\"p\", {\n    id: labelId\n  }, /*#__PURE__*/_react.default.createElement(\"span\", null, greetingAlt), /*#__PURE__*/_react.default.createElement(\"span\", null, textAlt)), !fallbackText && /*#__PURE__*/_react.default.createElement(ScreenReaderAttachments, {\n    activity: activity,\n    renderAttachments: renderAttachments\n  }), /*#__PURE__*/_react.default.createElement(\"p\", {\n    className: \"webchat__screen-reader-activity__timestamp\"\n  }, timestampAlt), children);\n};\n\nScreenReaderActivity.defaultProps = {\n  children: undefined,\n  id: undefined,\n  renderAttachments: true\n};\nScreenReaderActivity.propTypes = {\n  activity: _propTypes.default.any.isRequired,\n  children: _propTypes.default.any,\n  id: _propTypes.default.string,\n  renderAttachments: _propTypes.default.bool\n};\nvar _default = ScreenReaderActivity;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["useAvatarForBot","hooks","useCreateAttachmentForScreenReaderRenderer","useDateFormatter","useGetKeyByActivity","useLocalizer","ROOT_STYLE","color","height","opacity","overflow","position","top","whiteSpace","width","ACTIVITY_NUM_ATTACHMENTS_ALT_IDS","few","many","one","other","two","ScreenReaderAttachments","activity","renderAttachments","attachments","createAttachmentForScreenReaderRenderer","localizeWithPlural","plural","attachmentForScreenReaderRenderers","map","attachment","filter","render","numGenericAttachments","length","numAttachmentsAlt","_react","index","key","propTypes","PropTypes","shape","array","isRequired","bool","ScreenReaderActivity","children","id","botInitials","initials","formatDate","getKeyByActivity","localize","renderMarkdownAsHTML","rootClassName","textAlt","channelData","_activity$channelData","fallbackText","from","_activity$from","role","timestamp","fromUser","greetingAlt","replace","timestampAlt","labelId","className","defaultProps","undefined","any","string"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/ScreenReaderActivity.js"],"sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [2] }] */\n\nimport { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, useMemo } from 'react';\n\nimport activityAltText from './Utils/activityAltText';\nimport useStyleToEmotionObject from './hooks/internal/useStyleToEmotionObject';\nimport useRenderMarkdownAsHTML from './hooks/useRenderMarkdownAsHTML';\n\nconst {\n  useAvatarForBot,\n  useCreateAttachmentForScreenReaderRenderer,\n  useDateFormatter,\n  useGetKeyByActivity,\n  useLocalizer\n} = hooks;\n\nconst ROOT_STYLE = {\n  '&.webchat__screen-reader-activity': {\n    color: 'transparent',\n    height: 1,\n    opacity: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    top: 0,\n    whiteSpace: 'nowrap',\n    width: 1\n  }\n};\n\nconst ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {\n  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',\n  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',\n  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',\n  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',\n  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'\n};\n\nconst ScreenReaderAttachments = ({ activity, renderAttachments }) => {\n  const { attachments = [] } = activity;\n  const createAttachmentForScreenReaderRenderer = useCreateAttachmentForScreenReaderRenderer();\n  const localizeWithPlural = useLocalizer({ plural: true });\n\n  const attachmentForScreenReaderRenderers = renderAttachments\n    ? attachments\n        .map(attachment => createAttachmentForScreenReaderRenderer({ activity, attachment }))\n        .filter(render => render)\n    : [];\n\n  const numGenericAttachments = attachments.length - attachmentForScreenReaderRenderers.length;\n\n  const numAttachmentsAlt =\n    !!numGenericAttachments && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, numGenericAttachments);\n\n  return (\n    <Fragment>\n      {!!attachmentForScreenReaderRenderers.length && (\n        <ul>\n          {attachmentForScreenReaderRenderers.map((render, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <li key={index}>{render()}</li>\n          ))}\n        </ul>\n      )}\n      {numAttachmentsAlt && <p>{numAttachmentsAlt}</p>}\n    </Fragment>\n  );\n};\n\nScreenReaderAttachments.propTypes = {\n  activity: PropTypes.shape({\n    attachments: PropTypes.array\n  }).isRequired,\n  renderAttachments: PropTypes.bool.isRequired\n};\n\n// When \"renderAttachments\" is false, we will not render the content of attachments.\n// That means, it will only render \"2 attachments\", instead of \"image attachment\".\n// This is used in the visual transcript, where we render \"Press ENTER to interact.\"\nconst ScreenReaderActivity = ({ activity, children, id, renderAttachments }) => {\n  const [{ initials: botInitials }] = useAvatarForBot();\n  const formatDate = useDateFormatter();\n  const getKeyByActivity = useGetKeyByActivity();\n  const localize = useLocalizer();\n  const renderMarkdownAsHTML = useRenderMarkdownAsHTML();\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n  const textAlt = useMemo(() => activityAltText(activity, renderMarkdownAsHTML), [activity, renderMarkdownAsHTML]);\n\n  const { channelData: { 'webchat:fallback-text': fallbackText } = {}, from: { role } = {}, timestamp } = activity;\n\n  const fromUser = role === 'user';\n\n  const greetingAlt = (\n    fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials || '')\n  ).replace(/\\s{2,}/gu, ' ');\n\n  const timestampAlt = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(timestamp));\n  const labelId = useMemo(\n    () => `webchat__screen-reader-activity__label-${getKeyByActivity(activity)}`,\n    [activity, getKeyByActivity]\n  );\n\n  return (\n    <article\n      aria-atomic={true}\n      // Narrator requires the \"aria-labelledby\" attribute, otherwise, it will only read \"aria-roledescription\".\n      // However, iOS VoiceOver and NVDA both ignore the \"aria-labelledby\" and read out the whole content, including timestamp.\n      aria-labelledby={labelId}\n      aria-roledescription=\"message\"\n      className={classNames('webchat__screen-reader-activity', rootClassName)}\n      // \"id\" attribute is used by `aria-labelledby`.\n      // eslint-disable-next-line react/forbid-dom-props\n      id={id}\n    >\n      {/* \"id\" attribute is used by `aria-labelledby`. */}\n      {/* eslint-disable-next-line react/forbid-dom-props */}\n      <p id={labelId}>\n        <span>{greetingAlt}</span>\n        <span>{textAlt}</span>\n      </p>\n      {!fallbackText && <ScreenReaderAttachments activity={activity} renderAttachments={renderAttachments} />}\n      <p className=\"webchat__screen-reader-activity__timestamp\">{timestampAlt}</p>\n      {children}\n    </article>\n  );\n};\n\nScreenReaderActivity.defaultProps = {\n  children: undefined,\n  id: undefined,\n  renderAttachments: true\n};\n\nScreenReaderActivity.propTypes = {\n  activity: PropTypes.any.isRequired,\n  children: PropTypes.any,\n  id: PropTypes.string,\n  renderAttachments: PropTypes.bool\n};\n\nexport default ScreenReaderActivity;\n"]},"metadata":{},"sourceType":"script"}