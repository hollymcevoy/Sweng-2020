{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = playWhiteNoise;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _base64Arraybuffer = require(\"base64-arraybuffer\");\n\nvar _eventAsPromise = _interopRequireDefault(require(\"event-as-promise\"));\n\nvar EMPTY_MP3_BASE64 = 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nfunction subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n  return function () {\n    return target.removeEventListener(name, handler);\n  };\n}\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise(function (resolve, reject) {\n    var promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject); // Newer implementation of \"decodeAudioData\" will return a Promise\n\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise(function (resolve, reject) {\n    var audioContextClosed = new _eventAsPromise.default();\n    var sourceEnded = new _eventAsPromise.default();\n    var unsubscribe = subscribeEvent(audioContext, 'statechange', function (_ref) {\n      var state = _ref.target.state;\n      return state === 'closed' && audioContextClosed.eventListener();\n    });\n\n    try {\n      source.buffer = audioBuffer; // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n\n      source.onended = sourceEnded.eventListener;\n      source.connect(audioContext.destination);\n      source.start(0);\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nfunction playWhiteNoise(_x) {\n  return _playWhiteNoise.apply(this, arguments);\n}\n\nfunction _playWhiteNoise() {\n  _playWhiteNoise = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(audioContext) {\n    var source, audioBuffer;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            source = audioContext.createBufferSource();\n            _context.next = 3;\n            return asyncDecodeAudioData(audioContext, (0, _base64Arraybuffer.decode)(EMPTY_MP3_BASE64));\n\n          case 3:\n            audioBuffer = _context.sent;\n            _context.next = 6;\n            return playDecoded(audioContext, audioBuffer, source);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _playWhiteNoise.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,gBAAgB,GACpB,skBADF;;AAGA,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,OAAtC,EAA+C;AAC7CF,QAAM,CAACG,gBAAPH,CAAwBC,IAAxBD,EAA8BE,OAA9BF;AAEA,SAAO;AAAA,WAAMA,MAAM,CAACI,mBAAPJ,CAA2BC,IAA3BD,EAAiCE,OAAjCF,CAAN;AAAP;AACD;;AAED,SAASK,oBAAT,CAA8BC,YAA9B,EAA4CC,WAA5C,EAAyD;AACvD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,OAAO,GAAGL,YAAY,CAACM,eAAbN,CAA6BC,WAA7BD,EAA0CG,OAA1CH,EAAmDI,MAAnDJ,CAAhB,CADsC,CAGtC;;AACAK,WAAO,IAAI,OAAOA,OAAO,CAACE,IAAf,KAAwB,UAAnCF,IAAiDF,OAAO,CAACE,OAAD,CAAxDA;AAJK,IAAP;AAMD;;AAED,SAASG,WAAT,CAAqBR,YAArB,EAAmCS,WAAnC,EAAgDC,MAAhD,EAAwD;AACtD,SAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMO,kBAAkB,GAAG,IAAIC,uBAAJ,EAA3B;AACA,QAAMC,WAAW,GAAG,IAAID,uBAAJ,EAApB;AACA,QAAME,WAAW,GAAGrB,cAAc,CAChCO,YADgC,EAEhC,aAFgC,EAGhC;AAAA,UAAae,KAAb,QAAGrB,MAAH,CAAaqB,KAAb;AAAA,aAA2BA,KAAK,KAAK,QAAVA,IAAsBJ,kBAAkB,CAACK,aAAnBL,EAAjD;AAHgC,MAAlC;;AAMA,QAAI;AACFD,YAAM,CAACO,MAAPP,GAAgBD,WAAhBC,CADE,CAEF;;AACAA,YAAM,CAACQ,OAAPR,GAAiBG,WAAW,CAACG,aAA7BN;AAEAA,YAAM,CAACS,OAAPT,CAAeV,YAAY,CAACoB,WAA5BV;AACAA,YAAM,CAACW,KAAPX,CAAa,CAAbA;AAEAR,aAAO,CAACoB,IAARpB,CAAa,CAACS,kBAAkB,CAACY,QAAnBZ,EAAD,EAAgCE,WAAW,CAACU,QAAZV,EAAhC,CAAbX,EAAsEK,IAAtEL,CAA2EC,OAA3ED;AARF,MASE,OAAOsB,GAAP,EAAY;AACZpB,YAAM,CAACoB,GAAD,CAANpB;AAVF,cAWU;AACRU,iBAAW;AACZ;AAtBI,IAAP;AAwBD;;SAE6BW,e;;;;;4FAAf,iBAA8BzB,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACPU,kBADO,GACEV,YAAY,CAAC0B,kBAAb1B,EAATU;AADOiB;AAAA,mBAEa5B,oBAAoB,CAACC,YAAD,EAAe,+BAAOR,gBAAP,CAAf,CAFjC;;AAAA;AAEPiB,uBAFO,gBAEPA;AAFOkB;AAAA,mBAIPnB,WAAW,CAACR,YAAD,EAAeS,WAAf,EAA4BC,MAA5B,CAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["EMPTY_MP3_BASE64","subscribeEvent","target","name","handler","addEventListener","removeEventListener","asyncDecodeAudioData","audioContext","arrayBuffer","Promise","resolve","reject","promise","decodeAudioData","then","playDecoded","audioBuffer","source","audioContextClosed","EventAsPromise","sourceEnded","unsubscribe","state","eventListener","buffer","onended","connect","destination","start","race","upcoming","err","playWhiteNoise","createBufferSource","_context"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-directlinespeech-sdk/lib/src/playWhiteNoise.js"],"sourcesContent":["import { decode } from 'base64-arraybuffer';\nimport EventAsPromise from 'event-as-promise';\n\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nfunction subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n\n  return () => target.removeEventListener(name, handler);\n}\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise((resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(\n      audioContext,\n      'statechange',\n      ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener()\n    );\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nexport default async function playWhiteNoise(audioContext) {\n  const source = audioContext.createBufferSource();\n  const audioBuffer = await asyncDecodeAudioData(audioContext, decode(EMPTY_MP3_BASE64));\n\n  await playDecoded(audioContext, audioBuffer, source);\n}\n"]},"metadata":{},"sourceType":"script"}