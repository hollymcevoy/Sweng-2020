{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime2 = require(\"@babel/runtime/regenerator\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = postActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _observeOnce = _interopRequireDefault(require(\"./effects/observeOnce\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _clockSkewAdjustment = _interopRequireDefault(require(\"../selectors/clockSkewAdjustment\"));\n\nvar _combineSelectors = _interopRequireDefault(require(\"../selectors/combineSelectors\"));\n\nvar _dateToLocaleISOString = _interopRequireDefault(require(\"../utils/dateToLocaleISOString\"));\n\nvar _language = _interopRequireDefault(require(\"../selectors/language\"));\n\nvar _sendTimeout = _interopRequireDefault(require(\"../selectors/sendTimeout\"));\n\nvar _deleteKey = _interopRequireDefault(require(\"../utils/deleteKey\"));\n\nvar _sleep = _interopRequireDefault(require(\"../utils/sleep\"));\n\nvar _uniqueID = _interopRequireDefault(require(\"../utils/uniqueID\"));\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _incomingActivity = require(\"../actions/incomingActivity\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime2.mark(postActivity),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(postActivitySaga);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction getTimestamp(date) {\n  var clockSkewAdjustment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // \"+date\" will return epoch time in milliseconds, same as Date.getTime().\n\n  return new Date(+date + clockSkewAdjustment).toISOString();\n}\n\nfunction postActivity(directLine, userID, username, numActivitiesPosted, _ref) {\n  var method, activity, _yield$select, clockSkewAdjustment, locale, _activity, attachments, clientActivityID, now, localTimeZone, meta, echoBackCall, sendTimeout, _yield$race, echoBack;\n\n  return _regenerator[\"default\"].wrap(function postActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          method = _ref.meta.method, activity = _ref.payload.activity;\n          _context2.next = 3;\n          return (0, _effects.select)((0, _combineSelectors[\"default\"])({\n            clockSkewAdjustment: _clockSkewAdjustment[\"default\"],\n            locale: _language[\"default\"]\n          }));\n\n        case 3:\n          _yield$select = _context2.sent;\n          clockSkewAdjustment = _yield$select.clockSkewAdjustment;\n          locale = _yield$select.locale;\n          _activity = activity, attachments = _activity.attachments;\n          clientActivityID = (0, _uniqueID[\"default\"])();\n          now = new Date();\n          localTimeZone = typeof window.Intl === 'undefined' ? undefined : new Intl.DateTimeFormat().resolvedOptions().timeZone;\n          activity = _objectSpread(_objectSpread({}, (0, _deleteKey[\"default\"])(activity, 'id')), {}, {\n            attachments: attachments && attachments.map(function (_ref2) {\n              var contentType = _ref2.contentType,\n                  contentUrl = _ref2.contentUrl,\n                  name = _ref2.name,\n                  thumbnailUrl = _ref2.thumbnailUrl;\n              return {\n                contentType: contentType,\n                contentUrl: contentUrl,\n                name: name,\n                thumbnailUrl: thumbnailUrl\n              };\n            }),\n            channelData: _objectSpread(_objectSpread({}, (0, _deleteKey[\"default\"])(activity.channelData, 'state')), {}, {\n              clientActivityID: clientActivityID,\n              // This is unskewed local timestamp for estimating clock skew.\n              clientTimestamp: getTimestamp(now)\n            }),\n            channelId: 'webchat',\n            from: {\n              id: userID,\n              name: username,\n              role: 'user'\n            },\n            locale: locale,\n            localTimestamp: (0, _dateToLocaleISOString[\"default\"])(now),\n            localTimezone: localTimeZone,\n            // This timestamp will be replaced by Direct Line Channel in echoback.\n            // We are temporarily adding this timestamp for sorting.\n            timestamp: getTimestamp(now, clockSkewAdjustment)\n          });\n\n          if (!numActivitiesPosted) {\n            activity.entities = [].concat((0, _toConsumableArray2[\"default\"])(activity.entities || []), [{\n              // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them\n              //       We need to understand why we need to send these, and only send capabilities the client have\n              requiresBotState: true,\n              supportsListening: true,\n              supportsTts: true,\n              type: 'ClientCapabilities'\n            }]);\n          }\n\n          meta = {\n            clientActivityID: clientActivityID,\n            method: method\n          };\n          _context2.next = 15;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_PENDING,\n            meta: meta,\n            payload: {\n              activity: activity\n            }\n          });\n\n        case 15:\n          _context2.prev = 15; // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed\n          //         So, we setup expectation first, then postActivity afterward\n\n          echoBackCall = (0, _effects.call)( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n            var _yield$take, _activity2, _activity2$channelDat, channelData, id;\n\n            return _regenerator[\"default\"].wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);\n\n                  case 2:\n                    _yield$take = _context.sent;\n                    _activity2 = _yield$take.payload.activity;\n                    _activity2$channelDat = _activity2.channelData, channelData = _activity2$channelDat === void 0 ? {} : _activity2$channelDat, id = _activity2.id;\n\n                    if (!(channelData.clientActivityID === clientActivityID && id)) {\n                      _context.next = 7;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", _activity2);\n\n                  case 7:\n                    _context.next = 0;\n                    break;\n\n                  case 9:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })); // Timeout could be due to either:\n          // - Post activity call may take too long time to complete\n          //   - Direct Line service only respond on HTTP after bot respond to Direct Line\n          // - Activity may take too long time to echo back\n\n          _context2.next = 19;\n          return (0, _effects.select)(_sendTimeout[\"default\"]);\n\n        case 19:\n          sendTimeout = _context2.sent;\n          _context2.next = 22;\n          return (0, _effects.race)({\n            send: (0, _effects.all)({\n              echoBack: echoBackCall,\n              postActivity: (0, _observeOnce[\"default\"])(directLine.postActivity(activity))\n            }),\n            timeout: (0, _effects.call)(function () {\n              return (0, _sleep[\"default\"])(sendTimeout).then(function () {\n                return Promise.reject(new Error('timeout'));\n              });\n            })\n          });\n\n        case 22:\n          _yield$race = _context2.sent;\n          echoBack = _yield$race.send.echoBack;\n          _context2.next = 26;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_FULFILLED,\n            meta: meta,\n            payload: {\n              activity: echoBack\n            }\n          });\n\n        case 26:\n          _context2.next = 33;\n          break;\n\n        case 28:\n          _context2.prev = 28;\n          _context2.t0 = _context2[\"catch\"](15);\n          console.error('botframework-webchat: Failed to post activity to chat adapter.', _context2.t0);\n          _context2.next = 33;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_REJECTED,\n            error: true,\n            meta: meta,\n            payload: _context2.t0\n          });\n\n        case 33:\n          _context2.prev = 33;\n          _context2.next = 36;\n          return (0, _effects.cancelled)();\n\n        case 36:\n          if (!_context2.sent) {\n            _context2.next = 39;\n            break;\n          }\n\n          _context2.next = 39;\n          return (0, _effects.put)({\n            type: _postActivity.POST_ACTIVITY_REJECTED,\n            error: true,\n            meta: meta,\n            payload: new Error('cancelled')\n          });\n\n        case 39:\n          return _context2.finish(33);\n\n        case 40:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[15, 28, 33, 40]]);\n}\n\nfunction postActivitySaga() {\n  return _regenerator[\"default\"].wrap(function postActivitySaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return (0, _whileConnected[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function postActivityWhileConnected(_ref3) {\n            var directLine, userID, username, numActivitiesPosted;\n            return _regenerator[\"default\"].wrap(function postActivityWhileConnected$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    directLine = _ref3.directLine, userID = _ref3.userID, username = _ref3.username;\n                    numActivitiesPosted = 0;\n                    _context4.next = 4;\n                    return (0, _effects.takeEvery)(_postActivity.POST_ACTIVITY, /*#__PURE__*/_regenerator[\"default\"].mark(function postActivityWrapper(action) {\n                      return _regenerator[\"default\"].wrap(function postActivityWrapper$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              return _context3.delegateYield(postActivity(directLine, userID, username, numActivitiesPosted++, action), \"t0\", 1);\n\n                            case 1:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, postActivityWrapper);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, postActivityWhileConnected);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"mappings":"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","names":["postActivity","postActivitySaga","getTimestamp","date","clockSkewAdjustment","Date","toISOString","directLine","userID","username","numActivitiesPosted","method","meta","activity","payload","_context2","clockSkewAdjustmentSelector","locale","languageSelector","_yield$select","_activity","attachments","clientActivityID","now","localTimeZone","window","Intl","undefined","DateTimeFormat","resolvedOptions","timeZone","map","contentType","contentUrl","name","thumbnailUrl","channelData","clientTimestamp","channelId","from","id","role","localTimestamp","localTimezone","timestamp","entities","requiresBotState","supportsListening","supportsTts","type","POST_ACTIVITY_PENDING","echoBackCall","_context","INCOMING_ACTIVITY","_yield$take","_activity2$channelDat","sendTimeoutSelector","sendTimeout","send","echoBack","timeout","then","Promise","reject","Error","_yield$race","POST_ACTIVITY_FULFILLED","console","error","POST_ACTIVITY_REJECTED","_context5","postActivityWhileConnected","_context4","POST_ACTIVITY","postActivityWrapper","action"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/postActivitySaga.js"],"sourcesContent":["import { all, call, cancelled, put, race, select, take, takeEvery } from 'redux-saga/effects';\n\nimport observeOnce from './effects/observeOnce';\nimport whileConnected from './effects/whileConnected';\n\nimport clockSkewAdjustmentSelector from '../selectors/clockSkewAdjustment';\nimport combineSelectors from '../selectors/combineSelectors';\nimport dateToLocaleISOString from '../utils/dateToLocaleISOString';\nimport languageSelector from '../selectors/language';\nimport sendTimeoutSelector from '../selectors/sendTimeout';\n\nimport deleteKey from '../utils/deleteKey';\nimport sleep from '../utils/sleep';\nimport uniqueID from '../utils/uniqueID';\n\nimport {\n  POST_ACTIVITY,\n  POST_ACTIVITY_FULFILLED,\n  POST_ACTIVITY_PENDING,\n  POST_ACTIVITY_REJECTED\n} from '../actions/postActivity';\n\nimport { INCOMING_ACTIVITY } from '../actions/incomingActivity';\n\nfunction getTimestamp(date, clockSkewAdjustment = 0) {\n  // \"+date\" will return epoch time in milliseconds, same as Date.getTime().\n  return new Date(+date + clockSkewAdjustment).toISOString();\n}\n\nfunction* postActivity(directLine, userID, username, numActivitiesPosted, { meta: { method }, payload: { activity } }) {\n  const { clockSkewAdjustment, locale } = yield select(\n    combineSelectors({ clockSkewAdjustment: clockSkewAdjustmentSelector, locale: languageSelector })\n  );\n  const { attachments } = activity;\n  const clientActivityID = uniqueID();\n  const now = new Date();\n  const localTimeZone =\n    typeof window.Intl === 'undefined' ? undefined : new Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  activity = {\n    ...deleteKey(activity, 'id'),\n    attachments:\n      attachments &&\n      attachments.map(({ contentType, contentUrl, name, thumbnailUrl }) => ({\n        contentType,\n        contentUrl,\n        name,\n        thumbnailUrl\n      })),\n    channelData: {\n      ...deleteKey(activity.channelData, 'state'),\n      clientActivityID,\n      // This is unskewed local timestamp for estimating clock skew.\n      clientTimestamp: getTimestamp(now)\n    },\n    channelId: 'webchat',\n    from: {\n      id: userID,\n      name: username,\n      role: 'user'\n    },\n    locale,\n    localTimestamp: dateToLocaleISOString(now),\n    localTimezone: localTimeZone,\n    // This timestamp will be replaced by Direct Line Channel in echoback.\n    // We are temporarily adding this timestamp for sorting.\n    timestamp: getTimestamp(now, clockSkewAdjustment)\n  };\n\n  if (!numActivitiesPosted) {\n    activity.entities = [\n      ...(activity.entities || []),\n      {\n        // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them\n        //       We need to understand why we need to send these, and only send capabilities the client have\n        requiresBotState: true,\n        supportsListening: true,\n        supportsTts: true,\n        type: 'ClientCapabilities'\n      }\n    ];\n  }\n\n  const meta = { clientActivityID, method };\n\n  yield put({ type: POST_ACTIVITY_PENDING, meta, payload: { activity } });\n\n  try {\n    // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed\n    //         So, we setup expectation first, then postActivity afterward\n\n    const echoBackCall = call(function* () {\n      for (;;) {\n        const {\n          payload: { activity }\n        } = yield take(INCOMING_ACTIVITY);\n        const { channelData = {}, id } = activity;\n\n        if (channelData.clientActivityID === clientActivityID && id) {\n          return activity;\n        }\n      }\n    });\n\n    // Timeout could be due to either:\n    // - Post activity call may take too long time to complete\n    //   - Direct Line service only respond on HTTP after bot respond to Direct Line\n    // - Activity may take too long time to echo back\n\n    const sendTimeout = yield select(sendTimeoutSelector);\n\n    const {\n      send: { echoBack }\n    } = yield race({\n      send: all({\n        echoBack: echoBackCall,\n        postActivity: observeOnce(directLine.postActivity(activity))\n      }),\n      timeout: call(() => sleep(sendTimeout).then(() => Promise.reject(new Error('timeout'))))\n    });\n\n    yield put({ type: POST_ACTIVITY_FULFILLED, meta, payload: { activity: echoBack } });\n  } catch (err) {\n    console.error('botframework-webchat: Failed to post activity to chat adapter.', err);\n\n    yield put({ type: POST_ACTIVITY_REJECTED, error: true, meta, payload: err });\n  } finally {\n    if (yield cancelled()) {\n      yield put({ type: POST_ACTIVITY_REJECTED, error: true, meta, payload: new Error('cancelled') });\n    }\n  }\n}\n\nexport default function* postActivitySaga() {\n  yield whileConnected(function* postActivityWhileConnected({ directLine, userID, username }) {\n    let numActivitiesPosted = 0;\n\n    yield takeEvery(POST_ACTIVITY, function* postActivityWrapper(action) {\n      yield* postActivity(directLine, userID, username, numActivitiesPosted++, action);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}