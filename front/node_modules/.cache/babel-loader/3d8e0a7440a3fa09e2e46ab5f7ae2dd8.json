{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SynthesisRequest = exports.SpeechSynthesizer = void 0;\n\nvar Exports_1 = require(\"../common.speech/Exports\");\n\nvar Exports_2 = require(\"../common/Exports\");\n\nvar AudioFileWriter_1 = require(\"./Audio/AudioFileWriter\");\n\nvar AudioOutputFormat_1 = require(\"./Audio/AudioOutputFormat\");\n\nvar AudioOutputStream_1 = require(\"./Audio/AudioOutputStream\");\n\nvar Contracts_1 = require(\"./Contracts\");\n\nvar Exports_3 = require(\"./Exports\");\n/**\n * Defines the class SpeechSynthesizer for text to speech.\n * Updated in version 1.16.0\n * @class SpeechSynthesizer\n */\n\n\nvar SpeechSynthesizer =\n/** @class */\nfunction () {\n  /**\n   * SpeechSynthesizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\n   */\n  function SpeechSynthesizer(speechConfig, audioConfig) {\n    var speechConfigImpl = speechConfig;\n    Contracts_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n    if (audioConfig !== null) {\n      if (audioConfig === undefined) {\n        this.audioConfig = typeof window === \"undefined\" ? undefined : Exports_3.AudioConfig.fromDefaultSpeakerOutput();\n      } else {\n        this.audioConfig = audioConfig;\n      }\n    }\n\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.privDisposed = false;\n    this.privSynthesizing = false;\n    this.privConnectionFactory = new Exports_1.SpeechSynthesisConnectionFactory();\n    this.synthesisRequestQueue = new Exports_2.Queue();\n    this.implCommonSynthesizeSetup();\n  }\n\n  Object.defineProperty(SpeechSynthesizer.prototype, \"authorizationToken\", {\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeechSynthesizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get: function () {\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token);\n    },\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeechSynthesizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set: function (token) {\n      Contracts_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n      this.properties.setProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, token);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechSynthesizer.prototype, \"properties\", {\n    /**\n     * The collection of properties and their values defined for this SpeechSynthesizer.\n     * @member SpeechSynthesizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\n     */\n    get: function () {\n      return this.privProperties;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SpeechSynthesizer.prototype, \"autoDetectSourceLanguage\", {\n    /**\n     * Indicates if auto detect source language is enabled\n     * @member SpeechSynthesizer.prototype.properties\n     * @function\n     * @public\n     * @returns {boolean} if auto detect source language is enabled\n     */\n    get: function () {\n      return this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === Exports_1.AutoDetectSourceLanguagesOpenRangeOptionName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * SpeechSynthesizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\n   */\n\n  SpeechSynthesizer.FromConfig = function (speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    var speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    return new SpeechSynthesizer(speechConfig, audioConfig);\n  };\n\n  SpeechSynthesizer.prototype.buildSsml = function (text) {\n    var _a;\n\n    var languageToDefaultVoice = (_a = {}, _a[\"ar-EG\"] = \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\", _a[\"ar-SA\"] = \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\", _a[\"bg-BG\"] = \"Microsoft Server Speech Text to Speech Voice (bg-BG, Ivan)\", _a[\"ca-ES\"] = \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\", _a[\"cs-CZ\"] = \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Jakub)\", _a[\"da-DK\"] = \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\", _a[\"de-AT\"] = \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\", _a[\"de-CH\"] = \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\", _a[\"de-DE\"] = \"Microsoft Server Speech Text to Speech Voice (de-DE, HeddaRUS)\", _a[\"el-GR\"] = \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\", _a[\"en-AU\"] = \"Microsoft Server Speech Text to Speech Voice (en-AU, HayleyRUS)\", _a[\"en-CA\"] = \"Microsoft Server Speech Text to Speech Voice (en-CA, HeatherRUS)\", _a[\"en-GB\"] = \"Microsoft Server Speech Text to Speech Voice (en-GB, HazelRUS)\", _a[\"en-IE\"] = \"Microsoft Server Speech Text to Speech Voice (en-IE, Sean)\", _a[\"en-IN\"] = \"Microsoft Server Speech Text to Speech Voice (en-IN, PriyaRUS)\", _a[\"en-US\"] = \"Microsoft Server Speech Text to Speech Voice (en-US, AriaRUS)\", _a[\"es-ES\"] = \"Microsoft Server Speech Text to Speech Voice (es-ES, HelenaRUS)\", _a[\"es-MX\"] = \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\", _a[\"fi-FI\"] = \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\", _a[\"fr-CA\"] = \"Microsoft Server Speech Text to Speech Voice (fr-CA, HarmonieRUS)\", _a[\"fr-CH\"] = \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\", _a[\"fr-FR\"] = \"Microsoft Server Speech Text to Speech Voice (fr-FR, HortenseRUS)\", _a[\"he-IL\"] = \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\", _a[\"hi-IN\"] = \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana)\", _a[\"hr-HR\"] = \"Microsoft Server Speech Text to Speech Voice (hr-HR, Matej)\", _a[\"hu-HU\"] = \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\", _a[\"id-ID\"] = \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\", _a[\"it-IT\"] = \"Microsoft Server Speech Text to Speech Voice (it-IT, LuciaRUS)\", _a[\"ja-JP\"] = \"Microsoft Server Speech Text to Speech Voice (ja-JP, HarukaRUS)\", _a[\"ko-KR\"] = \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\", _a[\"ms-MY\"] = \"Microsoft Server Speech Text to Speech Voice (ms-MY, Rizwan)\", _a[\"nb-NO\"] = \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\", _a[\"nl-NL\"] = \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\", _a[\"pl-PL\"] = \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\", _a[\"pt-BR\"] = \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\", _a[\"pt-PT\"] = \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\", _a[\"ro-RO\"] = \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\", _a[\"ru-RU\"] = \"Microsoft Server Speech Text to Speech Voice (ru-RU, EkaterinaRUS)\", _a[\"sk-SK\"] = \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\", _a[\"sl-SI\"] = \"Microsoft Server Speech Text to Speech Voice (sl-SI, Lado)\", _a[\"sv-SE\"] = \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\", _a[\"ta-IN\"] = \"Microsoft Server Speech Text to Speech Voice (ta-IN, Valluvar)\", _a[\"te-IN\"] = \"Microsoft Server Speech Text to Speech Voice (te-IN, Chitra)\", _a[\"th-TH\"] = \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\", _a[\"tr-TR\"] = \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\", _a[\"vi-VN\"] = \"Microsoft Server Speech Text to Speech Voice (vi-VN, An)\", _a[\"zh-CN\"] = \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\", _a[\"zh-HK\"] = \"Microsoft Server Speech Text to Speech Voice (zh-HK, TracyRUS)\", _a[\"zh-TW\"] = \"Microsoft Server Speech Text to Speech Voice (zh-TW, HanHanRUS)\", _a);\n    var language = this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\n    var voice = this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_SynthVoice, \"\");\n    var ssml = SpeechSynthesizer.XMLEncode(text);\n\n    if (this.autoDetectSourceLanguage) {\n      language = \"en-US\";\n    } else {\n      voice = voice || languageToDefaultVoice[language];\n    }\n\n    if (voice) {\n      ssml = \"<voice name='\" + voice + \"'>\" + ssml + \"</voice>\";\n    }\n\n    ssml = \"<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='\" + language + \"'>\" + ssml + \"</speak>\";\n    return ssml;\n  };\n  /**\n   * Executes speech synthesis on plain text.\n   * The task returns the synthesis result.\n   * @member SpeechSynthesizer.prototype.speakTextAsync\n   * @function\n   * @public\n   * @param text - Text to be synthesized.\n   * @param cb - Callback that received the SpeechSynthesisResult.\n   * @param err - Callback invoked in case of an error.\n   * @param stream - AudioOutputStream to receive the synthesized audio.\n   */\n\n\n  SpeechSynthesizer.prototype.speakTextAsync = function (text, cb, err, stream) {\n    this.speakImpl(text, false, cb, err, stream);\n  };\n  /**\n   * Executes speech synthesis on SSML.\n   * The task returns the synthesis result.\n   * @member SpeechSynthesizer.prototype.speakSsmlAsync\n   * @function\n   * @public\n   * @param ssml - SSML to be synthesized.\n   * @param cb - Callback that received the SpeechSynthesisResult.\n   * @param err - Callback invoked in case of an error.\n   * @param stream - AudioOutputStream to receive the synthesized audio.\n   */\n\n\n  SpeechSynthesizer.prototype.speakSsmlAsync = function (ssml, cb, err, stream) {\n    this.speakImpl(ssml, true, cb, err, stream);\n  };\n  /**\n   * Dispose of associated resources.\n   * @member SpeechSynthesizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  SpeechSynthesizer.prototype.close = function (cb, err) {\n    Contracts_1.Contracts.throwIfDisposed(this.privDisposed);\n    Exports_2.marshalPromiseToCallbacks(this.dispose(true), cb, err);\n  };\n\n  Object.defineProperty(SpeechSynthesizer.prototype, \"internalData\", {\n    /**\n     * @Internal\n     * Do not use externally, object returned will change without warning or notice.\n     */\n    get: function () {\n      return this.privAdapter;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * This method performs cleanup of resources.\n   * The Boolean parameter disposing indicates whether the method is called\n   * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n   * Derived classes should override this method to dispose resource if needed.\n   * @member SpeechSynthesizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - Flag to request disposal.\n   */\n\n  SpeechSynthesizer.prototype.dispose = function (disposing) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.privDisposed) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!disposing) return [3\n            /*break*/\n            , 2];\n            if (!this.privAdapter) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.privAdapter.dispose()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.privDisposed = true;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; //\n  // ################################################################################################################\n  // IMPLEMENTATION.\n  // Move to independent class\n  // ################################################################################################################\n  //\n\n\n  SpeechSynthesizer.prototype.createSynthesizerConfig = function (speechConfig) {\n    return new Exports_1.SynthesizerConfig(speechConfig, this.privProperties);\n  }; // Creates the synthesis adapter\n\n\n  SpeechSynthesizer.prototype.createSynthesisAdapter = function (authentication, connectionFactory, audioConfig, synthesizerConfig) {\n    return new Exports_1.SynthesisAdapterBase(authentication, connectionFactory, synthesizerConfig, this, this.audioConfig);\n  };\n\n  SpeechSynthesizer.prototype.implCommonSynthesizeSetup = function () {\n    var _this = this;\n\n    var osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    var osName = \"unknown\";\n    var osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    var synthesizerConfig = this.createSynthesizerConfig(new Exports_1.SpeechServiceConfig(new Exports_1.Context(new Exports_1.OS(osPlatform, osName, osVersion))));\n    var subscriptionKey = this.privProperties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_Key, undefined);\n    var authentication = subscriptionKey && subscriptionKey !== \"\" ? new Exports_1.CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new Exports_1.CognitiveTokenAuthentication(function (authFetchEventId) {\n      var authorizationToken = _this.privProperties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, undefined);\n\n      return Promise.resolve(authorizationToken);\n    }, function (authFetchEventId) {\n      var authorizationToken = _this.privProperties.getProperty(Exports_3.PropertyId.SpeechServiceAuthorization_Token, undefined);\n\n      return Promise.resolve(authorizationToken);\n    });\n    this.privAdapter = this.createSynthesisAdapter(authentication, this.privConnectionFactory, this.audioConfig, synthesizerConfig);\n    this.privAdapter.audioOutputFormat = AudioOutputFormat_1.AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(Exports_3.SpeechSynthesisOutputFormat[this.properties.getProperty(Exports_3.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]);\n  };\n\n  SpeechSynthesizer.prototype.speakImpl = function (text, IsSsml, cb, err, dataStream) {\n    var _this = this;\n\n    try {\n      Contracts_1.Contracts.throwIfDisposed(this.privDisposed);\n      var requestId = Exports_2.createNoDashGuid();\n      var audioDestination = void 0;\n\n      if (dataStream instanceof Exports_3.PushAudioOutputStreamCallback) {\n        audioDestination = new AudioOutputStream_1.PushAudioOutputStreamImpl(dataStream);\n      } else if (dataStream instanceof Exports_3.PullAudioOutputStream) {\n        audioDestination = dataStream;\n      } else if (dataStream !== undefined) {\n        audioDestination = new AudioFileWriter_1.AudioFileWriter(dataStream);\n      } else {\n        audioDestination = undefined;\n      }\n\n      this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, function (e) {\n        _this.privSynthesizing = false;\n\n        if (!!cb) {\n          try {\n            cb(e);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n        }\n\n        cb = undefined;\n        /* tslint:disable:no-empty */\n\n        _this.adapterSpeak().catch(function () {});\n      }, function (e) {\n        if (!!err) {\n          err(e);\n        }\n      }, audioDestination));\n      /* tslint:disable:no-empty */\n\n      this.adapterSpeak().catch(function () {});\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          var typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      } // Destroy the synthesizer.\n\n      /* tslint:disable:no-empty */\n\n\n      this.dispose(true).catch(function () {});\n    }\n  };\n\n  SpeechSynthesizer.prototype.adapterSpeak = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var request;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!this.privDisposed && !this.privSynthesizing)) return [3\n            /*break*/\n            , 2];\n            this.privSynthesizing = true;\n            return [4\n            /*yield*/\n            , this.synthesisRequestQueue.dequeue()];\n\n          case 1:\n            request = _a.sent();\n            return [2\n            /*return*/\n            , this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream)];\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SpeechSynthesizer.XMLEncode = function (text) {\n    return text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n  };\n\n  return SpeechSynthesizer;\n}();\n\nexports.SpeechSynthesizer = SpeechSynthesizer; // tslint:disable-next-line:max-classes-per-file\n\nvar SynthesisRequest =\n/** @class */\nfunction () {\n  function SynthesisRequest(requestId, text, isSSML, cb, err, dataStream) {\n    this.requestId = requestId;\n    this.text = text;\n    this.isSSML = isSSML;\n    this.cb = cb;\n    this.err = err;\n    this.dataStream = dataStream;\n  }\n\n  return SynthesisRequest;\n}();\n\nexports.SynthesisRequest = SynthesisRequest;","map":{"version":3,"mappings":"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","names":["speechConfig","audioConfig","speechConfigImpl","Contracts_1","throwIfNull","undefined","window","Exports_3","fromDefaultSpeakerOutput","privProperties","properties","clone","privDisposed","privSynthesizing","privConnectionFactory","Exports_1","synthesisRequestQueue","Exports_2","implCommonSynthesizeSetup","Object","SpeechSynthesizer","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","SpeechServiceConnection_AutoDetectSourceLanguages","autoDetectSourceLanguageConfig","mergeTo","text","languageToDefaultVoice","_a","language","SpeechServiceConnection_SynthLanguage","voice","SpeechServiceConnection_SynthVoice","ssml","XMLEncode","autoDetectSourceLanguage","cb","err","stream","speakImpl","throwIfDisposed","dispose","privAdapter","disposing","authentication","connectionFactory","synthesizerConfig","osPlatform","osName","osVersion","navigator","platform","userAgent","appVersion","createSynthesizerConfig","subscriptionKey","SpeechServiceConnection_Key","authFetchEventId","authorizationToken","_this","Promise","resolve","createSynthesisAdapter","audioOutputFormat","AudioOutputFormat_1","fromSpeechSynthesisOutputFormat","SpeechServiceConnection_SynthOutputFormat","IsSsml","dataStream","requestId","audioDestination","AudioOutputStream_1","AudioFileWriter_1","enqueue","SynthesisRequest","e","adapterSpeak","catch","error","Error","typedError","name","message","dequeue","request","Speak","isSSML","replace","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks,\r\n    Queue\r\n} from \"../common/Exports\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer {\r\n    protected audioConfig: AudioConfig;\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privProperties: PropertyCollection;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechSynthesizer.\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    private privDisposed: boolean;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n    private privSynthesizing: boolean;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"ar-EG\"]: \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\r\n            [\"ar-SA\"]: \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\r\n            [\"bg-BG\"]: \"Microsoft Server Speech Text to Speech Voice (bg-BG, Ivan)\",\r\n            [\"ca-ES\"]: \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\r\n            [\"cs-CZ\"]: \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Jakub)\",\r\n            [\"da-DK\"]: \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\r\n            [\"de-AT\"]: \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\r\n            [\"de-CH\"]: \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\r\n            [\"de-DE\"]: \"Microsoft Server Speech Text to Speech Voice (de-DE, HeddaRUS)\",\r\n            [\"el-GR\"]: \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\r\n            [\"en-AU\"]: \"Microsoft Server Speech Text to Speech Voice (en-AU, HayleyRUS)\",\r\n            [\"en-CA\"]: \"Microsoft Server Speech Text to Speech Voice (en-CA, HeatherRUS)\",\r\n            [\"en-GB\"]: \"Microsoft Server Speech Text to Speech Voice (en-GB, HazelRUS)\",\r\n            [\"en-IE\"]: \"Microsoft Server Speech Text to Speech Voice (en-IE, Sean)\",\r\n            [\"en-IN\"]: \"Microsoft Server Speech Text to Speech Voice (en-IN, PriyaRUS)\",\r\n            [\"en-US\"]: \"Microsoft Server Speech Text to Speech Voice (en-US, AriaRUS)\",\r\n            [\"es-ES\"]: \"Microsoft Server Speech Text to Speech Voice (es-ES, HelenaRUS)\",\r\n            [\"es-MX\"]: \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\r\n            [\"fi-FI\"]: \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\r\n            [\"fr-CA\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CA, HarmonieRUS)\",\r\n            [\"fr-CH\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\r\n            [\"fr-FR\"]: \"Microsoft Server Speech Text to Speech Voice (fr-FR, HortenseRUS)\",\r\n            [\"he-IL\"]: \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\r\n            [\"hi-IN\"]: \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana)\",\r\n            [\"hr-HR\"]: \"Microsoft Server Speech Text to Speech Voice (hr-HR, Matej)\",\r\n            [\"hu-HU\"]: \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\r\n            [\"id-ID\"]: \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\r\n            [\"it-IT\"]: \"Microsoft Server Speech Text to Speech Voice (it-IT, LuciaRUS)\",\r\n            [\"ja-JP\"]: \"Microsoft Server Speech Text to Speech Voice (ja-JP, HarukaRUS)\",\r\n            [\"ko-KR\"]: \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\r\n            [\"ms-MY\"]: \"Microsoft Server Speech Text to Speech Voice (ms-MY, Rizwan)\",\r\n            [\"nb-NO\"]: \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\r\n            [\"nl-NL\"]: \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\r\n            [\"pl-PL\"]: \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\r\n            [\"pt-BR\"]: \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\r\n            [\"pt-PT\"]: \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\r\n            [\"ro-RO\"]: \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\r\n            [\"ru-RU\"]: \"Microsoft Server Speech Text to Speech Voice (ru-RU, EkaterinaRUS)\",\r\n            [\"sk-SK\"]: \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\r\n            [\"sl-SI\"]: \"Microsoft Server Speech Text to Speech Voice (sl-SI, Lado)\",\r\n            [\"sv-SE\"]: \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\r\n            [\"ta-IN\"]: \"Microsoft Server Speech Text to Speech Voice (ta-IN, Valluvar)\",\r\n            [\"te-IN\"]: \"Microsoft Server Speech Text to Speech Voice (te-IN, Chitra)\",\r\n            [\"th-TH\"]: \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\r\n            [\"tr-TR\"]: \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\r\n            [\"vi-VN\"]: \"Microsoft Server Speech Text to Speech Voice (vi-VN, An)\",\r\n            [\"zh-CN\"]: \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\r\n            [\"zh-HK\"]: \"Microsoft Server Speech Text to Speech Voice (zh-HK, TracyRUS)\",\r\n            [\"zh-TW\"]: \"Microsoft Server Speech Text to Speech Voice (zh-TW, HanHanRUS)\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = SpeechSynthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member SpeechSynthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SynthesisAdapterBase(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            synthesizerConfig);\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            (SpeechSynthesisOutputFormat as any)[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* tslint:disable:no-empty */\r\n                this.adapterSpeak().catch(() => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* tslint:disable:no-empty */\r\n            this.adapterSpeak().catch(() => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* tslint:disable:no-empty */\r\n            this.dispose(true).catch(() => { });\r\n        }\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    private static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}