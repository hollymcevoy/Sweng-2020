{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getLocaleString = getLocaleString;\nObject.defineProperty(exports, \"getRTLList\", {\n  enumerable: true,\n  get: function get() {\n    return _getRTLList.default;\n  }\n});\nexports.localize = localize;\n\nvar _botframeworkWebchatCore = require(\"botframework-webchat-core\");\n\nvar _getLocaleString = _interopRequireDefault(require(\"./getLocaleString\"));\n\nvar _getAllLocalizedStrings = _interopRequireDefault(require(\"./getAllLocalizedStrings\"));\n\nvar _getRTLList = _interopRequireDefault(require(\"./getRTLList\"));\n\nvar _normalizeLanguage = _interopRequireDefault(require(\"../utils/normalizeLanguage\"));\n\nvar _useLocalizer = _interopRequireDefault(require(\"../hooks/useLocalizer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar deprecationNotesShown;\n\nfunction localize(id, language) {\n  if (!deprecationNotesShown) {\n    console.warn('botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');\n    deprecationNotesShown = true;\n  }\n\n  var allStrings = (0, _getAllLocalizedStrings.default)();\n  var normalizedLanguage = (0, _normalizeLanguage.default)(language); // Mitigation through denylisting.\n  // eslint-disable-next-line security/detect-object-injection\n\n  var localizedStrings = (0, _botframeworkWebchatCore.isForbiddenPropertyName)(language) ? undefined : allStrings[normalizedLanguage];\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return Object.entries(args).reduce(function (value, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        index = _ref2[0],\n        arg = _ref2[1];\n\n    return typeof value === 'string' ? value.replace(\"$\".concat(+index + 1), arg) : value;\n  }, // Mitigation through denylisting.\n  // eslint-disable-next-line security/detect-object-injection\n  (0, _botframeworkWebchatCore.isForbiddenPropertyName)(id) ? '' : localizedStrings && localizedStrings[id] || allStrings['en-US'][id] || '');\n}\n\nfunction getLocaleString(date, language) {\n  if (!deprecationNotesShown) {\n    console.warn('botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');\n    deprecationNotesShown = true;\n  }\n\n  return (0, _getLocaleString.default)(date, language);\n}\n\nvar _default = function _default(_ref3) {\n  var args = _ref3.args,\n      text = _ref3.text;\n\n  if (!deprecationNotesShown) {\n    console.warn('botframework-webchat: <Localize> is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');\n    deprecationNotesShown = true;\n  }\n\n  return (0, _useLocalizer.default)().apply(void 0, [text].concat(_toConsumableArray(args || [])));\n};\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAGA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,qBAAJ;;AAEA,SAASC,QAAT,CAAkBC,EAAlB,EAA8BC,QAA9B,EAAmE;AACjE,MAAI,CAACH,qBAAL,EAA4B;AAC1BI,WAAO,CAACC,IAARD,CACE,oJADFA;AAIAJ,yBAAqB,GAAG,IAAxBA;AACD;;AAED,MAAMM,UAAU,GAAG,sCAAnB;AACA,MAAMC,kBAAkB,GAAG,gCAAkBJ,QAAlB,CAA3B,CAViE,CAYjE;AACA;;AACA,MAAMK,gBAAgB,GAAG,sDAAwBL,QAAxB,IAAoCM,SAApC,GAAgDH,UAAU,CAACC,kBAAD,CAAnF;;AAdiE,oCAAhBG,IAAgB;AAAhBA,QAAgB,UAAhBA,GAAgBC,eAAhBD;AAAgB;;AAgBjE,SAAOE,MAAM,CAACC,OAAPD,CAAeF,IAAfE,EAAqBE,MAArBF,CACL,UAACG,KAAD;AAAA;AAAA,QAASC,KAAT;AAAA,QAAgBC,GAAhB;;AAAA,WAA0B,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACG,OAANH,YAAkB,CAACC,KAAD,GAAS,CAA3B,GAAgCC,GAAhCF,CAA5B,GAAmEA,KAA7F;AADK,KAEL;AACA;AACA,wDAAwBb,EAAxB,IAA8B,EAA9B,GAAoCM,gBAAgB,IAAIA,gBAAgB,CAACN,EAAD,CAApCM,IAA6CF,UAAU,CAAC,OAAD,CAAVA,CAAoBJ,EAApBI,CAA7CE,IAAwE,EAJvGI,CAAP;AAMD;;AAED,SAASO,eAAT,CAAyBC,IAAzB,EAAuDjB,QAAvD,EAAyE;AACvE,MAAI,CAACH,qBAAL,EAA4B;AAC1BI,WAAO,CAACC,IAARD,CACE,oJADFA;AAIAJ,yBAAqB,GAAG,IAAxBA;AACD;;AAED,SAAO,8BAA2BoB,IAA3B,EAAiCjB,QAAjC,CAAP;AACD;;eAEc,yBAAqF;AAAA,MAAlFO,IAAkF,SAAlFA,IAAkF;AAAA,MAA5EW,IAA4E,SAA5EA,IAA4E;;AAClG,MAAI,CAACrB,qBAAL,EAA4B;AAC1BI,WAAO,CAACC,IAARD,CACE,oJADFA;AAIAJ,yBAAqB,GAAG,IAAxBA;AACD;;AAED,SAAO,4CAAeqB,IAAf,4BAAyBX,IAAI,IAAI,EAAjC,GAAP","names":["deprecationNotesShown","localize","id","language","console","warn","allStrings","normalizedLanguage","localizedStrings","undefined","args","arguments","Object","entries","reduce","value","index","arg","replace","getLocaleString","date","text"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-api/lib/src/localization/Localize.ts"],"sourcesContent":["// Localize is designed to be elaboratively return multiple results and possibly exceeding complexity requirement\n/* eslint complexity: \"off\" */\n\nimport { isForbiddenPropertyName } from 'botframework-webchat-core';\n\nimport deprecatingGetLocaleString from './getLocaleString';\nimport getAllLocalizedStrings from './getAllLocalizedStrings';\nimport getRTLList from './getRTLList';\nimport normalizeLanguage from '../utils/normalizeLanguage';\nimport useLocalizer from '../hooks/useLocalizer';\n\nlet deprecationNotesShown;\n\nfunction localize(id: string, language: string, ...args: string[]) {\n  if (!deprecationNotesShown) {\n    console.warn(\n      'botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.'\n    );\n\n    deprecationNotesShown = true;\n  }\n\n  const allStrings = getAllLocalizedStrings();\n  const normalizedLanguage = normalizeLanguage(language);\n\n  // Mitigation through denylisting.\n  // eslint-disable-next-line security/detect-object-injection\n  const localizedStrings = isForbiddenPropertyName(language) ? undefined : allStrings[normalizedLanguage];\n\n  return Object.entries(args).reduce<boolean | string>(\n    (value, [index, arg]) => (typeof value === 'string' ? value.replace(`$${+index + 1}`, arg) : value),\n    // Mitigation through denylisting.\n    // eslint-disable-next-line security/detect-object-injection\n    isForbiddenPropertyName(id) ? '' : (localizedStrings && localizedStrings[id]) || allStrings['en-US'][id] || ''\n  );\n}\n\nfunction getLocaleString(date: Date | number | string, language: string) {\n  if (!deprecationNotesShown) {\n    console.warn(\n      'botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.'\n    );\n\n    deprecationNotesShown = true;\n  }\n\n  return deprecatingGetLocaleString(date, language);\n}\n\nexport default ({ args, text }: { args: [(number | string)?, ...string[]]; text: string | any }) => {\n  if (!deprecationNotesShown) {\n    console.warn(\n      'botframework-webchat: <Localize> is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.'\n    );\n\n    deprecationNotesShown = true;\n  }\n\n  return useLocalizer()(text, ...(args || []));\n};\n\nexport { getLocaleString, getRTLList, localize };\n"]},"metadata":{},"sourceType":"script"}