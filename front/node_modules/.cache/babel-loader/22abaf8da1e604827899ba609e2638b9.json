{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ArgumentNullError, Deferred } from \"../common/Exports\"; // Node.JS specific xmlhttprequest / browser support.\n\nimport * as XHR from \"xmlhttprequest-ts\";\nexport var RestRequestType;\n\n(function (RestRequestType) {\n  RestRequestType[\"Get\"] = \"get\";\n  RestRequestType[\"Post\"] = \"post\";\n  RestRequestType[\"Delete\"] = \"delete\";\n  RestRequestType[\"File\"] = \"file\";\n})(RestRequestType || (RestRequestType = {})); // accept rest operations via request method and return abstracted objects from server response\n\n\nexport class RestMessageAdapter {\n  constructor(configParams, connectionId) {\n    if (!configParams) {\n      throw new ArgumentNullError(\"configParams\");\n    }\n\n    this.privHeaders = configParams.headers;\n    this.privTimeout = configParams.timeout;\n    this.privIgnoreCache = configParams.ignoreCache;\n  }\n\n  setHeaders(key, value) {\n    this.privHeaders[key] = value;\n  }\n\n  request(method, uri) {\n    let queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let binaryBody = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    const responseReceivedDeferral = new Deferred();\n    let xhr;\n\n    if (typeof XMLHttpRequest === \"undefined\") {\n      xhr = new XHR.XMLHttpRequest();\n    } else {\n      xhr = new XMLHttpRequest();\n    }\n\n    const requestCommand = method === RestRequestType.File ? \"post\" : method;\n    xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\n\n    if (this.privHeaders) {\n      Object.keys(this.privHeaders).forEach(key => xhr.setRequestHeader(key, this.privHeaders[key]));\n    }\n\n    if (this.privIgnoreCache) {\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    }\n\n    xhr.timeout = this.privTimeout;\n\n    xhr.onload = () => {\n      responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\n    };\n\n    xhr.onerror = () => {\n      responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\n    };\n\n    xhr.ontimeout = () => {\n      responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\n    };\n\n    if (method === RestRequestType.File && binaryBody) {\n      xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n      xhr.send(binaryBody);\n    } else if (method === RestRequestType.Post && body) {\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send(JSON.stringify(body));\n    } else {\n      xhr.send();\n    }\n\n    return responseReceivedDeferral.promise;\n  }\n\n  parseXHRResult(xhr) {\n    return {\n      data: xhr.responseText,\n      headers: xhr.getAllResponseHeaders(),\n      json: () => JSON.parse(xhr.responseText),\n      ok: xhr.status >= 200 && xhr.status < 300,\n      status: xhr.status,\n      statusText: xhr.statusText\n    };\n  }\n\n  errorResponse(xhr) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      data: message || xhr.statusText,\n      headers: xhr.getAllResponseHeaders(),\n      json: () => JSON.parse(message || \"\\\"\" + xhr.statusText + \"\\\"\"),\n      ok: false,\n      status: xhr.status,\n      statusText: xhr.statusText\n    };\n  }\n\n  withQuery(url) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryString = this.queryParams(params);\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n  }\n\n  queryParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return Object.keys(params).map(k => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k])).join(\"&\");\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ArgumentNullError","Deferred","XHR","RestRequestType","RestMessageAdapter","constructor","configParams","connectionId","privHeaders","headers","privTimeout","timeout","privIgnoreCache","ignoreCache","setHeaders","key","value","request","method","uri","queryParams","body","binaryBody","responseReceivedDeferral","xhr","XMLHttpRequest","requestCommand","File","open","withQuery","Object","keys","forEach","setRequestHeader","onload","resolve","parseXHRResult","onerror","errorResponse","ontimeout","send","Post","JSON","stringify","promise","data","responseText","getAllResponseHeaders","json","parse","ok","status","statusText","message","url","params","queryString","indexOf","map","k","encodeURIComponent","join"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/src/common.browser/RestMessageAdapter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\n// Node.JS specific xmlhttprequest / browser support.\r\nimport * as XHR from \"xmlhttprequest-ts\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"get\",\r\n    Post = \"post\",\r\n    Delete = \"delete\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privTimeout: number;\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions,\r\n        connectionId?: string\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privTimeout = configParams.timeout;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string ): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\r\n        if (typeof (XMLHttpRequest) === \"undefined\") {\r\n            xhr = new XHR.XMLHttpRequest();\r\n        } else {\r\n            xhr = new XMLHttpRequest();\r\n        }\r\n        const requestCommand = method === RestRequestType.File ? \"post\" : method;\r\n        xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\r\n\r\n        if (this.privHeaders) {\r\n            Object.keys(this.privHeaders).forEach((key: any) => xhr.setRequestHeader(key, this.privHeaders[key]));\r\n        }\r\n\r\n        if (this.privIgnoreCache) {\r\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n        }\r\n\r\n        xhr.timeout = this.privTimeout;\r\n\r\n        xhr.onload = () => {\r\n            responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\r\n        };\r\n\r\n        xhr.onerror = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\r\n        };\r\n\r\n        xhr.ontimeout = () => {\r\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\r\n        };\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\r\n            xhr.send(binaryBody);\r\n        } else if (method === RestRequestType.Post && body) {\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.send(JSON.stringify(body));\r\n        } else {\r\n            xhr.send();\r\n        }\r\n\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IRestResponse {\r\n        return {\r\n            data: xhr.responseText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(xhr.responseText) as T,\r\n            ok: xhr.status >= 200 && xhr.status < 300,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IRestResponse {\r\n        return {\r\n            data: message || xhr.statusText,\r\n            headers: xhr.getAllResponseHeaders(),\r\n            json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n            ok: false,\r\n            status: xhr.status,\r\n            statusText: xhr.statusText,\r\n        };\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}