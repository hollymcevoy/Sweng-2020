{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SerializableObject = exports.property = exports.SerializableObjectSchema = exports.CustomProperty = exports.SerializableObjectCollectionProperty = exports.SerializableObjectProperty = exports.EnumProperty = exports.ValueSetProperty = exports.StringArrayProperty = exports.PixelSizeProperty = exports.NumProperty = exports.BoolProperty = exports.StringProperty = exports.PropertyDefinition = exports.BaseSerializationContext = exports.isVersionLessOrEqual = exports.Versions = exports.Version = void 0; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nvar shared_1 = require(\"./shared\");\n\nvar Utils = require(\"./utils\");\n\nvar Enums = require(\"./enums\");\n\nvar strings_1 = require(\"./strings\");\n\nvar Version =\n/** @class */\nfunction () {\n  function Version(major, minor, label) {\n    if (major === void 0) {\n      major = 1;\n    }\n\n    if (minor === void 0) {\n      minor = 1;\n    }\n\n    this._isValid = true;\n    this._major = major;\n    this._minor = minor;\n    this._label = label;\n  }\n\n  Version.parse = function (versionString, context) {\n    if (!versionString) {\n      return undefined;\n    }\n\n    var result = new Version();\n    result._versionString = versionString;\n    var regEx = /(\\d+).(\\d+)/gi;\n    var matches = regEx.exec(versionString);\n\n    if (matches != null && matches.length == 3) {\n      result._major = parseInt(matches[1]);\n      result._minor = parseInt(matches[2]);\n    } else {\n      result._isValid = false;\n    }\n\n    if (!result._isValid) {\n      context.logParseEvent(undefined, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidVersionString(result._versionString));\n    }\n\n    return result;\n  };\n\n  Version.prototype.toString = function () {\n    return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\n  };\n\n  Version.prototype.toJSON = function () {\n    return this.toString();\n  };\n\n  Version.prototype.compareTo = function (otherVersion) {\n    if (!this.isValid || !otherVersion.isValid) {\n      throw new Error(\"Cannot compare invalid version.\");\n    }\n\n    if (this.major > otherVersion.major) {\n      return 1;\n    } else if (this.major < otherVersion.major) {\n      return -1;\n    } else if (this.minor > otherVersion.minor) {\n      return 1;\n    } else if (this.minor < otherVersion.minor) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  Object.defineProperty(Version.prototype, \"label\", {\n    get: function () {\n      return this._label ? this._label : this.toString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Version.prototype, \"major\", {\n    get: function () {\n      return this._major;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Version.prototype, \"minor\", {\n    get: function () {\n      return this._minor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Version.prototype, \"isValid\", {\n    get: function () {\n      return this._isValid;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Version;\n}();\n\nexports.Version = Version;\n\nvar Versions =\n/** @class */\nfunction () {\n  function Versions() {}\n\n  Versions.v1_0 = new Version(1, 0);\n  Versions.v1_1 = new Version(1, 1);\n  Versions.v1_2 = new Version(1, 2);\n  Versions.v1_3 = new Version(1, 3);\n  Versions.v1_4 = new Version(1, 4);\n  Versions.v1_5 = new Version(1, 5);\n  Versions.latest = Versions.v1_5;\n  return Versions;\n}();\n\nexports.Versions = Versions;\n\nfunction isVersionLessOrEqual(version, targetVersion) {\n  if (version instanceof Version) {\n    if (targetVersion instanceof Version) {\n      return targetVersion.compareTo(version) >= 0;\n    } else {\n      // Target version is *\n      return true;\n    }\n  } else {\n    // Version is *\n    return true;\n  }\n}\n\nexports.isVersionLessOrEqual = isVersionLessOrEqual;\n\nvar BaseSerializationContext =\n/** @class */\nfunction () {\n  function BaseSerializationContext(targetVersion) {\n    if (targetVersion === void 0) {\n      targetVersion = Versions.latest;\n    }\n\n    this.targetVersion = targetVersion;\n    this._validationEvents = [];\n  }\n\n  BaseSerializationContext.prototype.serializeValue = function (target, propertyName, propertyValue, defaultValue, forceDeleteIfNullOrDefault) {\n    if (defaultValue === void 0) {\n      defaultValue = undefined;\n    }\n\n    if (forceDeleteIfNullOrDefault === void 0) {\n      forceDeleteIfNullOrDefault = false;\n    }\n\n    if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n      if (!shared_1.GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault) {\n        delete target[propertyName];\n      }\n    } else if (propertyValue === defaultValue) {\n      delete target[propertyName];\n    } else {\n      target[propertyName] = propertyValue;\n    }\n  };\n\n  BaseSerializationContext.prototype.serializeString = function (target, propertyName, propertyValue, defaultValue) {\n    if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n      delete target[propertyName];\n    } else {\n      target[propertyName] = propertyValue;\n    }\n  };\n\n  BaseSerializationContext.prototype.serializeBool = function (target, propertyName, propertyValue, defaultValue) {\n    if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n      delete target[propertyName];\n    } else {\n      target[propertyName] = propertyValue;\n    }\n  };\n\n  BaseSerializationContext.prototype.serializeNumber = function (target, propertyName, propertyValue, defaultValue) {\n    if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {\n      delete target[propertyName];\n    } else {\n      target[propertyName] = propertyValue;\n    }\n  };\n\n  BaseSerializationContext.prototype.serializeEnum = function (enumType, target, propertyName, propertyValue, defaultValue) {\n    if (defaultValue === void 0) {\n      defaultValue = undefined;\n    }\n\n    if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n      delete target[propertyName];\n    } else {\n      target[propertyName] = enumType[propertyValue];\n    }\n  };\n\n  BaseSerializationContext.prototype.serializeArray = function (target, propertyName, propertyValue) {\n    var items = [];\n\n    if (propertyValue) {\n      for (var _i = 0, propertyValue_1 = propertyValue; _i < propertyValue_1.length; _i++) {\n        var item = propertyValue_1[_i];\n        var serializedItem = undefined;\n\n        if (item instanceof SerializableObject) {\n          serializedItem = item.toJSON(this);\n        } else if (item.toJSON) {\n          serializedItem = item.toJSON();\n        } else {\n          serializedItem = item;\n        }\n\n        if (serializedItem !== undefined) {\n          items.push(serializedItem);\n        }\n      }\n    }\n\n    if (items.length == 0) {\n      if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\n        delete target[propertyName];\n      }\n    } else {\n      this.serializeValue(target, propertyName, items);\n    }\n  };\n\n  BaseSerializationContext.prototype.clearEvents = function () {\n    this._validationEvents = [];\n  };\n\n  BaseSerializationContext.prototype.logEvent = function (source, phase, event, message) {\n    this._validationEvents.push({\n      source: source,\n      phase: phase,\n      event: event,\n      message: message\n    });\n  };\n\n  BaseSerializationContext.prototype.logParseEvent = function (source, event, message) {\n    this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\n  };\n\n  BaseSerializationContext.prototype.getEventAt = function (index) {\n    return this._validationEvents[index];\n  };\n\n  Object.defineProperty(BaseSerializationContext.prototype, \"eventCount\", {\n    get: function () {\n      return this._validationEvents.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return BaseSerializationContext;\n}();\n\nexports.BaseSerializationContext = BaseSerializationContext;\n\nvar SimpleSerializationContext =\n/** @class */\nfunction (_super) {\n  __extends(SimpleSerializationContext, _super);\n\n  function SimpleSerializationContext() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return SimpleSerializationContext;\n}(BaseSerializationContext);\n\nvar PropertyDefinition =\n/** @class */\nfunction () {\n  function PropertyDefinition(targetVersion, name, defaultValue, onGetInitialValue) {\n    this.targetVersion = targetVersion;\n    this.name = name;\n    this.defaultValue = defaultValue;\n    this.onGetInitialValue = onGetInitialValue;\n    this.isSerializationEnabled = true;\n    this.sequentialNumber = PropertyDefinition._sequentialNumber;\n    PropertyDefinition._sequentialNumber++;\n  }\n\n  PropertyDefinition.prototype.getInternalName = function () {\n    return this.name;\n  };\n\n  PropertyDefinition.prototype.parse = function (sender, source, context) {\n    return source[this.name];\n  };\n\n  PropertyDefinition.prototype.toJSON = function (sender, target, value, context) {\n    context.serializeValue(target, this.name, value, this.defaultValue);\n  };\n\n  PropertyDefinition._sequentialNumber = 0;\n  return PropertyDefinition;\n}();\n\nexports.PropertyDefinition = PropertyDefinition;\n\nvar StringProperty =\n/** @class */\nfunction (_super) {\n  __extends(StringProperty, _super);\n\n  function StringProperty(targetVersion, name, treatEmptyAsUndefined, regEx, defaultValue, onGetInitialValue) {\n    if (treatEmptyAsUndefined === void 0) {\n      treatEmptyAsUndefined = true;\n    }\n\n    var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.treatEmptyAsUndefined = treatEmptyAsUndefined;\n    _this.regEx = regEx;\n    _this.defaultValue = defaultValue;\n    _this.onGetInitialValue = onGetInitialValue;\n    return _this;\n  }\n\n  StringProperty.prototype.parse = function (sender, source, context) {\n    var parsedValue = Utils.parseString(source[this.name], this.defaultValue);\n    var isUndefined = parsedValue === undefined || parsedValue === \"\" && this.treatEmptyAsUndefined;\n\n    if (!isUndefined && this.regEx !== undefined) {\n      var matches = this.regEx.exec(parsedValue);\n\n      if (!matches) {\n        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(parsedValue, this.name));\n        return undefined;\n      }\n    }\n\n    return parsedValue;\n  };\n\n  StringProperty.prototype.toJSON = function (sender, target, value, context) {\n    context.serializeString(target, this.name, value === \"\" && this.treatEmptyAsUndefined ? undefined : value, this.defaultValue);\n  };\n\n  return StringProperty;\n}(PropertyDefinition);\n\nexports.StringProperty = StringProperty;\n\nvar BoolProperty =\n/** @class */\nfunction (_super) {\n  __extends(BoolProperty, _super);\n\n  function BoolProperty(targetVersion, name, defaultValue, onGetInitialValue) {\n    var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.defaultValue = defaultValue;\n    _this.onGetInitialValue = onGetInitialValue;\n    return _this;\n  }\n\n  BoolProperty.prototype.parse = function (sender, source, context) {\n    return Utils.parseBool(source[this.name], this.defaultValue);\n  };\n\n  BoolProperty.prototype.toJSON = function (sender, target, value, context) {\n    context.serializeBool(target, this.name, value, this.defaultValue);\n  };\n\n  return BoolProperty;\n}(PropertyDefinition);\n\nexports.BoolProperty = BoolProperty;\n\nvar NumProperty =\n/** @class */\nfunction (_super) {\n  __extends(NumProperty, _super);\n\n  function NumProperty(targetVersion, name, defaultValue, onGetInitialValue) {\n    var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.defaultValue = defaultValue;\n    _this.onGetInitialValue = onGetInitialValue;\n    return _this;\n  }\n\n  NumProperty.prototype.parse = function (sender, source, context) {\n    return Utils.parseNumber(source[this.name], this.defaultValue);\n  };\n\n  NumProperty.prototype.toJSON = function (sender, target, value, context) {\n    context.serializeNumber(target, this.name, value, this.defaultValue);\n  };\n\n  return NumProperty;\n}(PropertyDefinition);\n\nexports.NumProperty = NumProperty;\n\nvar PixelSizeProperty =\n/** @class */\nfunction (_super) {\n  __extends(PixelSizeProperty, _super);\n\n  function PixelSizeProperty() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PixelSizeProperty.prototype.parse = function (sender, source, context) {\n    var result = undefined;\n    var value = source[this.name];\n\n    if (typeof value === \"string\") {\n      var isValid = false;\n\n      try {\n        var size = shared_1.SizeAndUnit.parse(value, true);\n\n        if (size.unit == Enums.SizeUnit.Pixel) {\n          result = size.physicalSize;\n          isValid = true;\n        }\n      } catch (_a) {// Do nothing. A parse error is emitted below\n      }\n\n      if (!isValid) {\n        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(source[this.name], \"minHeight\"));\n      }\n    }\n\n    return result;\n  };\n\n  PixelSizeProperty.prototype.toJSON = function (sender, target, value, context) {\n    context.serializeValue(target, this.name, typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\n  };\n\n  return PixelSizeProperty;\n}(PropertyDefinition);\n\nexports.PixelSizeProperty = PixelSizeProperty;\n\nvar StringArrayProperty =\n/** @class */\nfunction (_super) {\n  __extends(StringArrayProperty, _super);\n\n  function StringArrayProperty(targetVersion, name, defaultValue, onGetInitialValue) {\n    var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.defaultValue = defaultValue;\n    _this.onGetInitialValue = onGetInitialValue;\n    return _this;\n  }\n\n  StringArrayProperty.prototype.parse = function (sender, source, context) {\n    var sourceValue = source[this.name];\n\n    if (sourceValue === undefined || !Array.isArray(sourceValue)) {\n      return this.defaultValue;\n    }\n\n    var result = [];\n\n    for (var _i = 0, sourceValue_1 = sourceValue; _i < sourceValue_1.length; _i++) {\n      var value = sourceValue_1[_i];\n\n      if (typeof value === \"string\") {\n        result.push(value);\n      } else {\n        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, \"Invalid array value \\\"\" + value + \"\\\" of type \\\"\" + typeof value + \"\\\" ignored for \\\"\" + this.name + \"\\\".\");\n      }\n    }\n\n    return result;\n  };\n\n  StringArrayProperty.prototype.toJSON = function (sender, target, value, context) {\n    context.serializeArray(target, this.name, value);\n  };\n\n  return StringArrayProperty;\n}(PropertyDefinition);\n\nexports.StringArrayProperty = StringArrayProperty;\n\nvar ValueSetProperty =\n/** @class */\nfunction (_super) {\n  __extends(ValueSetProperty, _super);\n\n  function ValueSetProperty(targetVersion, name, values, defaultValue, onGetInitialValue) {\n    var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.values = values;\n    _this.defaultValue = defaultValue;\n    _this.onGetInitialValue = onGetInitialValue;\n    return _this;\n  }\n\n  ValueSetProperty.prototype.isValidValue = function (value, context) {\n    for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n      var versionedValue = _a[_i];\n\n      if (value.toLowerCase() === versionedValue.value.toLowerCase()) {\n        var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n        return targetVersion.compareTo(context.targetVersion) <= 0;\n      }\n    }\n\n    return false;\n  };\n\n  ValueSetProperty.prototype.parse = function (sender, source, context) {\n    var sourceValue = source[this.name];\n\n    if (sourceValue === undefined) {\n      return this.defaultValue;\n    }\n\n    if (typeof sourceValue === \"string\") {\n      for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n        var versionedValue = _a[_i];\n\n        if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\n          var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n          if (targetVersion.compareTo(context.targetVersion) <= 0) {\n            return versionedValue.value;\n          } else {\n            context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(sourceValue, this.name, targetVersion.toString(), context.targetVersion.toString()));\n            return this.defaultValue;\n          }\n        }\n      }\n    }\n\n    context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(sourceValue, this.name));\n    return this.defaultValue;\n  };\n\n  ValueSetProperty.prototype.toJSON = function (sender, target, value, context) {\n    var invalidValue = false;\n\n    if (value !== undefined) {\n      invalidValue = true;\n\n      for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n        var versionedValue = _a[_i];\n\n        if (versionedValue.value === value) {\n          var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n          if (targetVersion.compareTo(context.targetVersion) <= 0) {\n            invalidValue = false;\n            break;\n          } else {\n            context.logEvent(sender, Enums.ValidationPhase.ToJSON, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(value, this.name, targetVersion.toString(), context.targetVersion.toString()));\n          }\n        }\n      }\n    }\n\n    if (!invalidValue) {\n      context.serializeValue(target, this.name, value, this.defaultValue, true);\n    }\n  };\n\n  return ValueSetProperty;\n}(PropertyDefinition);\n\nexports.ValueSetProperty = ValueSetProperty;\n\nvar EnumProperty =\n/** @class */\nfunction (_super) {\n  __extends(EnumProperty, _super);\n\n  function EnumProperty(targetVersion, name, enumType, defaultValue, values, onGetInitialValue) {\n    var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.enumType = enumType;\n    _this.defaultValue = defaultValue;\n    _this.onGetInitialValue = onGetInitialValue;\n    _this._values = [];\n\n    if (!values) {\n      for (var key in enumType) {\n        var keyAsNumber = parseInt(key, 10);\n\n        if (keyAsNumber >= 0) {\n          _this._values.push({\n            value: keyAsNumber\n          });\n        }\n      }\n    } else {\n      _this._values = values;\n    }\n\n    return _this;\n  }\n\n  EnumProperty.prototype.parse = function (sender, source, context) {\n    var sourceValue = source[this.name];\n\n    if (typeof sourceValue !== \"string\") {\n      return this.defaultValue;\n    }\n\n    var enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\n\n    if (enumValue !== undefined) {\n      for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n        var versionedValue = _a[_i];\n\n        if (versionedValue.value === enumValue) {\n          var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n          if (targetVersion.compareTo(context.targetVersion) <= 0) {\n            return enumValue;\n          } else {\n            context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(sourceValue, this.name, targetVersion.toString(), context.targetVersion.toString()));\n            return this.defaultValue;\n          }\n        }\n      }\n    }\n\n    context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(sourceValue, this.name));\n    return this.defaultValue;\n  };\n\n  EnumProperty.prototype.toJSON = function (sender, target, value, context) {\n    var invalidValue = false;\n\n    if (value !== undefined) {\n      invalidValue = true;\n\n      for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n        var versionedValue = _a[_i];\n\n        if (versionedValue.value === value) {\n          var targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n          if (targetVersion.compareTo(context.targetVersion) <= 0) {\n            invalidValue = false;\n            break;\n          } else {\n            context.logEvent(sender, Enums.ValidationPhase.ToJSON, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(value, this.name));\n          }\n        }\n      }\n    }\n\n    if (!invalidValue) {\n      context.serializeEnum(this.enumType, target, this.name, value, this.defaultValue);\n    }\n  };\n\n  Object.defineProperty(EnumProperty.prototype, \"values\", {\n    get: function () {\n      return this._values;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return EnumProperty;\n}(PropertyDefinition);\n\nexports.EnumProperty = EnumProperty;\n\nvar SerializableObjectProperty =\n/** @class */\nfunction (_super) {\n  __extends(SerializableObjectProperty, _super);\n\n  function SerializableObjectProperty(targetVersion, name, objectType, nullable, defaultValue) {\n    if (nullable === void 0) {\n      nullable = false;\n    }\n\n    var _this = _super.call(this, targetVersion, name, defaultValue, function (sender) {\n      return _this.nullable ? undefined : new _this.objectType();\n    }) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.objectType = objectType;\n    _this.nullable = nullable;\n    return _this;\n  }\n\n  SerializableObjectProperty.prototype.parse = function (sender, source, context) {\n    var sourceValue = source[this.name];\n\n    if (sourceValue === undefined) {\n      return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\n    }\n\n    var result = new this.objectType();\n    result.parse(sourceValue, context);\n    return result;\n  };\n\n  SerializableObjectProperty.prototype.toJSON = function (sender, target, value, context) {\n    var serializedValue = undefined;\n\n    if (value !== undefined && !value.hasAllDefaultValues()) {\n      serializedValue = value.toJSON(context);\n    }\n\n    if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\n      serializedValue = undefined;\n    }\n\n    context.serializeValue(target, this.name, serializedValue, this.defaultValue, true);\n  };\n\n  return SerializableObjectProperty;\n}(PropertyDefinition);\n\nexports.SerializableObjectProperty = SerializableObjectProperty;\n\nvar SerializableObjectCollectionProperty =\n/** @class */\nfunction (_super) {\n  __extends(SerializableObjectCollectionProperty, _super);\n\n  function SerializableObjectCollectionProperty(targetVersion, name, objectType, onItemAdded) {\n    var _this = _super.call(this, targetVersion, name, undefined, function (sender) {\n      return [];\n    }) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.objectType = objectType;\n    _this.onItemAdded = onItemAdded;\n    return _this;\n  }\n\n  SerializableObjectCollectionProperty.prototype.parse = function (sender, source, context) {\n    var result = [];\n    var sourceCollection = source[this.name];\n\n    if (Array.isArray(sourceCollection)) {\n      for (var _i = 0, sourceCollection_1 = sourceCollection; _i < sourceCollection_1.length; _i++) {\n        var sourceItem = sourceCollection_1[_i];\n        var item = new this.objectType();\n        item.parse(sourceItem, context);\n        result.push(item);\n\n        if (this.onItemAdded) {\n          this.onItemAdded(sender, item);\n        }\n      }\n    }\n\n    return result.length > 0 ? result : this.onGetInitialValue ? this.onGetInitialValue(sender) : undefined;\n  };\n\n  SerializableObjectCollectionProperty.prototype.toJSON = function (sender, target, value, context) {\n    context.serializeArray(target, this.name, value);\n  };\n\n  return SerializableObjectCollectionProperty;\n}(PropertyDefinition);\n\nexports.SerializableObjectCollectionProperty = SerializableObjectCollectionProperty;\n\nvar CustomProperty =\n/** @class */\nfunction (_super) {\n  __extends(CustomProperty, _super);\n\n  function CustomProperty(targetVersion, name, onParse, onToJSON, defaultValue, onGetInitialValue) {\n    var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n\n    _this.targetVersion = targetVersion;\n    _this.name = name;\n    _this.onParse = onParse;\n    _this.onToJSON = onToJSON;\n    _this.defaultValue = defaultValue;\n    _this.onGetInitialValue = onGetInitialValue;\n\n    if (!_this.onParse) {\n      throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\n    }\n\n    if (!_this.onToJSON) {\n      throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\n    }\n\n    return _this;\n  }\n\n  CustomProperty.prototype.parse = function (sender, source, context) {\n    return this.onParse(sender, this, source, context);\n  };\n\n  CustomProperty.prototype.toJSON = function (sender, target, value, context) {\n    this.onToJSON(sender, this, target, value, context);\n  };\n\n  return CustomProperty;\n}(PropertyDefinition);\n\nexports.CustomProperty = CustomProperty;\n\nvar SerializableObjectSchema =\n/** @class */\nfunction () {\n  function SerializableObjectSchema() {\n    this._properties = [];\n  }\n\n  SerializableObjectSchema.prototype.indexOf = function (property) {\n    for (var i = 0; i < this._properties.length; i++) {\n      if (this._properties[i] === property) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  SerializableObjectSchema.prototype.add = function () {\n    var properties = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      properties[_i] = arguments[_i];\n    }\n\n    for (var i = 0; i < properties.length; i++) {\n      if (this.indexOf(properties[i]) === -1) {\n        this._properties.push(properties[i]);\n      }\n    }\n  };\n\n  SerializableObjectSchema.prototype.remove = function () {\n    var properties = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      properties[_i] = arguments[_i];\n    }\n\n    for (var _a = 0, properties_1 = properties; _a < properties_1.length; _a++) {\n      var property_1 = properties_1[_a];\n\n      while (true) {\n        var index = this.indexOf(property_1);\n\n        if (index >= 0) {\n          this._properties.splice(index, 1);\n        } else {\n          break;\n        }\n      }\n    }\n  };\n\n  SerializableObjectSchema.prototype.getItemAt = function (index) {\n    return this._properties[index];\n  };\n\n  SerializableObjectSchema.prototype.getCount = function () {\n    return this._properties.length;\n  };\n\n  return SerializableObjectSchema;\n}();\n\nexports.SerializableObjectSchema = SerializableObjectSchema; // This is a decorator function, used to map SerializableObject descendant class members to\n// schema properties\n\nfunction property(property) {\n  return function (target, propertyKey) {\n    var descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\n\n    if (!descriptor.get && !descriptor.set) {\n      descriptor.get = function () {\n        return this.getValue(property);\n      };\n\n      descriptor.set = function (value) {\n        this.setValue(property, value);\n      };\n\n      Object.defineProperty(target, propertyKey, descriptor);\n    }\n  };\n}\n\nexports.property = property;\n\nvar SerializableObject =\n/** @class */\nfunction () {\n  function SerializableObject() {\n    this._propertyBag = {};\n    this._rawProperties = {};\n    this.maxVersion = SerializableObject.defaultMaxVersion;\n    var s = this.getSchema();\n\n    for (var i = 0; i < s.getCount(); i++) {\n      var property_2 = s.getItemAt(i);\n\n      if (property_2.onGetInitialValue) {\n        this.setValue(property_2, property_2.onGetInitialValue(this));\n      }\n    }\n  }\n\n  SerializableObject.prototype.getDefaultSerializationContext = function () {\n    return new SimpleSerializationContext();\n  };\n\n  SerializableObject.prototype.populateSchema = function (schema) {\n    var ctor = this.constructor;\n    var properties = [];\n\n    for (var propertyName in ctor) {\n      try {\n        var propertyValue = ctor[propertyName];\n\n        if (propertyValue instanceof PropertyDefinition) {\n          properties.push(propertyValue);\n        }\n      } catch (_a) {// If a property happens to have a getter function and\n        // it throws an exception, we need to catch it here\n      }\n    }\n\n    if (properties.length > 0) {\n      var sortedProperties = properties.sort(function (p1, p2) {\n        if (p1.sequentialNumber > p2.sequentialNumber) {\n          return 1;\n        } else if (p1.sequentialNumber < p2.sequentialNumber) {\n          return -1;\n        }\n\n        return 0;\n      });\n      schema.add.apply(schema, sortedProperties);\n    }\n\n    if (SerializableObject.onRegisterCustomProperties) {\n      SerializableObject.onRegisterCustomProperties(this, schema);\n    }\n  };\n\n  SerializableObject.prototype.getValue = function (property) {\n    return this._propertyBag.hasOwnProperty(property.getInternalName()) ? this._propertyBag[property.getInternalName()] : property.defaultValue;\n  };\n\n  SerializableObject.prototype.setValue = function (property, value) {\n    if (value === undefined || value === null) {\n      delete this._propertyBag[property.getInternalName()];\n    } else {\n      this._propertyBag[property.getInternalName()] = value;\n    }\n  };\n\n  SerializableObject.prototype.internalParse = function (source, context) {\n    this._propertyBag = {};\n    this._rawProperties = shared_1.GlobalSettings.enableFullJsonRoundTrip ? source ? source : {} : {};\n\n    if (source) {\n      var s = this.getSchema();\n\n      for (var i = 0; i < s.getCount(); i++) {\n        var property_3 = s.getItemAt(i);\n\n        if (property_3.isSerializationEnabled) {\n          var propertyValue = property_3.onGetInitialValue ? property_3.onGetInitialValue(this) : undefined;\n\n          if (source.hasOwnProperty(property_3.name)) {\n            if (property_3.targetVersion.compareTo(context.targetVersion) <= 0) {\n              propertyValue = property_3.parse(this, source, context);\n            } else {\n              context.logParseEvent(this, Enums.ValidationEvent.UnsupportedProperty, strings_1.Strings.errors.propertyNotSupported(property_3.name, property_3.targetVersion.toString(), context.targetVersion.toString()));\n            }\n          }\n\n          this.setValue(property_3, propertyValue);\n        }\n      }\n    } else {\n      this.resetDefaultValues();\n    }\n  };\n\n  SerializableObject.prototype.internalToJSON = function (target, context) {\n    var s = this.getSchema();\n    var serializedProperties = [];\n\n    for (var i = 0; i < s.getCount(); i++) {\n      var property_4 = s.getItemAt(i); // Avoid serializing the same property multiple times. This is necessary\n      // because some property definitions map to the same underlying schema\n      // property\n\n      if (property_4.isSerializationEnabled && property_4.targetVersion.compareTo(context.targetVersion) <= 0 && serializedProperties.indexOf(property_4.name) === -1) {\n        property_4.toJSON(this, target, this.getValue(property_4), context);\n        serializedProperties.push(property_4.name);\n      }\n    }\n  };\n\n  SerializableObject.prototype.shouldSerialize = function (context) {\n    return true;\n  };\n\n  SerializableObject.prototype.parse = function (source, context) {\n    this.internalParse(source, context ? context : new SimpleSerializationContext());\n  };\n\n  SerializableObject.prototype.toJSON = function (context) {\n    var effectiveContext;\n\n    if (context && context instanceof BaseSerializationContext) {\n      effectiveContext = context;\n    } else {\n      effectiveContext = this.getDefaultSerializationContext();\n      effectiveContext.toJSONOriginalParam = context;\n    }\n\n    if (this.shouldSerialize(effectiveContext)) {\n      var result = void 0;\n\n      if (shared_1.GlobalSettings.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === \"object\") {\n        result = this._rawProperties;\n      } else {\n        result = {};\n      }\n\n      this.internalToJSON(result, effectiveContext);\n      return result;\n    } else {\n      return undefined;\n    }\n  };\n\n  SerializableObject.prototype.hasDefaultValue = function (property) {\n    return this.getValue(property) === property.defaultValue;\n  };\n\n  SerializableObject.prototype.hasAllDefaultValues = function () {\n    var s = this.getSchema();\n\n    for (var i = 0; i < s.getCount(); i++) {\n      var property_5 = s.getItemAt(i);\n\n      if (!this.hasDefaultValue(property_5)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  SerializableObject.prototype.resetDefaultValues = function () {\n    var s = this.getSchema();\n\n    for (var i = 0; i < s.getCount(); i++) {\n      var property_6 = s.getItemAt(i);\n      this.setValue(property_6, property_6.defaultValue);\n    }\n  };\n\n  SerializableObject.prototype.setCustomProperty = function (name, value) {\n    var shouldDeleteProperty = typeof value === \"string\" && !value || value === undefined || value === null;\n\n    if (shouldDeleteProperty) {\n      delete this._rawProperties[name];\n    } else {\n      this._rawProperties[name] = value;\n    }\n  };\n\n  SerializableObject.prototype.getCustomProperty = function (name) {\n    return this._rawProperties[name];\n  };\n\n  SerializableObject.prototype.getSchema = function () {\n    var schema = SerializableObject._schemaCache[this.getSchemaKey()];\n\n    if (!schema) {\n      schema = new SerializableObjectSchema();\n      this.populateSchema(schema);\n      SerializableObject._schemaCache[this.getSchemaKey()] = schema;\n    }\n\n    return schema;\n  };\n\n  SerializableObject.defaultMaxVersion = Versions.latest;\n  SerializableObject._schemaCache = {};\n  return SerializableObject;\n}();\n\nexports.SerializableObject = SerializableObject;","map":{"version":3,"mappings":"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","names":["major","minor","label","_major","_minor","_label","Version","versionString","context","undefined","result","_versionString","regEx","matches","exec","length","parseInt","_isValid","logParseEvent","Enums","ValidationEvent","InvalidPropertyValue","strings_1","errors","invalidVersionString","toString","otherVersion","isValid","Error","Object","exports","Versions","v1_5","isVersionLessOrEqual","version","targetVersion","compareTo","latest","BaseSerializationContext","target","propertyName","propertyValue","defaultValue","forceDeleteIfNullOrDefault","shared_1","enableFullJsonRoundTrip","isNaN","enumType","items","_i","item","serializedItem","SerializableObject","toJSON","push","hasOwnProperty","Array","isArray","serializeValue","_validationEvents","source","phase","event","message","logEvent","ValidationPhase","Parse","index","__extends","name","onGetInitialValue","sequentialNumber","PropertyDefinition","_sequentialNumber","sender","value","treatEmptyAsUndefined","_super","_this","StringProperty","parsedValue","Utils","parseString","isUndefined","invalidPropertyValue","serializeString","BoolProperty","parseBool","serializeBool","NumProperty","parseNumber","serializeNumber","PixelSizeProperty","size","parse","unit","SizeUnit","Pixel","physicalSize","StringArrayProperty","sourceValue","serializeArray","values","ValueSetProperty","versionedValue","toLowerCase","propertyValueNotSupported","invalidValue","ToJSON","key","keyAsNumber","_values","EnumProperty","enumValue","getEnumValueByName","serializeEnum","objectType","nullable","SerializableObjectProperty","serializedValue","hasAllDefaultValues","keys","onItemAdded","SerializableObjectCollectionProperty","sourceCollection","sourceItem","onParse","onToJSON","CustomProperty","SerializableObjectSchema","property","i","_properties","properties","indexOf","_a","property_1","splice","propertyKey","descriptor","getOwnPropertyDescriptor","get","set","getValue","setValue","defineProperty","defaultMaxVersion","s","getSchema","getCount","property_2","getItemAt","SimpleSerializationContext","schema","ctor","constructor","sortedProperties","sort","p1","p2","add","apply","onRegisterCustomProperties","_propertyBag","getInternalName","_rawProperties","property_3","isSerializationEnabled","UnsupportedProperty","propertyNotSupported","resetDefaultValues","serializedProperties","property_4","internalParse","effectiveContext","getDefaultSerializationContext","toJSONOriginalParam","shouldSerialize","internalToJSON","property_5","hasDefaultValue","property_6","shouldDeleteProperty","_schemaCache","getSchemaKey","populateSchema"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/adaptivecards/src/serialization.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { GlobalSettings, SizeAndUnit } from \"./shared\";\nimport * as Utils from \"./utils\";\nimport * as Enums from \"./enums\";\nimport { Strings } from \"./strings\";\n\nexport interface IValidationEvent {\n    source?: SerializableObject,\n    phase: Enums.ValidationPhase,\n    event: Enums.ValidationEvent,\n    message: string;\n}\n\nexport class Version {\n    private _versionString: string;\n    private _major: number;\n    private _minor: number;\n    private _isValid: boolean = true;\n    private _label?: string;\n\n    constructor(major: number = 1, minor: number = 1, label?: string) {\n        this._major = major;\n        this._minor = minor;\n        this._label = label;\n    }\n\n    static parse(versionString: string, context: BaseSerializationContext): Version | undefined {\n        if (!versionString) {\n            return undefined;\n        }\n\n        let result = new Version();\n        result._versionString = versionString;\n\n        let regEx = /(\\d+).(\\d+)/gi;\n        let matches = regEx.exec(versionString);\n\n        if (matches != null && matches.length == 3) {\n            result._major = parseInt(matches[1]);\n            result._minor = parseInt(matches[2]);\n        }\n        else {\n            result._isValid = false;\n        }\n\n        if (!result._isValid) {\n            context.logParseEvent(\n                undefined,\n                Enums.ValidationEvent.InvalidPropertyValue,\n                Strings.errors.invalidVersionString(result._versionString));\n        }\n\n        return result;\n    }\n\n    toString(): string {\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\n    }\n\n    toJSON(): any {\n        return this.toString();\n    }\n\n    compareTo(otherVersion: Version): number {\n        if (!this.isValid || !otherVersion.isValid) {\n            throw new Error(\"Cannot compare invalid version.\");\n        }\n\n        if (this.major > otherVersion.major) {\n            return 1;\n        }\n        else if (this.major < otherVersion.major) {\n            return -1;\n        }\n        else if (this.minor > otherVersion.minor) {\n            return 1;\n        }\n        else if (this.minor < otherVersion.minor) {\n            return -1;\n        }\n\n        return 0;\n    }\n\n    get label(): string {\n        return this._label ? this._label : this.toString();\n    }\n\n    get major(): number {\n        return this._major;\n    }\n\n    get minor(): number {\n        return this._minor;\n    }\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n}\n\nexport type TargetVersion = Version | \"*\";\n\nexport class Versions {\n    static readonly v1_0 = new Version(1, 0);\n    static readonly v1_1 = new Version(1, 1);\n    static readonly v1_2 = new Version(1, 2);\n    static readonly v1_3 = new Version(1, 3);\n    static readonly v1_4 = new Version(1, 4);\n    static readonly v1_5 = new Version(1, 5);\n    static readonly latest = Versions.v1_5;\n}\n\nexport function isVersionLessOrEqual(version: TargetVersion, targetVersion: TargetVersion): boolean {\n    if (version instanceof Version) {\n        if (targetVersion instanceof Version) {\n            return targetVersion.compareTo(version) >= 0;\n        }\n        else {\n            // Target version is *\n            return true;\n        }\n    }\n    else {\n        // Version is *\n        return true;\n    }\n}\n\nexport abstract class BaseSerializationContext {\n    private _validationEvents: IValidationEvent[] = [];\n\n    toJSONOriginalParam: any;\n\n    constructor(public targetVersion: Version = Versions.latest) {}\n\n    serializeValue(target: { [key: string]: any }, propertyName: string, propertyValue: any, defaultValue: any = undefined, forceDeleteIfNullOrDefault: boolean = false) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            if (!GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault) {\n                delete target[propertyName];\n            }\n        }\n        else if (propertyValue === defaultValue) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeString(target: { [key: string]: any }, propertyName: string, propertyValue?: string, defaultValue?: string) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeBool(target: { [key: string]: any }, propertyName: string, propertyValue?: boolean, defaultValue?: boolean) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeNumber(target: { [key: string]: any }, propertyName: string, propertyValue?: number, defaultValue?: number) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeEnum(\n        enumType: { [s: number]: string },\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue: number | undefined,\n        defaultValue: number | undefined = undefined) {\n        if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {\n            delete target[propertyName];\n        }\n        else {\n            target[propertyName] = enumType[propertyValue];\n        }\n    }\n\n    serializeArray(target: { [key: string]: any }, propertyName: string, propertyValue: any[] | undefined) {\n        let items = [];\n\n        if (propertyValue) {\n            for (let item of propertyValue) {\n                let serializedItem: any = undefined;\n\n                if (item instanceof SerializableObject) {\n                    serializedItem = item.toJSON(this);\n                }\n                else if (item.toJSON) {\n                    serializedItem = item.toJSON();\n                }\n                else {\n                    serializedItem = item;\n                }\n\n                if (serializedItem !== undefined) {\n                    items.push(serializedItem);\n                }\n            }\n        }\n\n        if (items.length == 0) {\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            this.serializeValue(target, propertyName, items);\n        }\n    }\n\n    clearEvents() {\n        this._validationEvents = [];\n    }\n\n    logEvent(\n        source: SerializableObject | undefined,\n        phase: Enums.ValidationPhase,\n        event: Enums.ValidationEvent,\n        message: string) {\n        this._validationEvents.push(\n            {\n                source: source,\n                phase: phase,\n                event: event,\n                message: message\n            }\n        )\n    }\n\n    logParseEvent(source: SerializableObject | undefined, event: Enums.ValidationEvent, message: string) {\n        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\n    }\n\n    getEventAt(index: number): IValidationEvent {\n        return this._validationEvents[index];\n    }\n\n    get eventCount(): number {\n        return this._validationEvents.length;\n    }\n}\n\nclass SimpleSerializationContext extends BaseSerializationContext {}\n\nexport class PropertyDefinition {\n    private static _sequentialNumber: number = 0;\n\n    getInternalName(): string {\n        return this.name;\n    }\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): any {\n        return source[this.name];\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: any, context: BaseSerializationContext): void {\n        context.serializeValue(target, this.name, value, this.defaultValue);\n    }\n\n    readonly sequentialNumber: number;\n\n    isSerializationEnabled: boolean = true;\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: any,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any) {\n        this.sequentialNumber = PropertyDefinition._sequentialNumber;\n\n        PropertyDefinition._sequentialNumber++;\n    }\n}\n\nexport class StringProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\n        let parsedValue = Utils.parseString(source[this.name], this.defaultValue);\n        let isUndefined = parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\n\n        if (!isUndefined && this.regEx !== undefined) {\n            let matches = this.regEx.exec(<string>parsedValue);\n\n            if (!matches) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(parsedValue, this.name));\n\n                return undefined;\n            }\n        }\n\n        return parsedValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\n        context.serializeString(\n            target,\n            this.name,\n            value === \"\" && this.treatEmptyAsUndefined ? undefined : value,\n            this.defaultValue);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly treatEmptyAsUndefined: boolean = true,\n        readonly regEx?: RegExp,\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class BoolProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): boolean | undefined {\n        return Utils.parseBool(source[this.name], this.defaultValue);\n    }\n\n    toJSON(sender: SerializableObject, target: object, value: boolean | undefined, context: BaseSerializationContext) {\n        context.serializeBool(\n            target,\n            this.name,\n            value,\n            this.defaultValue);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: boolean,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class NumProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        return Utils.parseNumber(source[this.name], this.defaultValue);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeNumber(\n            target,\n            this.name,\n            value,\n            this.defaultValue);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: number,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class PixelSizeProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let result: number | undefined = undefined;\n        let value = source[this.name];\n\n        if (typeof value === \"string\") {\n            let isValid = false;\n\n            try {\n                let size = SizeAndUnit.parse(value, true);\n\n                if (size.unit == Enums.SizeUnit.Pixel) {\n                    result = size.physicalSize;\n\n                    isValid = true;\n                }\n            }\n            catch {\n                // Do nothing. A parse error is emitted below\n            }\n\n            if (!isValid) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(source[this.name], \"minHeight\"));\n            }\n        }\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        context.serializeValue(\n            target,\n            this.name,\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\n    }\n}\n\nexport interface IVersionedValue<TValue> {\n    value: TValue;\n    targetVersion?: Version;\n}\n\nexport class StringArrayProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string[] | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined || !Array.isArray(sourceValue)) {\n            return this.defaultValue;\n        }\n\n        let result: string[] = [];\n\n        for (let value of sourceValue) {\n            if (typeof value === \"string\") {\n                result.push(value);\n            }\n            else {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    `Invalid array value \"${value}\" of type \"${typeof value}\" ignored for \"${this.name}\".`);\n            }\n        }\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string[] | undefined, context: BaseSerializationContext) {\n        context.serializeArray(target, this.name, value);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: string[],\n        readonly onGetInitialValue?: (sender: SerializableObject) => string[] | undefined) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class ValueSetProperty extends PropertyDefinition {\n    isValidValue(value: string, context: BaseSerializationContext): boolean {\n        for (let versionedValue of this.values) {\n            if (value.toLowerCase() === versionedValue.value.toLowerCase()) {\n                let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                return targetVersion.compareTo(context.targetVersion) <= 0;\n            }\n        }\n\n        return false;\n    }\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): string | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.defaultValue;\n        }\n\n        if (typeof sourceValue === \"string\") {\n            for (let versionedValue of this.values) {\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return versionedValue.value;\n                    }\n                    else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()));\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\n\n        return this.defaultValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: string | undefined, context: BaseSerializationContext) {\n        let invalidValue = false;\n\n        if (value !== undefined) {\n            invalidValue = true;\n\n            for (let versionedValue of this.values) {\n                if (versionedValue.value === value) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        invalidValue = false;\n\n                        break;\n                    }\n                    else {\n                        context.logEvent(\n                            sender,\n                            Enums.ValidationPhase.ToJSON,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                value,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()));\n                    }\n                }\n            }\n        }\n\n        if (!invalidValue) {\n            context.serializeValue(\n                target,\n                this.name,\n                value,\n                this.defaultValue,\n                true);\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly values: IVersionedValue<string>[],\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class EnumProperty<TEnum extends { [s: number]: string }> extends PropertyDefinition {\n    private _values: IVersionedValue<number>[] = [];\n\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): number | undefined {\n        let sourceValue = source[this.name];\n\n        if (typeof sourceValue !== \"string\") {\n            return this.defaultValue;\n        }\n\n        let enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\n\n        if (enumValue !== undefined) {\n            for (let versionedValue of this.values) {\n                if (versionedValue.value === enumValue) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return enumValue;\n                    }\n                    else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()));\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name));\n\n        return this.defaultValue;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: number | undefined, context: BaseSerializationContext) {\n        let invalidValue = false;\n\n        if (value !== undefined) {\n            invalidValue = true;\n\n            for (let versionedValue of this.values) {\n                if (versionedValue.value === value) {\n                    let targetVersion = versionedValue.targetVersion ? versionedValue.targetVersion : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        invalidValue = false;\n\n                        break;\n                    }\n                    else {\n                        context.logEvent(\n                            sender,\n                            Enums.ValidationPhase.ToJSON,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.invalidPropertyValue(value, this.name));\n                    }\n                }\n            }\n        }\n\n        if (!invalidValue) {\n            context.serializeEnum(\n                this.enumType,\n                target,\n                this.name,\n                value,\n                this.defaultValue);\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly enumType: TEnum,\n        readonly defaultValue?: number,\n        values?: IVersionedValue<number>[],\n        readonly onGetInitialValue?: (sender: SerializableObject) => number) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!values) {\n            for (let key in enumType) {\n                let keyAsNumber = parseInt(key, 10);\n\n                if (keyAsNumber >= 0) {\n                    this._values.push( { value: keyAsNumber });\n                }\n            }\n        }\n        else {\n            this._values = values;\n        }\n    }\n\n    get values(): IVersionedValue<number>[] {\n        return this._values;\n    }\n}\n\nexport type SerializableObjectType = { new(): SerializableObject };\n\nexport class SerializableObjectProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject | undefined {\n        let sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\n        }\n\n        let result = new this.objectType();\n        result.parse(sourceValue, context);\n\n        return result;\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject | undefined, context: BaseSerializationContext) {\n        let serializedValue: object | undefined = undefined;\n\n        if (value !== undefined && !value.hasAllDefaultValues()) {\n            serializedValue = value.toJSON(context);\n        }\n\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\n            serializedValue = undefined;\n        }\n\n        context.serializeValue(target, this.name, serializedValue, this.defaultValue, true);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        readonly nullable: boolean = false,\n        defaultValue?: SerializableObject) {\n        super(\n            targetVersion,\n            name,\n            defaultValue,\n            (sender: SerializableObject) => { return this.nullable ? undefined : new this.objectType(); });\n    }\n}\n\nexport class SerializableObjectCollectionProperty extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): SerializableObject[] | undefined {\n        let result: SerializableObject[] | undefined = [];\n\n        let sourceCollection = source[this.name];\n\n        if (Array.isArray(sourceCollection)) {\n            for (let sourceItem of sourceCollection) {\n                let item = new this.objectType();\n                item.parse(sourceItem, context);\n\n                result.push(item);\n\n                if (this.onItemAdded) {\n                    this.onItemAdded(sender, item);\n                }\n            }\n        }\n\n        return result.length > 0 ? result : (this.onGetInitialValue ? this.onGetInitialValue(sender) : undefined);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: SerializableObject[] | undefined, context: BaseSerializationContext) {\n        context.serializeArray(target, this.name, value);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        readonly onItemAdded?: (sender: SerializableObject, item: SerializableObject) => void) {\n        super(\n            targetVersion,\n            name,\n            undefined,\n            (sender: SerializableObject) => { return []; });\n    }\n}\n\nexport class CustomProperty<T> extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): T {\n        return this.onParse(sender, this, source, context);\n    }\n\n    toJSON(sender: SerializableObject, target: PropertyBag, value: T, context: BaseSerializationContext) {\n        this.onToJSON(sender, this, target, value, context);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly onParse: (sender: SerializableObject, property: PropertyDefinition, source: PropertyBag, context: BaseSerializationContext) => T,\n        readonly onToJSON: (sender: SerializableObject, property: PropertyDefinition, target: PropertyBag, value: T, context: BaseSerializationContext) => void,\n        readonly defaultValue?: T,\n        readonly onGetInitialValue?: (sender: SerializableObject) => T) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!this.onParse) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\n        }\n\n        if (!this.onToJSON) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\n        }\n    }\n}\n\nexport class SerializableObjectSchema {\n    private _properties: PropertyDefinition[] = [];\n\n    indexOf(property: PropertyDefinition): number {\n        for (let i = 0; i < this._properties.length; i++) {\n            if (this._properties[i] === property) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    add(...properties: PropertyDefinition[]) {\n        for (let i = 0; i < properties.length; i++) {\n            if (this.indexOf(properties[i]) === -1) {\n                this._properties.push(properties[i]);\n            }\n        }\n    }\n\n    remove(...properties: PropertyDefinition[]) {\n        for (let property of properties) {\n            while (true) {\n                let index = this.indexOf(property);\n\n                if (index >= 0) {\n                    this._properties.splice(index, 1);\n                }\n                else {\n                    break;\n                }\n            }\n        }\n    }\n\n    getItemAt(index: number): PropertyDefinition {\n        return this._properties[index];\n    }\n\n    getCount(): number {\n        return this._properties.length;\n    }\n}\n\n// This is a decorator function, used to map SerializableObject descendant class members to\n// schema properties\nexport function property(property: PropertyDefinition) {\n    return function(target: any, propertyKey: string) {\n        let descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\n\n        if (!descriptor.get && !descriptor.set) {\n            descriptor.get = function(this: SerializableObject) { return this.getValue(property); };\n            descriptor.set = function(this: SerializableObject, value: any) { this.setValue(property, value); };\n\n            Object.defineProperty(target, propertyKey, descriptor)\n        }\n    }\n}\n\nexport type PropertyBag = { [propertyName: string]: any };\n\nexport abstract class SerializableObject {\n    static onRegisterCustomProperties?: (sender: SerializableObject, schema: SerializableObjectSchema) => void;\n    static defaultMaxVersion: Version = Versions.latest;\n\n    private static readonly _schemaCache: { [typeName: string]: SerializableObjectSchema } = {};\n\n    private _propertyBag: PropertyBag = {};\n    private _rawProperties: PropertyBag = {};\n\n    protected abstract getSchemaKey(): string;\n\n    protected getDefaultSerializationContext(): BaseSerializationContext {\n        return new SimpleSerializationContext();\n    }\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        let ctor = <any>this.constructor;\n        let properties: PropertyDefinition[] = [];\n\n        for (let propertyName in ctor) {\n            try {\n                let propertyValue = ctor[propertyName];\n\n                if (propertyValue instanceof PropertyDefinition) {\n                    properties.push(propertyValue);\n                }\n            }\n            catch {\n                // If a property happens to have a getter function and\n                // it throws an exception, we need to catch it here\n            }\n        }\n\n        if (properties.length > 0) {\n            let sortedProperties = properties.sort((p1: PropertyDefinition, p2: PropertyDefinition) => {\n                if (p1.sequentialNumber > p2.sequentialNumber) {\n                    return 1;\n                }\n                else if (p1.sequentialNumber < p2.sequentialNumber) {\n                    return -1;\n                }\n\n                return 0;\n            });\n\n            schema.add(...sortedProperties);\n        }\n\n        if (SerializableObject.onRegisterCustomProperties) {\n            SerializableObject.onRegisterCustomProperties(this, schema);\n        }\n    }\n\n    protected getValue(property: PropertyDefinition): any {\n        return this._propertyBag.hasOwnProperty(property.getInternalName()) ? this._propertyBag[property.getInternalName()] : property.defaultValue;\n    }\n\n    protected setValue(property: PropertyDefinition, value: any) {\n        if (value === undefined || value === null) {\n            delete this._propertyBag[property.getInternalName()];\n        }\n        else {\n            this._propertyBag[property.getInternalName()] = value;\n        }\n    }\n\n    protected internalParse(source: PropertyBag, context: BaseSerializationContext) {\n        this._propertyBag = {};\n        this._rawProperties = GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\n\n        if (source) {\n            let s = this.getSchema();\n\n            for (let i = 0; i < s.getCount(); i++) {\n                let property = s.getItemAt(i);\n\n                if (property.isSerializationEnabled) {\n                    let propertyValue = property.onGetInitialValue ? property.onGetInitialValue(this) : undefined;\n\n                    if (source.hasOwnProperty(property.name)) {\n                        if (property.targetVersion.compareTo(context.targetVersion) <= 0) {\n                            propertyValue = property.parse(this, source, context);\n                        }\n                        else {\n                            context.logParseEvent(\n                                this,\n                                Enums.ValidationEvent.UnsupportedProperty,\n                                Strings.errors.propertyNotSupported(\n                                    property.name,\n                                    property.targetVersion.toString(),\n                                    context.targetVersion.toString()));\n                        }\n                    }\n\n                    this.setValue(property, propertyValue);\n                }\n            }\n        }\n        else {\n            this.resetDefaultValues();\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\n        let s = this.getSchema();\n        let serializedProperties: string[] = [];\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            // Avoid serializing the same property multiple times. This is necessary\n            // because some property definitions map to the same underlying schema\n            // property\n            if (property.isSerializationEnabled && property.targetVersion.compareTo(context.targetVersion) <= 0 && serializedProperties.indexOf(property.name) === -1) {\n                property.toJSON(this, target, this.getValue(property), context);\n\n                serializedProperties.push(property.name);\n            }\n        }\n    }\n\n    protected shouldSerialize(context: BaseSerializationContext): boolean {\n        return true;\n    }\n\n    maxVersion: Version = SerializableObject.defaultMaxVersion;\n\n    constructor() {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            if (property.onGetInitialValue) {\n                this.setValue(property, property.onGetInitialValue(this));\n            }\n        }\n    }\n\n    parse(source: PropertyBag, context?: BaseSerializationContext) {\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\n    }\n\n    toJSON(context?: BaseSerializationContext): PropertyBag | undefined {\n        let effectiveContext: BaseSerializationContext;\n\n        if (context && context instanceof BaseSerializationContext) {\n            effectiveContext = context;\n        }\n        else {\n            effectiveContext = this.getDefaultSerializationContext();\n            effectiveContext.toJSONOriginalParam = context;\n        }\n\n        if (this.shouldSerialize(effectiveContext)) {\n            let result: PropertyBag;\n\n            if (GlobalSettings.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === \"object\") {\n                result = this._rawProperties;\n            }\n            else {\n                result = {};\n            }\n\n            this.internalToJSON(result, effectiveContext);\n\n            return result;\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    hasDefaultValue(property: PropertyDefinition): boolean {\n        return this.getValue(property) === property.defaultValue;\n    }\n\n    hasAllDefaultValues(): boolean {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            if (!this.hasDefaultValue(property)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    resetDefaultValues() {\n        let s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            let property = s.getItemAt(i);\n\n            this.setValue(property, property.defaultValue);\n        }\n    }\n\n    setCustomProperty(name: string, value: any) {\n        let shouldDeleteProperty = (typeof value === \"string\" && !value) || value === undefined || value === null;\n\n        if (shouldDeleteProperty) {\n            delete this._rawProperties[name];\n        }\n        else {\n            this._rawProperties[name] = value;\n        }\n    }\n\n    getCustomProperty(name: string): any {\n        return this._rawProperties[name];\n    }\n\n    getSchema(): SerializableObjectSchema {\n        let schema: SerializableObjectSchema = SerializableObject._schemaCache[this.getSchemaKey()];\n\n        if (!schema) {\n            schema = new SerializableObjectSchema();\n\n            this.populateSchema(schema);\n\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\n        }\n\n        return schema;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}