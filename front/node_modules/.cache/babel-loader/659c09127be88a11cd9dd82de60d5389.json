{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranscriptionServiceRecognizer = void 0;\n\nvar Exports_1 = require(\"../common/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar SpeechConnectionMessage_Internal_1 = require(\"./SpeechConnectionMessage.Internal\"); // tslint:disable-next-line:max-classes-per-file\n\n\nvar TranscriptionServiceRecognizer =\n/** @class */\nfunction (_super) {\n  __extends(TranscriptionServiceRecognizer, _super);\n\n  function TranscriptionServiceRecognizer(authentication, connectionFactory, audioSource, recognizerConfig, transcriber) {\n    var _this = _super.call(this, authentication, connectionFactory, audioSource, recognizerConfig, transcriber) || this;\n\n    _this.sendSpeechEvent = function (connection, payload) {\n      var speechEventJson = JSON.stringify(payload);\n\n      if (speechEventJson) {\n        return connection.send(new SpeechConnectionMessage_Internal_1.SpeechConnectionMessage(Exports_1.MessageType.Text, \"speech.event\", _this.privRequestSession.requestId, \"application/json\", speechEventJson));\n      }\n\n      return;\n    };\n\n    _this.privTranscriberRecognizer = transcriber;\n    _this.sendPrePayloadJSONOverride = _this.sendTranscriptionStartJSON;\n    return _this;\n  }\n\n  TranscriptionServiceRecognizer.prototype.sendSpeechEventAsync = function (info, command) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!!this.privRequestSession.isRecognizing) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.fetchConnection()];\n\n          case 1:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command))];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TranscriptionServiceRecognizer.prototype.processTypeSpecificMessages = function (connectionMessage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, resultProps, processed, _a, hypothesis, offset, ev, simple, resultReason, cancelReason, detailed, event_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resultProps = new Exports_2.PropertyCollection();\n            resultProps.setProperty(Exports_2.PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n            processed = false;\n            _a = connectionMessage.path.toLowerCase();\n\n            switch (_a) {\n              case \"speech.hypothesis\":\n                return [3\n                /*break*/\n                , 1];\n\n              case \"speech.fragment\":\n                return [3\n                /*break*/\n                , 1];\n\n              case \"speech.phrase\":\n                return [3\n                /*break*/\n                , 2];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 1:\n            hypothesis = Exports_3.SpeechHypothesis.fromJSON(connectionMessage.textBody);\n            offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n            result = new Exports_2.SpeechRecognitionResult(this.privRequestSession.requestId, Exports_2.ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, hypothesis.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n            this.privRequestSession.onHypothesis(offset);\n            ev = new Exports_2.SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n            if (!!this.privTranscriberRecognizer.recognizing) {\n              try {\n                this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            }\n\n            processed = true;\n            return [3\n            /*break*/\n            , 7];\n\n          case 2:\n            simple = Exports_3.SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n            resultReason = Exports_3.EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n            if (!(Exports_2.ResultReason.Canceled === resultReason)) return [3\n            /*break*/\n            , 4];\n            cancelReason = Exports_3.EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            return [4\n            /*yield*/\n            , this.cancelRecognitionLocal(cancelReason, Exports_3.EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus), undefined)];\n\n          case 3:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === Exports_2.ResultReason.NoMatch && simple.RecognitionStatus !== Exports_3.RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(Exports_3.OutputFormatPropertyName) === Exports_2.OutputFormat[Exports_2.OutputFormat.Simple]) {\n                result = new Exports_2.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, simple.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n              } else {\n                detailed = Exports_3.DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                result = new Exports_2.SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === Exports_3.RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, detailed.Offset + this.privRequestSession.currentTurnAudioOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, undefined, connectionMessage.textBody, resultProps);\n              }\n\n              event_1 = new Exports_2.SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privTranscriberRecognizer.recognized) {\n                try {\n                  this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event_1);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n\n            _b.label = 5;\n\n          case 5:\n            processed = true;\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            , processed];\n        }\n      });\n    });\n  }; // Cancels recognition.\n\n\n  TranscriptionServiceRecognizer.prototype.cancelRecognition = function (sessionId, requestId, cancellationReason, errorCode, error) {\n    var properties = new Exports_2.PropertyCollection();\n    properties.setProperty(Exports_3.CancellationErrorCodePropertyName, Exports_2.CancellationErrorCode[errorCode]);\n\n    if (!!this.privTranscriberRecognizer.canceled) {\n      var cancelEvent = new Exports_2.ConversationTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      var result = new Exports_2.SpeechRecognitionResult(requestId, Exports_2.ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // Language Detection Confidence\n      undefined, // Speaker Id\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }; // Encapsulated for derived service recognizers that need to send additional JSON\n\n\n  TranscriptionServiceRecognizer.prototype.sendTranscriptionStartJSON = function (connection) {\n    return __awaiter(this, void 0, void 0, function () {\n      var info, payload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.sendSpeechContext(connection)];\n\n          case 1:\n            _a.sent();\n\n            info = this.privTranscriberRecognizer.getConversationInfo();\n            payload = this.createSpeechEventPayload(info, \"start\");\n            return [4\n            /*yield*/\n            , this.sendSpeechEvent(connection, payload)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.sendWaveHeader(connection)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TranscriptionServiceRecognizer.prototype.createSpeechEventPayload = function (info, command) {\n    var meeting = \"meeting\";\n    var eventDict = {\n      id: meeting,\n      name: command,\n      meeting: info.conversationProperties\n    };\n    var idString = \"id\";\n    var attendees = \"attendees\";\n    var record = \"record\";\n    eventDict[meeting][idString] = info.id;\n    eventDict[meeting][attendees] = info.participants;\n    eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\n    return eventDict;\n  };\n\n  return TranscriptionServiceRecognizer;\n}(Exports_3.ServiceRecognizerBase);\n\nexports.TranscriptionServiceRecognizer = TranscriptionServiceRecognizer;","map":{"version":3,"mappings":"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","names":["__extends","authentication","connectionFactory","audioSource","recognizerConfig","transcriber","_super","_this","connection","payload","speechEventJson","JSON","stringify","send","SpeechConnectionMessage_Internal_1","Exports_1","Text","privRequestSession","requestId","privTranscriberRecognizer","sendPrePayloadJSONOverride","sendTranscriptionStartJSON","TranscriptionServiceRecognizer","info","command","isRecognizing","fetchConnection","_a","sendSpeechEvent","createSpeechEventPayload","connectionMessage","resultProps","Exports_2","setProperty","SpeechServiceResponse_JsonResult","textBody","processed","path","toLowerCase","hypothesis","Exports_3","fromJSON","offset","Offset","currentTurnAudioOffset","result","RecognizingSpeech","Duration","Language","LanguageDetectionConfidence","SpeakerId","undefined","onHypothesis","ev","sessionId","recognizing","error","simple","resultReason","implTranslateRecognitionResult","RecognitionStatus","onPhraseRecognized","Canceled","cancelReason","implTranslateCancelResult","cancelRecognitionLocal","implTranslateCancelErrorCode","_b","isSpeechEnded","NoMatch","InitialSilenceTimeout","privRecognizerConfig","parameters","getProperty","Simple","DisplayText","detailed","Success","NBest","Display","event_1","recognized","privSuccessCallback","e","privErrorCallback","cancellationReason","errorCode","properties","canceled","cancelEvent","sendSpeechContext","getConversationInfo","sendWaveHeader","meeting","eventDict","id","name","conversationProperties","idString","attendees","record","participants","audiorecording","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo } from \"../sdk/Transcription/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    hypothesis.SpeakerId,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privTranscriberRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\r\n                        undefined);\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranscriberRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranscriberRecognizer.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection);\r\n        const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n        const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n        await this.sendSpeechEvent(connection, payload);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent = (connection: IConnection, payload: { [id: string]: any }): Promise<void> => {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const meeting: string = \"meeting\";\r\n        const eventDict: { [id: string]: any } = { id: meeting, name: command, meeting: info.conversationProperties };\r\n        const idString: string = \"id\";\r\n        const attendees: string = \"attendees\";\r\n        const record: string = \"record\";\r\n        eventDict[meeting][idString] = info.id;\r\n        eventDict[meeting][attendees] = info.participants;\r\n        eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\r\n        return eventDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}