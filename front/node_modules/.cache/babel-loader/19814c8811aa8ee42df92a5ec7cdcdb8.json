{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileAuthorizationPhraseResult, VoiceProfileEnrollmentResult, VoiceProfileResult, VoiceProfileType } from \"./Exports\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\n\nexport class VoiceProfileClient {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  constructor(speechConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this VoiceProfileClient.\n   * @member VoiceProfileClient.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   *        specifies the keyword to be recognized.\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @param cb - Callback invoked once Voice Profile has been created.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  createProfileAsync(profileType, lang, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createProfile(profileType, lang);\n      const response = result.json();\n      const profile = new VoiceProfile(response.profileId, profileType);\n      return profile;\n    }))(), cb, err);\n  }\n  /**\n   * Get current information of a voice profile\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\n   * @param cb - Callback invoked once Voice Profile has been created.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  retrieveEnrollmentResultAsync(profile, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfileStatus(profile);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    }))(), cb, err);\n  }\n  /**\n   * Get all voice profiles on account with given voice profile type\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\n   * @function\n   * @public\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n   * @param cb - Callback invoked once Profile list has been returned.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  getAllProfilesAsync(profileType, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfiles(profileType);\n\n      if (profileType === VoiceProfileType.TextIndependentIdentification) {\n        return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json());\n      }\n\n      return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json());\n    }))(), cb, err);\n  }\n  /**\n   * Get valid authorization phrases for voice profile enrollment\n   * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\n   * @function\n   * @public\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @param cb - Callback invoked once phrases have been returned.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  getAuthorizationPhrasesAsync(lang, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getAuthorizationPhrases(lang);\n      return new VoiceProfileAuthorizationPhraseResult(result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled, result.statusText, result.json());\n    }))(), cb, err);\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @param cb - Callback invoked once Enrollment request has been submitted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  enrollProfileAsync(profile, audioConfig, cb, err) {\n    const configImpl = audioConfig;\n    Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createEnrollment(profile, configImpl);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    }))(), cb, err);\n  }\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @param cb - Callback invoked once Voice Profile has been deleted.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  deleteProfileAsync(profile, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.deleteProfile(profile);\n      return this.getResult(result, ResultReason.DeletedVoiceProfile);\n    }))(), cb, err);\n  }\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @param cb - Callback invoked once Voice Profile has been reset.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  resetProfileAsync(profile, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.resetProfile(profile);\n      return this.getResult(result, ResultReason.ResetVoiceProfile);\n    }))(), cb, err);\n  }\n  /**\n   * Included for compatibility\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  } // Does class setup, swiped from Recognizer.\n\n\n  implClientSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n\n  getResult(result, successReason, cb) {\n    const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n    return response;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Context","OS","SpeakerIdMessageAdapter","SpeakerRecognitionConfig","marshalPromiseToCallbacks","Contracts","PropertyId","ResultReason","VoiceProfile","VoiceProfileAuthorizationPhraseResult","VoiceProfileEnrollmentResult","VoiceProfileResult","VoiceProfileType","VoiceProfileClient","constructor","speechConfig","speechConfigImpl","throwIfNull","privProperties","properties","clone","implClientSetup","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","createProfileAsync","profileType","lang","cb","err","__awaiter","result","privAdapter","createProfile","response","json","profile","profileId","retrieveEnrollmentResultAsync","getProfileStatus","ok","EnrolledVoiceProfile","Canceled","data","statusText","getAllProfilesAsync","getProfiles","TextIndependentIdentification","FromIdentificationProfileList","FromVerificationProfileList","getAuthorizationPhrasesAsync","getAuthorizationPhrases","EnrollingVoiceProfile","enrollProfileAsync","audioConfig","configImpl","throwIfNullOrUndefined","createEnrollment","deleteProfileAsync","deleteProfile","getResult","DeletedVoiceProfile","resetProfileAsync","resetProfile","ResetVoiceProfile","close","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","successReason"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/src/sdk/VoiceProfileClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileAuthorizationPhraseResult,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once Voice Profile has been created.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public createProfileAsync(profileType: VoiceProfileType, lang: string, cb?: (e: VoiceProfile) => void, err?: (e: string) => void): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfile> => {\r\n            const result: IRestResponse = await this.privAdapter.createProfile(profileType, lang);\r\n            const response: { profileId: string } = result.json();\r\n            const profile = new VoiceProfile(response.profileId, profileType);\r\n            return profile;\r\n        })(), cb, err);\r\n    }\r\n     /**\r\n      * Get current information of a voice profile\r\n      * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n      * @function\r\n      * @public\r\n      * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n      * @param cb - Callback invoked once Voice Profile has been created.\r\n      * @param err - Callback invoked in case of an error.\r\n      */\r\n    public retrieveEnrollmentResultAsync(profile: VoiceProfile, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n                marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult> => {\r\n            const result: IRestResponse = await this.privAdapter.getProfileStatus(profile);\r\n            return new VoiceProfileEnrollmentResult(\r\n                result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                result.data,\r\n                result.statusText,\r\n            );\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @param cb - Callback invoked once Profile list has been returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public getAllProfilesAsync(profileType: VoiceProfileType, cb?: (e: VoiceProfileEnrollmentResult[]) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult[]> => {\r\n            const result: IRestResponse = await this.privAdapter.getProfiles(profileType);\r\n            if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n                return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json());\r\n            }\r\n            return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json());\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @param cb - Callback invoked once phrases have been returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public getAuthorizationPhrasesAsync(lang: string, cb?: (e: VoiceProfileAuthorizationPhraseResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileAuthorizationPhraseResult> => {\r\n            const result: IRestResponse = await this.privAdapter.getAuthorizationPhrases(lang);\r\n            return new VoiceProfileAuthorizationPhraseResult(\r\n                result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled,\r\n                result.statusText,\r\n                result.json()\r\n            );\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @param cb - Callback invoked once Enrollment request has been submitted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult> => {\r\n            const result: IRestResponse = await this.privAdapter.createEnrollment(profile, configImpl);\r\n            return new VoiceProfileEnrollmentResult(\r\n                result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n                result.data,\r\n                result.statusText,\r\n            );\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @param cb - Callback invoked once Voice Profile has been deleted.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public deleteProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\r\n            const result: IRestResponse = await this.privAdapter.deleteProfile(profile);\r\n            return this.getResult(result, ResultReason.DeletedVoiceProfile);\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @param cb - Callback invoked once Voice Profile has been reset.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public resetProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\r\n            const result: IRestResponse = await this.privAdapter.resetProfile(profile);\r\n            return this.getResult(result, ResultReason.ResetVoiceProfile);\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}