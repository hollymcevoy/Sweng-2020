{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _callee;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _connect = require(\"../actions/connect\");\n\nvar _createPromiseQueue2 = _interopRequireDefault(require(\"../createPromiseQueue\"));\n\nvar _setNotification = _interopRequireDefault(require(\"../actions/setNotification\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(connectionStatusToNotification),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(_callee);\n\nvar CONNECTIVITY_STATUS_NOTIFICATION_ID = 'connectivitystatus';\n\nfunction subscribeToPromiseQueue(observable) {\n  var _createPromiseQueue = (0, _createPromiseQueue2[\"default\"])(),\n      push = _createPromiseQueue.push,\n      shift = _createPromiseQueue.shift;\n\n  var subscription = observable.subscribe({\n    next: push\n  });\n  return {\n    shift: shift,\n    unsubscribe: function unsubscribe() {\n      subscription.unsubscribe();\n    }\n  };\n}\n\nfunction connectionStatusToNotification(_ref) {\n  var directLine, _subscribeToPromiseQu, shift, unsubscribe, reconnecting, value;\n\n  return _regenerator[\"default\"].wrap(function connectionStatusToNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          directLine = _ref.payload.directLine;\n          _subscribeToPromiseQu = subscribeToPromiseQueue(directLine.connectionStatus$), shift = _subscribeToPromiseQu.shift, unsubscribe = _subscribeToPromiseQu.unsubscribe;\n          _context.prev = 2;\n\n        case 3:\n          _context.next = 5;\n          return (0, _effects.call)(shift);\n\n        case 5:\n          value = _context.sent;\n          _context.t0 = value;\n          _context.next = _context.t0 === 0 ? 9 : _context.t0 === 1 ? 9 : _context.t0 === 2 ? 12 : _context.t0 === 3 ? 16 : _context.t0 === 4 ? 16 : 20;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return (0, _effects.put)((0, _setNotification[\"default\"])({\n            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n            level: 'info',\n            message: reconnecting ? 'reconnecting' : 'connecting'\n          }));\n\n        case 11:\n          return _context.abrupt(\"break\", 21);\n\n        case 12:\n          reconnecting = 1;\n          _context.next = 15;\n          return (0, _effects.put)((0, _setNotification[\"default\"])({\n            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n            level: 'success',\n            message: 'connected'\n          }));\n\n        case 15:\n          return _context.abrupt(\"break\", 21);\n\n        case 16:\n          reconnecting = 1;\n          _context.next = 19;\n          return (0, _effects.put)((0, _setNotification[\"default\"])({\n            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n            level: 'error',\n            message: 'failedtoconnect'\n          }));\n\n        case 19:\n          return _context.abrupt(\"break\", 21);\n\n        case 20:\n          return _context.abrupt(\"break\", 21);\n\n        case 21:\n          _context.next = 3;\n          break;\n\n        case 23:\n          _context.prev = 23;\n          unsubscribe();\n          return _context.finish(23);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2,, 23, 26]]);\n}\n\nfunction _callee() {\n  return _regenerator[\"default\"].wrap(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeLatest)(_connect.CONNECT, connectionStatusToNotification);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAEA;;AAEA;;AACA;;AACA;;wDAgBUA;;;AAdV,IAAMC,mCAAmC,GAAG,oBAA5C;;AAEA,SAASC,uBAAT,CAAiCC,UAAjC,EAA6C;AAC3C,4BAAwB,sCAAxB;AAAA,MAAQC,IAAR,uBAAQA,IAAR;AAAA,MAAcC,KAAd,uBAAcA,KAAd;;AACA,MAAMC,YAAY,GAAGH,UAAU,CAACI,SAAXJ,CAAqB;AAAEK,QAAI,EAAEJ;AAAR,GAArBD,CAArB;AAEA,SAAO;AACLE,SAAK,EAALA,KADK;AAELI,eAFK,yBAES;AACZH,kBAAY,CAACG,WAAbH;AACD;AAJI,GAAP;AAMD;;AAED,SAAUN,8BAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsDU,oBAAtD,QAA2CC,OAA3C,CAAsDD;AAAtDE,kCACiCV,uBAAuB,CAACQ,UAAU,CAACG,iBAAZ,CADxD,EACUR,KADV,yBACUA,KADV,EACiBI,WADjB,yBACiBA,WADjB;AAAAK;;AAAA;AAAAA;AAOoB,iBAAM,mBAAKT,KAAL,CAAN;;AAPpB;AAOYU,eAPZ,gBAOYA;AAPZD,wBAScC,KATd;AAAAD,0CAUa,CAVb,uBAWa,CAXb,uBAsBa,CAtBb,wBAmCa,CAnCb,wBAoCa,CApCb;AAAA;;AAAA;AAAAA;AAYU,iBAAM,kBACJ,iCAAgB;AACdE,cAAE,EAAEf,mCADU;AAEdgB,iBAAK,EAAE,MAFO;AAGdC,mBAAO,EAAEC,YAAY,GAAG,cAAH,GAAoB;AAH3B,WAAhB,CADI,CAAN;;AAZV;AAAA;;AAAA;AAuBUA,sBAAY,GAAG,CAAfA;AAvBVL;AAyBU,iBAAM,kBACJ,iCAAgB;AACdE,cAAE,EAAEf,mCADU;AAEdgB,iBAAK,EAAE,SAFO;AAGdC,mBAAO,EAAE;AAHK,WAAhB,CADI,CAAN;;AAzBV;AAAA;;AAAA;AAqCUC,sBAAY,GAAG,CAAfA;AArCVL;AAuCU,iBAAM,kBACJ,iCAAgB;AACdE,cAAE,EAAEf,mCADU;AAEdgB,iBAAK,EAAE,OAFO;AAGdC,mBAAO,EAAE;AAHK,WAAhB,CADI,CAAN;;AAvCV;AAAA;;AAAA;AAAA;;AAAA;AAAAJ;AAAA;;AAAA;AAAAA;AAsDIL,qBAAW;AAtDf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0De;AAAA;AAAA;AAAA;AAAA;AAAAW;AACb,iBAAM,yBAAWC,gBAAX,EAAoBrB,8BAApB,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["connectionStatusToNotification","CONNECTIVITY_STATUS_NOTIFICATION_ID","subscribeToPromiseQueue","observable","push","shift","subscription","subscribe","next","unsubscribe","directLine","payload","_subscribeToPromiseQu","connectionStatus$","_context","value","id","level","message","reconnecting","_context2","CONNECT"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/connectionStatusToNotificationSaga.js"],"sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 2, 3, 4] }] */\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\n\nimport { CONNECT } from '../actions/connect';\nimport createPromiseQueue from '../createPromiseQueue';\nimport setNotification from '../actions/setNotification';\n\nconst CONNECTIVITY_STATUS_NOTIFICATION_ID = 'connectivitystatus';\n\nfunction subscribeToPromiseQueue(observable) {\n  const { push, shift } = createPromiseQueue();\n  const subscription = observable.subscribe({ next: push });\n\n  return {\n    shift,\n    unsubscribe() {\n      subscription.unsubscribe();\n    }\n  };\n}\n\nfunction* connectionStatusToNotification({ payload: { directLine } }) {\n  const { shift, unsubscribe } = subscribeToPromiseQueue(directLine.connectionStatus$);\n\n  try {\n    let reconnecting;\n\n    for (;;) {\n      const value = yield call(shift);\n\n      switch (value) {\n        case 0:\n        case 1:\n          yield put(\n            setNotification({\n              id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n              level: 'info',\n              message: reconnecting ? 'reconnecting' : 'connecting'\n            })\n          );\n\n          break;\n\n        case 2:\n          reconnecting = 1;\n\n          yield put(\n            setNotification({\n              id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n              level: 'success',\n              message: 'connected'\n            })\n          );\n\n          break;\n\n        case 3:\n        case 4:\n          reconnecting = 1;\n\n          yield put(\n            setNotification({\n              id: CONNECTIVITY_STATUS_NOTIFICATION_ID,\n              level: 'error',\n              message: 'failedtoconnect'\n            })\n          );\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  } finally {\n    unsubscribe();\n  }\n}\n\nexport default function* () {\n  yield takeLatest(CONNECT, connectionStatusToNotification);\n}\n"]},"metadata":{},"sourceType":"script"}