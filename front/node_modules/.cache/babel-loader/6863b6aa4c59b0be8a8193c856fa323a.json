{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useFocusVisible;\n\nvar _react = require(\"react\");\n\nvar _useObserveFocusVisible = _interopRequireDefault(require(\"./useObserveFocusVisible\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction useFocusVisible(targetRef) {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusVisible = _useState2[0],\n      setFocusVisible = _useState2[1];\n\n  var handleBlur = (0, _react.useCallback)(function () {\n    return setFocusVisible(false);\n  }, [setFocusVisible]);\n  var handleFocusVisible = (0, _react.useCallback)(function () {\n    return setFocusVisible(true);\n  }, [setFocusVisible]);\n  (0, _useObserveFocusVisible.default)(targetRef, handleFocusVisible);\n  (0, _react.useEffect)(function () {\n    var current = targetRef.current;\n    current.addEventListener('blur', handleBlur);\n    return function () {\n      return current.removeEventListener('blur', handleBlur);\n    };\n  }, [handleBlur, targetRef]);\n  return [focusVisible];\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAASA,eAAT,CAAyBC,SAAzB,EAAuE;AACpF,kBAAwC,qBAAS,KAAT,CAAxC;AAAA;AAAA,MAAOC,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,UAAU,GAAG,wBAAY;AAAA,WAAMD,eAAe,CAAC,KAAD,CAArB;AAAZ,KAA0C,CAACA,eAAD,CAA1C,CAAnB;AACA,MAAME,kBAAkB,GAAG,wBAAY;AAAA,WAAMF,eAAe,CAAC,IAAD,CAArB;AAAZ,KAAyC,CAACA,eAAD,CAAzC,CAA3B;AAEA,uCAAuBF,SAAvB,EAAkCI,kBAAlC;AAEA,wBAAU,YAAM;AACd,QAAQC,OAAR,GAAoBL,SAApB,CAAQK,OAAR;AAEAA,WAAO,CAACC,gBAARD,CAAyB,MAAzBA,EAAiCF,UAAjCE;AAEA,WAAO;AAAA,aAAMA,OAAO,CAACE,mBAARF,CAA4B,MAA5BA,EAAoCF,UAApCE,CAAN;AAAP;AALF,KAMG,CAACF,UAAD,EAAaH,SAAb,CANH;AAQA,SAAO,CAACC,YAAD,CAAP;AACD","names":["useFocusVisible","targetRef","focusVisible","setFocusVisible","handleBlur","handleFocusVisible","current","addEventListener","removeEventListener"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/hooks/internal/useFocusVisible.ts"],"sourcesContent":["import { RefObject, useCallback, useEffect, useState } from 'react';\n\nimport useObserveFocusVisible from './useObserveFocusVisible';\n\nexport default function useFocusVisible(targetRef: RefObject<HTMLElement>): [boolean] {\n  const [focusVisible, setFocusVisible] = useState(false);\n\n  const handleBlur = useCallback(() => setFocusVisible(false), [setFocusVisible]);\n  const handleFocusVisible = useCallback(() => setFocusVisible(true), [setFocusVisible]);\n\n  useObserveFocusVisible(targetRef, handleFocusVisible);\n\n  useEffect(() => {\n    const { current } = targetRef;\n\n    current.addEventListener('blur', handleBlur);\n\n    return () => current.removeEventListener('blur', handleBlur);\n  }, [handleBlur, targetRef]);\n\n  return [focusVisible];\n}\n"]},"metadata":{},"sourceType":"script"}