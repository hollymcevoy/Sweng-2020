{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GlobalRegistry = exports.CardObjectRegistry = void 0;\n\nvar serialization_1 = require(\"./serialization\");\n\nvar CardObjectRegistry =\n/** @class */\nfunction () {\n  function CardObjectRegistry() {\n    this._items = {};\n  }\n\n  CardObjectRegistry.prototype.findByName = function (typeName) {\n    return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;\n  };\n\n  CardObjectRegistry.prototype.clear = function () {\n    this._items = {};\n  };\n\n  CardObjectRegistry.prototype.copyTo = function (target) {\n    var keys = Object.keys(this._items);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      var typeRegistration = this._items[key];\n      target.register(typeRegistration.typeName, typeRegistration.objectType, typeRegistration.schemaVersion);\n    }\n  };\n\n  CardObjectRegistry.prototype.register = function (typeName, objectType, schemaVersion) {\n    if (schemaVersion === void 0) {\n      schemaVersion = serialization_1.Versions.v1_0;\n    }\n\n    var registrationInfo = this.findByName(typeName);\n\n    if (registrationInfo !== undefined) {\n      registrationInfo.objectType = objectType;\n    } else {\n      registrationInfo = {\n        typeName: typeName,\n        objectType: objectType,\n        schemaVersion: schemaVersion\n      };\n    }\n\n    this._items[typeName] = registrationInfo;\n  };\n\n  CardObjectRegistry.prototype.unregister = function (typeName) {\n    delete this._items[typeName];\n  };\n\n  CardObjectRegistry.prototype.createInstance = function (typeName, targetVersion) {\n    var registrationInfo = this.findByName(typeName);\n    return registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0 ? new registrationInfo.objectType() : undefined;\n  };\n\n  CardObjectRegistry.prototype.getItemCount = function () {\n    return Object.keys(this._items).length;\n  };\n\n  CardObjectRegistry.prototype.getItemAt = function (index) {\n    var _this = this;\n\n    return Object.keys(this._items).map(function (e) {\n      return _this._items[e];\n    })[index];\n  };\n\n  return CardObjectRegistry;\n}();\n\nexports.CardObjectRegistry = CardObjectRegistry;\n\nvar GlobalRegistry =\n/** @class */\nfunction () {\n  function GlobalRegistry() {}\n\n  GlobalRegistry.populateWithDefaultElements = function (registry) {\n    registry.clear();\n    GlobalRegistry.defaultElements.copyTo(registry);\n  };\n\n  GlobalRegistry.populateWithDefaultActions = function (registry) {\n    registry.clear();\n    GlobalRegistry.defaultActions.copyTo(registry);\n  };\n\n  Object.defineProperty(GlobalRegistry, \"elements\", {\n    get: function () {\n      if (!GlobalRegistry._elements) {\n        GlobalRegistry._elements = new CardObjectRegistry();\n        GlobalRegistry.populateWithDefaultElements(GlobalRegistry._elements);\n      }\n\n      return GlobalRegistry._elements;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GlobalRegistry, \"actions\", {\n    get: function () {\n      if (!GlobalRegistry._actions) {\n        GlobalRegistry._actions = new CardObjectRegistry();\n        GlobalRegistry.populateWithDefaultActions(GlobalRegistry._actions);\n      }\n\n      return GlobalRegistry._actions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  GlobalRegistry.reset = function () {\n    GlobalRegistry._elements = undefined;\n    GlobalRegistry._actions = undefined;\n  };\n\n  GlobalRegistry.defaultElements = new CardObjectRegistry();\n  GlobalRegistry.defaultActions = new CardObjectRegistry();\n  return GlobalRegistry;\n}();\n\nexports.GlobalRegistry = GlobalRegistry;","map":{"version":3,"mappings":"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","names":["CardObjectRegistry","typeName","_items","hasOwnProperty","undefined","target","keys","Object","_i","key","typeRegistration","register","objectType","schemaVersion","serialization_1","v1_0","registrationInfo","findByName","targetVersion","compareTo","length","index","map","e","exports","GlobalRegistry","registry","clear","defaultElements","copyTo","defaultActions","_elements","populateWithDefaultElements","_actions","populateWithDefaultActions"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/adaptivecards/src/registry.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { CardElement, Action } from \"./card-elements\";\nimport { SerializableObject, Version, Versions } from \"./serialization\";\n\nexport interface ITypeRegistration<T extends SerializableObject> {\n    typeName: string,\n    objectType: { new(): T },\n    schemaVersion: Version\n}\n\nexport class CardObjectRegistry<T extends SerializableObject> {\n    private _items: { [typeName: string]: ITypeRegistration<T> } = {};\n\n    findByName(typeName: string): ITypeRegistration<T> | undefined {\n        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;\n    }\n\n    clear() {\n        this._items = {};\n    }\n\n    copyTo(target: CardObjectRegistry<T>) {\n        let keys = Object.keys(this._items);\n\n        for (let key of keys) {\n            let typeRegistration = this._items[key];\n\n            target.register(typeRegistration.typeName, typeRegistration.objectType, typeRegistration.schemaVersion);\n        }\n    }\n\n    register(typeName: string, objectType: { new(): T }, schemaVersion: Version = Versions.v1_0) {\n        let registrationInfo = this.findByName(typeName);\n\n        if (registrationInfo !== undefined) {\n            registrationInfo.objectType = objectType;\n        }\n        else {\n            registrationInfo = {\n                typeName: typeName,\n                objectType: objectType,\n                schemaVersion: schemaVersion\n            }\n        }\n\n        this._items[typeName] = registrationInfo;\n    }\n\n    unregister(typeName: string) {\n        delete this._items[typeName];\n    }\n\n    createInstance(typeName: string, targetVersion: Version): T | undefined {\n        let registrationInfo = this.findByName(typeName);\n\n        return (registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0) ? new registrationInfo.objectType() : undefined;\n    }\n\n    getItemCount(): number {\n        return Object.keys(this._items).length;\n    }\n\n    getItemAt(index: number): ITypeRegistration<T> {\n        return Object.keys(this._items).map(e => this._items[e])[index];\n    }\n}\n\nexport class GlobalRegistry {\n    private static _elements?: CardObjectRegistry<CardElement>;\n    private static _actions?: CardObjectRegistry<Action>;\n\n    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>) {\n        registry.clear();\n\n        GlobalRegistry.defaultElements.copyTo(registry);\n    }\n\n    static populateWithDefaultActions(registry: CardObjectRegistry<Action>) {\n        registry.clear();\n\n        GlobalRegistry.defaultActions.copyTo(registry);\n    }\n\n    static readonly defaultElements = new CardObjectRegistry<CardElement>();\n    static readonly defaultActions = new CardObjectRegistry<Action>();\n\n    static get elements(): CardObjectRegistry<CardElement> {\n        if (!GlobalRegistry._elements) {\n            GlobalRegistry._elements = new CardObjectRegistry<CardElement>();\n            GlobalRegistry.populateWithDefaultElements(GlobalRegistry._elements);\n        }\n\n        return GlobalRegistry._elements;\n    }\n\n    static get actions(): CardObjectRegistry<Action> {\n        if (!GlobalRegistry._actions) {\n            GlobalRegistry._actions = new CardObjectRegistry<Action>();\n            GlobalRegistry.populateWithDefaultActions(GlobalRegistry._actions);\n        }\n\n        return GlobalRegistry._actions;\n    }\n\n    static reset() {\n        GlobalRegistry._elements = undefined;\n        GlobalRegistry._actions = undefined;\n    }\n}"]},"metadata":{},"sourceType":"script"}