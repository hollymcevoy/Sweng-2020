{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AudioStreamFormatImpl = exports.AudioStreamFormat = exports.AudioFormatTag = void 0;\nvar AudioFormatTag;\n\n(function (AudioFormatTag) {\n  AudioFormatTag[AudioFormatTag[\"PCM\"] = 1] = \"PCM\";\n  AudioFormatTag[AudioFormatTag[\"MuLaw\"] = 2] = \"MuLaw\";\n  AudioFormatTag[AudioFormatTag[\"Siren\"] = 3] = \"Siren\";\n  AudioFormatTag[AudioFormatTag[\"MP3\"] = 4] = \"MP3\";\n  AudioFormatTag[AudioFormatTag[\"SILKSkype\"] = 5] = \"SILKSkype\";\n  AudioFormatTag[AudioFormatTag[\"OGG_OPUS\"] = 6] = \"OGG_OPUS\";\n  AudioFormatTag[AudioFormatTag[\"WEBM_OPUS\"] = 7] = \"WEBM_OPUS\";\n  AudioFormatTag[AudioFormatTag[\"ALaw\"] = 8] = \"ALaw\";\n})(AudioFormatTag = exports.AudioFormatTag || (exports.AudioFormatTag = {}));\n/**\n * Represents audio stream format used for custom audio input configurations.\n * @class AudioStreamFormat\n */\n\n\nvar AudioStreamFormat =\n/** @class */\nfunction () {\n  function AudioStreamFormat() {}\n  /**\n   * Creates an audio stream format object representing the default audio stream\n   * format (16KHz 16bit mono PCM).\n   * @member AudioStreamFormat.getDefaultInputFormat\n   * @function\n   * @public\n   * @returns {AudioStreamFormat} The audio stream format being created.\n   */\n\n\n  AudioStreamFormat.getDefaultInputFormat = function () {\n    return AudioStreamFormatImpl.getDefaultInputFormat();\n  };\n  /**\n   * Creates an audio stream format object with the specified pcm waveformat characteristics.\n   * @member AudioStreamFormat.getWaveFormatPCM\n   * @function\n   * @public\n   * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\n   * @param {number} bitsPerSample - Bits per sample, typically 16.\n   * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\n   *        uses one channel and stereo data uses two channels.\n   * @returns {AudioStreamFormat} The audio stream format being created.\n   */\n\n\n  AudioStreamFormat.getWaveFormatPCM = function (samplesPerSecond, bitsPerSample, channels) {\n    return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\n  };\n\n  return AudioStreamFormat;\n}();\n\nexports.AudioStreamFormat = AudioStreamFormat;\n/**\n * @private\n * @class AudioStreamFormatImpl\n */\n// tslint:disable-next-line:max-classes-per-file\n\nvar AudioStreamFormatImpl =\n/** @class */\nfunction (_super) {\n  __extends(AudioStreamFormatImpl, _super);\n  /**\n   * Creates an instance with the given values.\n   * @constructor\n   * @param {number} samplesPerSec - Samples per second.\n   * @param {number} bitsPerSample - Bits per sample.\n   * @param {number} channels - Number of channels.\n   * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\n   */\n\n\n  function AudioStreamFormatImpl(samplesPerSec, bitsPerSample, channels, format) {\n    if (samplesPerSec === void 0) {\n      samplesPerSec = 16000;\n    }\n\n    if (bitsPerSample === void 0) {\n      bitsPerSample = 16;\n    }\n\n    if (channels === void 0) {\n      channels = 1;\n    }\n\n    if (format === void 0) {\n      format = AudioFormatTag.PCM;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.setString = function (view, offset, str) {\n      for (var i = 0; i < str.length; i++) {\n        view.setUint8(offset + i, str.charCodeAt(i));\n      }\n    };\n    /* 1 for PCM; 6 for alaw; 7 for mulaw */\n\n\n    switch (format) {\n      case AudioFormatTag.PCM:\n        _this.formatTag = 1;\n        break;\n\n      case AudioFormatTag.ALaw:\n        _this.formatTag = 6;\n        break;\n\n      case AudioFormatTag.MuLaw:\n        _this.formatTag = 7;\n        break;\n\n      default:\n    }\n\n    _this.bitsPerSample = bitsPerSample;\n    _this.samplesPerSec = samplesPerSec;\n    _this.channels = channels;\n    _this.avgBytesPerSec = _this.samplesPerSec * _this.channels * (_this.bitsPerSample / 8);\n    _this.blockAlign = _this.channels * Math.max(_this.bitsPerSample, 8);\n    _this.privHeader = new ArrayBuffer(44); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n    var view = new DataView(_this.privHeader);\n    /* RIFF identifier */\n\n    _this.setString(view, 0, \"RIFF\");\n    /* file length */\n\n\n    view.setUint32(4, 0, true);\n    /* RIFF type & Format */\n\n    _this.setString(view, 8, \"WAVEfmt \");\n    /* format chunk length */\n\n\n    view.setUint32(16, 16, true);\n    /* audio format */\n\n    view.setUint16(20, _this.formatTag, true);\n    /* channel count */\n\n    view.setUint16(22, _this.channels, true);\n    /* sample rate */\n\n    view.setUint32(24, _this.samplesPerSec, true);\n    /* byte rate (sample rate * block align) */\n\n    view.setUint32(28, _this.avgBytesPerSec, true);\n    /* block align (channel count * bytes per sample) */\n\n    view.setUint16(32, _this.channels * (_this.bitsPerSample / 8), true);\n    /* bits per sample */\n\n    view.setUint16(34, _this.bitsPerSample, true);\n    /* data chunk identifier */\n\n    _this.setString(view, 36, \"data\");\n    /* data chunk length */\n\n\n    view.setUint32(40, 0, true);\n    return _this;\n  }\n  /**\n   * Retrieves the default input format.\n   * @member AudioStreamFormatImpl.getDefaultInputFormat\n   * @function\n   * @public\n   * @returns {AudioStreamFormatImpl} The default input format.\n   */\n\n\n  AudioStreamFormatImpl.getDefaultInputFormat = function () {\n    return new AudioStreamFormatImpl();\n  };\n  /**\n   * Creates an audio context appropriate to current browser\n   * @member AudioStreamFormatImpl.getAudioContext\n   * @function\n   * @public\n   * @returns {AudioContext} An audio context instance\n   */\n\n\n  AudioStreamFormatImpl.getAudioContext = function (sampleRate) {\n    // Workaround for Speech SDK bug in Safari.\n    var AudioContext = window.AudioContext // our preferred impl\n    || window.webkitAudioContext // fallback, mostly when on Safari\n    || false; // could not find.\n    // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\n\n    if (!!AudioContext) {\n      if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\n        return new AudioContext({\n          sampleRate: sampleRate\n        });\n      } else {\n        return new AudioContext();\n      }\n    } else {\n      throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\n    }\n  };\n  /**\n   * Closes the configuration object.\n   * @member AudioStreamFormatImpl.prototype.close\n   * @function\n   * @public\n   */\n\n\n  AudioStreamFormatImpl.prototype.close = function () {\n    return;\n  };\n\n  Object.defineProperty(AudioStreamFormatImpl.prototype, \"header\", {\n    get: function () {\n      return this.privHeader;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AudioStreamFormatImpl;\n}(AudioStreamFormat);\n\nexports.AudioStreamFormatImpl = AudioStreamFormatImpl;","map":{"version":3,"mappings":"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","names":["AudioFormatTag","exports","AudioStreamFormat","AudioStreamFormatImpl","getDefaultInputFormat","samplesPerSecond","bitsPerSample","channels","__extends","samplesPerSec","format","PCM","_super","_this","view","offset","str","i","length","setUint8","charCodeAt","formatTag","ALaw","MuLaw","avgBytesPerSec","blockAlign","Math","max","privHeader","ArrayBuffer","DataView","setString","setUint32","setUint16","sampleRate","AudioContext","window","webkitAudioContext","undefined","navigator","mediaDevices","getSupportedConstraints","Error","Object"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     *        uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        this.privHeader = new ArrayBuffer(44);\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n        const view = new DataView(this.privHeader);\r\n\r\n        /* RIFF identifier */\r\n        this.setString(view, 0, \"RIFF\");\r\n        /* file length */\r\n        view.setUint32(4, 0, true);\r\n        /* RIFF type & Format */\r\n        this.setString(view, 8, \"WAVEfmt \");\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* audio format */\r\n        view.setUint16(20, this.formatTag, true);\r\n        /* channel count */\r\n        view.setUint16(22, this.channels, true);\r\n        /* sample rate */\r\n        view.setUint32(24, this.samplesPerSec, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, this.avgBytesPerSec, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n        /* bits per sample */\r\n        view.setUint16(34, this.bitsPerSample, true);\r\n        /* data chunk identifier */\r\n        this.setString(view, 36, \"data\");\r\n        /* data chunk length */\r\n        view.setUint32(40, 0, true);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void { return; }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}