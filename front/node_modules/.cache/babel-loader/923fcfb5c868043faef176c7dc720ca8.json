{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PropertyCollection = void 0;\n\nvar Exports_1 = require(\"./Exports\");\n/**\n * Represents collection of properties and their values.\n * @class PropertyCollection\n */\n\n\nvar PropertyCollection =\n/** @class */\nfunction () {\n  function PropertyCollection() {\n    this.privKeys = [];\n    this.privValues = [];\n  }\n  /**\n   * Returns the property value in type String. The parameter must have the same type as String.\n   * Currently only String, int and bool are allowed.\n   * If the name is not available, the specified defaultValue is returned.\n   * @member PropertyCollection.prototype.getProperty\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string} def - The default value which is returned if the parameter\n   *        is not available in the collection.\n   * @returns {string} value of the parameter.\n   */\n\n\n  PropertyCollection.prototype.getProperty = function (key, def) {\n    var keyToUse;\n\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = Exports_1.PropertyId[key];\n    }\n\n    for (var n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        return this.privValues[n];\n      }\n    }\n\n    return def;\n  };\n  /**\n   * Sets the String value of the parameter specified by name.\n   * @member PropertyCollection.prototype.setProperty\n   * @function\n   * @public\n   * @param {string} key - The parameter name.\n   * @param {string} value - The value of the parameter.\n   */\n\n\n  PropertyCollection.prototype.setProperty = function (key, value) {\n    var keyToUse;\n\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = Exports_1.PropertyId[key];\n    }\n\n    for (var n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        this.privValues[n] = value;\n        return;\n      }\n    }\n\n    this.privKeys.push(keyToUse);\n    this.privValues.push(value);\n  };\n  /**\n   * Clones the collection.\n   * @member PropertyCollection.prototype.clone\n   * @function\n   * @public\n   * @returns {PropertyCollection} A copy of the collection.\n   */\n\n\n  PropertyCollection.prototype.clone = function () {\n    var clonedMap = new PropertyCollection();\n\n    for (var n = 0; n < this.privKeys.length; n++) {\n      clonedMap.privKeys.push(this.privKeys[n]);\n      clonedMap.privValues.push(this.privValues[n]);\n    }\n\n    return clonedMap;\n  };\n  /**\n   * Merges this set of properties into another, no overwrites.\n   * @member PropertyCollection.prototype.mergeTo\n   * @function\n   * @public\n   * @param {PropertyCollection} The collection to merge into.\n   */\n\n\n  PropertyCollection.prototype.mergeTo = function (destinationCollection) {\n    var _this = this;\n\n    this.privKeys.forEach(function (key) {\n      if (destinationCollection.getProperty(key, undefined) === undefined) {\n        var value = _this.getProperty(key);\n\n        destinationCollection.setProperty(key, value);\n      }\n    });\n  };\n\n  return PropertyCollection;\n}();\n\nexports.PropertyCollection = PropertyCollection;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;AAEA;;;;;;AAIA;AAAA;AAAA;AAAA;AACY,oBAAqB,EAArB;AACA,sBAAuB,EAAvB;AA6FX;AA3FG;;;;;;;;;;;;;;AAYOA,6CAAP,UAAmBC,GAAnB,EAA6CC,GAA7C,EAAyD;AACrD,QAAIC,QAAJ;;AAEA,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AACzBE,cAAQ,GAAGF,GAAX;AACH,KAFD,MAEO;AACHE,cAAQ,GAAGC,qBAAWH,GAAX,CAAX;AACH;;AAED,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,UAAI,KAAKC,QAAL,CAAcD,CAAd,MAAqBF,QAAzB,EAAmC;AAC/B,eAAO,KAAKK,UAAL,CAAgBH,CAAhB,CAAP;AACH;AACJ;;AAED,WAAOH,GAAP;AACH,GAhBM;AAkBP;;;;;;;;;;AAQOF,6CAAP,UAAmBC,GAAnB,EAA6CQ,KAA7C,EAA0D;AACtD,QAAIN,QAAJ;;AAEA,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AACzBE,cAAQ,GAAGF,GAAX;AACH,KAFD,MAEO;AACHE,cAAQ,GAAGC,qBAAWH,GAAX,CAAX;AACH;;AAED,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,UAAI,KAAKC,QAAL,CAAcD,CAAd,MAAqBF,QAAzB,EAAmC;AAC/B,aAAKK,UAAL,CAAgBH,CAAhB,IAAqBI,KAArB;AACA;AACH;AACJ;;AAED,SAAKH,QAAL,CAAcI,IAAd,CAAmBP,QAAnB;AACA,SAAKK,UAAL,CAAgBE,IAAhB,CAAqBD,KAArB;AACH,GAlBM;AAoBP;;;;;;;;;AAOOT,uCAAP;AACI,QAAMW,SAAS,GAAG,IAAIX,kBAAJ,EAAlB;;AAEA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3CM,eAAS,CAACL,QAAV,CAAmBI,IAAnB,CAAwB,KAAKJ,QAAL,CAAcD,CAAd,CAAxB;AACAM,eAAS,CAACH,UAAV,CAAqBE,IAArB,CAA0B,KAAKF,UAAL,CAAgBH,CAAhB,CAA1B;AACH;;AAED,WAAOM,SAAP;AACH,GATM;AAWP;;;;;;;;;AAOOX,yCAAP,UAAeY,qBAAf,EAAwD;AAAxD;;AACI,SAAKN,QAAL,CAAcO,OAAd,CAAsB,UAACZ,GAAD,EAAyB;AAC3C,UAAIW,qBAAqB,CAACE,WAAtB,CAAkCb,GAAlC,EAAuCc,SAAvC,MAAsDA,SAA1D,EAAqE;AACjE,YAAMN,KAAK,GAAGO,KAAI,CAACF,WAAL,CAAiBb,GAAjB,CAAd;;AACAW,6BAAqB,CAACK,WAAtB,CAAkChB,GAAlC,EAAuCQ,KAAvC;AACH;AACJ,KALD;AAMH,GAPM;;AAQX;AA/FA;;AAAaS","names":["PropertyCollection","key","def","keyToUse","Exports_1","n","privKeys","length","privValues","value","push","clonedMap","destinationCollection","forEach","getProperty","undefined","_this","setProperty","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter\r\n     *        is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection} The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId) => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}