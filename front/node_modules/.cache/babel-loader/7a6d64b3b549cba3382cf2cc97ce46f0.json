{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromiseToEmptyCallback = exports.request = exports.extractHeaderValue = void 0;\n\nvar RestConfigBase_1 = require(\"../../common.browser/RestConfigBase\"); // Node.JS specific xmlhttprequest / browser support.\n\n\nvar XHR = __importStar(require(\"xmlhttprequest-ts\"));\n/**\n * Config settings for Conversation Translator\n */\n\n/**\n * Helpers for sending / receiving HTTPS requests / responses.\n * @param params\n */\n\n\nfunction queryParams(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return Object.keys(params).map(function (k) {\n    return encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]);\n  }).join(\"&\");\n}\n\nfunction withQuery(url, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var queryString = queryParams(params);\n  return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n}\n\nfunction parseXHRResult(xhr) {\n  return {\n    data: xhr.responseText,\n    headers: xhr.getAllResponseHeaders(),\n    json: function () {\n      return JSON.parse(xhr.responseText);\n    },\n    ok: xhr.status >= 200 && xhr.status < 300,\n    status: xhr.status,\n    statusText: xhr.statusText\n  };\n}\n\nfunction errorResponse(xhr, message) {\n  if (message === void 0) {\n    message = null;\n  }\n\n  return {\n    data: message || xhr.statusText,\n    headers: xhr.getAllResponseHeaders(),\n    json: function () {\n      return JSON.parse(message || \"\\\"\" + xhr.statusText + \"\\\"\");\n    },\n    ok: false,\n    status: xhr.status,\n    statusText: xhr.statusText\n  };\n}\n\nfunction extractHeaderValue(headerKey, headers) {\n  var headerValue = \"\";\n\n  try {\n    var arr = headers.trim().split(/[\\r\\n]+/);\n    var headerMap_1 = {};\n    arr.forEach(function (line) {\n      var parts = line.split(\": \");\n      var header = parts.shift().toLowerCase();\n      var value = parts.join(\": \");\n      headerMap_1[header] = value;\n    });\n    headerValue = headerMap_1[headerKey.toLowerCase()];\n  } catch (e) {// ignore the error\n  }\n\n  return headerValue;\n}\n\nexports.extractHeaderValue = extractHeaderValue;\n\nfunction request(method, url, queryParams, body, options, callback) {\n  if (queryParams === void 0) {\n    queryParams = {};\n  }\n\n  if (body === void 0) {\n    body = null;\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var defaultRequestOptions = RestConfigBase_1.RestConfigBase.requestOptions;\n  var ignoreCache = options.ignoreCache || defaultRequestOptions.ignoreCache;\n  var headers = options.headers || defaultRequestOptions.headers;\n  var timeout = options.timeout || defaultRequestOptions.timeout;\n  var xhr;\n\n  if (typeof window === \"undefined\") {\n    // Node\n    xhr = new XHR.XMLHttpRequest();\n  } else {\n    xhr = new XMLHttpRequest();\n  }\n\n  xhr.open(method, withQuery(url, queryParams), true);\n\n  if (headers) {\n    Object.keys(headers).forEach(function (key) {\n      return xhr.setRequestHeader(key, headers[key]);\n    });\n  }\n\n  if (ignoreCache) {\n    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n  }\n\n  xhr.timeout = timeout;\n\n  xhr.onload = function (evt) {\n    callback(parseXHRResult(xhr));\n  };\n\n  xhr.onerror = function (evt) {\n    callback(errorResponse(xhr, \"Failed to make request.\"));\n  };\n\n  xhr.ontimeout = function (evt) {\n    callback(errorResponse(xhr, \"Request took longer than expected.\"));\n  };\n\n  if (method === \"post\" && body) {\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.send(JSON.stringify(body));\n  } else {\n    xhr.send();\n  }\n}\n\nexports.request = request;\n\nfunction PromiseToEmptyCallback(promise, cb, err) {\n  if (!!promise) {\n    promise.then(function (result) {\n      try {\n        if (!!cb) {\n          cb();\n        }\n      } catch (e) {\n        if (!!err) {\n          err(\"'Unhandled error on promise callback: \" + e + \"'\");\n        }\n      }\n    }, function (reason) {\n      try {\n        if (!!err) {\n          err(reason);\n        }\n        /* tslint:disable:no-empty */\n\n      } catch (error) {}\n    });\n  } else {\n    if (!!err) {\n      err(\"Null promise\");\n    }\n  }\n}\n\nexports.PromiseToEmptyCallback = PromiseToEmptyCallback;","map":{"version":3,"mappings":"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","names":["queryParams","params","Object","keys","map","k","encodeURIComponent","join","withQuery","url","queryString","indexOf","parseXHRResult","xhr","data","responseText","headers","getAllResponseHeaders","json","parse","ok","status","statusText","errorResponse","message","extractHeaderValue","headerKey","headerValue","arr","trim","split","headerMap_1","forEach","line","parts","header","shift","toLowerCase","value","e","exports","request","method","body","options","callback","defaultRequestOptions","RestConfigBase_1","requestOptions","ignoreCache","timeout","window","XHR","XMLHttpRequest","open","key","setRequestHeader","onload","evt","onerror","ontimeout","send","JSON","stringify","PromiseToEmptyCallback","promise","cb","err","then","result","reason","error"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationUtils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IResponse } from \"./ConversationTranslatorInterfaces\";\r\n\r\nimport { IRequestOptions, RestConfigBase } from \"../../common.browser/RestConfigBase\";\r\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\r\n\r\n// Node.JS specific xmlhttprequest / browser support.\r\nimport * as XHR from \"xmlhttprequest-ts\";\r\n\r\n/**\r\n * Config settings for Conversation Translator\r\n */\r\n/**\r\n * Helpers for sending / receiving HTTPS requests / responses.\r\n * @param params\r\n */\r\nfunction queryParams(params: any = {}): any {\r\n    return Object.keys(params)\r\n        .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n        .join(\"&\");\r\n}\r\n\r\nfunction withQuery(url: string, params: any = {}): any {\r\n    const queryString = queryParams(params);\r\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n}\r\n\r\nfunction parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IResponse {\r\n    return {\r\n        data: xhr.responseText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(xhr.responseText) as T,\r\n        ok: xhr.status >= 200 && xhr.status < 300,\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nfunction errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IResponse {\r\n    return {\r\n        data: message || xhr.statusText,\r\n        headers: xhr.getAllResponseHeaders(),\r\n        json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\r\n        ok: false,\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n    };\r\n}\r\n\r\nexport function extractHeaderValue(headerKey: string, headers: string): string {\r\n\r\n    let headerValue: string = \"\";\r\n\r\n    try {\r\n        const arr = headers.trim().split(/[\\r\\n]+/);\r\n        const headerMap: any = {};\r\n        arr.forEach((line: any) => {\r\n            const parts = line.split(\": \");\r\n            const header = parts.shift().toLowerCase();\r\n            const value = parts.join(\": \");\r\n            headerMap[header] = value;\r\n        });\r\n\r\n        headerValue = headerMap[headerKey.toLowerCase()];\r\n    } catch (e) {\r\n        // ignore the error\r\n    }\r\n\r\n    return headerValue;\r\n}\r\n\r\nexport function request(\r\n    method: \"get\" | \"post\" | \"delete\",\r\n    url: string,\r\n    queryParams: any = {},\r\n    body: any = null,\r\n    options: IRequestOptions = {},\r\n    callback: any): any {\r\n\r\n    const defaultRequestOptions = RestConfigBase.requestOptions;\r\n\r\n    const ignoreCache = options.ignoreCache || defaultRequestOptions.ignoreCache;\r\n    const headers = options.headers || defaultRequestOptions.headers;\r\n    const timeout = options.timeout || defaultRequestOptions.timeout;\r\n\r\n    let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\r\n    if (typeof window === \"undefined\") { // Node\r\n        xhr = new XHR.XMLHttpRequest();\r\n\r\n    } else {\r\n        xhr = new XMLHttpRequest();\r\n    }\r\n    xhr.open(method, withQuery(url, queryParams), true);\r\n\r\n    if (headers) {\r\n        Object.keys(headers).forEach((key: any) => xhr.setRequestHeader(key, headers[key]));\r\n    }\r\n\r\n    if (ignoreCache) {\r\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n    }\r\n\r\n    xhr.timeout = timeout;\r\n\r\n    xhr.onload = (evt: any) => {\r\n        callback(parseXHRResult(xhr));\r\n    };\r\n\r\n    xhr.onerror = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Failed to make request.\"));\r\n    };\r\n\r\n    xhr.ontimeout = (evt: any) => {\r\n        callback(errorResponse(xhr, \"Request took longer than expected.\"));\r\n    };\r\n\r\n    if (method === \"post\" && body) {\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        xhr.send(JSON.stringify(body));\r\n    } else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nexport function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void {\r\n    if (!!promise) {\r\n        promise.then((result: T): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(`'Unhandled error on promise callback: ${e}'`);\r\n                }\r\n            }\r\n        }, (reason: any) => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    } else {\r\n        if (!!err) {\r\n            err(\"Null promise\");\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}