{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar FocusRedirector = function FocusRedirector(_ref) {\n  var className = _ref.className,\n      onFocus = _ref.onFocus,\n      redirectRef = _ref.redirectRef;\n  var handleFocus = (0, _react.useCallback)(function () {\n    var _redirectRef$current;\n\n    redirectRef === null || redirectRef === void 0 ? void 0 : (_redirectRef$current = redirectRef.current) === null || _redirectRef$current === void 0 ? void 0 : _redirectRef$current.focus();\n    onFocus && onFocus();\n  }, [onFocus, redirectRef]); // For NVDA, we should set aria-hidden=\"true\".\n  // When using NVDA in browse mode, press up/down arrow keys will focus on this redirector.\n  // This redirector is designed to capture TAB only and should not react on browse mode.\n  // However, reacting with browse mode is currently okay. Just better to leave it alone.\n\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    className: className,\n    onFocus: handleFocus,\n    tabIndex: 0\n  });\n};\n\nFocusRedirector.defaultProps = {\n  className: undefined,\n  onFocus: undefined,\n  redirectRef: undefined\n};\nFocusRedirector.propTypes = {\n  className: _propTypes.default.string,\n  onFocus: _propTypes.default.func,\n  // PropTypes is not fully compatible with TypeScript.\n  // @ts-ignore\n  redirectRef: _propTypes.default.shape({\n    current: _propTypes.default.instanceOf(HTMLElement)\n  })\n};\nvar _default = FocusRedirector;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAMA,eAAyC,GAAG,SAA5CA,eAA4C,OAAyC;AAAA,MAAtCC,SAAsC,QAAtCA,SAAsC;AAAA,MAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AACzF,MAAMC,WAAW,GAAG,wBAAY,YAAM;AAAA;;AACpCD,eAAW,SAAXA,eAAW,WAAXA,+CAAW,CAAEE,OAAb,8EAAsBC,KAAtB;AACAJ,WAAO,IAAIA,OAAO,EAAlBA;AAFkB,KAGjB,CAACA,OAAD,EAAUC,WAAV,CAHiB,CAApB,CADyF,CAMzF;AACA;AACA;AACA;;AACA,sBAAOI;AAAK,mBAAY,MAAjB;AAAwBN,aAAS,EAAEA,SAAnC;AAA8CC,WAAO,EAAEE,WAAvD;AAAoEI,YAAQ,EAAE;AAA9E,IAAP;AAVF;;AAaAR,eAAe,CAACS,YAAhBT,GAA+B;AAC7BC,WAAS,EAAES,SADkB;AAE7BR,SAAO,EAAEQ,SAFoB;AAG7BP,aAAW,EAAEO;AAHgB,CAA/BV;AAMAA,eAAe,CAACW,SAAhBX,GAA4B;AAC1BC,WAAS,EAAEW,mBAAUC,MADK;AAE1BX,SAAO,EAAEU,mBAAUE,IAFO;AAG1B;AACA;AACAX,aAAW,EAAES,mBAAUG,KAAVH,CAAgB;AAC3BP,WAAO,EAAEO,mBAAUI,UAAVJ,CAAqBK,WAArBL;AADkB,GAAhBA;AALa,CAA5BZ;eAUeA","names":["FocusRedirector","className","onFocus","redirectRef","handleFocus","current","focus","_react","tabIndex","defaultProps","undefined","propTypes","PropTypes","string","func","shape","instanceOf","HTMLElement"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/Utils/FocusRedirector.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\n\nimport type { FC, MutableRefObject } from 'react';\n\n// This is an element, when focused, will send the focus to the ref specified in \"redirectRef\".\n// Although the focus is being redirected, browser will scroll this redirector element into view.\n\n// Browser's \"scrollIntoView()\" call cannot be prevented through event.preventDefault() in both\n// bubble and capture phase of \"focus\" event.\n\n// When this focus redirector is put inside a scrollable container, you may want to resize or reposition\n// it to prevent unintentional scroll done by the browser default behavior.\n\ntype FocusRedirectorProps = {\n  className?: string;\n  onFocus?: () => void;\n  redirectRef?: MutableRefObject<HTMLElement>;\n};\n\nconst FocusRedirector: FC<FocusRedirectorProps> = ({ className, onFocus, redirectRef }) => {\n  const handleFocus = useCallback(() => {\n    redirectRef?.current?.focus();\n    onFocus && onFocus();\n  }, [onFocus, redirectRef]);\n\n  // For NVDA, we should set aria-hidden=\"true\".\n  // When using NVDA in browse mode, press up/down arrow keys will focus on this redirector.\n  // This redirector is designed to capture TAB only and should not react on browse mode.\n  // However, reacting with browse mode is currently okay. Just better to leave it alone.\n  return <div aria-hidden=\"true\" className={className} onFocus={handleFocus} tabIndex={0} />;\n};\n\nFocusRedirector.defaultProps = {\n  className: undefined,\n  onFocus: undefined,\n  redirectRef: undefined\n};\n\nFocusRedirector.propTypes = {\n  className: PropTypes.string,\n  onFocus: PropTypes.func,\n  // PropTypes is not fully compatible with TypeScript.\n  // @ts-ignore\n  redirectRef: PropTypes.shape({\n    current: PropTypes.instanceOf(HTMLElement)\n  })\n};\n\nexport default FocusRedirector;\n"]},"metadata":{},"sourceType":"script"}