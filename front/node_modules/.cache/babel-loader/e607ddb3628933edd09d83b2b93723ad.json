{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendMessageToPostActivitySaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _sendMessage = require(\"../actions/sendMessage\");\n\nvar _postActivity = _interopRequireDefault(require(\"../actions/postActivity\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regenerator[\"default\"].mark(postActivityWithMessage),\n    _marked2 = /*#__PURE__*/_regenerator[\"default\"].mark(sendMessageToPostActivity),\n    _marked3 = /*#__PURE__*/_regenerator[\"default\"].mark(sendMessageToPostActivitySaga);\n\nfunction postActivityWithMessage(_ref) {\n  var _ref$payload, channelData, method, text;\n\n  return _regenerator[\"default\"].wrap(function postActivityWithMessage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, channelData = _ref$payload.channelData, method = _ref$payload.method, text = _ref$payload.text;\n          _context.next = 3;\n          return (0, _effects.put)((0, _postActivity[\"default\"])({\n            channelData: channelData,\n            text: text,\n            textFormat: 'plain',\n            type: 'message'\n          }, method));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendMessageToPostActivity() {\n  return _regenerator[\"default\"].wrap(function sendMessageToPostActivity$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return (0, _effects.takeEvery)(function (_ref2) {\n            var payload = _ref2.payload,\n                type = _ref2.type;\n            return type === _sendMessage.SEND_MESSAGE && payload.text;\n          }, postActivityWithMessage);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction sendMessageToPostActivitySaga() {\n  return _regenerator[\"default\"].wrap(function sendMessageToPostActivitySaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _whileConnected[\"default\"])(sendMessageToPostActivity);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;wDAEUA;yDAcAC;yDAIeC;;AAlBzB,SAAUF,uBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAAG,8BAAoCC,OAApC,EAA+CC,WAA/C,gBAA+CA,WAA/C,EAA4DC,MAA5D,gBAA4DA,MAA5D,EAAoEC,IAApE,gBAAoEA,IAApE;AAAAC;AACE,iBAAM,kBACJ,8BACE;AACEH,uBAAW,EAAXA,WADF;AAEEE,gBAAI,EAAJA,IAFF;AAGEE,sBAAU,EAAE,OAHd;AAIEC,gBAAI,EAAE;AAJR,WADF,EAOEJ,MAPF,CADI,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUL,yBAAV;AAAA;AAAA;AAAA;AAAA;AAAAU;AACE,iBAAM,wBAAU;AAAA,gBAAGP,OAAH,SAAGA,OAAH;AAAA,gBAAYM,IAAZ,SAAYA,IAAZ;AAAA,mBAAuBA,IAAI,KAAKE,yBAATF,IAAyBN,OAAO,CAACG,IAAxD;AAAV,aAAwEP,uBAAxE,CAAN;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIe,SAAUE,6BAAV;AAAA;AAAA;AAAA;AAAA;AAAAW;AACb,iBAAM,gCAAeZ,yBAAf,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["postActivityWithMessage","sendMessageToPostActivity","sendMessageToPostActivitySaga","_ref$payload","payload","channelData","method","text","_context","textFormat","type","_context2","SEND_MESSAGE","_context3"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/sendMessageToPostActivitySaga.js"],"sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\n\nimport { SEND_MESSAGE } from '../actions/sendMessage';\nimport postActivity from '../actions/postActivity';\nimport whileConnected from './effects/whileConnected';\n\nfunction* postActivityWithMessage({ payload: { channelData, method, text } }) {\n  yield put(\n    postActivity(\n      {\n        channelData,\n        text,\n        textFormat: 'plain',\n        type: 'message'\n      },\n      method\n    )\n  );\n}\n\nfunction* sendMessageToPostActivity() {\n  yield takeEvery(({ payload, type }) => type === SEND_MESSAGE && payload.text, postActivityWithMessage);\n}\n\nexport default function* sendMessageToPostActivitySaga() {\n  yield whileConnected(sendMessageToPostActivity);\n}\n"]},"metadata":{},"sourceType":"script"}