{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Utils/AccessKeySink/Surface\"));\n\nvar _BasicConnectivityStatus = _interopRequireDefault(require(\"./BasicConnectivityStatus\"));\n\nvar _BasicSendBox = _interopRequireDefault(require(\"./BasicSendBox\"));\n\nvar _BasicToaster = _interopRequireDefault(require(\"./BasicToaster\"));\n\nvar _BasicTranscript = _interopRequireDefault(require(\"./BasicTranscript\"));\n\nvar _useStyleSet3 = _interopRequireDefault(require(\"./hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"./hooks/internal/useStyleToEmotionObject\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;\nvar ROOT_STYLE = {\n  display: 'flex',\n  flexDirection: 'column'\n};\nvar CONNECTIVITY_STATUS_STYLE = {\n  flexShrink: 0\n};\nvar SEND_BOX_CSS = {\n  flexShrink: 0\n};\nvar TOASTER_STYLE = {\n  flexShrink: 0\n};\nvar TRANSCRIPT_STYLE = {\n  flex: 1\n}; // Subset of landmark roles: https://w3.org/TR/wai-aria/#landmark_roles\n\nvar ARIA_LANDMARK_ROLES = ['complementary', 'contentinfo', 'form', 'main', 'region'];\n\nvar BasicWebChat = function BasicWebChat(_ref) {\n  var className = _ref.className,\n      role = _ref.role;\n\n  var _useStyleSet = (0, _useStyleSet3.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      rootStyleSet = _useStyleSet2[0].root;\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      options = _useStyleOptions2[0];\n\n  var styleToEmotionObject = (0, _useStyleToEmotionObject.default)();\n  var connectivityStatusClassName = styleToEmotionObject(CONNECTIVITY_STATUS_STYLE) + '';\n  var rootClassName = styleToEmotionObject(ROOT_STYLE) + '';\n  var sendBoxClassName = styleToEmotionObject(SEND_BOX_CSS) + '';\n  var toasterClassName = styleToEmotionObject(TOASTER_STYLE) + '';\n  var transcriptClassName = styleToEmotionObject(TRANSCRIPT_STYLE) + ''; // Fallback to \"complementary\" if specified is not a valid landmark role.\n\n  if (!ARIA_LANDMARK_ROLES.includes(role)) {\n    role = 'complementary';\n  }\n\n  return /*#__PURE__*/_react.default.createElement(_Surface.default, {\n    className: (0, _classnames.default)(rootClassName, rootStyleSet + '', (className || '') + ''),\n    role: role\n  }, !options.hideToaster && /*#__PURE__*/_react.default.createElement(_BasicToaster.default, {\n    className: toasterClassName\n  }), /*#__PURE__*/_react.default.createElement(_BasicTranscript.default, {\n    className: transcriptClassName\n  }), /*#__PURE__*/_react.default.createElement(_BasicConnectivityStatus.default, {\n    className: connectivityStatusClassName\n  }), !options.hideSendBox && /*#__PURE__*/_react.default.createElement(_BasicSendBox.default, {\n    className: sendBoxClassName\n  }));\n};\n\nBasicWebChat.defaultProps = {\n  className: '',\n  role: 'complementary'\n};\nBasicWebChat.propTypes = {\n  className: _propTypes.default.string,\n  // Ignoring deficiencies with TypeScript/PropTypes inference.\n  // @ts-ignore\n  role: _propTypes.default.oneOf(ARIA_LANDMARK_ROLES)\n};\nvar _default = BasicWebChat;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAQA,eAAR,GAA4BC,8BAApBD,eAAR;AAEA,IAAME,UAAU,GAAG;AACjBC,SAAO,EAAE,MADQ;AAEjBC,eAAa,EAAE;AAFE,CAAnB;AAKA,IAAMC,yBAAyB,GAAG;AAChCC,YAAU,EAAE;AADoB,CAAlC;AAIA,IAAMC,YAAY,GAAG;AACnBD,YAAU,EAAE;AADO,CAArB;AAIA,IAAME,aAAa,GAAG;AACpBF,YAAU,EAAE;AADQ,CAAtB;AAIA,IAAMG,gBAAgB,GAAG;AACvBC,MAAI,EAAE;AADiB,CAAzB,C,CAIA;;AACA,IAAMC,mBAAmB,GAAG,CAAC,eAAD,EAAkB,aAAlB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,QAAjD,CAA5B;;AAOA,IAAMC,YAAmC,GAAG,SAAtCA,YAAsC,OAAyB;AAAA,MAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AACnE,qBAAiC,4BAAjC;AAAA;AAAA,MAAeC,YAAf,oBAASC,IAAT;;AACA,yBAAkBhB,eAAe,EAAjC;AAAA;AAAA,MAAOiB,OAAP;;AACA,MAAMC,oBAAoB,GAAG,uCAA7B;AAEA,MAAMC,2BAA2B,GAAGD,oBAAoB,CAACb,yBAAD,CAApBa,GAAkD,EAAtF;AACA,MAAME,aAAa,GAAGF,oBAAoB,CAAChB,UAAD,CAApBgB,GAAmC,EAAzD;AACA,MAAMG,gBAAgB,GAAGH,oBAAoB,CAACX,YAAD,CAApBW,GAAqC,EAA9D;AACA,MAAMI,gBAAgB,GAAGJ,oBAAoB,CAACV,aAAD,CAApBU,GAAsC,EAA/D;AACA,MAAMK,mBAAmB,GAAGL,oBAAoB,CAACT,gBAAD,CAApBS,GAAyC,EAArE,CATmE,CAWnE;;AACA,MAAI,CAACP,mBAAmB,CAACa,QAApBb,CAA6BG,IAA7BH,CAAL,EAAyC;AACvCG,QAAI,GAAG,eAAPA;AACD;;AAED,sBACEW,6BAACC,gBAAD;AAAsBb,aAAS,EAAE,yBAAWO,aAAX,EAA0BL,YAAY,GAAG,EAAzC,EAA6C,CAACF,SAAS,IAAI,EAAd,IAAoB,EAAjE,CAAjC;AAAuGC,QAAI,EAAEA;AAA7G,KACG,CAACG,OAAO,CAACU,WAAT,iBAAwBF,6BAACG,qBAAD;AAAcf,aAAS,EAAES;AAAzB,IAD3B,eAEEG,6BAACI,wBAAD;AAAiBhB,aAAS,EAAEU;AAA5B,IAFF,eAGEE,6BAACK,gCAAD;AAAyBjB,aAAS,EAAEM;AAApC,IAHF,EAIG,CAACF,OAAO,CAACc,WAAT,iBAAwBN,6BAACO,qBAAD;AAAcnB,aAAS,EAAEQ;AAAzB,IAJ3B,CADF;AAhBF;;AA0BAT,YAAY,CAACqB,YAAbrB,GAA4B;AAC1BC,WAAS,EAAE,EADe;AAE1BC,MAAI,EAAE;AAFoB,CAA5BF;AAKAA,YAAY,CAACsB,SAAbtB,GAAyB;AACvBC,WAAS,EAAEsB,mBAAUC,MADE;AAEvB;AACA;AACAtB,MAAI,EAAEqB,mBAAUE,KAAVF,CAAgBxB,mBAAhBwB;AAJiB,CAAzBvB;eAOeA","names":["useStyleOptions","hooks","ROOT_STYLE","display","flexDirection","CONNECTIVITY_STATUS_STYLE","flexShrink","SEND_BOX_CSS","TOASTER_STYLE","TRANSCRIPT_STYLE","flex","ARIA_LANDMARK_ROLES","BasicWebChat","className","role","rootStyleSet","root","options","styleToEmotionObject","connectivityStatusClassName","rootClassName","sendBoxClassName","toasterClassName","transcriptClassName","includes","_react","_Surface","hideToaster","_BasicToaster","_BasicTranscript","_BasicConnectivityStatus","hideSendBox","_BasicSendBox","defaultProps","propTypes","PropTypes","string","oneOf"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/BasicWebChat.tsx"],"sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 2] }] */\n/* eslint react/no-unsafe: off */\n\nimport { hooks } from 'botframework-webchat-api';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\n\nimport AccessKeySinkSurface from './Utils/AccessKeySink/Surface';\nimport BasicConnectivityStatus from './BasicConnectivityStatus';\nimport BasicSendBox from './BasicSendBox';\nimport BasicToaster from './BasicToaster';\nimport BasicTranscript from './BasicTranscript';\nimport useStyleSet from './hooks/useStyleSet';\nimport useStyleToEmotionObject from './hooks/internal/useStyleToEmotionObject';\n\nconst { useStyleOptions } = hooks;\n\nconst ROOT_STYLE = {\n  display: 'flex',\n  flexDirection: 'column'\n};\n\nconst CONNECTIVITY_STATUS_STYLE = {\n  flexShrink: 0\n};\n\nconst SEND_BOX_CSS = {\n  flexShrink: 0\n};\n\nconst TOASTER_STYLE = {\n  flexShrink: 0\n};\n\nconst TRANSCRIPT_STYLE = {\n  flex: 1\n};\n\n// Subset of landmark roles: https://w3.org/TR/wai-aria/#landmark_roles\nconst ARIA_LANDMARK_ROLES = ['complementary', 'contentinfo', 'form', 'main', 'region'];\n\ntype BasicWebChatProps = {\n  className?: string;\n  role?: 'complementary' | 'contentinfo' | 'form' | 'main' | 'region';\n};\n\nconst BasicWebChat: FC<BasicWebChatProps> = ({ className, role }) => {\n  const [{ root: rootStyleSet }] = useStyleSet();\n  const [options] = useStyleOptions();\n  const styleToEmotionObject = useStyleToEmotionObject();\n\n  const connectivityStatusClassName = styleToEmotionObject(CONNECTIVITY_STATUS_STYLE) + '';\n  const rootClassName = styleToEmotionObject(ROOT_STYLE) + '';\n  const sendBoxClassName = styleToEmotionObject(SEND_BOX_CSS) + '';\n  const toasterClassName = styleToEmotionObject(TOASTER_STYLE) + '';\n  const transcriptClassName = styleToEmotionObject(TRANSCRIPT_STYLE) + '';\n\n  // Fallback to \"complementary\" if specified is not a valid landmark role.\n  if (!ARIA_LANDMARK_ROLES.includes(role)) {\n    role = 'complementary';\n  }\n\n  return (\n    <AccessKeySinkSurface className={classNames(rootClassName, rootStyleSet + '', (className || '') + '')} role={role}>\n      {!options.hideToaster && <BasicToaster className={toasterClassName} />}\n      <BasicTranscript className={transcriptClassName} />\n      <BasicConnectivityStatus className={connectivityStatusClassName} />\n      {!options.hideSendBox && <BasicSendBox className={sendBoxClassName} />}\n    </AccessKeySinkSurface>\n  );\n};\n\nBasicWebChat.defaultProps = {\n  className: '',\n  role: 'complementary'\n};\n\nBasicWebChat.propTypes = {\n  className: PropTypes.string,\n  // Ignoring deficiencies with TypeScript/PropTypes inference.\n  // @ts-ignore\n  role: PropTypes.oneOf(ARIA_LANDMARK_ROLES)\n};\n\nexport default BasicWebChat;\n\nexport type { BasicWebChatProps };\n"]},"metadata":{},"sourceType":"script"}