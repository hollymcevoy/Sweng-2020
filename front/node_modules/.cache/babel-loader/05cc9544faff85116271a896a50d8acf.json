{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IntentConnectionFactory = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar ConnectionFactoryBase_1 = require(\"./ConnectionFactoryBase\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar IntentConnectionFactory =\n/** @class */\nfunction (_super) {\n  __extends(IntentConnectionFactory, _super);\n\n  function IntentConnectionFactory() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.create = function (config, authInfo, connectionId) {\n      var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint);\n\n      if (!endpoint) {\n        var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_IntentRegion);\n        var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n        var host = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\n        endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\n      }\n\n      var queryParams = {\n        format: \"simple\",\n        language: config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_RecoLanguage)\n      };\n\n      _this.setCommonUrlParams(config, queryParams, endpoint);\n\n      var headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames_1.HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Url, endpoint);\n      var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n\n    return _this;\n  }\n\n  IntentConnectionFactory.prototype.getSpeechRegionFromIntentRegion = function (intentRegion) {\n    switch (intentRegion) {\n      case \"West US\":\n      case \"US West\":\n      case \"westus\":\n        return \"uswest\";\n\n      case \"West US 2\":\n      case \"US West 2\":\n      case \"westus2\":\n        return \"uswest2\";\n\n      case \"South Central US\":\n      case \"US South Central\":\n      case \"southcentralus\":\n        return \"ussouthcentral\";\n\n      case \"West Central US\":\n      case \"US West Central\":\n      case \"westcentralus\":\n        return \"uswestcentral\";\n\n      case \"East US\":\n      case \"US East\":\n      case \"eastus\":\n        return \"useast\";\n\n      case \"East US 2\":\n      case \"US East 2\":\n      case \"eastus2\":\n        return \"useast2\";\n\n      case \"West Europe\":\n      case \"Europe West\":\n      case \"westeurope\":\n        return \"europewest\";\n\n      case \"North Europe\":\n      case \"Europe North\":\n      case \"northeurope\":\n        return \"europenorth\";\n\n      case \"Brazil South\":\n      case \"South Brazil\":\n      case \"southbrazil\":\n        return \"brazilsouth\";\n\n      case \"Australia East\":\n      case \"East Australia\":\n      case \"eastaustralia\":\n        return \"australiaeast\";\n\n      case \"Southeast Asia\":\n      case \"Asia Southeast\":\n      case \"southeastasia\":\n        return \"asiasoutheast\";\n\n      case \"East Asia\":\n      case \"Asia East\":\n      case \"eastasia\":\n        return \"asiaeast\";\n\n      default:\n        return intentRegion;\n    }\n  };\n\n  return IntentConnectionFactory;\n}(ConnectionFactoryBase_1.ConnectionFactoryBase);\n\nexports.IntentConnectionFactory = IntentConnectionFactory;","map":{"version":3,"mappings":"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","names":["__extends","_this","config","authInfo","connectionId","endpoint","parameters","getProperty","Exports_2","SpeechServiceConnection_Endpoint","region","SpeechServiceConnection_IntentRegion","hostSuffix","toLowerCase","startsWith","host","SpeechServiceConnection_Host","queryParams","format","language","SpeechServiceConnection_RecoLanguage","setCommonUrlParams","headers","token","undefined","headerName","HeaderNames_1","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","Exports_1","Exports_3","fromRecognizerConfig","IntentConnectionFactory","intentRegion","ConnectionFactoryBase_1","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}