{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechSynthesisConnectionFactory = void 0;\n\nvar Exports_1 = require(\"../common.browser/Exports\");\n\nvar Exports_2 = require(\"../sdk/Exports\");\n\nvar Exports_3 = require(\"./Exports\");\n\nvar HeaderNames_1 = require(\"./HeaderNames\");\n\nvar QueryParameterNames_1 = require(\"./QueryParameterNames\");\n\nvar SpeechSynthesisConnectionFactory =\n/** @class */\nfunction () {\n  function SpeechSynthesisConnectionFactory() {\n    var _this = this;\n\n    this.synthesisUri = \"/cognitiveservices/websocket/v1\";\n\n    this.create = function (config, authInfo, connectionId) {\n      var endpoint = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      var region = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Region, undefined);\n      var hostSuffix = region && region.toLowerCase().startsWith(\"china\") ? \".azure.cn\" : \".microsoft.com\";\n      var endpointId = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      var hostPrefix = endpointId === undefined ? \"tts\" : \"voice\";\n      var host = config.parameters.getProperty(Exports_2.PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\n      var queryParams = {};\n\n      if (!endpoint) {\n        endpoint = host + _this.synthesisUri;\n      }\n\n      var headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames_1.HeaderNames.ConnectionId] = connectionId;\n\n      if (endpointId !== undefined) {\n        headers[QueryParameterNames_1.QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\n      }\n\n      config.parameters.setProperty(Exports_2.PropertyId.SpeechServiceConnection_Url, endpoint);\n      var enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new Exports_1.WebsocketConnection(endpoint, queryParams, headers, new Exports_3.WebsocketMessageFormatter(), Exports_1.ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\n    };\n  }\n\n  return SpeechSynthesisConnectionFactory;\n}();\n\nexports.SpeechSynthesisConnectionFactory = SpeechSynthesisConnectionFactory;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AAQA;;AACA;;AAKA;;AAEA;;AAIA;AAAA;AAAA;AAAA;AAAA;;AAEqB,wBAAuB,iCAAvB;;AAEV,kBAAS,UACZA,MADY,EAEZC,QAFY,EAGZC,YAHY,EAGS;AAErB,UAAIC,QAAQ,GAAWH,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWC,gCAAzC,EAA2EC,SAA3E,CAAvB;AACA,UAAMC,MAAM,GAAWT,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWI,8BAAzC,EAAyEF,SAAzE,CAAvB;AACA,UAAMG,UAAU,GAAIF,MAAM,IAAIA,MAAM,CAACG,WAAP,GAAqBC,UAArB,CAAgC,OAAhC,CAAX,GAAuD,WAAvD,GAAqE,gBAAxF;AACA,UAAMC,UAAU,GAAGd,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWS,kCAAzC,EAA6EP,SAA7E,CAAnB;AACA,UAAMQ,UAAU,GAAIF,UAAU,KAAKN,SAAhB,GAA6B,KAA7B,GAAqC,OAAxD;AACA,UAAMS,IAAI,GAAWjB,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BC,qBAAWY,4BAAzC,EAAuE,WAAWT,MAAX,GAAoB,GAApB,GAA0BO,UAA1B,GAAuC,SAAvC,GAAmDL,UAA1H,CAArB;AAEA,UAAMQ,WAAW,GAA8B,EAA/C;;AAEA,UAAI,CAAChB,QAAL,EAAe;AACXA,gBAAQ,GAAGc,IAAI,GAAGG,KAAI,CAACC,YAAvB;AACH;;AAED,UAAMC,OAAO,GAA8B,EAA3C;;AACA,UAAIrB,QAAQ,CAACsB,KAAT,KAAmBf,SAAnB,IAAgCP,QAAQ,CAACsB,KAAT,KAAmB,EAAvD,EAA2D;AACvDD,eAAO,CAACrB,QAAQ,CAACuB,UAAV,CAAP,GAA+BvB,QAAQ,CAACsB,KAAxC;AACH;;AACDD,aAAO,CAACG,0BAAYC,YAAb,CAAP,GAAoCxB,YAApC;;AACA,UAAIY,UAAU,KAAKN,SAAnB,EAA8B;AAC1Bc,eAAO,CAACK,0CAAoBC,uBAArB,CAAP,GAAuDd,UAAvD;AACH;;AAEDd,YAAM,CAACI,UAAP,CAAkByB,WAAlB,CAA8BvB,qBAAWwB,2BAAzC,EAAsE3B,QAAtE;AAEA,UAAM4B,iBAAiB,GAAY/B,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8B,mCAA9B,EAAmE,OAAnE,MAAgF,MAAnH;AACA,aAAO,IAAI2B,6BAAJ,CAAwB7B,QAAxB,EAAkCgB,WAAlC,EAA+CG,OAA/C,EAAwD,IAAIW,mCAAJ,EAAxD,EAAyFD,oBAAUE,cAAV,CAAyBlC,MAAM,CAACI,UAAhC,CAAzF,EAAsI2B,iBAAtI,EAAyJ7B,YAAzJ,CAAP;AACH,KA/BM;AAgCV;;AAAD;AApCA;;AAAaiC","names":["config","authInfo","connectionId","endpoint","parameters","getProperty","Exports_2","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","toLowerCase","startsWith","endpointId","SpeechServiceConnection_EndpointId","hostPrefix","host","SpeechServiceConnection_Host","queryParams","_this","synthesisUri","headers","token","headerName","HeaderNames_1","ConnectionId","QueryParameterNames_1","CustomVoiceDeploymentId","setProperty","SpeechServiceConnection_Url","enableCompression","Exports_1","Exports_3","fromParameters","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection, WebsocketMessageAdapter,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create = (\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined) {\r\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}