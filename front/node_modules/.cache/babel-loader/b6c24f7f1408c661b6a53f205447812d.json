{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationManager = void 0;\n\nvar Contracts_1 = require(\"../../sdk/Contracts\");\n\nvar Exports_1 = require(\"../../sdk/Exports\");\n\nvar ConversationConnectionConfig_1 = require(\"./ConversationConnectionConfig\");\n\nvar ConversationUtils_1 = require(\"./ConversationUtils\");\n\nvar ConversationManager =\n/** @class */\nfunction () {\n  function ConversationManager() {\n    //\n    this.privRequestParams = ConversationConnectionConfig_1.ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig_1.ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig_1.ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig_1.ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig_1.ConversationConnectionConfig.restPath;\n  }\n  /**\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n   * @param args\n   * @param conversationCode\n   * @param callback\n   * @param errorCallback\n   */\n\n\n  ConversationManager.prototype.createOrJoin = function (args, conversationCode, cb, err) {\n    var _this = this;\n\n    try {\n      Contracts_1.Contracts.throwIfNullOrUndefined(args, \"args\");\n      var languageCode = args.getProperty(Exports_1.PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig_1.ConversationConnectionConfig.defaultLanguageCode);\n      var nickname = args.getProperty(Exports_1.PropertyId.ConversationTranslator_Name);\n      var endpointHost = args.getProperty(Exports_1.PropertyId.ConversationTranslator_Host, this.privHost);\n      var correlationId = args.getProperty(Exports_1.PropertyId.ConversationTranslator_CorrelationId);\n      var subscriptionKey = args.getProperty(Exports_1.PropertyId.SpeechServiceConnection_Key);\n      var subscriptionRegion = args.getProperty(Exports_1.PropertyId.SpeechServiceConnection_Region);\n      var authToken = args.getProperty(Exports_1.PropertyId.SpeechServiceAuthorization_Token);\n      Contracts_1.Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n      Contracts_1.Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      Contracts_1.Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n      var queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.languageCode] = languageCode;\n      queryParams[this.privRequestParams.nickname] = nickname;\n      var headers = {};\n\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n\n      headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig_1.ConversationConnectionConfig.clientAppId;\n\n      if (conversationCode !== undefined) {\n        queryParams[this.privRequestParams.roomId] = conversationCode;\n      } else {\n        Contracts_1.Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n        headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n\n        if (subscriptionKey) {\n          headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n        } else if (authToken) {\n          headers[this.privRequestParams.authorization] = \"Bearer \" + authToken;\n        } else {\n          Contracts_1.Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n        }\n      }\n\n      var config = {};\n      config.headers = headers;\n      var endpoint = \"https://\" + endpointHost + this.privRestPath; // TODO: support a proxy and certificate validation\n\n      ConversationUtils_1.request(\"post\", endpoint, queryParams, null, config, function (response) {\n        var requestId = ConversationUtils_1.extractHeaderValue(_this.privRequestParams.requestId, response.headers);\n\n        if (!response.ok) {\n          if (!!err) {\n            // get the error\n            var errorMessage = _this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n\n            var errMessageRaw = void 0;\n\n            try {\n              errMessageRaw = JSON.parse(response.data);\n              errorMessage += \" [\" + errMessageRaw.error.code + \": \" + errMessageRaw.error.message + \"]\";\n            } catch (e) {\n              errorMessage += \" [\" + response.data + \"]\";\n            }\n\n            if (requestId) {\n              errorMessage += \" \" + requestId;\n            }\n\n            err(errorMessage);\n          }\n\n          return;\n        }\n\n        var conversation = JSON.parse(response.data);\n\n        if (conversation) {\n          conversation.requestId = requestId;\n        }\n\n        if (!!cb) {\n          try {\n            cb(conversation);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n\n          cb = undefined;\n        }\n      });\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          var typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  };\n  /**\n   * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n   * @param args\n   * @param sessionToken\n   * @param callback\n   */\n\n\n  ConversationManager.prototype.leave = function (args, sessionToken) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      try {\n        Contracts_1.Contracts.throwIfNullOrUndefined(args, _this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts_1.Contracts.throwIfNullOrWhitespace(sessionToken, _this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n        var endpointHost = args.getProperty(Exports_1.PropertyId.ConversationTranslator_Host, _this.privHost);\n        var correlationId = args.getProperty(Exports_1.PropertyId.ConversationTranslator_CorrelationId);\n        var queryParams = {};\n        queryParams[_this.privRequestParams.apiVersion] = _this.privApiVersion;\n        queryParams[_this.privRequestParams.sessionToken] = sessionToken;\n        var headers = {};\n\n        if (correlationId) {\n          headers[_this.privRequestParams.correlationId] = correlationId;\n        }\n\n        var config = {};\n        config.headers = headers;\n        var endpoint = \"https://\" + endpointHost + _this.privRestPath; // TODO: support a proxy and certificate validation\n\n        ConversationUtils_1.request(\"delete\", endpoint, queryParams, null, config, function (response) {\n          if (!response.ok) {// ignore errors on delete\n          }\n\n          resolve();\n        });\n      } catch (error) {\n        if (error instanceof Error) {\n          var typedError = error;\n          reject(typedError.name + \": \" + typedError.message);\n        } else {\n          reject(error);\n        }\n      }\n    });\n  };\n\n  return ConversationManager;\n}();\n\nexports.ConversationManager = ConversationManager;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAOA;;AACA;;AACA;;AAEA;;AAEA;AAAA;AAAA;AAQI;AACI;AACA,SAAKA,iBAAL,GAAyBC,4DAA6BC,YAAtD;AACA,SAAKC,UAAL,GAAkBF,4DAA6BG,UAA/C;AACA,SAAKC,QAAL,GAAgBJ,4DAA6BK,IAA7C;AACA,SAAKC,cAAL,GAAsBN,4DAA6BO,UAAnD;AACA,SAAKC,YAAL,GAAoBR,4DAA6BS,QAAjD;AACH;AAED;;;;;;;;;AAOOC,+CAAP,UAAoBC,IAApB,EAA8CC,gBAA9C,EAAwEC,EAAxE,EAAkFC,GAAlF,EAA2F;AAA3F;;AAEI,QAAI;AAEAC,4BAAUC,sBAAV,CAAiCL,IAAjC,EAAuC,MAAvC;AAEA,UAAMM,YAAY,GAAWN,IAAI,CAACO,WAAL,CAAiBC,qBAAWC,oCAA5B,EAAkEpB,4DAA6BqB,mBAA/F,CAA7B;AACA,UAAMC,QAAQ,GAAWX,IAAI,CAACO,WAAL,CAAiBC,qBAAWI,2BAA5B,CAAzB;AACA,UAAMC,YAAY,GAAWb,IAAI,CAACO,WAAL,CAAiBC,qBAAWM,2BAA5B,EAAyD,KAAKrB,QAA9D,CAA7B;AACA,UAAMsB,aAAa,GAAWf,IAAI,CAACO,WAAL,CAAiBC,qBAAWQ,oCAA5B,CAA9B;AACA,UAAMC,eAAe,GAAWjB,IAAI,CAACO,WAAL,CAAiBC,qBAAWU,2BAA5B,CAAhC;AACA,UAAMC,kBAAkB,GAAWnB,IAAI,CAACO,WAAL,CAAiBC,qBAAWY,8BAA5B,CAAnC;AACA,UAAMC,SAAS,GAAWrB,IAAI,CAACO,WAAL,CAAiBC,qBAAWc,gCAA5B,CAA1B;AAEAlB,4BAAUmB,uBAAV,CAAkCjB,YAAlC,EAAgD,cAAhD;AACAF,4BAAUmB,uBAAV,CAAkCZ,QAAlC,EAA4C,UAA5C;AACAP,4BAAUmB,uBAAV,CAAkCV,YAAlC,EAAgD,cAAhD;AAEA,UAAMW,WAAW,GAA8B,EAA/C;AACAA,iBAAW,CAAC,KAAKpC,iBAAL,CAAuBQ,UAAxB,CAAX,GAAiD,KAAKD,cAAtD;AACA6B,iBAAW,CAAC,KAAKpC,iBAAL,CAAuBkB,YAAxB,CAAX,GAAmDA,YAAnD;AACAkB,iBAAW,CAAC,KAAKpC,iBAAL,CAAuBuB,QAAxB,CAAX,GAA+CA,QAA/C;AAEA,UAAMc,OAAO,GAA8B,EAA3C;;AACA,UAAIV,aAAJ,EAAmB;AACfU,eAAO,CAAC,KAAKrC,iBAAL,CAAuB2B,aAAxB,CAAP,GAAgDA,aAAhD;AACH;;AACDU,aAAO,CAAC,KAAKrC,iBAAL,CAAuBsC,WAAxB,CAAP,GAA8CrC,4DAA6BqC,WAA3E;;AAEA,UAAIzB,gBAAgB,KAAK0B,SAAzB,EAAoC;AAChCH,mBAAW,CAAC,KAAKpC,iBAAL,CAAuBwC,MAAxB,CAAX,GAA6C3B,gBAA7C;AACH,OAFD,MAEO;AACHG,8BAAUC,sBAAV,CAAiCc,kBAAjC,EAAqD,KAAK5B,UAAL,CAAgBsC,6BAArE;AACAJ,eAAO,CAAC,KAAKrC,iBAAL,CAAuB+B,kBAAxB,CAAP,GAAqDA,kBAArD;;AACA,YAAIF,eAAJ,EAAqB;AACjBQ,iBAAO,CAAC,KAAKrC,iBAAL,CAAuB6B,eAAxB,CAAP,GAAkDA,eAAlD;AACH,SAFD,MAEO,IAAII,SAAJ,EAAe;AAClBI,iBAAO,CAAC,KAAKrC,iBAAL,CAAuB0C,aAAxB,CAAP,GAAgD,YAAUT,SAA1D;AACH,SAFM,MAEA;AACHjB,gCAAUC,sBAAV,CAAiCY,eAAjC,EAAkD,KAAK1B,UAAL,CAAgBwC,0BAAlE;AACH;AACJ;;AAED,UAAMC,MAAM,GAAoB,EAAhC;AACAA,YAAM,CAACP,OAAP,GAAiBA,OAAjB;AAEA,UAAMQ,QAAQ,GAAW,aAAWpB,YAAX,GAA0B,KAAKhB,YAAxD,CA5CA,CA8CA;;AACAqC,kCAAQ,MAAR,EAAgBD,QAAhB,EAA0BT,WAA1B,EAAuC,IAAvC,EAA6CQ,MAA7C,EAAqD,UAACG,QAAD,EAAoB;AAErE,YAAMC,SAAS,GAAWF,uCAAmBG,KAAI,CAACjD,iBAAL,CAAuBgD,SAA1C,EAAqDD,QAAQ,CAACV,OAA9D,CAA1B;;AAEA,YAAI,CAACU,QAAQ,CAACG,EAAd,EAAkB;AACd,cAAI,CAAC,CAACnC,GAAN,EAAW;AACP;AACA,gBAAIoC,YAAY,GAAWF,KAAI,CAAC9C,UAAL,CAAgBiD,qCAAhB,CAAsDC,OAAtD,CAA8D,UAA9D,EAA0EN,QAAQ,CAACO,MAAT,CAAgBC,QAAhB,EAA1E,CAA3B;;AACA,gBAAIC,aAAa,SAAjB;;AACA,gBAAI;AACAA,2BAAa,GAAGC,IAAI,CAACC,KAAL,CAAWX,QAAQ,CAACY,IAApB,CAAhB;AACAR,0BAAY,IAAI,OAAKK,aAAa,CAACI,KAAd,CAAoBC,IAAzB,GAA6B,IAA7B,GAAkCL,aAAa,CAACI,KAAd,CAAoBE,OAAtD,GAA6D,GAA7E;AACH,aAHD,CAGE,OAAOC,CAAP,EAAU;AACRZ,0BAAY,IAAI,OAAKJ,QAAQ,CAACY,IAAd,GAAkB,GAAlC;AACH;;AACD,gBAAIX,SAAJ,EAAe;AACXG,0BAAY,IAAI,MAAIH,SAApB;AACH;;AAEDjC,eAAG,CAACoC,YAAD,CAAH;AACH;;AACD;AACH;;AACD,YAAMa,YAAY,GAA0BP,IAAI,CAACC,KAAL,CAAWX,QAAQ,CAACY,IAApB,CAA5C;;AACA,YAAIK,YAAJ,EAAkB;AACdA,sBAAY,CAAChB,SAAb,GAAyBA,SAAzB;AACH;;AACD,YAAI,CAAC,CAAClC,EAAN,EAAU;AACN,cAAI;AACAA,cAAE,CAACkD,YAAD,CAAF;AACH,WAFD,CAEE,OAAOD,CAAP,EAAU;AACR,gBAAI,CAAC,CAAChD,GAAN,EAAW;AACPA,iBAAG,CAACgD,CAAD,CAAH;AACH;AACJ;;AACDjD,YAAE,GAAGyB,SAAL;AACH;AAEJ,OAtCD;AAwCH,KAvFD,CAuFE,OAAOqB,KAAP,EAAc;AACZ,UAAI,CAAC,CAAC7C,GAAN,EAAW;AACP,YAAI6C,KAAK,YAAYK,KAArB,EAA4B;AACxB,cAAMC,UAAU,GAAUN,KAA1B;AACA7C,aAAG,CAACmD,UAAU,CAACC,IAAX,GAAkB,IAAlB,GAAyBD,UAAU,CAACJ,OAArC,CAAH;AAEH,SAJD,MAIO;AACH/C,aAAG,CAAC6C,KAAD,CAAH;AACH;AACJ;AACJ;AACJ,GApGM;AAsGP;;;;;;;;AAMOjD,wCAAP,UAAaC,IAAb,EAAuCwD,YAAvC,EAA2D;AAA3D;;AACI,WAAO,IAAIC,OAAJ,CAAkB,UAACC,OAAD,EAAsBC,MAAtB,EAAsD;AAC3E,UAAI;AAEAvD,8BAAUC,sBAAV,CAAiCL,IAAjC,EAAuCqC,KAAI,CAAC9C,UAAL,CAAgBqE,WAAhB,CAA4BnB,OAA5B,CAAoC,OAApC,EAA6C,QAA7C,CAAvC;AACArC,8BAAUmB,uBAAV,CAAkCiC,YAAlC,EAAgDnB,KAAI,CAAC9C,UAAL,CAAgBqE,WAAhB,CAA4BnB,OAA5B,CAAoC,OAApC,EAA6C,OAA7C,CAAhD;AAEA,YAAM5B,YAAY,GAAWb,IAAI,CAACO,WAAL,CAAiBC,qBAAWM,2BAA5B,EAAyDuB,KAAI,CAAC5C,QAA9D,CAA7B;AACA,YAAMsB,aAAa,GAAWf,IAAI,CAACO,WAAL,CAAiBC,qBAAWQ,oCAA5B,CAA9B;AAEA,YAAMQ,WAAW,GAA8B,EAA/C;AACAA,mBAAW,CAACa,KAAI,CAACjD,iBAAL,CAAuBQ,UAAxB,CAAX,GAAiDyC,KAAI,CAAC1C,cAAtD;AACA6B,mBAAW,CAACa,KAAI,CAACjD,iBAAL,CAAuBoE,YAAxB,CAAX,GAAmDA,YAAnD;AAEA,YAAM/B,OAAO,GAA8B,EAA3C;;AACA,YAAIV,aAAJ,EAAmB;AACfU,iBAAO,CAACY,KAAI,CAACjD,iBAAL,CAAuB2B,aAAxB,CAAP,GAAgDA,aAAhD;AACH;;AAED,YAAMiB,MAAM,GAAoB,EAAhC;AACAA,cAAM,CAACP,OAAP,GAAiBA,OAAjB;AAEA,YAAMQ,QAAQ,GAAW,aAAWpB,YAAX,GAA0BwB,KAAI,CAACxC,YAAxD,CApBA,CAsBA;;AACAqC,oCAAQ,QAAR,EAAkBD,QAAlB,EAA4BT,WAA5B,EAAyC,IAAzC,EAA+CQ,MAA/C,EAAuD,UAACG,QAAD,EAAoB;AAEvE,cAAI,CAACA,QAAQ,CAACG,EAAd,EAAkB,CACd;AACH;;AAEDoB,iBAAO;AACV,SAPD;AASH,OAhCD,CAgCE,OAAOV,KAAP,EAAc;AACZ,YAAIA,KAAK,YAAYK,KAArB,EAA4B;AACxB,cAAMC,UAAU,GAAUN,KAA1B;AACAW,gBAAM,CAACL,UAAU,CAACC,IAAX,GAAkB,IAAlB,GAAyBD,UAAU,CAACJ,OAArC,CAAN;AAEH,SAJD,MAIO;AACHS,gBAAM,CAACX,KAAD,CAAN;AACH;AACJ;AACJ,KA1CM,CAAP;AA2CH,GA5CM;;AA6CX;AAjLA;;AAAaa","names":["privRequestParams","ConversationConnectionConfig_1","configParams","privErrors","restErrors","privHost","host","privApiVersion","apiVersion","privRestPath","restPath","ConversationManager","args","conversationCode","cb","err","Contracts_1","throwIfNullOrUndefined","languageCode","getProperty","Exports_1","SpeechServiceConnection_RecoLanguage","defaultLanguageCode","nickname","ConversationTranslator_Name","endpointHost","ConversationTranslator_Host","correlationId","ConversationTranslator_CorrelationId","subscriptionKey","SpeechServiceConnection_Key","subscriptionRegion","SpeechServiceConnection_Region","authToken","SpeechServiceAuthorization_Token","throwIfNullOrWhitespace","queryParams","headers","clientAppId","undefined","roomId","authInvalidSubscriptionRegion","authorization","authInvalidSubscriptionKey","config","endpoint","ConversationUtils_1","response","requestId","_this","ok","errorMessage","invalidCreateJoinConversationResponse","replace","status","toString","errMessageRaw","JSON","parse","data","error","code","message","e","conversation","Error","typedError","name","sessionToken","Promise","resolve","reject","invalidArgs","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n} from \"../../common.browser/RestConfigBase\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation, IResponse } from \"./ConversationTranslatorInterfaces\";\r\nimport { extractHeaderValue, request } from \"./ConversationUtils\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name);\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            request(\"post\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                const requestId: string = extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n\r\n            });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                request(\"delete\", endpoint, queryParams, null, config, (response: IResponse) => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                });\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}