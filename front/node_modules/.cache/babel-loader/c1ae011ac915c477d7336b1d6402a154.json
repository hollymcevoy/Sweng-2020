{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationWebsocketMessageFormatter = void 0;\n\nvar Exports_1 = require(\"../../common/Exports\");\n\nvar ConversationConnectionMessage_1 = require(\"./ConversationConnectionMessage\");\n/**\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\n */\n\n\nvar ConversationWebsocketMessageFormatter =\n/** @class */\nfunction () {\n  function ConversationWebsocketMessageFormatter() {\n    /**\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\n     */\n    this.toConnectionMessage = function (message) {\n      var deferral = new Exports_1.Deferred();\n\n      try {\n        if (message.messageType === Exports_1.MessageType.Text) {\n          var incomingMessage = new ConversationConnectionMessage_1.ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\n          deferral.resolve(incomingMessage);\n        } else if (message.messageType === Exports_1.MessageType.Binary) {\n          deferral.resolve(new ConversationConnectionMessage_1.ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\n        }\n      } catch (e) {\n        deferral.reject(\"Error formatting the message. Error: \" + e);\n      }\n\n      return deferral.promise;\n    };\n    /**\n     * Format outgoing messages: text (commands or IM)\n     */\n\n\n    this.fromConnectionMessage = function (message) {\n      var deferral = new Exports_1.Deferred();\n\n      try {\n        if (message.messageType === Exports_1.MessageType.Text) {\n          var payload = \"\" + (message.textBody ? message.textBody : \"\");\n          deferral.resolve(new Exports_1.RawWebsocketMessage(Exports_1.MessageType.Text, payload, message.id));\n        }\n      } catch (e) {\n        deferral.reject(\"Error formatting the message. \" + e);\n      }\n\n      return deferral.promise;\n    };\n  }\n\n  return ConversationWebsocketMessageFormatter;\n}();\n\nexports.ConversationWebsocketMessageFormatter = ConversationWebsocketMessageFormatter;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;AAEA;;AAQA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AAEI;;;AAGO,+BAAsB,UAACA,OAAD,EAA6B;AACtD,UAAMC,QAAQ,GAAG,IAAIC,kBAAJ,EAAjB;;AAEA,UAAI;AACA,YAAIF,OAAO,CAACG,WAAR,KAAwBD,sBAAYE,IAAxC,EAA8C;AAC1C,cAAMC,eAAe,GAAkC,IAAIC,6DAAJ,CAAkCN,OAAO,CAACG,WAA1C,EAAuDH,OAAO,CAACO,WAA/D,EAA4E,EAA5E,EAAgFP,OAAO,CAACQ,EAAxF,CAAvD;AACAP,kBAAQ,CAACQ,OAAT,CAAiBJ,eAAjB;AACH,SAHD,MAGO,IAAIL,OAAO,CAACG,WAAR,KAAwBD,sBAAYQ,MAAxC,EAAgD;AACnDT,kBAAQ,CAACQ,OAAT,CAAiB,IAAIH,6DAAJ,CAAkCN,OAAO,CAACG,WAA1C,EAAuDH,OAAO,CAACW,aAA/D,EAA8EC,SAA9E,EAAyFZ,OAAO,CAACQ,EAAjG,CAAjB;AACH;AACJ,OAPD,CAOE,OAAOK,CAAP,EAAU;AACRZ,gBAAQ,CAACa,MAAT,CAAgB,0CAAwCD,CAAxD;AACH;;AAED,aAAOZ,QAAQ,CAACc,OAAhB;AACH,KAfM;AAiBP;;;;;AAGO,iCAAwB,UAACf,OAAD,EAA2B;AAEtD,UAAMC,QAAQ,GAAG,IAAIC,kBAAJ,EAAjB;;AAEA,UAAI;AACA,YAAIF,OAAO,CAACG,WAAR,KAAwBD,sBAAYE,IAAxC,EAA8C;AAC1C,cAAMY,OAAO,GAAG,MAAGhB,OAAO,CAACiB,QAAR,GAAmBjB,OAAO,CAACiB,QAA3B,GAAsC,EAAzC,CAAhB;AACAhB,kBAAQ,CAACQ,OAAT,CAAiB,IAAIP,6BAAJ,CAAwBA,sBAAYE,IAApC,EAA0CY,OAA1C,EAAmDhB,OAAO,CAACQ,EAA3D,CAAjB;AACH;AACJ,OALD,CAKE,OAAOK,CAAP,EAAU;AACRZ,gBAAQ,CAACa,MAAT,CAAgB,mCAAiCD,CAAjD;AACH;;AAED,aAAOZ,QAAQ,CAACc,OAAhB;AACH,KAdM;AAeV;;AAAD;AAxCA;;AAAaG","names":["message","deferral","Exports_1","messageType","Text","incomingMessage","ConversationConnectionMessage_1","textContent","id","resolve","Binary","binaryContent","undefined","e","reject","promise","payload","textBody","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConversationConnectionMessage> => {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}