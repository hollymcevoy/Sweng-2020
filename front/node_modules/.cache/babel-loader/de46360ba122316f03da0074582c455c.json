{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UUID = exports.SizeAndUnit = exports.PaddingDefinition = exports.SpacingDefinition = exports.StringWithSubstitutions = exports.ContentTypes = exports.GlobalSettings = void 0; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nvar Enums = require(\"./enums\");\n\nvar GlobalSettings =\n/** @class */\nfunction () {\n  function GlobalSettings() {}\n\n  GlobalSettings.useAdvancedTextBlockTruncation = true;\n  GlobalSettings.useAdvancedCardBottomTruncation = false;\n  GlobalSettings.useMarkdownInRadioButtonAndCheckbox = true;\n  GlobalSettings.allowMarkForTextHighlighting = false;\n  GlobalSettings.alwaysBleedSeparators = false;\n  GlobalSettings.enableFullJsonRoundTrip = false;\n  GlobalSettings.displayInputValidationErrors = true;\n  GlobalSettings.allowPreProcessingPropertyValues = false;\n  GlobalSettings.setTabIndexAtCardRoot = true;\n  GlobalSettings.enableFallback = true;\n  GlobalSettings.useWebkitLineClamp = true;\n  GlobalSettings.allowMoreThanMaxActionsInOverflowMenu = false;\n  GlobalSettings.applets = {\n    logEnabled: true,\n    logLevel: Enums.LogLevel.Error,\n    maximumRetryAttempts: 3,\n    defaultTimeBetweenRetryAttempts: 3000,\n    authPromptWidth: 400,\n    authPromptHeight: 600,\n    refresh: {\n      mode: Enums.RefreshMode.Manual,\n      timeBetweenAutomaticRefreshes: 3000,\n      maximumConsecutiveAutomaticRefreshes: 3,\n      allowManualRefreshesAfterAutomaticRefreshes: true\n    }\n  };\n  return GlobalSettings;\n}();\n\nexports.GlobalSettings = GlobalSettings;\nexports.ContentTypes = {\n  applicationJson: \"application/json\",\n  applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\n};\n\nvar StringWithSubstitutions =\n/** @class */\nfunction () {\n  function StringWithSubstitutions() {\n    this._isProcessed = false;\n  }\n\n  StringWithSubstitutions.prototype.getReferencedInputs = function (inputs, referencedInputs) {\n    if (!referencedInputs) {\n      throw new Error(\"The referencedInputs parameter cannot be null.\");\n    }\n\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n      var input = inputs_1[_i];\n      var matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(this._original);\n\n      if (matches != null && input.id) {\n        referencedInputs[input.id] = input;\n      }\n    }\n  };\n\n  StringWithSubstitutions.prototype.substituteInputValues = function (inputs, contentType) {\n    this._processed = this._original;\n\n    if (this._original) {\n      var regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\n      var matches = void 0;\n\n      while ((matches = regEx.exec(this._original)) !== null) {\n        for (var _i = 0, _a = Object.keys(inputs); _i < _a.length; _i++) {\n          var key = _a[_i];\n\n          if (key.toLowerCase() == matches[1].toLowerCase()) {\n            var matchedInput = inputs[key];\n            var valueForReplace = \"\";\n\n            if (matchedInput.value) {\n              valueForReplace = matchedInput.value;\n            }\n\n            if (contentType === exports.ContentTypes.applicationJson) {\n              valueForReplace = JSON.stringify(valueForReplace);\n              valueForReplace = valueForReplace.slice(1, -1);\n            } else if (contentType === exports.ContentTypes.applicationXWwwFormUrlencoded) {\n              valueForReplace = encodeURIComponent(valueForReplace);\n            }\n\n            this._processed = this._processed.replace(matches[0], valueForReplace);\n            break;\n          }\n        }\n      }\n    }\n\n    this._isProcessed = true;\n  };\n\n  StringWithSubstitutions.prototype.getOriginal = function () {\n    return this._original;\n  };\n\n  StringWithSubstitutions.prototype.get = function () {\n    if (!this._isProcessed) {\n      return this._original;\n    } else {\n      return this._processed;\n    }\n  };\n\n  StringWithSubstitutions.prototype.set = function (value) {\n    this._original = value;\n    this._isProcessed = false;\n  };\n\n  return StringWithSubstitutions;\n}();\n\nexports.StringWithSubstitutions = StringWithSubstitutions;\n\nvar SpacingDefinition =\n/** @class */\nfunction () {\n  function SpacingDefinition(top, right, bottom, left) {\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (right === void 0) {\n      right = 0;\n    }\n\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n\n  return SpacingDefinition;\n}();\n\nexports.SpacingDefinition = SpacingDefinition;\n\nvar PaddingDefinition =\n/** @class */\nfunction () {\n  function PaddingDefinition(top, right, bottom, left) {\n    if (top === void 0) {\n      top = Enums.Spacing.None;\n    }\n\n    if (right === void 0) {\n      right = Enums.Spacing.None;\n    }\n\n    if (bottom === void 0) {\n      bottom = Enums.Spacing.None;\n    }\n\n    if (left === void 0) {\n      left = Enums.Spacing.None;\n    }\n\n    this.top = Enums.Spacing.None;\n    this.right = Enums.Spacing.None;\n    this.bottom = Enums.Spacing.None;\n    this.left = Enums.Spacing.None;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n\n  return PaddingDefinition;\n}();\n\nexports.PaddingDefinition = PaddingDefinition;\n\nvar SizeAndUnit =\n/** @class */\nfunction () {\n  function SizeAndUnit(physicalSize, unit) {\n    this.physicalSize = physicalSize;\n    this.unit = unit;\n  }\n\n  SizeAndUnit.parse = function (input, requireUnitSpecifier) {\n    if (requireUnitSpecifier === void 0) {\n      requireUnitSpecifier = false;\n    }\n\n    var result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\n\n    if (typeof input === \"number\") {\n      result.physicalSize = input;\n      return result;\n    } else if (typeof input === \"string\") {\n      var regExp = /^([0-9]+)(px|\\*)?$/g;\n      var matches = regExp.exec(input);\n      var expectedMatchCount = requireUnitSpecifier ? 3 : 2;\n\n      if (matches && matches.length >= expectedMatchCount) {\n        result.physicalSize = parseInt(matches[1]);\n\n        if (matches.length == 3) {\n          if (matches[2] == \"px\") {\n            result.unit = Enums.SizeUnit.Pixel;\n          }\n        }\n\n        return result;\n      }\n    }\n\n    throw new Error(\"Invalid size: \" + input);\n  };\n\n  return SizeAndUnit;\n}();\n\nexports.SizeAndUnit = SizeAndUnit;\n/**\n * Fast UUID generator, RFC4122 version 4 compliant.\n * @author Jeff Ward (jcward.com).\n * @license MIT license\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n **/\n\nvar UUID =\n/** @class */\nfunction () {\n  function UUID() {}\n\n  UUID.generate = function () {\n    var d0 = Math.random() * 0xffffffff | 0;\n    var d1 = Math.random() * 0xffffffff | 0;\n    var d2 = Math.random() * 0xffffffff | 0;\n    var d3 = Math.random() * 0xffffffff | 0;\n    return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' + UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' + UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] + UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\n  };\n\n  UUID.initialize = function () {\n    for (var i = 0; i < 256; i++) {\n      UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n    }\n  };\n\n  UUID.lut = [];\n  return UUID;\n}();\n\nexports.UUID = UUID;\nUUID.initialize();","map":{"version":3,"mappings":"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","names":["GlobalSettings","logEnabled","logLevel","Enums","LogLevel","Error","maximumRetryAttempts","defaultTimeBetweenRetryAttempts","authPromptWidth","authPromptHeight","refresh","mode","RefreshMode","Manual","timeBetweenAutomaticRefreshes","maximumConsecutiveAutomaticRefreshes","allowManualRefreshesAfterAutomaticRefreshes","exports","applicationJson","applicationXWwwFormUrlencoded","StringWithSubstitutions","inputs","referencedInputs","_i","input","matches","RegExp","id","exec","_original","contentType","_processed","regEx","keys","key","toLowerCase","matchedInput","valueForReplace","value","JSON","stringify","slice","encodeURIComponent","replace","_isProcessed","top","right","bottom","left","Spacing","None","physicalSize","unit","SizeAndUnit","requireUnitSpecifier","result","SizeUnit","Weight","regExp","expectedMatchCount","length","parseInt","Pixel","UUID","d0","Math","random","d1","d2","d3","lut","i","toString","initialize"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/adaptivecards/src/shared.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\n\nexport type Refresh = {\n    mode: Enums.RefreshMode;\n    timeBetweenAutomaticRefreshes: number;\n    maximumConsecutiveAutomaticRefreshes: number;\n    allowManualRefreshesAfterAutomaticRefreshes: boolean;\n}\n\nexport type AppletsSettings = {\n    logEnabled: boolean;\n    logLevel: Enums.LogLevel;\n    maximumRetryAttempts: number;\n    defaultTimeBetweenRetryAttempts: number;\n    authPromptWidth: number;\n    authPromptHeight: number;\n    readonly refresh: Refresh;\n    onLogEvent?: (level: Enums.LogLevel, message?: any, ...optionalParams: any[]) => void;\n}\n\nexport class GlobalSettings {\n    static useAdvancedTextBlockTruncation: boolean = true;\n    static useAdvancedCardBottomTruncation: boolean = false;\n    static useMarkdownInRadioButtonAndCheckbox: boolean = true;\n    static allowMarkForTextHighlighting: boolean = false;\n    static alwaysBleedSeparators: boolean = false;\n    static enableFullJsonRoundTrip: boolean = false;\n    static displayInputValidationErrors: boolean = true;\n    static allowPreProcessingPropertyValues: boolean = false;\n    static setTabIndexAtCardRoot: boolean = true;\n    static enableFallback: boolean = true;\n    static useWebkitLineClamp: boolean = true;\n    static allowMoreThanMaxActionsInOverflowMenu: boolean = false;\n\n    static readonly applets: AppletsSettings = {\n        logEnabled: true,\n        logLevel: Enums.LogLevel.Error,\n        maximumRetryAttempts: 3,\n        defaultTimeBetweenRetryAttempts: 3000, // 3 seconds\n        authPromptWidth: 400,\n        authPromptHeight: 600,\n        refresh: {\n            mode: Enums.RefreshMode.Manual,\n            timeBetweenAutomaticRefreshes: 3000, // 3 seconds\n            maximumConsecutiveAutomaticRefreshes: 3,\n            allowManualRefreshesAfterAutomaticRefreshes: true\n        }\n    }\n}\n\nexport const ContentTypes = {\n    applicationJson: \"application/json\",\n    applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\n}\n\nexport interface ISeparationDefinition {\n    spacing: number,\n    lineThickness?: number,\n    lineColor?: string\n}\n\nexport interface IInput {\n    id?: string;\n    value?: string;\n    validateValue(): boolean;\n}\n\nexport type Dictionary<T> = { [key: string]: T };\n\nexport class StringWithSubstitutions {\n    private _isProcessed: boolean = false;\n    private _original?: string;\n    private _processed?: string;\n\n    getReferencedInputs(inputs: IInput[], referencedInputs: Dictionary<IInput>) {\n        if (!referencedInputs) {\n            throw new Error(\"The referencedInputs parameter cannot be null.\")\n        }\n\n        for (let input of inputs) {\n            let matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(<string>this._original);\n\n            if (matches != null && input.id) {\n                referencedInputs[input.id] = input;\n            }\n        }\n    }\n\n    substituteInputValues(inputs: Dictionary<IInput>, contentType: string) {\n        this._processed = this._original;\n\n        if (this._original) {\n            let regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\n            let matches;\n\n            while ((matches = regEx.exec(<string>this._original)) !== null) {\n                for (let key of Object.keys(inputs)) {\n                    if (key.toLowerCase() == matches[1].toLowerCase()) {\n                        let matchedInput = inputs[key];\n\n                        let valueForReplace = \"\";\n\n                        if (matchedInput.value) {\n                            valueForReplace = matchedInput.value;\n                        }\n\n                        if (contentType === ContentTypes.applicationJson) {\n                            valueForReplace = JSON.stringify(valueForReplace);\n                            valueForReplace = valueForReplace.slice(1, -1);\n                        }\n                        else if (contentType === ContentTypes.applicationXWwwFormUrlencoded) {\n                            valueForReplace = encodeURIComponent(valueForReplace);\n                        }\n\n                        this._processed = (<string>this._processed).replace(matches[0], valueForReplace);\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        this._isProcessed = true;\n    }\n\n    getOriginal(): string | undefined {\n        return this._original;\n    }\n\n    get(): string | undefined {\n        if (!this._isProcessed) {\n            return this._original;\n        }\n        else {\n            return this._processed;\n        }\n    }\n\n    set(value: string | undefined) {\n        this._original = value;\n        this._isProcessed = false;\n    }\n}\n\nexport class SpacingDefinition {\n    left: number = 0;\n    top: number = 0;\n    right: number = 0;\n    bottom: number = 0;\n\n    constructor(top: number = 0,\n        right: number = 0,\n        bottom: number = 0,\n        left: number = 0) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n}\n\nexport class PaddingDefinition {\n    top: Enums.Spacing = Enums.Spacing.None;\n    right: Enums.Spacing = Enums.Spacing.None;\n    bottom: Enums.Spacing = Enums.Spacing.None;\n    left: Enums.Spacing = Enums.Spacing.None;\n\n    constructor(top: Enums.Spacing = Enums.Spacing.None,\n        right: Enums.Spacing = Enums.Spacing.None,\n        bottom: Enums.Spacing = Enums.Spacing.None,\n        left: Enums.Spacing = Enums.Spacing.None) {\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n        this.left = left;\n    }\n}\n\nexport class SizeAndUnit {\n    physicalSize: number;\n    unit: Enums.SizeUnit;\n\n    static parse(input: string, requireUnitSpecifier: boolean = false): SizeAndUnit {\n        let result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\n\n        if (typeof input === \"number\") {\n            result.physicalSize = input;\n\n            return result;\n        }\n        else if (typeof input === \"string\") {\n            let regExp = /^([0-9]+)(px|\\*)?$/g;\n            let matches = regExp.exec(input);\n            let expectedMatchCount = requireUnitSpecifier ? 3 : 2;\n\n            if (matches && matches.length >= expectedMatchCount) {\n                result.physicalSize = parseInt(matches[1]);\n\n                if (matches.length == 3) {\n                    if (matches[2] == \"px\") {\n                        result.unit = Enums.SizeUnit.Pixel;\n                    }\n                }\n\n                return result;\n            }\n        }\n\n        throw new Error(\"Invalid size: \" + input);\n    }\n\n    constructor(physicalSize: number, unit: Enums.SizeUnit) {\n        this.physicalSize = physicalSize;\n        this.unit = unit;\n    }\n}\n\nexport interface IResourceInformation {\n    url: string;\n    mimeType: string;\n}\n\n/**\n * Fast UUID generator, RFC4122 version 4 compliant.\n * @author Jeff Ward (jcward.com).\n * @license MIT license\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n **/\nexport class UUID {\n    private static lut: string[] = [];\n\n    static generate(): string {\n        let d0 = Math.random() * 0xffffffff | 0;\n        let d1 = Math.random() * 0xffffffff | 0;\n        let d2 = Math.random() * 0xffffffff | 0;\n        let d3 = Math.random() * 0xffffffff | 0;\n\n        return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' +\n            UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' +\n            UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] +\n            UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];\n    }\n\n    static initialize() {\n        for (let i = 0; i < 256; i++) {\n            UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n        }\n    }\n}\n\nUUID.initialize();\n"]},"metadata":{},"sourceType":"script"}