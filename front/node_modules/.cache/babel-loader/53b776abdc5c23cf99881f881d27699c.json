{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useActivitiesWithRenderer;\n\nvar _react = require(\"react\");\n\nvar _useMemoize = _interopRequireDefault(require(\"../../../hooks/internal/useMemoize\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction useActivitiesWithRenderer(activities, createActivityRenderer) {\n  var createActivityRendererWithLiteralArgs = (0, _react.useCallback)(function (activity, nextVisibleActivity) {\n    return createActivityRenderer({\n      activity: activity,\n      nextVisibleActivity: nextVisibleActivity\n    });\n  }, [createActivityRenderer]); // Create a memoized context of the createActivityRenderer function.\n  // TODO: [P2] Rename useMemoize to useMemoAll\n\n  var entries = (0, _useMemoize.default)(createActivityRendererWithLiteralArgs, function (createActivityRendererWithLiteralArgsMemoized) {\n    // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).\n    // In the next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return the memoized result instead.\n    // This is an improvement to React useMemo(), because it only allows 1 memoization.\n    // useMemoize() allows any number of memoization.\n    var activitiesWithRenderer = [];\n    var nextVisibleActivity;\n\n    for (var index = activities.length - 1; index >= 0; index--) {\n      var activity = activities[+index];\n      var renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);\n\n      if (renderActivity) {\n        activitiesWithRenderer.splice(0, 0, {\n          activity: activity,\n          renderActivity: renderActivity\n        });\n        nextVisibleActivity = activity;\n      }\n    }\n\n    return Object.freeze(activitiesWithRenderer);\n  }, [activities]);\n  var prevEntriesRef = (0, _react.useRef)([]);\n  var prevEntries = prevEntriesRef.current;\n\n  if (prevEntries.length !== entries.length || prevEntries.some(function (prevEntry, index) {\n    var entry = entries[+index];\n    return entry.activity !== prevEntry.activity || entry.renderActivity !== prevEntry.renderActivity;\n  })) {\n    prevEntriesRef.current = entries;\n  }\n\n  return prevEntriesRef.current;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAIA;;;;;;;;AAIe,SAASA,yBAAT,CACbC,UADa,EAEbC,sBAFa,EAGoB;AACjC,MAAMC,qCAAqC,GAAG,wBAC5C,UAACC,QAAD,EAA+BC,mBAA/B;AAAA,WACEH,sBAAsB,CAAC;AAAEE,cAAQ,EAARA,QAAF;AAAYC,yBAAmB,EAAnBA;AAAZ,KAAD,CADxB;AAD4C,KAG5C,CAACH,sBAAD,CAH4C,CAA9C,CADiC,CAOjC;AACA;;AACA,MAAMI,OAAO,GAAG,yBACdH,qCADc,EAEd,yDAAiD;AAC/C;AACA;AACA;AACA;AAEA,QAAMI,sBAA8C,GAAG,EAAvD;AACA,QAAIF,mBAAJ;;AAEA,SAAK,IAAIG,KAAK,GAAGP,UAAU,CAACQ,MAAXR,GAAoB,CAArC,EAAwCO,KAAK,IAAI,CAAjD,EAAoDA,KAAK,EAAzD,EAA6D;AAC3D,UAAMJ,QAAQ,GAAGH,UAAU,CAAC,CAACO,KAAF,CAA3B;AACA,UAAME,cAAc,GAAGC,6CAA6C,CAACP,QAAD,EAAWC,mBAAX,CAApE;;AAEA,UAAIK,cAAJ,EAAoB;AAClBH,8BAAsB,CAACK,MAAvBL,CAA8B,CAA9BA,EAAiC,CAAjCA,EAAoC;AAClCH,kBAAQ,EAARA,QADkC;AAElCM,wBAAc,EAAdA;AAFkC,SAApCH;AAKAF,2BAAmB,GAAGD,QAAtBC;AACD;AACF;;AAED,WAAOQ,MAAM,CAACC,MAAPD,CAAcN,sBAAdM,CAAP;AAzBY,KA2Bd,CAACZ,UAAD,CA3Bc,CAAhB;AA8BA,MAAMc,cAAc,GAAG,mBAAwC,EAAxC,CAAvB;AACA,MAAiBC,WAAjB,GAAiCD,cAAjC,CAAQE,OAAR;;AAEA,MACED,WAAW,CAACP,MAAZO,KAAuBV,OAAO,CAACG,MAA/BO,IACAA,WAAW,CAACE,IAAZF,CAAiB,UAACG,SAAD,EAAYX,KAAZ,EAAsB;AACrC,QAAMY,KAAK,GAAGd,OAAO,CAAC,CAACE,KAAF,CAArB;AAEA,WAAOY,KAAK,CAAChB,QAANgB,KAAmBD,SAAS,CAACf,QAA7BgB,IAAyCA,KAAK,CAACV,cAANU,KAAyBD,SAAS,CAACT,cAAnF;AAHF,IAFF,EAOE;AACAK,kBAAc,CAACE,OAAfF,GAAyBT,OAAzBS;AACD;;AAED,SAAOA,cAAc,CAACE,OAAtB;AACD","names":["useActivitiesWithRenderer","activities","createActivityRenderer","createActivityRendererWithLiteralArgs","activity","nextVisibleActivity","entries","activitiesWithRenderer","index","length","renderActivity","createActivityRendererWithLiteralArgsMemoized","splice","Object","freeze","prevEntriesRef","prevEntries","current","some","prevEntry","entry"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/providers/ActivityTree/private/useActivitiesWithRenderer.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\n\nimport type { DirectLineActivity } from 'botframework-webchat-core';\n\nimport useMemoize from '../../../hooks/internal/useMemoize';\n\nimport type { ActivityWithRenderer } from './types';\n\nexport default function useActivitiesWithRenderer(\n  activities: readonly DirectLineActivity[],\n  createActivityRenderer\n): readonly ActivityWithRenderer[] {\n  const createActivityRendererWithLiteralArgs = useCallback(\n    (activity: DirectLineActivity, nextVisibleActivity: DirectLineActivity) =>\n      createActivityRenderer({ activity, nextVisibleActivity }),\n    [createActivityRenderer]\n  );\n\n  // Create a memoized context of the createActivityRenderer function.\n  // TODO: [P2] Rename useMemoize to useMemoAll\n  const entries = useMemoize(\n    createActivityRendererWithLiteralArgs,\n    createActivityRendererWithLiteralArgsMemoized => {\n      // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).\n      // In the next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return the memoized result instead.\n      // This is an improvement to React useMemo(), because it only allows 1 memoization.\n      // useMemoize() allows any number of memoization.\n\n      const activitiesWithRenderer: ActivityWithRenderer[] = [];\n      let nextVisibleActivity: DirectLineActivity;\n\n      for (let index = activities.length - 1; index >= 0; index--) {\n        const activity = activities[+index];\n        const renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);\n\n        if (renderActivity) {\n          activitiesWithRenderer.splice(0, 0, {\n            activity,\n            renderActivity\n          });\n\n          nextVisibleActivity = activity;\n        }\n      }\n\n      return Object.freeze(activitiesWithRenderer);\n    },\n    [activities]\n  );\n\n  const prevEntriesRef = useRef<readonly ActivityWithRenderer[]>([]);\n  const { current: prevEntries } = prevEntriesRef;\n\n  if (\n    prevEntries.length !== entries.length ||\n    prevEntries.some((prevEntry, index) => {\n      const entry = entries[+index];\n\n      return entry.activity !== prevEntry.activity || entry.renderActivity !== prevEntry.renderActivity;\n    })\n  ) {\n    prevEntriesRef.current = entries;\n  }\n\n  return prevEntriesRef.current;\n}\n"]},"metadata":{},"sourceType":"script"}