{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RecognitionMode, RecognizerConfig, TranslationConnectionFactory, TranslationServiceRecognizer } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\n\nexport class TranslationRecognizer extends Recognizer {\n  /**\n   * Initializes an instance of the TranslationRecognizer.\n   * @constructor\n   * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    const configImpl = speechConfig;\n    Contracts.throwIfNull(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\n    this.privDisposedTranslationRecognizer = false;\n    this.privProperties = configImpl.properties.clone();\n\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice), PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages), PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * Gets the language name that was set when the recognizer was created.\n   * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} Gets the language name that was set when the recognizer was created.\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets target languages for translation that were set when the recognizer was created.\n   * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n   * @member TranslationRecognizer.prototype.targetLanguages\n   * @function\n   * @public\n   * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n   */\n\n\n  get targetLanguages() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n  }\n  /**\n   * Gets the name of output voice.\n   * @member TranslationRecognizer.prototype.voiceName\n   * @function\n   * @public\n   * @returns {string} the name of output voice.\n   */\n\n\n  get voiceName() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member TranslationRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member TranslationRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - Authorization token.\n   */\n\n\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * The collection of properties and their values defined for this TranslationRecognizer.\n   * @member TranslationRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts recognition and translation, and stops after the first utterance is recognized.\n   * The task returns the translation text as result.\n   * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\n   *       for single shot recognition like command or query. For long-running recognition,\n   *       use startContinuousRecognitionAsync() instead.\n   * @member TranslationRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the translation has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive translation results.\n   * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops continuous recognition and translation.\n   * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the translation has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member TranslationRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * handles ConnectionEstablishedEvent for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onConnection\n   * @function\n   * @public\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  onConnection() {}\n  /**\n   * handles disconnection events for conversation translation scenarios.\n   * @member TranslationRecognizer.prototype.onDisconnection\n   * @function\n   * @public\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  onDisconnection() {\n    return __awaiter(this, void 0, void 0, function* () {});\n  }\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedTranslationRecognizer) {\n        return;\n      }\n\n      this.privDisposedTranslationRecognizer = true;\n\n      if (disposing) {\n        yield this.implRecognizerStop();\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAGIA,eAHJ,EAIIC,gBAJJ,EAOIC,4BAPJ,EAQIC,4BARJ,QASO,0BATP;AAUA,SAASC,yBAAT,QAA0C,mBAA1C;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAGIC,UAHJ,EAIIC,UAJJ,QASO,WATP;AAYA;;;;;AAIA,OAAM,MAAOC,qBAAP,SAAqCD,UAArC,CAA+C;AAGjD;;;;;;AAMAE,cAAmBC,YAAnB,EAA0DC,WAA1D,EAAmF;AAC/E,UAAMC,UAAU,GAAGF,YAAnB;AACAL,aAAS,CAACQ,WAAV,CAAsBD,UAAtB,EAAkC,cAAlC;AAEA,UAAMD,WAAN,EAAmBC,UAAU,CAACE,UAA9B,EAA0C,IAAIZ,4BAAJ,EAA1C;AAEA,SAAKa,iCAAL,GAAyC,KAAzC;AACA,SAAKC,cAAL,GAAsBJ,UAAU,CAACE,UAAX,CAAsBG,KAAtB,EAAtB;;AAEA,QAAI,KAAKH,UAAL,CAAgBI,WAAhB,CAA4BZ,UAAU,CAACa,wCAAvC,EAAiFC,SAAjF,MAAgGA,SAApG,EAA+G;AAC3Gf,eAAS,CAACgB,uBAAV,CACI,KAAKP,UAAL,CAAgBI,WAAhB,CAA4BZ,UAAU,CAACa,wCAAvC,CADJ,EAEIb,UAAU,CAACA,UAAU,CAACa,wCAAZ,CAFd;AAGH;;AAEDd,aAAS,CAACgB,uBAAV,CACI,KAAKP,UAAL,CAAgBI,WAAhB,CAA4BZ,UAAU,CAACgB,8CAAvC,CADJ,EAEIhB,UAAU,CAACA,UAAU,CAACgB,8CAAZ,CAFd;AAIAjB,aAAS,CAACgB,uBAAV,CAAkC,KAAKP,UAAL,CAAgBI,WAAhB,CAC9BZ,UAAU,CAACiB,oCADmB,CAAlC,EAEIjB,UAAU,CAACA,UAAU,CAACiB,oCAAZ,CAFd;AAIH;AAkCD;;;;;;;;;AAOoC,MAAzBC,yBAAyB;AAChCnB,aAAS,CAACoB,eAAV,CAA0B,KAAKV,iCAA/B;AAEA,WAAO,KAAKD,UAAL,CAAgBI,WAAhB,CAA4BZ,UAAU,CAACiB,oCAAvC,CAAP;AACH;AAED;;;;;;;;;;AAQ0B,MAAfG,eAAe;AACtBrB,aAAS,CAACoB,eAAV,CAA0B,KAAKV,iCAA/B;AAEA,WAAO,KAAKD,UAAL,CAAgBI,WAAhB,CAA4BZ,UAAU,CAACgB,8CAAvC,EAAuFK,KAAvF,CAA6F,GAA7F,CAAP;AACH;AAED;;;;;;;;;AAOoB,MAATC,SAAS;AAChBvB,aAAS,CAACoB,eAAV,CAA0B,KAAKV,iCAA/B;AAEA,WAAO,KAAKD,UAAL,CAAgBI,WAAhB,CAA4BZ,UAAU,CAACa,wCAAvC,EAAiFC,SAAjF,CAAP;AACH;AAED;;;;;;;;;AAO6B,MAAlBS,kBAAkB;AACzB,WAAO,KAAKf,UAAL,CAAgBI,WAAhB,CAA4BZ,UAAU,CAACwB,gCAAvC,CAAP;AACH;AAED;;;;;;;;;AAO6B,MAAlBD,kBAAkB,CAACE,KAAD,EAAc;AACvC,SAAKjB,UAAL,CAAgBkB,WAAhB,CAA4B1B,UAAU,CAACwB,gCAAvC,EAAyEC,KAAzE;AACH;AAED;;;;;;;;;AAOqB,MAAVjB,UAAU;AACjB,WAAO,KAAKE,cAAZ;AACH;AAED;;;;;;;;;;;;;;AAYOiB,oBAAkB,CAACC,EAAD,EAAiDC,GAAjD,EAA0E;AAC/F9B,aAAS,CAACoB,eAAV,CAA0B,KAAKV,iCAA/B;AACAX,6BAAyB,CAAC,KAAKgC,sBAAL,CAA4BpC,eAAe,CAACqC,YAA5C,CAAD,EAA4DH,EAA5D,EAAgEC,GAAhE,CAAzB;AACH;AAED;;;;;;;;;;;AASOG,iCAA+B,CAACJ,EAAD,EAAkBC,GAAlB,EAA2C;AAC7E/B,6BAAyB,CAAC,KAAKmC,mCAAL,CAAyCvC,eAAe,CAACqC,YAAzD,CAAD,EAAyEH,EAAzE,EAA6EC,GAA7E,CAAzB;AACH;AAED;;;;;;;;;;AAQOK,gCAA8B,CAACN,EAAD,EAAkBC,GAAlB,EAA2C;AAC5E/B,6BAAyB,CAAC,KAAKqC,kCAAL,EAAD,EAA4CP,EAA5C,EAAgDC,GAAhD,CAAzB;AACH;AAED;;;;;;;;AAMOO,OAAK,CAACR,EAAD,EAAkBS,OAAlB,EAAmD;AAC3DtC,aAAS,CAACoB,eAAV,CAA0B,KAAKV,iCAA/B;AACAX,6BAAyB,CAAC,KAAKwC,OAAL,CAAa,IAAb,CAAD,EAAqBV,EAArB,EAAyBS,OAAzB,CAAzB;AACH;AAED;;;;;;;AAMA;;;AACOE,cAAY,IAAY;AAE/B;;;;;;;AAMA;;;AACaC,iBAAe;yDAAqB;AAAA;;AAEjCF,SAAO,CAACG,SAAD,EAAmB;;;;;;;;AACtC,UAAI,KAAKhC,iCAAT,EAA4C;AACxC;AACH;;AAED,WAAKA,iCAAL,GAAyC,IAAzC;;AAEA,UAAIgC,SAAJ,EAAe;AACX,cAAM,KAAKC,kBAAL,EAAN;AACA,cAAMC,OAAML,OAAN,CAAaM,IAAb,CAAa,IAAb,EAAcH,SAAd,CAAN;AACH;AACJ;AAAA;;AAESI,wBAAsB,CAACzC,YAAD,EAAkC;AAC9D,WAAO,IAAIT,gBAAJ,CAAqBS,YAArB,EAAmC,KAAKI,UAAxC,CAAP;AACH;;AAESsC,yBAAuB,CAC7BC,cAD6B,EAE7BC,iBAF6B,EAG7B3C,WAH6B,EAI7B4C,gBAJ6B,EAIK;AAElC,UAAM3C,UAAU,GAAoBD,WAApC;AAEA,WAAO,IAAIR,4BAAJ,CAAiCkD,cAAjC,EAAiDC,iBAAjD,EAAoE1C,UAApE,EAAgF2C,gBAAhF,EAAkG,IAAlG,CAAP;AACH;;AA5OgD","names":["RecognitionMode","RecognizerConfig","TranslationConnectionFactory","TranslationServiceRecognizer","marshalPromiseToCallbacks","Contracts","PropertyId","Recognizer","TranslationRecognizer","constructor","speechConfig","audioConfig","configImpl","throwIfNull","properties","privDisposedTranslationRecognizer","privProperties","clone","getProperty","SpeechServiceConnection_TranslationVoice","undefined","throwIfNullOrWhitespace","SpeechServiceConnection_TranslationToLanguages","SpeechServiceConnection_RecoLanguage","speechRecognitionLanguage","throwIfDisposed","targetLanguages","split","voiceName","authorizationToken","SpeechServiceAuthorization_Token","value","setProperty","recognizeOnceAsync","cb","err","recognizeOnceAsyncImpl","Conversation","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","close","errorCb","dispose","onConnection","onDisconnection","disposing","implRecognizerStop","_super","call","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/src/sdk/TranslationRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n        this.privProperties = configImpl.properties.clone();\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition,\r\n     *       use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public onConnection(): void { }\r\n\r\n    /**\r\n     * handles disconnection events for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onDisconnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public async onDisconnection(): Promise<void> { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}