{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.connectSuggestedActions = void 0;\n\nvar _botframeworkWebchatApi = require(\"botframework-webchat-api\");\n\nvar _reactFilm = _interopRequireWildcard(require(\"react-film\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _connectToWebChat = _interopRequireDefault(require(\"../connectToWebChat\"));\n\nvar _ScreenReaderText = _interopRequireDefault(require(\"../ScreenReaderText\"));\n\nvar _SuggestedAction = _interopRequireDefault(require(\"./SuggestedAction\"));\n\nvar _useLocalizeAccessKey = _interopRequireDefault(require(\"../hooks/internal/useLocalizeAccessKey\"));\n\nvar _useNonce3 = _interopRequireDefault(require(\"../hooks/internal/useNonce\"));\n\nvar _useStyleSet7 = _interopRequireDefault(require(\"../hooks/useStyleSet\"));\n\nvar _useStyleToEmotionObject = _interopRequireDefault(require(\"../hooks/internal/useStyleToEmotionObject\"));\n\nvar _useSuggestedActionsAccessKey = _interopRequireDefault(require(\"../hooks/internal/useSuggestedActionsAccessKey\"));\n\nvar _useUniqueId = _interopRequireDefault(require(\"../hooks/internal/useUniqueId\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar useDirection = _botframeworkWebchatApi.hooks.useDirection,\n    useLocalizer = _botframeworkWebchatApi.hooks.useLocalizer,\n    useStyleOptions = _botframeworkWebchatApi.hooks.useStyleOptions;\nvar ROOT_STYLE = {\n  '&.webchat__suggested-actions': {\n    '&.webchat__suggested-actions--flow-layout .webchat__suggested-actions__flow-box': {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    '&.webchat__suggested-actions--stack-layout .webchat__suggested-actions__stack': {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }\n};\n\nfunction suggestedActionText(_ref) {\n  var displayText = _ref.displayText,\n      title = _ref.title,\n      type = _ref.type,\n      value = _ref.value;\n\n  if (type === 'messageBack') {\n    return title || displayText;\n  } else if (title) {\n    return title;\n  } else if (typeof value === 'string') {\n    return value;\n  }\n\n  return JSON.stringify(value);\n}\n\nvar connectSuggestedActions = function connectSuggestedActions() {\n  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {\n    selectors[_key] = arguments[_key];\n  }\n\n  return _connectToWebChat.default.apply(void 0, [function (_ref2) {\n    var language = _ref2.language,\n        suggestedActions = _ref2.suggestedActions;\n    return {\n      language: language,\n      suggestedActions: suggestedActions\n    };\n  }].concat(selectors));\n};\n\nexports.connectSuggestedActions = connectSuggestedActions;\n\nvar SuggestedActionCarouselContainer = function SuggestedActionCarouselContainer(_ref3) {\n  var children = _ref3.children,\n      className = _ref3.className,\n      screenReaderText = _ref3.screenReaderText;\n\n  var _useStyleOptions = useStyleOptions(),\n      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),\n      _useStyleOptions2$ = _useStyleOptions2[0],\n      suggestedActionsCarouselFlipperBoxWidth = _useStyleOptions2$.suggestedActionsCarouselFlipperBoxWidth,\n      suggestedActionsCarouselFlipperCursor = _useStyleOptions2$.suggestedActionsCarouselFlipperCursor,\n      suggestedActionsCarouselFlipperSize = _useStyleOptions2$.suggestedActionsCarouselFlipperSize;\n\n  var _useStyleSet = (0, _useStyleSet7.default)(),\n      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),\n      suggestedActionsStyleSet = _useStyleSet2[0].suggestedActions;\n\n  var _useDirection = useDirection(),\n      _useDirection2 = _slicedToArray(_useDirection, 1),\n      direction = _useDirection2[0];\n\n  var _useNonce = (0, _useNonce3.default)(),\n      _useNonce2 = _slicedToArray(_useNonce, 1),\n      nonce = _useNonce2[0];\n\n  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  var filmStyleSet = (0, _react.useMemo)(function () {\n    return (0, _reactFilm.createBasicStyleSet)({\n      autoHide: false,\n      cursor: suggestedActionsCarouselFlipperCursor,\n      flipperBoxWidth: suggestedActionsCarouselFlipperBoxWidth,\n      flipperSize: suggestedActionsCarouselFlipperSize\n    });\n  }, [suggestedActionsCarouselFlipperBoxWidth, suggestedActionsCarouselFlipperCursor, suggestedActionsCarouselFlipperSize]);\n  return (\n    /*#__PURE__*/\n    // TODO: The content of suggested actions should be the labelled by the activity.\n    //       That means, when the user focus into the suggested actions, it should read similar to \"Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button.\"\n    _react.default.createElement(\"div\", {\n      \"aria-labelledby\": ariaLabelId,\n      \"aria-live\": \"polite\",\n      className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--carousel-layout', {\n        'webchat__suggested-actions--rtl': direction === 'rtl'\n      }, rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),\n      role: \"status\"\n    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n      id: ariaLabelId,\n      text: screenReaderText\n    }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(_reactFilm.default, {\n      autoCenter: false,\n      className: \"webchat__suggested-actions__carousel\",\n      dir: direction,\n      flipperBlurFocusOnClick: true,\n      nonce: nonce,\n      showDots: false,\n      showScrollBar: false,\n      styleSet: filmStyleSet\n    }, children))\n  );\n};\n\nSuggestedActionCarouselContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\nSuggestedActionCarouselContainer.propTypes = {\n  children: _propTypes.default.any,\n  className: _propTypes.default.string,\n  screenReaderText: _propTypes.default.string.isRequired\n};\n\nvar SuggestedActionFlowContainer = function SuggestedActionFlowContainer(_ref4) {\n  var children = _ref4.children,\n      className = _ref4.className,\n      screenReaderText = _ref4.screenReaderText;\n\n  var _useStyleSet3 = (0, _useStyleSet7.default)(),\n      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),\n      suggestedActionsStyleSet = _useStyleSet4[0].suggestedActions;\n\n  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-labelledby\": ariaLabelId,\n    \"aria-live\": \"polite\",\n    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--flow-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),\n    role: \"status\"\n  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n    id: ariaLabelId,\n    text: screenReaderText\n  }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"webchat__suggested-actions__flow-box\"\n  }, _react.default.Children.map(children, function (child) {\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      className: \"webchat__suggested-actions__flow-item-box\"\n    }, child);\n  })));\n};\n\nSuggestedActionFlowContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\nSuggestedActionFlowContainer.propTypes = {\n  children: _propTypes.default.any,\n  className: _propTypes.default.string,\n  screenReaderText: _propTypes.default.string.isRequired\n};\n\nvar SuggestedActionStackedContainer = function SuggestedActionStackedContainer(_ref5) {\n  var children = _ref5.children,\n      className = _ref5.className,\n      screenReaderText = _ref5.screenReaderText;\n\n  var _useStyleSet5 = (0, _useStyleSet7.default)(),\n      _useStyleSet6 = _slicedToArray(_useStyleSet5, 1),\n      suggestedActionsStyleSet = _useStyleSet6[0].suggestedActions;\n\n  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');\n  var rootClassName = (0, _useStyleToEmotionObject.default)()(ROOT_STYLE) + '';\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    \"aria-labelledby\": ariaLabelId,\n    \"aria-live\": \"polite\",\n    className: (0, _classnames.default)('webchat__suggested-actions', 'webchat__suggested-actions--stacked-layout', rootClassName, suggestedActionsStyleSet + '', (className || '') + ''),\n    role: \"status\"\n  }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {\n    id: ariaLabelId,\n    text: screenReaderText\n  }), !!children && !!_react.default.Children.count(children) && /*#__PURE__*/_react.default.createElement(\"div\", {\n    className: \"webchat__suggested-actions__stack\"\n  }, children));\n};\n\nSuggestedActionStackedContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\nSuggestedActionStackedContainer.propTypes = {\n  children: _propTypes.default.any,\n  className: _propTypes.default.string,\n  screenReaderText: _propTypes.default.string.isRequired\n};\n\nvar SuggestedActions = function SuggestedActions(_ref6) {\n  var className = _ref6.className,\n      _ref6$suggestedAction = _ref6.suggestedActions,\n      suggestedActions = _ref6$suggestedAction === void 0 ? [] : _ref6$suggestedAction;\n\n  var _useStyleOptions3 = useStyleOptions(),\n      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),\n      _useStyleOptions4$ = _useStyleOptions4[0],\n      suggestedActionLayout = _useStyleOptions4$.suggestedActionLayout,\n      suggestedActionsStackedLayoutButtonTextWrap = _useStyleOptions4$.suggestedActionsStackedLayoutButtonTextWrap;\n\n  var _useSuggestedActionsA = (0, _useSuggestedActionsAccessKey.default)(),\n      _useSuggestedActionsA2 = _slicedToArray(_useSuggestedActionsA, 1),\n      accessKey = _useSuggestedActionsA2[0];\n\n  var hideEmptyRef = (0, _react.useRef)(true);\n  var localize = useLocalizer();\n  var localizeAccessKey = (0, _useLocalizeAccessKey.default)();\n  var screenReaderText = localize('SUGGESTED_ACTIONS_ALT', suggestedActions.length ? accessKey ? localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT_AND_ACCESS_KEY', localizeAccessKey(accessKey)) : localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT') : localize('SUGGESTED_ACTIONS_ALT_NO_CONTENT'));\n  var children = suggestedActions.map(function (cardAction, index) {\n    var _ref7 = cardAction,\n        displayText = _ref7.displayText,\n        image = _ref7.image,\n        imageAltText = _ref7.imageAltText,\n        text = _ref7.text,\n        title = _ref7.title,\n        type = _ref7.type,\n        value = _ref7.value;\n    return /*#__PURE__*/_react.default.createElement(\"div\", {\n      className: \"webchat__suggested-actions__item-box\",\n      key: index\n    }, /*#__PURE__*/_react.default.createElement(_SuggestedAction.default, {\n      buttonText: suggestedActionText({\n        displayText: displayText,\n        title: title,\n        type: type,\n        value: value\n      }),\n      className: \"webchat__suggested-actions__button\",\n      displayText: displayText,\n      image: image,\n      imageAlt: imageAltText,\n      text: text,\n      textClassName: suggestedActionLayout === 'stacked' && suggestedActionsStackedLayoutButtonTextWrap ? 'webchat__suggested-actions__button-text-stacked-text-wrap' : 'webchat__suggested-actions__button-text',\n      type: type,\n      value: value\n    }));\n  }); // (Related to #4021)\n  //\n  // To improve accessibility UX, if there are no suggested actions, and this container was never shown.\n  // Then, avoid rendering the alt-text \"Suggested Actions Container: Is empty\".\n  //\n  // This is to reduce the narration of \"Is empty\".\n  //\n  // After any suggested actions were shown during the lifetime of this container, then we will\n  // continue to start showing \"Suggested Actions Container: Is empty\" when the container is empty.\n\n  if (!children.length && hideEmptyRef.current) {\n    return null;\n  } // Otherwise, if we have rendered once, we will continue to render \"Is empty\".\n\n\n  hideEmptyRef.current = false;\n\n  if (suggestedActionLayout === 'flow') {\n    return /*#__PURE__*/_react.default.createElement(SuggestedActionFlowContainer, {\n      className: className,\n      screenReaderText: screenReaderText\n    }, children);\n  } else if (suggestedActionLayout === 'stacked') {\n    return /*#__PURE__*/_react.default.createElement(SuggestedActionStackedContainer, {\n      className: className,\n      screenReaderText: screenReaderText\n    }, children);\n  }\n\n  return /*#__PURE__*/_react.default.createElement(SuggestedActionCarouselContainer, {\n    className: className,\n    screenReaderText: screenReaderText\n  }, children);\n};\n\nSuggestedActions.defaultProps = {\n  className: ''\n};\nSuggestedActions.propTypes = {\n  className: _propTypes.default.string,\n  // TypeScript class is not mappable to PropTypes.func\n  // @ts-ignore\n  suggestedActions: _propTypes.default.arrayOf(_propTypes.default.shape({\n    displayText: _propTypes.default.string,\n    image: _propTypes.default.string,\n    imageAltText: _propTypes.default.string,\n    text: _propTypes.default.string,\n    title: _propTypes.default.string,\n    type: _propTypes.default.string.isRequired,\n    value: _propTypes.default.any\n  })).isRequired\n};\n\nvar _default = connectSuggestedActions()(SuggestedActions);\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["useDirection","hooks","useLocalizer","useStyleOptions","ROOT_STYLE","display","flexWrap","flexDirection","suggestedActionText","displayText","title","type","value","JSON","stringify","connectSuggestedActions","selectors","arguments","connectToWebChat","language","suggestedActions","SuggestedActionCarouselContainer","children","className","screenReaderText","suggestedActionsCarouselFlipperBoxWidth","suggestedActionsCarouselFlipperCursor","suggestedActionsCarouselFlipperSize","suggestedActionsStyleSet","direction","nonce","ariaLabelId","rootClassName","filmStyleSet","autoHide","cursor","flipperBoxWidth","flipperSize","_react","role","_ScreenReaderText","id","text","React","Children","count","_reactFilm","autoCenter","dir","flipperBlurFocusOnClick","showDots","showScrollBar","styleSet","defaultProps","undefined","propTypes","PropTypes","any","string","isRequired","SuggestedActionFlowContainer","map","child","SuggestedActionStackedContainer","SuggestedActions","suggestedActionLayout","suggestedActionsStackedLayoutButtonTextWrap","accessKey","hideEmptyRef","localize","localizeAccessKey","length","cardAction","index","image","imageAltText","key","_SuggestedAction","buttonText","imageAlt","textClassName","current","arrayOf","shape"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-component/lib/src/SendBox/SuggestedActions.tsx"],"sourcesContent":["/* eslint react/no-array-index-key: \"off\" */\n\nimport { DirectLineCardAction } from 'botframework-webchat-core';\nimport { hooks } from 'botframework-webchat-api';\nimport BasicFilm, { createBasicStyleSet as createBasicStyleSetForReactFilm } from 'react-film';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { FC, useMemo, useRef } from 'react';\n\nimport connectToWebChat from '../connectToWebChat';\nimport ScreenReaderText from '../ScreenReaderText';\nimport SuggestedAction from './SuggestedAction';\nimport useLocalizeAccessKey from '../hooks/internal/useLocalizeAccessKey';\nimport useNonce from '../hooks/internal/useNonce';\nimport useStyleSet from '../hooks/useStyleSet';\nimport useStyleToEmotionObject from '../hooks/internal/useStyleToEmotionObject';\nimport useSuggestedActionsAccessKey from '../hooks/internal/useSuggestedActionsAccessKey';\nimport useUniqueId from '../hooks/internal/useUniqueId';\n\nconst { useDirection, useLocalizer, useStyleOptions } = hooks;\n\nconst ROOT_STYLE = {\n  '&.webchat__suggested-actions': {\n    '&.webchat__suggested-actions--flow-layout .webchat__suggested-actions__flow-box': {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n\n    '&.webchat__suggested-actions--stack-layout .webchat__suggested-actions__stack': {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }\n};\n\nfunction suggestedActionText({ displayText, title, type, value }) {\n  if (type === 'messageBack') {\n    return title || displayText;\n  } else if (title) {\n    return title;\n  } else if (typeof value === 'string') {\n    return value;\n  }\n\n  return JSON.stringify(value);\n}\n\nconst connectSuggestedActions = (...selectors) =>\n  connectToWebChat(\n    ({ language, suggestedActions }) => ({\n      language,\n      suggestedActions\n    }),\n    ...selectors\n  );\n\nconst SuggestedActionCarouselContainer = ({ children, className, screenReaderText }) => {\n  const [\n    {\n      suggestedActionsCarouselFlipperBoxWidth,\n      suggestedActionsCarouselFlipperCursor,\n      suggestedActionsCarouselFlipperSize\n    }\n  ] = useStyleOptions();\n  const [{ suggestedActions: suggestedActionsStyleSet }] = useStyleSet();\n  const [direction] = useDirection();\n  const [nonce] = useNonce();\n  const ariaLabelId = useUniqueId('webchat__suggested-actions');\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  const filmStyleSet = useMemo(\n    () =>\n      createBasicStyleSetForReactFilm({\n        autoHide: false,\n        cursor: suggestedActionsCarouselFlipperCursor,\n        flipperBoxWidth: suggestedActionsCarouselFlipperBoxWidth,\n        flipperSize: suggestedActionsCarouselFlipperSize\n      }),\n    [\n      suggestedActionsCarouselFlipperBoxWidth,\n      suggestedActionsCarouselFlipperCursor,\n      suggestedActionsCarouselFlipperSize\n    ]\n  );\n\n  return (\n    // TODO: The content of suggested actions should be the labelled by the activity.\n    //       That means, when the user focus into the suggested actions, it should read similar to \"Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button.\"\n    <div\n      aria-labelledby={ariaLabelId}\n      aria-live=\"polite\"\n      className={classNames(\n        'webchat__suggested-actions',\n        'webchat__suggested-actions--carousel-layout',\n        { 'webchat__suggested-actions--rtl': direction === 'rtl' },\n        rootClassName,\n        suggestedActionsStyleSet + '',\n        (className || '') + ''\n      )}\n      role=\"status\"\n    >\n      <ScreenReaderText id={ariaLabelId} text={screenReaderText} />\n      {!!children && !!React.Children.count(children) && (\n        <BasicFilm\n          autoCenter={false}\n          className=\"webchat__suggested-actions__carousel\"\n          dir={direction}\n          flipperBlurFocusOnClick={true}\n          nonce={nonce}\n          showDots={false}\n          showScrollBar={false}\n          styleSet={filmStyleSet}\n        >\n          {children}\n        </BasicFilm>\n      )}\n    </div>\n  );\n};\n\nSuggestedActionCarouselContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\n\nSuggestedActionCarouselContainer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  screenReaderText: PropTypes.string.isRequired\n};\n\nconst SuggestedActionFlowContainer = ({ children, className, screenReaderText }) => {\n  const [{ suggestedActions: suggestedActionsStyleSet }] = useStyleSet();\n  const ariaLabelId = useUniqueId('webchat__suggested-actions');\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  return (\n    <div\n      aria-labelledby={ariaLabelId}\n      aria-live=\"polite\"\n      className={classNames(\n        'webchat__suggested-actions',\n        'webchat__suggested-actions--flow-layout',\n        rootClassName,\n        suggestedActionsStyleSet + '',\n        (className || '') + ''\n      )}\n      role=\"status\"\n    >\n      <ScreenReaderText id={ariaLabelId} text={screenReaderText} />\n      {!!children && !!React.Children.count(children) && (\n        <div className=\"webchat__suggested-actions__flow-box\">\n          {React.Children.map(children, child => (\n            <div className=\"webchat__suggested-actions__flow-item-box\">{child}</div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nSuggestedActionFlowContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\n\nSuggestedActionFlowContainer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  screenReaderText: PropTypes.string.isRequired\n};\n\nconst SuggestedActionStackedContainer = ({ children, className, screenReaderText }) => {\n  const [{ suggestedActions: suggestedActionsStyleSet }] = useStyleSet();\n  const ariaLabelId = useUniqueId('webchat__suggested-actions');\n  const rootClassName = useStyleToEmotionObject()(ROOT_STYLE) + '';\n\n  return (\n    <div\n      aria-labelledby={ariaLabelId}\n      aria-live=\"polite\"\n      className={classNames(\n        'webchat__suggested-actions',\n        'webchat__suggested-actions--stacked-layout',\n        rootClassName,\n        suggestedActionsStyleSet + '',\n        (className || '') + ''\n      )}\n      role=\"status\"\n    >\n      <ScreenReaderText id={ariaLabelId} text={screenReaderText} />\n      {!!children && !!React.Children.count(children) && (\n        <div className=\"webchat__suggested-actions__stack\">{children}</div>\n      )}\n    </div>\n  );\n};\n\nSuggestedActionStackedContainer.defaultProps = {\n  children: undefined,\n  className: undefined\n};\n\nSuggestedActionStackedContainer.propTypes = {\n  children: PropTypes.any,\n  className: PropTypes.string,\n  screenReaderText: PropTypes.string.isRequired\n};\n\ntype SuggestedActionsProps = {\n  className?: string;\n  suggestedActions?: DirectLineCardAction[];\n};\n\nconst SuggestedActions: FC<SuggestedActionsProps> = ({ className, suggestedActions = [] }) => {\n  const [{ suggestedActionLayout, suggestedActionsStackedLayoutButtonTextWrap }] = useStyleOptions();\n  const [accessKey] = useSuggestedActionsAccessKey();\n  const hideEmptyRef = useRef(true);\n  const localize = useLocalizer();\n  const localizeAccessKey = useLocalizeAccessKey();\n\n  const screenReaderText = localize(\n    'SUGGESTED_ACTIONS_ALT',\n    suggestedActions.length\n      ? accessKey\n        ? localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT_AND_ACCESS_KEY', localizeAccessKey(accessKey))\n        : localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT')\n      : localize('SUGGESTED_ACTIONS_ALT_NO_CONTENT')\n  );\n\n  const children = suggestedActions.map((cardAction, index) => {\n    const { displayText, image, imageAltText, text, title, type, value } = cardAction as {\n      displayText?: string;\n      image?: string;\n      imageAltText?: string;\n      text?: string;\n      title?: string;\n      type:\n        | 'call'\n        | 'downloadFile'\n        | 'imBack'\n        | 'messageBack'\n        | 'openUrl'\n        | 'playAudio'\n        | 'playVideo'\n        | 'postBack'\n        | 'showImage'\n        | 'signin';\n      value?: { [key: string]: any } | string;\n    };\n\n    return (\n      <div className=\"webchat__suggested-actions__item-box\" key={index}>\n        <SuggestedAction\n          buttonText={suggestedActionText({ displayText, title, type, value })}\n          className=\"webchat__suggested-actions__button\"\n          displayText={displayText}\n          image={image}\n          imageAlt={imageAltText}\n          text={text}\n          textClassName={\n            suggestedActionLayout === 'stacked' && suggestedActionsStackedLayoutButtonTextWrap\n              ? 'webchat__suggested-actions__button-text-stacked-text-wrap'\n              : 'webchat__suggested-actions__button-text'\n          }\n          type={type}\n          value={value}\n        />\n      </div>\n    );\n  });\n\n  // (Related to #4021)\n  //\n  // To improve accessibility UX, if there are no suggested actions, and this container was never shown.\n  // Then, avoid rendering the alt-text \"Suggested Actions Container: Is empty\".\n  //\n  // This is to reduce the narration of \"Is empty\".\n  //\n  // After any suggested actions were shown during the lifetime of this container, then we will\n  // continue to start showing \"Suggested Actions Container: Is empty\" when the container is empty.\n  if (!children.length && hideEmptyRef.current) {\n    return null;\n  }\n\n  // Otherwise, if we have rendered once, we will continue to render \"Is empty\".\n  hideEmptyRef.current = false;\n\n  if (suggestedActionLayout === 'flow') {\n    return (\n      <SuggestedActionFlowContainer className={className} screenReaderText={screenReaderText}>\n        {children}\n      </SuggestedActionFlowContainer>\n    );\n  } else if (suggestedActionLayout === 'stacked') {\n    return (\n      <SuggestedActionStackedContainer className={className} screenReaderText={screenReaderText}>\n        {children}\n      </SuggestedActionStackedContainer>\n    );\n  }\n\n  return (\n    <SuggestedActionCarouselContainer className={className} screenReaderText={screenReaderText}>\n      {children}\n    </SuggestedActionCarouselContainer>\n  );\n};\n\nSuggestedActions.defaultProps = {\n  className: ''\n};\n\nSuggestedActions.propTypes = {\n  className: PropTypes.string,\n\n  // TypeScript class is not mappable to PropTypes.func\n  // @ts-ignore\n  suggestedActions: PropTypes.arrayOf(\n    PropTypes.shape({\n      displayText: PropTypes.string,\n      image: PropTypes.string,\n      imageAltText: PropTypes.string,\n      text: PropTypes.string,\n      title: PropTypes.string,\n      type: PropTypes.string.isRequired,\n      value: PropTypes.any\n    })\n  ).isRequired\n};\n\nexport default connectSuggestedActions()(SuggestedActions);\n\nexport { connectSuggestedActions };\n"]},"metadata":{},"sourceType":"script"}