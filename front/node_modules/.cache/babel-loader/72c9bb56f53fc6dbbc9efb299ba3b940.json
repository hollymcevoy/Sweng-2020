{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime2 = require(\"@babel/runtime/regenerator\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = sendTypingIndicatorOnSetSendBoxSaga;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _setSendBox = require(\"../actions/setSendBox\");\n\nvar _setSendTypingIndicator = require(\"../actions/setSendTypingIndicator\");\n\nvar _postActivity = require(\"../actions/postActivity\");\n\nvar _emitTypingIndicator = _interopRequireDefault(require(\"../actions/emitTypingIndicator\"));\n\nvar _sendTypingIndicator = _interopRequireDefault(require(\"../selectors/sendTypingIndicator\"));\n\nvar _sleep = _interopRequireDefault(require(\"../utils/sleep\"));\n\nvar _whileConnected = _interopRequireDefault(require(\"./effects/whileConnected\"));\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime2.mark(sendTypingIndicatorOnSetSendBox),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime2.mark(sendTypingIndicatorOnSetSendBoxSaga);\n\nvar SEND_INTERVAL = 3000;\n\nfunction takeSendTypingIndicator(value) {\n  return (0, _effects.take)(function (_ref) {\n    var payload = _ref.payload,\n        type = _ref.type;\n    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value;\n  });\n}\n\nfunction sendTypingIndicatorOnSetSendBox() {\n  var sendTypingIndicator, _loop;\n\n  return _regenerator[\"default\"].wrap(function sendTypingIndicatorOnSetSendBox$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.select)(_sendTypingIndicator[\"default\"]);\n\n        case 2:\n          sendTypingIndicator = _context3.sent;\n\n          if (sendTypingIndicator) {\n            _context3.next = 6;\n            break;\n          }\n\n          _context3.next = 6;\n          return takeSendTypingIndicator(true);\n\n        case 6:\n          _loop = /*#__PURE__*/_regenerator[\"default\"].mark(function _loop() {\n            var lastSend, task;\n            return _regenerator[\"default\"].wrap(function _loop$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    lastSend = -Infinity;\n                    _context2.next = 3;\n                    return (0, _effects.takeLatest)(function (_ref2) {\n                      var payload = _ref2.payload,\n                          type = _ref2.type;\n                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.\n                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).\n                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.\n                      // This code is to cancel the typing indicator at t = 3000.\n                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';\n                    }, /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref3) {\n                      var payload, type, interval;\n                      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              payload = _ref3.payload, type = _ref3.type;\n\n                              if (!(type === _setSendBox.SET_SEND_BOX)) {\n                                _context.next = 11;\n                                break;\n                              }\n\n                              interval = SEND_INTERVAL - Date.now() + lastSend;\n\n                              if (!(interval > 0)) {\n                                _context.next = 6;\n                                break;\n                              }\n\n                              _context.next = 6;\n                              return (0, _effects.call)(_sleep[\"default\"], interval);\n\n                            case 6:\n                              _context.next = 8;\n                              return (0, _effects.put)((0, _emitTypingIndicator[\"default\"])());\n\n                            case 8:\n                              lastSend = Date.now();\n                              _context.next = 12;\n                              break;\n\n                            case 11:\n                              if (payload.activity.type === 'message') {\n                                lastSend = -Infinity;\n                              }\n\n                            case 12:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                  case 3:\n                    task = _context2.sent;\n                    _context2.next = 6;\n                    return takeSendTypingIndicator(false);\n\n                  case 6:\n                    _context2.next = 8;\n                    return (0, _effects.cancel)(task);\n\n                  case 8:\n                    _context2.next = 10;\n                    return takeSendTypingIndicator(true);\n\n                  case 10:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _loop);\n          });\n\n        case 7:\n          return _context3.delegateYield(_loop(), \"t0\", 8);\n\n        case 8:\n          _context3.next = 7;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendTypingIndicatorOnSetSendBoxSaga() {\n  return _regenerator[\"default\"].wrap(function sendTypingIndicatorOnSetSendBoxSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return (0, _whileConnected[\"default\"])(sendTypingIndicatorOnSetSendBox);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAGA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;qDAQUA;sDAwCeC;;AA9CzB,IAAMC,aAAa,GAAG,IAAtB;;AAEA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AACtC,SAAO,mBAAK;AAAA,QAAGC,OAAH,QAAGA,OAAH;AAAA,QAAYC,IAAZ,QAAYA,IAAZ;AAAA,WAAuBA,IAAI,KAAKC,iDAATD,IAAsC,CAACD,OAAO,CAACG,mBAAT,KAAiC,CAACJ,KAA/F;AAAL,IAAP;AACD;;AAED,SAAUJ,+BAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAAS;AAC8B,iBAAM,qBAAOC,+BAAP,CAAN;;AAD9B;AACQF,6BADR,iBACQA;;AADR,cAGOA,mBAHP;AAAAC;AAAA;AAAA;;AAAAA;AAII,iBAAMN,uBAAuB,CAAC,IAAD,CAA7B;;AAJJ;AAAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAQQC,4BARR,GAQmB,CAACC,QAAZD;AARRE;AASiB,2BAAM,yBACjB;AAAA,0BAAGT,OAAH,SAAGA,OAAH;AAAA,0BAAYC,IAAZ,SAAYA,IAAZ;AAAA,6BACGA,IAAI,KAAKS,wBAATT,IAAyBD,OAAO,CAACW,IAAjCV,IACD;AACA;AACA;AACA;AACCA,0BAAI,KAAKW,2BAATX,IAA0BD,OAAO,CAACa,QAARb,CAAiBC,IAAjBD,KAA0B,QANvD;AADiB,iEAQjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAaA,qCAAb,SAAaA,SAASC,IAAtB,SAAsBA,IAATD;;AAAb,oCACMC,IAAI,KAAKS,wBADf;AAAAI;AAAA;AAAA;;AAEUC,sCAFV,GAEqBlB,aAAa,GAAGmB,IAAI,CAACC,GAALD,EAAhBnB,GAA6BU,QAAxCQ;;AAFV,oCAIQA,QAAQ,GAAG,CAJnB;AAAAD;AAAA;AAAA;;AAAAA;AAKM,qCAAM,mBAAKI,iBAAL,EAAYH,QAAZ,CAAN;;AALN;AAAAD;AAQI,qCAAM,kBAAI,sCAAJ,CAAN;;AARJ;AAUIP,sCAAQ,GAAGS,IAAI,CAACC,GAALD,EAAXT;AAVJO;AAAA;;AAAA;AAWS,kCAAId,OAAO,CAACa,QAARb,CAAiBC,IAAjBD,KAA0B,SAA9B,EAAyC;AAC9CO,wCAAQ,GAAG,CAACC,QAAZD;AACD;;AAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AARiB,uBAAN;;AATjB;AASUY,wBATV,iBASUA;AATVV;AAkCI,2BAAMX,uBAAuB,CAAC,KAAD,CAA7B;;AAlCJ;AAAAW;AAmCI,2BAAM,qBAAOU,IAAP,CAAN;;AAnCJ;AAAAV;AAoCI,2BAAMX,uBAAuB,CAAC,IAAD,CAA7B;;AApCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAAM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwCe,SAAUR,mCAAV;AAAA;AAAA;AAAA;AAAA;AAAAwB;AACb,iBAAM,gCAAezB,+BAAf,CAAN;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["sendTypingIndicatorOnSetSendBox","sendTypingIndicatorOnSetSendBoxSaga","SEND_INTERVAL","takeSendTypingIndicator","value","payload","type","SET_SEND_TYPING_INDICATOR","sendTypingIndicator","_context3","sendTypingIndicatorSelector","_loop","lastSend","Infinity","_context2","SET_SEND_BOX","text","POST_ACTIVITY","activity","_context","interval","Date","now","sleep","task","_context4"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/botframework-webchat-core/lib/src/sagas/sendTypingIndicatorOnSetSendBoxSaga.js"],"sourcesContent":["// We will revisit this logic in #2157 and should remove the following eslint ignore\n/* eslint require-atomic-updates: \"off\" */\n\nimport { call, cancel, put, select, take, takeLatest } from 'redux-saga/effects';\n\nimport { SET_SEND_BOX } from '../actions/setSendBox';\nimport { SET_SEND_TYPING_INDICATOR } from '../actions/setSendTypingIndicator';\nimport { POST_ACTIVITY } from '../actions/postActivity';\nimport emitTypingIndicator from '../actions/emitTypingIndicator';\nimport sendTypingIndicatorSelector from '../selectors/sendTypingIndicator';\nimport sleep from '../utils/sleep';\nimport whileConnected from './effects/whileConnected';\n\nconst SEND_INTERVAL = 3000;\n\nfunction takeSendTypingIndicator(value) {\n  return take(({ payload, type }) => type === SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value);\n}\n\nfunction* sendTypingIndicatorOnSetSendBox() {\n  const sendTypingIndicator = yield select(sendTypingIndicatorSelector);\n\n  if (!sendTypingIndicator) {\n    yield takeSendTypingIndicator(true);\n  }\n\n  for (;;) {\n    let lastSend = -Infinity;\n    const task = yield takeLatest(\n      ({ payload, type }) =>\n        (type === SET_SEND_BOX && payload.text) ||\n        // Stop sending pending typing indicator if the user has posted anything.\n        // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).\n        // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.\n        // This code is to cancel the typing indicator at t = 3000.\n        (type === POST_ACTIVITY && payload.activity.type !== 'typing'),\n      function* ({ payload, type }) {\n        if (type === SET_SEND_BOX) {\n          const interval = SEND_INTERVAL - Date.now() + lastSend;\n\n          if (interval > 0) {\n            yield call(sleep, interval);\n          }\n\n          yield put(emitTypingIndicator());\n\n          lastSend = Date.now();\n        } else if (payload.activity.type === 'message') {\n          lastSend = -Infinity;\n        }\n      }\n    );\n\n    yield takeSendTypingIndicator(false);\n    yield cancel(task);\n    yield takeSendTypingIndicator(true);\n  }\n}\n\nexport default function* sendTypingIndicatorOnSetSendBoxSaga() {\n  yield whileConnected(sendTypingIndicatorOnSetSendBox);\n}\n"]},"metadata":{},"sourceType":"script"}