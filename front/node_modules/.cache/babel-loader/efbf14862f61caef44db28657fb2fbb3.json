{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationRequestSession = void 0;\n\nvar Exports_1 = require(\"../../common/Exports\");\n/**\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\n * TODO: define what telemetry is required.\n */\n\n\nvar ConversationRequestSession =\n/** @class */\nfunction () {\n  function ConversationRequestSession(sessionId) {\n    var _this = this;\n\n    this.privIsDisposed = false;\n    this.privDetachables = new Array();\n\n    this.onPreConnectionStart = function (authFetchEventId, connectionId) {\n      _this.privSessionId = connectionId;\n    };\n\n    this.onAuthCompleted = function (isError, error) {\n      if (isError) {\n        _this.onComplete();\n      }\n    };\n\n    this.onConnectionEstablishCompleted = function (statusCode, reason) {\n      if (statusCode === 200) {\n        return;\n      } else if (statusCode === 403) {\n        _this.onComplete();\n      }\n    };\n\n    this.onServiceTurnEndResponse = function (continuousRecognition) {\n      if (!continuousRecognition) {\n        _this.onComplete();\n      } else {\n        _this.privRequestId = Exports_1.createNoDashGuid();\n      }\n    };\n\n    this.onComplete = function () {//\n    };\n\n    this.privSessionId = sessionId;\n    this.privRequestId = Exports_1.createNoDashGuid();\n    this.privRequestCompletionDeferral = new Exports_1.Deferred();\n  }\n\n  Object.defineProperty(ConversationRequestSession.prototype, \"sessionId\", {\n    get: function () {\n      return this.privSessionId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationRequestSession.prototype, \"requestId\", {\n    get: function () {\n      return this.privRequestId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConversationRequestSession.prototype, \"completionPromise\", {\n    get: function () {\n      return this.privRequestCompletionDeferral.promise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ConversationRequestSession.prototype.dispose = function (error) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _i, _a, detachable;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!this.privIsDisposed) return [3\n            /*break*/\n            , 4]; // we should have completed by now. If we did not its an unknown error.\n\n            this.privIsDisposed = true;\n            _i = 0, _a = this.privDetachables;\n            _b.label = 1;\n\n          case 1:\n            if (!(_i < _a.length)) return [3\n            /*break*/\n            , 4];\n            detachable = _a[_i];\n            return [4\n            /*yield*/\n            , detachable.detach()];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return ConversationRequestSession;\n}();\n\nexports.ConversationRequestSession = ConversationRequestSession;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AAMA;;;;;;AAIA;AAAA;AAAA;AAOI,sCAAYA,SAAZ,EAA6B;AAA7B;;AANQ,0BAA0B,KAA1B;AACA,2BAAiC,IAAIC,KAAJ,EAAjC;;AAuBD,gCAAuB,UAACC,gBAAD,EAA2BC,YAA3B,EAA+C;AACzEC,WAAI,CAACC,aAAL,GAAqBF,YAArB;AACH,KAFM;;AAIA,2BAAkB,UAACG,OAAD,EAAmBC,KAAnB,EAAiC;AACtD,UAAID,OAAJ,EAAa;AACTF,aAAI,CAACI,UAAL;AACH;AACJ,KAJM;;AAMA,0CAAiC,UAACC,UAAD,EAAqBC,MAArB,EAAoC;AACxE,UAAID,UAAU,KAAK,GAAnB,EAAwB;AACpB;AACH,OAFD,MAEO,IAAIA,UAAU,KAAK,GAAnB,EAAwB;AAC3BL,aAAI,CAACI,UAAL;AACH;AACJ,KANM;;AAQA,oCAA2B,UAACG,qBAAD,EAA+B;AAC7D,UAAI,CAACA,qBAAL,EAA4B;AACxBP,aAAI,CAACI,UAAL;AACH,OAFD,MAEO;AACHJ,aAAI,CAACQ,aAAL,GAAqBC,4BAArB;AACH;AACJ,KANM;;AAkBC,sBAAa,aACjB;AACH,KAFO;;AArDJ,SAAKR,aAAL,GAAqBL,SAArB;AACA,SAAKY,aAAL,GAAqBC,4BAArB;AACA,SAAKC,6BAAL,GAAqC,IAAID,kBAAJ,EAArC;AACH;;AAEDE,wBAAWC,oCAAX,EAAW,WAAX,EAAoB;SAApB;AACI,aAAO,KAAKX,aAAZ;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAIAU,wBAAWC,oCAAX,EAAW,WAAX,EAAoB;SAApB;AACI,aAAO,KAAKJ,aAAZ;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAIAG,wBAAWC,oCAAX,EAAW,mBAAX,EAA4B;SAA5B;AACI,aAAO,KAAKF,6BAAL,CAAmCG,OAA1C;AACH,KAF2B;qBAAA;;AAAA,GAA5B;;AA8BaD,iDAAb,UAAqBT,KAArB,EAAmC;;;;;;;iBAC3B,CAAC,KAAKW,gBAAN;AAAA;AAAA,kBACA;;AACA,iBAAKA,cAAL,GAAsB,IAAtB;oBACyBC,UAAKC;;;;kBAALC,iBAAoB;AAAA;AAAA;AAAlCC,sBAAU,SAAV;AACP;AAAA;AAAA,cAAMA,UAAU,CAACC,MAAX,EAAN;;;AAAAC;;;;;AADqBH;;;;;;;;;;;;AAIhC,GARY;;AAcjB;AAjEA;;AAAaI","names":["sessionId","Array","authFetchEventId","connectionId","_this","privSessionId","isError","error","onComplete","statusCode","reason","continuousRecognition","privRequestId","Exports_1","privRequestCompletionDeferral","Object","ConversationRequestSession","promise","privIsDisposed","_a","privDetachables","_i","detachable","detach","_b","exports"],"sources":["/Users/dylanmurray/Sweng-2022/front/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse = (continuousRecognition: boolean): void => {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(error?: string): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete = (): void => {\r\n        //\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"script"}